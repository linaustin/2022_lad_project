
uart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ec8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009050  08009050  00019050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800906c  0800906c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800906c  0800906c  0001906c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009074  08009074  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009074  08009074  00019074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009078  08009078  00019078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800907c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000864  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008f4  200008f4  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a047  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ce9  00000000  00000000  0003a107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  0003ddf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001268  00000000  00000000  0003f1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a1b  00000000  00000000  00040420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ac55  00000000  00000000  00064e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdd5c  00000000  00000000  0007fa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014d7ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054e4  00000000  00000000  0014d83c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009038 	.word	0x08009038

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009038 	.word	0x08009038

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fcdf 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f833 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f959 	bl	8000790 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004de:	f000 f899 	bl	8000614 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e2:	f000 f8c5 	bl	8000670 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e6:	f000 f8f3 	bl	80006d0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004ea:	f008 f95d 	bl	80087a8 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f925 	bl	800073c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  for(int i = 0; i < 10; i++){
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	e00c      	b.n	8000512 <main+0x46>
	  rx_Data[i] = 0;
 80004f8:	4a0e      	ldr	r2, [pc, #56]	; (8000534 <main+0x68>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4413      	add	r3, r2
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
	  tx_Data[i] = 0;
 8000502:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <main+0x6c>)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4413      	add	r3, r2
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 10; i++){
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	3301      	adds	r3, #1
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2b09      	cmp	r3, #9
 8000516:	ddef      	ble.n	80004f8 <main+0x2c>
  }

  tx_Data[0] = 255;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <main+0x6c>)
 800051a:	22ff      	movs	r2, #255	; 0xff
 800051c:	701a      	strb	r2, [r3, #0]
  tx_Data[9] = 254;
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <main+0x6c>)
 8000520:	22fe      	movs	r2, #254	; 0xfe
 8000522:	725a      	strb	r2, [r3, #9]

  HAL_UART_Receive_IT(&huart2, rx_Data, 10);
 8000524:	220a      	movs	r2, #10
 8000526:	4903      	ldr	r1, [pc, #12]	; (8000534 <main+0x68>)
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <main+0x70>)
 800052a:	f004 f9d1 	bl	80048d0 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800052e:	f008 f961 	bl	80087f4 <MX_USB_HOST_Process>
 8000532:	e7fc      	b.n	800052e <main+0x62>
 8000534:	200001f0 	.word	0x200001f0
 8000538:	200001e4 	.word	0x200001e4
 800053c:	200001a0 	.word	0x200001a0

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f008 fc6c 	bl	8008e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b28      	ldr	r3, [pc, #160]	; (800060c <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a27      	ldr	r2, [pc, #156]	; (800060c <SystemClock_Config+0xcc>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b25      	ldr	r3, [pc, #148]	; (800060c <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b22      	ldr	r3, [pc, #136]	; (8000610 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a21      	ldr	r2, [pc, #132]	; (8000610 <SystemClock_Config+0xd0>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b0:	2308      	movs	r3, #8
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005be:	2307      	movs	r3, #7
 80005c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fa42 	bl	8003a50 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005d2:	f000 fa21 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2105      	movs	r1, #5
 80005f4:	4618      	mov	r0, r3
 80005f6:	f003 fca3 	bl	8003f40 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000600:	f000 fa0a 	bl	8000a18 <Error_Handler>
  }
}
 8000604:	bf00      	nop
 8000606:	3750      	adds	r7, #80	; 0x50
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_I2C1_Init+0x50>)
 800061a:	4a13      	ldr	r2, [pc, #76]	; (8000668 <MX_I2C1_Init+0x54>)
 800061c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_I2C1_Init+0x50>)
 8000620:	4a12      	ldr	r2, [pc, #72]	; (800066c <MX_I2C1_Init+0x58>)
 8000622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_I2C1_Init+0x50>)
 8000632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000636:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <MX_I2C1_Init+0x50>)
 8000652:	f002 fc19 	bl	8002e88 <HAL_I2C_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800065c:	f000 f9dc 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200000ac 	.word	0x200000ac
 8000668:	40005400 	.word	0x40005400
 800066c:	000186a0 	.word	0x000186a0

08000670 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <MX_I2S3_Init+0x54>)
 8000676:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <MX_I2S3_Init+0x58>)
 8000678:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_I2S3_Init+0x54>)
 800067c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000680:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_I2S3_Init+0x54>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_I2S3_Init+0x54>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <MX_I2S3_Init+0x54>)
 8000690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000694:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_I2S3_Init+0x54>)
 8000698:	4a0c      	ldr	r2, [pc, #48]	; (80006cc <MX_I2S3_Init+0x5c>)
 800069a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_I2S3_Init+0x54>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_I2S3_Init+0x54>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_I2S3_Init+0x54>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_I2S3_Init+0x54>)
 80006b0:	f002 fd2e 	bl	8003110 <HAL_I2S_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006ba:	f000 f9ad 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000100 	.word	0x20000100
 80006c8:	40003c00 	.word	0x40003c00
 80006cc:	00017700 	.word	0x00017700

080006d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_SPI1_Init+0x64>)
 80006d6:	4a18      	ldr	r2, [pc, #96]	; (8000738 <MX_SPI1_Init+0x68>)
 80006d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_SPI1_Init+0x64>)
 80006dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_SPI1_Init+0x64>)
 80006fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000700:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_SPI1_Init+0x64>)
 800071c:	220a      	movs	r2, #10
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_SPI1_Init+0x64>)
 8000722:	f003 ff6d 	bl	8004600 <HAL_SPI_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800072c:	f000 f974 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000148 	.word	0x20000148
 8000738:	40013000 	.word	0x40013000

0800073c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_USART2_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000748:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800074c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000774:	f003 ffcd 	bl	8004712 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f94b 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200001a0 	.word	0x200001a0
 800078c:	40004400 	.word	0x40004400

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	; 0x30
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	4b72      	ldr	r3, [pc, #456]	; (8000974 <MX_GPIO_Init+0x1e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a71      	ldr	r2, [pc, #452]	; (8000974 <MX_GPIO_Init+0x1e4>)
 80007b0:	f043 0310 	orr.w	r3, r3, #16
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b6f      	ldr	r3, [pc, #444]	; (8000974 <MX_GPIO_Init+0x1e4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0310 	and.w	r3, r3, #16
 80007be:	61bb      	str	r3, [r7, #24]
 80007c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	4b6b      	ldr	r3, [pc, #428]	; (8000974 <MX_GPIO_Init+0x1e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a6a      	ldr	r2, [pc, #424]	; (8000974 <MX_GPIO_Init+0x1e4>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b68      	ldr	r3, [pc, #416]	; (8000974 <MX_GPIO_Init+0x1e4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b64      	ldr	r3, [pc, #400]	; (8000974 <MX_GPIO_Init+0x1e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a63      	ldr	r2, [pc, #396]	; (8000974 <MX_GPIO_Init+0x1e4>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b61      	ldr	r3, [pc, #388]	; (8000974 <MX_GPIO_Init+0x1e4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b5d      	ldr	r3, [pc, #372]	; (8000974 <MX_GPIO_Init+0x1e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a5c      	ldr	r2, [pc, #368]	; (8000974 <MX_GPIO_Init+0x1e4>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b5a      	ldr	r3, [pc, #360]	; (8000974 <MX_GPIO_Init+0x1e4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b56      	ldr	r3, [pc, #344]	; (8000974 <MX_GPIO_Init+0x1e4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a55      	ldr	r2, [pc, #340]	; (8000974 <MX_GPIO_Init+0x1e4>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b53      	ldr	r3, [pc, #332]	; (8000974 <MX_GPIO_Init+0x1e4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b4f      	ldr	r3, [pc, #316]	; (8000974 <MX_GPIO_Init+0x1e4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a4e      	ldr	r2, [pc, #312]	; (8000974 <MX_GPIO_Init+0x1e4>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b4c      	ldr	r3, [pc, #304]	; (8000974 <MX_GPIO_Init+0x1e4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2108      	movs	r1, #8
 8000852:	4849      	ldr	r0, [pc, #292]	; (8000978 <MX_GPIO_Init+0x1e8>)
 8000854:	f000 fef4 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2101      	movs	r1, #1
 800085c:	4847      	ldr	r0, [pc, #284]	; (800097c <MX_GPIO_Init+0x1ec>)
 800085e:	f000 feef 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000862:	2200      	movs	r2, #0
 8000864:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000868:	4845      	ldr	r0, [pc, #276]	; (8000980 <MX_GPIO_Init+0x1f0>)
 800086a:	f000 fee9 	bl	8001640 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800086e:	2308      	movs	r3, #8
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	483c      	ldr	r0, [pc, #240]	; (8000978 <MX_GPIO_Init+0x1e8>)
 8000886:	f000 fd3f 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800088a:	2301      	movs	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4836      	ldr	r0, [pc, #216]	; (800097c <MX_GPIO_Init+0x1ec>)
 80008a2:	f000 fd31 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008a6:	2308      	movs	r3, #8
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b6:	2305      	movs	r3, #5
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	482e      	ldr	r0, [pc, #184]	; (800097c <MX_GPIO_Init+0x1ec>)
 80008c2:	f000 fd21 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ca:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	482a      	ldr	r0, [pc, #168]	; (8000984 <MX_GPIO_Init+0x1f4>)
 80008dc:	f000 fd14 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008e0:	2304      	movs	r3, #4
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4825      	ldr	r0, [pc, #148]	; (8000988 <MX_GPIO_Init+0x1f8>)
 80008f4:	f000 fd08 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090a:	2305      	movs	r3, #5
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	481c      	ldr	r0, [pc, #112]	; (8000988 <MX_GPIO_Init+0x1f8>)
 8000916:	f000 fcf7 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800091a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800091e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4813      	ldr	r0, [pc, #76]	; (8000980 <MX_GPIO_Init+0x1f0>)
 8000934:	f000 fce8 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000938:	2320      	movs	r3, #32
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	480d      	ldr	r0, [pc, #52]	; (8000980 <MX_GPIO_Init+0x1f0>)
 800094c:	f000 fcdc 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000950:	2302      	movs	r3, #2
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000954:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_GPIO_Init+0x1e8>)
 8000966:	f000 fccf 	bl	8001308 <HAL_GPIO_Init>

}
 800096a:	bf00      	nop
 800096c:	3730      	adds	r7, #48	; 0x30
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40021000 	.word	0x40021000
 800097c:	40020800 	.word	0x40020800
 8000980:	40020c00 	.word	0x40020c00
 8000984:	40020000 	.word	0x40020000
 8000988:	40020400 	.word	0x40020400

0800098c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a1b      	ldr	r2, [pc, #108]	; (8000a08 <HAL_UART_RxCpltCallback+0x7c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d130      	bne.n	8000a00 <HAL_UART_RxCpltCallback+0x74>

		tx_Data[1] = 1;
 800099e:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <HAL_UART_RxCpltCallback+0x80>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	705a      	strb	r2, [r3, #1]
		tx_Data[2] = 30;
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <HAL_UART_RxCpltCallback+0x80>)
 80009a6:	221e      	movs	r2, #30
 80009a8:	709a      	strb	r2, [r3, #2]

		HAL_UART_Transmit(&huart2, tx_Data, 10, 0xffff);
 80009aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009ae:	220a      	movs	r2, #10
 80009b0:	4916      	ldr	r1, [pc, #88]	; (8000a0c <HAL_UART_RxCpltCallback+0x80>)
 80009b2:	4817      	ldr	r0, [pc, #92]	; (8000a10 <HAL_UART_RxCpltCallback+0x84>)
 80009b4:	f003 fefa 	bl	80047ac <HAL_UART_Transmit>

		tx_Data[1] = 10;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_UART_RxCpltCallback+0x80>)
 80009ba:	220a      	movs	r2, #10
 80009bc:	705a      	strb	r2, [r3, #1]
		tx_Data[2] = 0;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <HAL_UART_RxCpltCallback+0x80>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	709a      	strb	r2, [r3, #2]
		tx_Data[3] = 10;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_UART_RxCpltCallback+0x80>)
 80009c6:	220a      	movs	r2, #10
 80009c8:	70da      	strb	r2, [r3, #3]

		HAL_UART_Transmit(&huart2, tx_Data, 10, 0xffff);
 80009ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009ce:	220a      	movs	r2, #10
 80009d0:	490e      	ldr	r1, [pc, #56]	; (8000a0c <HAL_UART_RxCpltCallback+0x80>)
 80009d2:	480f      	ldr	r0, [pc, #60]	; (8000a10 <HAL_UART_RxCpltCallback+0x84>)
 80009d4:	f003 feea 	bl	80047ac <HAL_UART_Transmit>

		for(int i = 0; i < 10; i++){
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	e007      	b.n	80009ee <HAL_UART_RxCpltCallback+0x62>
			rx_Data[i] = 0;
 80009de:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <HAL_UART_RxCpltCallback+0x88>)
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	4413      	add	r3, r2
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 10; i++){
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	3301      	adds	r3, #1
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2b09      	cmp	r3, #9
 80009f2:	ddf4      	ble.n	80009de <HAL_UART_RxCpltCallback+0x52>
		}

		HAL_UART_Receive_IT(&huart2, rx_Data, 10);
 80009f4:	220a      	movs	r2, #10
 80009f6:	4907      	ldr	r1, [pc, #28]	; (8000a14 <HAL_UART_RxCpltCallback+0x88>)
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <HAL_UART_RxCpltCallback+0x84>)
 80009fa:	f003 ff69 	bl	80048d0 <HAL_UART_Receive_IT>
	}


	return;
 80009fe:	bf00      	nop
 8000a00:	bf00      	nop
}
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40004400 	.word	0x40004400
 8000a0c:	200001e4 	.word	0x200001e4
 8000a10:	200001a0 	.word	0x200001a0
 8000a14:	200001f0 	.word	0x200001f0

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a62:	2007      	movs	r0, #7
 8000a64:	f000 fb7c 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40023800 	.word	0x40023800

08000a74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a19      	ldr	r2, [pc, #100]	; (8000af8 <HAL_I2C_MspInit+0x84>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d12c      	bne.n	8000af0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <HAL_I2C_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a17      	ldr	r2, [pc, #92]	; (8000afc <HAL_I2C_MspInit+0x88>)
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <HAL_I2C_MspInit+0x88>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ab2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab8:	2312      	movs	r3, #18
 8000aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	480c      	ldr	r0, [pc, #48]	; (8000b00 <HAL_I2C_MspInit+0x8c>)
 8000ad0:	f000 fc1a 	bl	8001308 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_I2C_MspInit+0x88>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <HAL_I2C_MspInit+0x88>)
 8000ade:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_I2C_MspInit+0x88>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	; 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40005400 	.word	0x40005400
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020400 	.word	0x40020400

08000b04 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a31      	ldr	r2, [pc, #196]	; (8000bf4 <HAL_I2S_MspInit+0xf0>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d15a      	bne.n	8000bea <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b34:	2301      	movs	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b38:	23c0      	movs	r3, #192	; 0xc0
 8000b3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4618      	mov	r0, r3
 8000b46:	f003 fc1b 	bl	8004380 <HAL_RCCEx_PeriphCLKConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b50:	f7ff ff62 	bl	8000a18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <HAL_I2S_MspInit+0xf4>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a26      	ldr	r2, [pc, #152]	; (8000bf8 <HAL_I2S_MspInit+0xf4>)
 8000b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
 8000b64:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <HAL_I2S_MspInit+0xf4>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <HAL_I2S_MspInit+0xf4>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	4a1f      	ldr	r2, [pc, #124]	; (8000bf8 <HAL_I2S_MspInit+0xf4>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <HAL_I2S_MspInit+0xf4>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <HAL_I2S_MspInit+0xf4>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	4a18      	ldr	r2, [pc, #96]	; (8000bf8 <HAL_I2S_MspInit+0xf4>)
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <HAL_I2S_MspInit+0xf4>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ba8:	2310      	movs	r3, #16
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bb8:	2306      	movs	r3, #6
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480e      	ldr	r0, [pc, #56]	; (8000bfc <HAL_I2S_MspInit+0xf8>)
 8000bc4:	f000 fba0 	bl	8001308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bc8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bda:	2306      	movs	r3, #6
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	4619      	mov	r1, r3
 8000be4:	4806      	ldr	r0, [pc, #24]	; (8000c00 <HAL_I2S_MspInit+0xfc>)
 8000be6:	f000 fb8f 	bl	8001308 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bea:	bf00      	nop
 8000bec:	3738      	adds	r7, #56	; 0x38
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40003c00 	.word	0x40003c00
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	40020800 	.word	0x40020800

08000c04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <HAL_SPI_MspInit+0x84>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d12b      	bne.n	8000c7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_SPI_MspInit+0x88>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <HAL_SPI_MspInit+0x88>)
 8000c30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_SPI_MspInit+0x88>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_SPI_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a10      	ldr	r2, [pc, #64]	; (8000c8c <HAL_SPI_MspInit+0x88>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_SPI_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c5e:	23e0      	movs	r3, #224	; 0xe0
 8000c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c6e:	2305      	movs	r3, #5
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <HAL_SPI_MspInit+0x8c>)
 8000c7a:	f000 fb45 	bl	8001308 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c7e:	bf00      	nop
 8000c80:	3728      	adds	r7, #40	; 0x28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40013000 	.word	0x40013000
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000

08000c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a1d      	ldr	r2, [pc, #116]	; (8000d28 <HAL_UART_MspInit+0x94>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d133      	bne.n	8000d1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <HAL_UART_MspInit+0x98>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <HAL_UART_MspInit+0x98>)
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <HAL_UART_MspInit+0x98>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_UART_MspInit+0x98>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a14      	ldr	r2, [pc, #80]	; (8000d2c <HAL_UART_MspInit+0x98>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_UART_MspInit+0x98>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cee:	230c      	movs	r3, #12
 8000cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cfe:	2307      	movs	r3, #7
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	4809      	ldr	r0, [pc, #36]	; (8000d30 <HAL_UART_MspInit+0x9c>)
 8000d0a:	f000 fafd 	bl	8001308 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	2026      	movs	r0, #38	; 0x26
 8000d14:	f000 fa2f 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d18:	2026      	movs	r0, #38	; 0x26
 8000d1a:	f000 fa48 	bl	80011ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40004400 	.word	0x40004400
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <MemManage_Handler+0x4>

08000d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d80:	f000 f8da 	bl	8000f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <USART2_IRQHandler+0x10>)
 8000d8e:	f003 fdcf 	bl	8004930 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200001a0 	.word	0x200001a0

08000d9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <OTG_FS_IRQHandler+0x10>)
 8000da2:	f000 fed1 	bl	8001b48 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200005e0 	.word	0x200005e0

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f007 ffea 	bl	8008db8 <__errno>
 8000de4:	4603      	mov	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20020000 	.word	0x20020000
 8000e10:	00000400 	.word	0x00000400
 8000e14:	200001fc 	.word	0x200001fc
 8000e18:	200008f8 	.word	0x200008f8

08000e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e44:	480d      	ldr	r0, [pc, #52]	; (8000e7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e46:	490e      	ldr	r1, [pc, #56]	; (8000e80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e48:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e5c:	4c0b      	ldr	r4, [pc, #44]	; (8000e8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e6a:	f7ff ffd7 	bl	8000e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f007 ffa9 	bl	8008dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e72:	f7ff fb2b 	bl	80004cc <main>
  bx  lr    
 8000e76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e84:	0800907c 	.word	0x0800907c
  ldr r2, =_sbss
 8000e88:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e8c:	200008f4 	.word	0x200008f4

08000e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <HAL_Init+0x40>)
 8000e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_Init+0x40>)
 8000eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_Init+0x40>)
 8000eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 f94f 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f000 f808 	bl	8000ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec8:	f7ff fdac 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023c00 	.word	0x40023c00

08000ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_InitTick+0x54>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x58>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f967 	bl	80011ca <HAL_SYSTICK_Config>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00e      	b.n	8000f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	d80a      	bhi.n	8000f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f14:	f000 f92f 	bl	8001176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f18:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <HAL_InitTick+0x5c>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e000      	b.n	8000f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000004 	.word	0x20000004

08000f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x20>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x24>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <HAL_IncTick+0x24>)
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000200 	.word	0x20000200

08000f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <HAL_GetTick+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000200 	.word	0x20000200

08000f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff ffee 	bl	8000f60 <HAL_GetTick>
 8000f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f90:	d005      	beq.n	8000f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_Delay+0x44>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f9e:	bf00      	nop
 8000fa0:	f7ff ffde 	bl	8000f60 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d8f7      	bhi.n	8000fa0 <HAL_Delay+0x28>
  {
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4907      	ldr	r1, [pc, #28]	; (800105c <__NVIC_EnableIRQ+0x38>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	; (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	; 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800112c:	d301      	bcc.n	8001132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112e:	2301      	movs	r3, #1
 8001130:	e00f      	b.n	8001152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <SysTick_Config+0x40>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113a:	210f      	movs	r1, #15
 800113c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001140:	f7ff ff8e 	bl	8001060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <SysTick_Config+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <SysTick_Config+0x40>)
 800114c:	2207      	movs	r2, #7
 800114e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	e000e010 	.word	0xe000e010

08001160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff29 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001188:	f7ff ff3e 	bl	8001008 <__NVIC_GetPriorityGrouping>
 800118c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ff8e 	bl	80010b4 <NVIC_EncodePriority>
 8001198:	4602      	mov	r2, r0
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff5d 	bl	8001060 <__NVIC_SetPriority>
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff31 	bl	8001024 <__NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffa2 	bl	800111c <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b084      	sub	sp, #16
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011f0:	f7ff feb6 	bl	8000f60 <HAL_GetTick>
 80011f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d008      	beq.n	8001214 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e052      	b.n	80012ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0216 	bic.w	r2, r2, #22
 8001222:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	695a      	ldr	r2, [r3, #20]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001232:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	2b00      	cmp	r3, #0
 800123a:	d103      	bne.n	8001244 <HAL_DMA_Abort+0x62>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001240:	2b00      	cmp	r3, #0
 8001242:	d007      	beq.n	8001254 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0208 	bic.w	r2, r2, #8
 8001252:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0201 	bic.w	r2, r2, #1
 8001262:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001264:	e013      	b.n	800128e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001266:	f7ff fe7b 	bl	8000f60 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b05      	cmp	r3, #5
 8001272:	d90c      	bls.n	800128e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2220      	movs	r2, #32
 8001278:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2203      	movs	r2, #3
 800127e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e015      	b.n	80012ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1e4      	bne.n	8001266 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a0:	223f      	movs	r2, #63	; 0x3f
 80012a2:	409a      	lsls	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d004      	beq.n	80012e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2280      	movs	r2, #128	; 0x80
 80012da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e00c      	b.n	80012fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2205      	movs	r2, #5
 80012e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0201 	bic.w	r2, r2, #1
 80012f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
 8001322:	e16b      	b.n	80015fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001324:	2201      	movs	r2, #1
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	429a      	cmp	r2, r3
 800133e:	f040 815a 	bne.w	80015f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	2b01      	cmp	r3, #1
 800134c:	d005      	beq.n	800135a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001356:	2b02      	cmp	r3, #2
 8001358:	d130      	bne.n	80013bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	2203      	movs	r2, #3
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001390:	2201      	movs	r2, #1
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	f003 0201 	and.w	r2, r3, #1
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d017      	beq.n	80013f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d123      	bne.n	800144c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	08da      	lsrs	r2, r3, #3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3208      	adds	r2, #8
 800140c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	220f      	movs	r2, #15
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	691a      	ldr	r2, [r3, #16]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	08da      	lsrs	r2, r3, #3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3208      	adds	r2, #8
 8001446:	69b9      	ldr	r1, [r7, #24]
 8001448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0203 	and.w	r2, r3, #3
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80b4 	beq.w	80015f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b60      	ldr	r3, [pc, #384]	; (8001614 <HAL_GPIO_Init+0x30c>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	4a5f      	ldr	r2, [pc, #380]	; (8001614 <HAL_GPIO_Init+0x30c>)
 8001498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149c:	6453      	str	r3, [r2, #68]	; 0x44
 800149e:	4b5d      	ldr	r3, [pc, #372]	; (8001614 <HAL_GPIO_Init+0x30c>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014aa:	4a5b      	ldr	r2, [pc, #364]	; (8001618 <HAL_GPIO_Init+0x310>)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	3302      	adds	r3, #2
 80014b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	220f      	movs	r2, #15
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a52      	ldr	r2, [pc, #328]	; (800161c <HAL_GPIO_Init+0x314>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d02b      	beq.n	800152e <HAL_GPIO_Init+0x226>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a51      	ldr	r2, [pc, #324]	; (8001620 <HAL_GPIO_Init+0x318>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d025      	beq.n	800152a <HAL_GPIO_Init+0x222>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a50      	ldr	r2, [pc, #320]	; (8001624 <HAL_GPIO_Init+0x31c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d01f      	beq.n	8001526 <HAL_GPIO_Init+0x21e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4f      	ldr	r2, [pc, #316]	; (8001628 <HAL_GPIO_Init+0x320>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d019      	beq.n	8001522 <HAL_GPIO_Init+0x21a>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4e      	ldr	r2, [pc, #312]	; (800162c <HAL_GPIO_Init+0x324>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d013      	beq.n	800151e <HAL_GPIO_Init+0x216>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a4d      	ldr	r2, [pc, #308]	; (8001630 <HAL_GPIO_Init+0x328>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00d      	beq.n	800151a <HAL_GPIO_Init+0x212>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4c      	ldr	r2, [pc, #304]	; (8001634 <HAL_GPIO_Init+0x32c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d007      	beq.n	8001516 <HAL_GPIO_Init+0x20e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a4b      	ldr	r2, [pc, #300]	; (8001638 <HAL_GPIO_Init+0x330>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_GPIO_Init+0x20a>
 800150e:	2307      	movs	r3, #7
 8001510:	e00e      	b.n	8001530 <HAL_GPIO_Init+0x228>
 8001512:	2308      	movs	r3, #8
 8001514:	e00c      	b.n	8001530 <HAL_GPIO_Init+0x228>
 8001516:	2306      	movs	r3, #6
 8001518:	e00a      	b.n	8001530 <HAL_GPIO_Init+0x228>
 800151a:	2305      	movs	r3, #5
 800151c:	e008      	b.n	8001530 <HAL_GPIO_Init+0x228>
 800151e:	2304      	movs	r3, #4
 8001520:	e006      	b.n	8001530 <HAL_GPIO_Init+0x228>
 8001522:	2303      	movs	r3, #3
 8001524:	e004      	b.n	8001530 <HAL_GPIO_Init+0x228>
 8001526:	2302      	movs	r3, #2
 8001528:	e002      	b.n	8001530 <HAL_GPIO_Init+0x228>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <HAL_GPIO_Init+0x228>
 800152e:	2300      	movs	r3, #0
 8001530:	69fa      	ldr	r2, [r7, #28]
 8001532:	f002 0203 	and.w	r2, r2, #3
 8001536:	0092      	lsls	r2, r2, #2
 8001538:	4093      	lsls	r3, r2
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001540:	4935      	ldr	r1, [pc, #212]	; (8001618 <HAL_GPIO_Init+0x310>)
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800154e:	4b3b      	ldr	r3, [pc, #236]	; (800163c <HAL_GPIO_Init+0x334>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001572:	4a32      	ldr	r2, [pc, #200]	; (800163c <HAL_GPIO_Init+0x334>)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001578:	4b30      	ldr	r3, [pc, #192]	; (800163c <HAL_GPIO_Init+0x334>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800159c:	4a27      	ldr	r2, [pc, #156]	; (800163c <HAL_GPIO_Init+0x334>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015a2:	4b26      	ldr	r3, [pc, #152]	; (800163c <HAL_GPIO_Init+0x334>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015c6:	4a1d      	ldr	r2, [pc, #116]	; (800163c <HAL_GPIO_Init+0x334>)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_GPIO_Init+0x334>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015f0:	4a12      	ldr	r2, [pc, #72]	; (800163c <HAL_GPIO_Init+0x334>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3301      	adds	r3, #1
 80015fa:	61fb      	str	r3, [r7, #28]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	2b0f      	cmp	r3, #15
 8001600:	f67f ae90 	bls.w	8001324 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800
 8001618:	40013800 	.word	0x40013800
 800161c:	40020000 	.word	0x40020000
 8001620:	40020400 	.word	0x40020400
 8001624:	40020800 	.word	0x40020800
 8001628:	40020c00 	.word	0x40020c00
 800162c:	40021000 	.word	0x40021000
 8001630:	40021400 	.word	0x40021400
 8001634:	40021800 	.word	0x40021800
 8001638:	40021c00 	.word	0x40021c00
 800163c:	40013c00 	.word	0x40013c00

08001640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]
 800164c:	4613      	mov	r3, r2
 800164e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001650:	787b      	ldrb	r3, [r7, #1]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001656:	887a      	ldrh	r2, [r7, #2]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800165c:	e003      	b.n	8001666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800165e:	887b      	ldrh	r3, [r7, #2]
 8001660:	041a      	lsls	r2, r3, #16
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	619a      	str	r2, [r3, #24]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001672:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001674:	b08f      	sub	sp, #60	; 0x3c
 8001676:	af0a      	add	r7, sp, #40	; 0x28
 8001678:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e054      	b.n	800172e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d106      	bne.n	80016a4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f007 f8e0 	bl	8008864 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2203      	movs	r2, #3
 80016a8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f004 f90e 	bl	80058e4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	687e      	ldr	r6, [r7, #4]
 80016d0:	466d      	mov	r5, sp
 80016d2:	f106 0410 	add.w	r4, r6, #16
 80016d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80016e6:	1d33      	adds	r3, r6, #4
 80016e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ea:	6838      	ldr	r0, [r7, #0]
 80016ec:	f004 f888 	bl	8005800 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2101      	movs	r1, #1
 80016f6:	4618      	mov	r0, r3
 80016f8:	f004 f905 	bl	8005906 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	687e      	ldr	r6, [r7, #4]
 8001704:	466d      	mov	r5, sp
 8001706:	f106 0410 	add.w	r4, r6, #16
 800170a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800170c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800170e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001712:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001716:	e885 0003 	stmia.w	r5, {r0, r1}
 800171a:	1d33      	adds	r3, r6, #4
 800171c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800171e:	6838      	ldr	r0, [r7, #0]
 8001720:	f004 fa8e 	bl	8005c40 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001736 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001736:	b590      	push	{r4, r7, lr}
 8001738:	b089      	sub	sp, #36	; 0x24
 800173a:	af04      	add	r7, sp, #16
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	4608      	mov	r0, r1
 8001740:	4611      	mov	r1, r2
 8001742:	461a      	mov	r2, r3
 8001744:	4603      	mov	r3, r0
 8001746:	70fb      	strb	r3, [r7, #3]
 8001748:	460b      	mov	r3, r1
 800174a:	70bb      	strb	r3, [r7, #2]
 800174c:	4613      	mov	r3, r2
 800174e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001756:	2b01      	cmp	r3, #1
 8001758:	d101      	bne.n	800175e <HAL_HCD_HC_Init+0x28>
 800175a:	2302      	movs	r3, #2
 800175c:	e076      	b.n	800184c <HAL_HCD_HC_Init+0x116>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	212c      	movs	r1, #44	; 0x2c
 800176c:	fb01 f303 	mul.w	r3, r1, r3
 8001770:	4413      	add	r3, r2
 8001772:	333d      	adds	r3, #61	; 0x3d
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	212c      	movs	r1, #44	; 0x2c
 800177e:	fb01 f303 	mul.w	r3, r1, r3
 8001782:	4413      	add	r3, r2
 8001784:	3338      	adds	r3, #56	; 0x38
 8001786:	787a      	ldrb	r2, [r7, #1]
 8001788:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	212c      	movs	r1, #44	; 0x2c
 8001790:	fb01 f303 	mul.w	r3, r1, r3
 8001794:	4413      	add	r3, r2
 8001796:	3340      	adds	r3, #64	; 0x40
 8001798:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800179a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	212c      	movs	r1, #44	; 0x2c
 80017a2:	fb01 f303 	mul.w	r3, r1, r3
 80017a6:	4413      	add	r3, r2
 80017a8:	3339      	adds	r3, #57	; 0x39
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	212c      	movs	r1, #44	; 0x2c
 80017b4:	fb01 f303 	mul.w	r3, r1, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	333f      	adds	r3, #63	; 0x3f
 80017bc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	78ba      	ldrb	r2, [r7, #2]
 80017c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017ca:	b2d0      	uxtb	r0, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	212c      	movs	r1, #44	; 0x2c
 80017d0:	fb01 f303 	mul.w	r3, r1, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	333a      	adds	r3, #58	; 0x3a
 80017d8:	4602      	mov	r2, r0
 80017da:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80017dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	da09      	bge.n	80017f8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	212c      	movs	r1, #44	; 0x2c
 80017ea:	fb01 f303 	mul.w	r3, r1, r3
 80017ee:	4413      	add	r3, r2
 80017f0:	333b      	adds	r3, #59	; 0x3b
 80017f2:	2201      	movs	r2, #1
 80017f4:	701a      	strb	r2, [r3, #0]
 80017f6:	e008      	b.n	800180a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	212c      	movs	r1, #44	; 0x2c
 80017fe:	fb01 f303 	mul.w	r3, r1, r3
 8001802:	4413      	add	r3, r2
 8001804:	333b      	adds	r3, #59	; 0x3b
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	212c      	movs	r1, #44	; 0x2c
 8001810:	fb01 f303 	mul.w	r3, r1, r3
 8001814:	4413      	add	r3, r2
 8001816:	333c      	adds	r3, #60	; 0x3c
 8001818:	f897 2020 	ldrb.w	r2, [r7, #32]
 800181c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	787c      	ldrb	r4, [r7, #1]
 8001824:	78ba      	ldrb	r2, [r7, #2]
 8001826:	78f9      	ldrb	r1, [r7, #3]
 8001828:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800182a:	9302      	str	r3, [sp, #8]
 800182c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	4623      	mov	r3, r4
 800183a:	f004 fb87 	bl	8005f4c <USB_HC_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800184a:	7bfb      	ldrb	r3, [r7, #15]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	bd90      	pop	{r4, r7, pc}

08001854 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <HAL_HCD_HC_Halt+0x1e>
 800186e:	2302      	movs	r3, #2
 8001870:	e00f      	b.n	8001892 <HAL_HCD_HC_Halt+0x3e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	78fa      	ldrb	r2, [r7, #3]
 8001880:	4611      	mov	r1, r2
 8001882:	4618      	mov	r0, r3
 8001884:	f004 fdd7 	bl	8006436 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	4603      	mov	r3, r0
 80018ac:	70fb      	strb	r3, [r7, #3]
 80018ae:	460b      	mov	r3, r1
 80018b0:	70bb      	strb	r3, [r7, #2]
 80018b2:	4613      	mov	r3, r2
 80018b4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	212c      	movs	r1, #44	; 0x2c
 80018bc:	fb01 f303 	mul.w	r3, r1, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	333b      	adds	r3, #59	; 0x3b
 80018c4:	78ba      	ldrb	r2, [r7, #2]
 80018c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	212c      	movs	r1, #44	; 0x2c
 80018ce:	fb01 f303 	mul.w	r3, r1, r3
 80018d2:	4413      	add	r3, r2
 80018d4:	333f      	adds	r3, #63	; 0x3f
 80018d6:	787a      	ldrb	r2, [r7, #1]
 80018d8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80018da:	7c3b      	ldrb	r3, [r7, #16]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d112      	bne.n	8001906 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80018e0:	78fb      	ldrb	r3, [r7, #3]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	212c      	movs	r1, #44	; 0x2c
 80018e6:	fb01 f303 	mul.w	r3, r1, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	3342      	adds	r3, #66	; 0x42
 80018ee:	2203      	movs	r2, #3
 80018f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	212c      	movs	r1, #44	; 0x2c
 80018f8:	fb01 f303 	mul.w	r3, r1, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	333d      	adds	r3, #61	; 0x3d
 8001900:	7f3a      	ldrb	r2, [r7, #28]
 8001902:	701a      	strb	r2, [r3, #0]
 8001904:	e008      	b.n	8001918 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	212c      	movs	r1, #44	; 0x2c
 800190c:	fb01 f303 	mul.w	r3, r1, r3
 8001910:	4413      	add	r3, r2
 8001912:	3342      	adds	r3, #66	; 0x42
 8001914:	2202      	movs	r2, #2
 8001916:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001918:	787b      	ldrb	r3, [r7, #1]
 800191a:	2b03      	cmp	r3, #3
 800191c:	f200 80c6 	bhi.w	8001aac <HAL_HCD_HC_SubmitRequest+0x210>
 8001920:	a201      	add	r2, pc, #4	; (adr r2, 8001928 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001926:	bf00      	nop
 8001928:	08001939 	.word	0x08001939
 800192c:	08001a99 	.word	0x08001a99
 8001930:	0800199d 	.word	0x0800199d
 8001934:	08001a1b 	.word	0x08001a1b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001938:	7c3b      	ldrb	r3, [r7, #16]
 800193a:	2b01      	cmp	r3, #1
 800193c:	f040 80b8 	bne.w	8001ab0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001940:	78bb      	ldrb	r3, [r7, #2]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f040 80b4 	bne.w	8001ab0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001948:	8b3b      	ldrh	r3, [r7, #24]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d108      	bne.n	8001960 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	212c      	movs	r1, #44	; 0x2c
 8001954:	fb01 f303 	mul.w	r3, r1, r3
 8001958:	4413      	add	r3, r2
 800195a:	3355      	adds	r3, #85	; 0x55
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	212c      	movs	r1, #44	; 0x2c
 8001966:	fb01 f303 	mul.w	r3, r1, r3
 800196a:	4413      	add	r3, r2
 800196c:	3355      	adds	r3, #85	; 0x55
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d109      	bne.n	8001988 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	212c      	movs	r1, #44	; 0x2c
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	4413      	add	r3, r2
 8001980:	3342      	adds	r3, #66	; 0x42
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001986:	e093      	b.n	8001ab0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	212c      	movs	r1, #44	; 0x2c
 800198e:	fb01 f303 	mul.w	r3, r1, r3
 8001992:	4413      	add	r3, r2
 8001994:	3342      	adds	r3, #66	; 0x42
 8001996:	2202      	movs	r2, #2
 8001998:	701a      	strb	r2, [r3, #0]
      break;
 800199a:	e089      	b.n	8001ab0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800199c:	78bb      	ldrb	r3, [r7, #2]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d11d      	bne.n	80019de <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	212c      	movs	r1, #44	; 0x2c
 80019a8:	fb01 f303 	mul.w	r3, r1, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	3355      	adds	r3, #85	; 0x55
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d109      	bne.n	80019ca <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	212c      	movs	r1, #44	; 0x2c
 80019bc:	fb01 f303 	mul.w	r3, r1, r3
 80019c0:	4413      	add	r3, r2
 80019c2:	3342      	adds	r3, #66	; 0x42
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80019c8:	e073      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	212c      	movs	r1, #44	; 0x2c
 80019d0:	fb01 f303 	mul.w	r3, r1, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	3342      	adds	r3, #66	; 0x42
 80019d8:	2202      	movs	r2, #2
 80019da:	701a      	strb	r2, [r3, #0]
      break;
 80019dc:	e069      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	212c      	movs	r1, #44	; 0x2c
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	3354      	adds	r3, #84	; 0x54
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d109      	bne.n	8001a06 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019f2:	78fb      	ldrb	r3, [r7, #3]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	212c      	movs	r1, #44	; 0x2c
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	3342      	adds	r3, #66	; 0x42
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
      break;
 8001a04:	e055      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	212c      	movs	r1, #44	; 0x2c
 8001a0c:	fb01 f303 	mul.w	r3, r1, r3
 8001a10:	4413      	add	r3, r2
 8001a12:	3342      	adds	r3, #66	; 0x42
 8001a14:	2202      	movs	r2, #2
 8001a16:	701a      	strb	r2, [r3, #0]
      break;
 8001a18:	e04b      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a1a:	78bb      	ldrb	r3, [r7, #2]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d11d      	bne.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	212c      	movs	r1, #44	; 0x2c
 8001a26:	fb01 f303 	mul.w	r3, r1, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3355      	adds	r3, #85	; 0x55
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d109      	bne.n	8001a48 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	212c      	movs	r1, #44	; 0x2c
 8001a3a:	fb01 f303 	mul.w	r3, r1, r3
 8001a3e:	4413      	add	r3, r2
 8001a40:	3342      	adds	r3, #66	; 0x42
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a46:	e034      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	212c      	movs	r1, #44	; 0x2c
 8001a4e:	fb01 f303 	mul.w	r3, r1, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	3342      	adds	r3, #66	; 0x42
 8001a56:	2202      	movs	r2, #2
 8001a58:	701a      	strb	r2, [r3, #0]
      break;
 8001a5a:	e02a      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	212c      	movs	r1, #44	; 0x2c
 8001a62:	fb01 f303 	mul.w	r3, r1, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	3354      	adds	r3, #84	; 0x54
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d109      	bne.n	8001a84 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	212c      	movs	r1, #44	; 0x2c
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3342      	adds	r3, #66	; 0x42
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
      break;
 8001a82:	e016      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	212c      	movs	r1, #44	; 0x2c
 8001a8a:	fb01 f303 	mul.w	r3, r1, r3
 8001a8e:	4413      	add	r3, r2
 8001a90:	3342      	adds	r3, #66	; 0x42
 8001a92:	2202      	movs	r2, #2
 8001a94:	701a      	strb	r2, [r3, #0]
      break;
 8001a96:	e00c      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	212c      	movs	r1, #44	; 0x2c
 8001a9e:	fb01 f303 	mul.w	r3, r1, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3342      	adds	r3, #66	; 0x42
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
      break;
 8001aaa:	e002      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001aac:	bf00      	nop
 8001aae:	e000      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001ab0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	212c      	movs	r1, #44	; 0x2c
 8001ab8:	fb01 f303 	mul.w	r3, r1, r3
 8001abc:	4413      	add	r3, r2
 8001abe:	3344      	adds	r3, #68	; 0x44
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	8b3a      	ldrh	r2, [r7, #24]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	202c      	movs	r0, #44	; 0x2c
 8001acc:	fb00 f303 	mul.w	r3, r0, r3
 8001ad0:	440b      	add	r3, r1
 8001ad2:	334c      	adds	r3, #76	; 0x4c
 8001ad4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001ad6:	78fb      	ldrb	r3, [r7, #3]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	212c      	movs	r1, #44	; 0x2c
 8001adc:	fb01 f303 	mul.w	r3, r1, r3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3360      	adds	r3, #96	; 0x60
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	212c      	movs	r1, #44	; 0x2c
 8001aee:	fb01 f303 	mul.w	r3, r1, r3
 8001af2:	4413      	add	r3, r2
 8001af4:	3350      	adds	r3, #80	; 0x50
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	212c      	movs	r1, #44	; 0x2c
 8001b00:	fb01 f303 	mul.w	r3, r1, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	3339      	adds	r3, #57	; 0x39
 8001b08:	78fa      	ldrb	r2, [r7, #3]
 8001b0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	212c      	movs	r1, #44	; 0x2c
 8001b12:	fb01 f303 	mul.w	r3, r1, r3
 8001b16:	4413      	add	r3, r2
 8001b18:	3361      	adds	r3, #97	; 0x61
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	222c      	movs	r2, #44	; 0x2c
 8001b26:	fb02 f303 	mul.w	r3, r2, r3
 8001b2a:	3338      	adds	r3, #56	; 0x38
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	18d1      	adds	r1, r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	461a      	mov	r2, r3
 8001b38:	f004 fb2a 	bl	8006190 <USB_HC_StartXfer>
 8001b3c:	4603      	mov	r3, r0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop

08001b48 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f004 f82b 	bl	8005bba <USB_GetMode>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	f040 80f6 	bne.w	8001d58 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f004 f80f 	bl	8005b94 <USB_ReadInterrupts>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80ec 	beq.w	8001d56 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f004 f806 	bl	8005b94 <USB_ReadInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b92:	d104      	bne.n	8001b9e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f003 fff6 	bl	8005b94 <USB_ReadInterrupts>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bb2:	d104      	bne.n	8001bbe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bbc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 ffe6 	bl	8005b94 <USB_ReadInterrupts>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001bd2:	d104      	bne.n	8001bde <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bdc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 ffd6 	bl	8005b94 <USB_ReadInterrupts>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d103      	bne.n	8001bfa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 ffc8 	bl	8005b94 <USB_ReadInterrupts>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c0e:	d11c      	bne.n	8001c4a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c18:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10f      	bne.n	8001c4a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c2a:	2110      	movs	r1, #16
 8001c2c:	6938      	ldr	r0, [r7, #16]
 8001c2e:	f003 feb7 	bl	80059a0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001c32:	6938      	ldr	r0, [r7, #16]
 8001c34:	f003 fee8 	bl	8005a08 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f004 f8be 	bl	8005dc0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f006 fe8b 	bl	8008960 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 ffa0 	bl	8005b94 <USB_ReadInterrupts>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c5e:	d102      	bne.n	8001c66 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f001 f89e 	bl	8002da2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 ff92 	bl	8005b94 <USB_ReadInterrupts>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d106      	bne.n	8001c88 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f006 fe54 	bl	8008928 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2208      	movs	r2, #8
 8001c86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f003 ff81 	bl	8005b94 <USB_ReadInterrupts>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b10      	cmp	r3, #16
 8001c9a:	d101      	bne.n	8001ca0 <HAL_HCD_IRQHandler+0x158>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <HAL_HCD_IRQHandler+0x15a>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d012      	beq.n	8001ccc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0210 	bic.w	r2, r2, #16
 8001cb4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 ffa1 	bl	8002bfe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699a      	ldr	r2, [r3, #24]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0210 	orr.w	r2, r2, #16
 8001cca:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 ff5f 	bl	8005b94 <USB_ReadInterrupts>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ce0:	d13a      	bne.n	8001d58 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f004 fb94 	bl	8006414 <USB_HC_ReadInterrupt>
 8001cec:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	e025      	b.n	8001d40 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d018      	beq.n	8001d3a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	015a      	lsls	r2, r3, #5
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d1e:	d106      	bne.n	8001d2e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	4619      	mov	r1, r3
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f8ab 	bl	8001e82 <HCD_HC_IN_IRQHandler>
 8001d2c:	e005      	b.n	8001d3a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	4619      	mov	r1, r3
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 fbf9 	bl	800252c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d3d4      	bcc.n	8001cf4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d52:	615a      	str	r2, [r3, #20]
 8001d54:	e000      	b.n	8001d58 <HAL_HCD_IRQHandler+0x210>
      return;
 8001d56:	bf00      	nop
    }
  }
}
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_HCD_Start+0x16>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e013      	b.n	8001d9c <HAL_HCD_Start+0x3e>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	4618      	mov	r0, r3
 8001d84:	f004 f880 	bl	8005e88 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f003 fd98 	bl	80058c2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_HCD_Stop+0x16>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e00d      	b.n	8001dd6 <HAL_HCD_Stop+0x32>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f004 fc6e 	bl	80066a8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f004 f822 	bl	8005e34 <USB_ResetPort>
 8001df0:	4603      	mov	r3, r0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	460b      	mov	r3, r1
 8001e04:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	212c      	movs	r1, #44	; 0x2c
 8001e0c:	fb01 f303 	mul.w	r3, r1, r3
 8001e10:	4413      	add	r3, r2
 8001e12:	3360      	adds	r3, #96	; 0x60
 8001e14:	781b      	ldrb	r3, [r3, #0]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	212c      	movs	r1, #44	; 0x2c
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	3350      	adds	r3, #80	; 0x50
 8001e3c:	681b      	ldr	r3, [r3, #0]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f004 f866 	bl	8005f28 <USB_GetCurrentFrame>
 8001e5c:	4603      	mov	r3, r0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f004 f841 	bl	8005efa <USB_GetHostSpeed>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d11a      	bne.n	8001ee8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	015a      	lsls	r2, r3, #5
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	212c      	movs	r1, #44	; 0x2c
 8001eca:	fb01 f303 	mul.w	r3, r1, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	3361      	adds	r3, #97	; 0x61
 8001ed2:	2206      	movs	r2, #6
 8001ed4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f004 faa8 	bl	8006436 <USB_HC_Halt>
 8001ee6:	e0af      	b.n	8002048 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	015a      	lsls	r2, r3, #5
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4413      	add	r3, r2
 8001ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001efe:	d11b      	bne.n	8001f38 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f12:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	212c      	movs	r1, #44	; 0x2c
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	3361      	adds	r3, #97	; 0x61
 8001f22:	2207      	movs	r2, #7
 8001f24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f004 fa80 	bl	8006436 <USB_HC_Halt>
 8001f36:	e087      	b.n	8002048 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 0320 	and.w	r3, r3, #32
 8001f4a:	2b20      	cmp	r3, #32
 8001f4c:	d109      	bne.n	8001f62 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	2320      	movs	r3, #32
 8001f5e:	6093      	str	r3, [r2, #8]
 8001f60:	e072      	b.n	8002048 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d11a      	bne.n	8001fae <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f84:	461a      	mov	r2, r3
 8001f86:	2308      	movs	r3, #8
 8001f88:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	212c      	movs	r1, #44	; 0x2c
 8001f90:	fb01 f303 	mul.w	r3, r1, r3
 8001f94:	4413      	add	r3, r2
 8001f96:	3361      	adds	r3, #97	; 0x61
 8001f98:	2205      	movs	r2, #5
 8001f9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 fa45 	bl	8006436 <USB_HC_Halt>
 8001fac:	e04c      	b.n	8002048 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc4:	d11b      	bne.n	8001ffe <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fd8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	212c      	movs	r1, #44	; 0x2c
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3361      	adds	r3, #97	; 0x61
 8001fe8:	2208      	movs	r2, #8
 8001fea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f004 fa1d 	bl	8006436 <USB_HC_Halt>
 8001ffc:	e024      	b.n	8002048 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4413      	add	r3, r2
 8002006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002010:	2b80      	cmp	r3, #128	; 0x80
 8002012:	d119      	bne.n	8002048 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002020:	461a      	mov	r2, r3
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	212c      	movs	r1, #44	; 0x2c
 800202c:	fb01 f303 	mul.w	r3, r1, r3
 8002030:	4413      	add	r3, r2
 8002032:	3361      	adds	r3, #97	; 0x61
 8002034:	2206      	movs	r2, #6
 8002036:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f004 f9f7 	bl	8006436 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4413      	add	r3, r2
 8002050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800205a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800205e:	d112      	bne.n	8002086 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f004 f9e3 	bl	8006436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	015a      	lsls	r2, r3, #5
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4413      	add	r3, r2
 8002078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207c:	461a      	mov	r2, r3
 800207e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002082:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002084:	e24e      	b.n	8002524 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b01      	cmp	r3, #1
 800209a:	f040 80df 	bne.w	800225c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d019      	beq.n	80020da <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	212c      	movs	r1, #44	; 0x2c
 80020ac:	fb01 f303 	mul.w	r3, r1, r3
 80020b0:	4413      	add	r3, r2
 80020b2:	3348      	adds	r3, #72	; 0x48
 80020b4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	0159      	lsls	r1, r3, #5
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	440b      	add	r3, r1
 80020be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80020c8:	1ad2      	subs	r2, r2, r3
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	202c      	movs	r0, #44	; 0x2c
 80020d0:	fb00 f303 	mul.w	r3, r0, r3
 80020d4:	440b      	add	r3, r1
 80020d6:	3350      	adds	r3, #80	; 0x50
 80020d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	212c      	movs	r1, #44	; 0x2c
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	3361      	adds	r3, #97	; 0x61
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	212c      	movs	r1, #44	; 0x2c
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	335c      	adds	r3, #92	; 0x5c
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210a:	461a      	mov	r2, r3
 800210c:	2301      	movs	r3, #1
 800210e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	212c      	movs	r1, #44	; 0x2c
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	333f      	adds	r3, #63	; 0x3f
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d009      	beq.n	8002138 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	212c      	movs	r1, #44	; 0x2c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	333f      	adds	r3, #63	; 0x3f
 8002132:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002134:	2b02      	cmp	r3, #2
 8002136:	d111      	bne.n	800215c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f004 f977 	bl	8006436 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4413      	add	r3, r2
 8002150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002154:	461a      	mov	r2, r3
 8002156:	2310      	movs	r3, #16
 8002158:	6093      	str	r3, [r2, #8]
 800215a:	e03a      	b.n	80021d2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	333f      	adds	r3, #63	; 0x3f
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b03      	cmp	r3, #3
 800216e:	d009      	beq.n	8002184 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	212c      	movs	r1, #44	; 0x2c
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	333f      	adds	r3, #63	; 0x3f
 800217e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002180:	2b01      	cmp	r3, #1
 8002182:	d126      	bne.n	80021d2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4413      	add	r3, r2
 800218c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	0151      	lsls	r1, r2, #5
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	440a      	add	r2, r1
 800219a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800219e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021a2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	212c      	movs	r1, #44	; 0x2c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	3360      	adds	r3, #96	; 0x60
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	b2d9      	uxtb	r1, r3
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	202c      	movs	r0, #44	; 0x2c
 80021c0:	fb00 f303 	mul.w	r3, r0, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	3360      	adds	r3, #96	; 0x60
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f006 fbd5 	bl	800897c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d12b      	bne.n	8002232 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	212c      	movs	r1, #44	; 0x2c
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	3348      	adds	r3, #72	; 0x48
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	202c      	movs	r0, #44	; 0x2c
 80021f0:	fb00 f202 	mul.w	r2, r0, r2
 80021f4:	440a      	add	r2, r1
 80021f6:	3240      	adds	r2, #64	; 0x40
 80021f8:	8812      	ldrh	r2, [r2, #0]
 80021fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 818e 	beq.w	8002524 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	212c      	movs	r1, #44	; 0x2c
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	3354      	adds	r3, #84	; 0x54
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	f083 0301 	eor.w	r3, r3, #1
 800221c:	b2d8      	uxtb	r0, r3
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	212c      	movs	r1, #44	; 0x2c
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	3354      	adds	r3, #84	; 0x54
 800222c:	4602      	mov	r2, r0
 800222e:	701a      	strb	r2, [r3, #0]
}
 8002230:	e178      	b.n	8002524 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	212c      	movs	r1, #44	; 0x2c
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	4413      	add	r3, r2
 800223e:	3354      	adds	r3, #84	; 0x54
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	f083 0301 	eor.w	r3, r3, #1
 8002246:	b2d8      	uxtb	r0, r3
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	212c      	movs	r1, #44	; 0x2c
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	4413      	add	r3, r2
 8002254:	3354      	adds	r3, #84	; 0x54
 8002256:	4602      	mov	r2, r0
 8002258:	701a      	strb	r2, [r3, #0]
}
 800225a:	e163      	b.n	8002524 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4413      	add	r3, r2
 8002264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b02      	cmp	r3, #2
 8002270:	f040 80f6 	bne.w	8002460 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	3361      	adds	r3, #97	; 0x61
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d109      	bne.n	800229c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	3360      	adds	r3, #96	; 0x60
 8002296:	2201      	movs	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	e0c9      	b.n	8002430 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	3361      	adds	r3, #97	; 0x61
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d109      	bne.n	80022c4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	3360      	adds	r3, #96	; 0x60
 80022be:	2205      	movs	r2, #5
 80022c0:	701a      	strb	r2, [r3, #0]
 80022c2:	e0b5      	b.n	8002430 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	212c      	movs	r1, #44	; 0x2c
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	3361      	adds	r3, #97	; 0x61
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b06      	cmp	r3, #6
 80022d6:	d009      	beq.n	80022ec <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	212c      	movs	r1, #44	; 0x2c
 80022de:	fb01 f303 	mul.w	r3, r1, r3
 80022e2:	4413      	add	r3, r2
 80022e4:	3361      	adds	r3, #97	; 0x61
 80022e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d150      	bne.n	800238e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	212c      	movs	r1, #44	; 0x2c
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	335c      	adds	r3, #92	; 0x5c
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	202c      	movs	r0, #44	; 0x2c
 8002304:	fb00 f303 	mul.w	r3, r0, r3
 8002308:	440b      	add	r3, r1
 800230a:	335c      	adds	r3, #92	; 0x5c
 800230c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	335c      	adds	r3, #92	; 0x5c
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d912      	bls.n	8002348 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	335c      	adds	r3, #92	; 0x5c
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	212c      	movs	r1, #44	; 0x2c
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	3360      	adds	r3, #96	; 0x60
 8002342:	2204      	movs	r2, #4
 8002344:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002346:	e073      	b.n	8002430 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	212c      	movs	r1, #44	; 0x2c
 800234e:	fb01 f303 	mul.w	r3, r1, r3
 8002352:	4413      	add	r3, r2
 8002354:	3360      	adds	r3, #96	; 0x60
 8002356:	2202      	movs	r2, #2
 8002358:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	015a      	lsls	r2, r3, #5
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4413      	add	r3, r2
 8002362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002370:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002378:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4413      	add	r3, r2
 8002382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002386:	461a      	mov	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800238c:	e050      	b.n	8002430 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	3361      	adds	r3, #97	; 0x61
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d122      	bne.n	80023e8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	212c      	movs	r1, #44	; 0x2c
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	3360      	adds	r3, #96	; 0x60
 80023b0:	2202      	movs	r2, #2
 80023b2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023ca:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023d2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e0:	461a      	mov	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e023      	b.n	8002430 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	212c      	movs	r1, #44	; 0x2c
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	3361      	adds	r3, #97	; 0x61
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b07      	cmp	r3, #7
 80023fa:	d119      	bne.n	8002430 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	335c      	adds	r3, #92	; 0x5c
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	202c      	movs	r0, #44	; 0x2c
 8002414:	fb00 f303 	mul.w	r3, r0, r3
 8002418:	440b      	add	r3, r1
 800241a:	335c      	adds	r3, #92	; 0x5c
 800241c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	212c      	movs	r1, #44	; 0x2c
 8002424:	fb01 f303 	mul.w	r3, r1, r3
 8002428:	4413      	add	r3, r2
 800242a:	3360      	adds	r3, #96	; 0x60
 800242c:	2204      	movs	r2, #4
 800242e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4413      	add	r3, r2
 8002438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243c:	461a      	mov	r2, r3
 800243e:	2302      	movs	r3, #2
 8002440:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	b2d9      	uxtb	r1, r3
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	202c      	movs	r0, #44	; 0x2c
 800244c:	fb00 f303 	mul.w	r3, r0, r3
 8002450:	4413      	add	r3, r2
 8002452:	3360      	adds	r3, #96	; 0x60
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f006 fa8f 	bl	800897c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800245e:	e061      	b.n	8002524 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4413      	add	r3, r2
 8002468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	2b10      	cmp	r3, #16
 8002474:	d156      	bne.n	8002524 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	212c      	movs	r1, #44	; 0x2c
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	4413      	add	r3, r2
 8002482:	333f      	adds	r3, #63	; 0x3f
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b03      	cmp	r3, #3
 8002488:	d111      	bne.n	80024ae <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	212c      	movs	r1, #44	; 0x2c
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	4413      	add	r3, r2
 8002496:	335c      	adds	r3, #92	; 0x5c
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f003 ffc5 	bl	8006436 <USB_HC_Halt>
 80024ac:	e031      	b.n	8002512 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	212c      	movs	r1, #44	; 0x2c
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	333f      	adds	r3, #63	; 0x3f
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d009      	beq.n	80024d6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	212c      	movs	r1, #44	; 0x2c
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	333f      	adds	r3, #63	; 0x3f
 80024d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d11d      	bne.n	8002512 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	212c      	movs	r1, #44	; 0x2c
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	335c      	adds	r3, #92	; 0x5c
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d110      	bne.n	8002512 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	212c      	movs	r1, #44	; 0x2c
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	3361      	adds	r3, #97	; 0x61
 80024fe:	2203      	movs	r2, #3
 8002500:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f003 ff92 	bl	8006436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	015a      	lsls	r2, r3, #5
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4413      	add	r3, r2
 800251a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251e:	461a      	mov	r2, r3
 8002520:	2310      	movs	r3, #16
 8002522:	6093      	str	r3, [r2, #8]
}
 8002524:	bf00      	nop
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	4413      	add	r3, r2
 800254e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b04      	cmp	r3, #4
 800255a:	d11a      	bne.n	8002592 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	4413      	add	r3, r2
 8002564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002568:	461a      	mov	r2, r3
 800256a:	2304      	movs	r3, #4
 800256c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	212c      	movs	r1, #44	; 0x2c
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	4413      	add	r3, r2
 800257a:	3361      	adds	r3, #97	; 0x61
 800257c:	2206      	movs	r2, #6
 800257e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	4611      	mov	r1, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f003 ff53 	bl	8006436 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002590:	e331      	b.n	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	4413      	add	r3, r2
 800259a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0320 	and.w	r3, r3, #32
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d12e      	bne.n	8002606 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b4:	461a      	mov	r2, r3
 80025b6:	2320      	movs	r3, #32
 80025b8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	212c      	movs	r1, #44	; 0x2c
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	333d      	adds	r3, #61	; 0x3d
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	f040 8313 	bne.w	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	212c      	movs	r1, #44	; 0x2c
 80025d6:	fb01 f303 	mul.w	r3, r1, r3
 80025da:	4413      	add	r3, r2
 80025dc:	333d      	adds	r3, #61	; 0x3d
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	3360      	adds	r3, #96	; 0x60
 80025f0:	2202      	movs	r2, #2
 80025f2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 ff19 	bl	8006436 <USB_HC_Halt>
}
 8002604:	e2f7      	b.n	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800261c:	d112      	bne.n	8002644 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	4413      	add	r3, r2
 8002626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262a:	461a      	mov	r2, r3
 800262c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002630:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f003 fefa 	bl	8006436 <USB_HC_Halt>
}
 8002642:	e2d8      	b.n	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	4413      	add	r3, r2
 800264c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b01      	cmp	r3, #1
 8002658:	d140      	bne.n	80026dc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	335c      	adds	r3, #92	; 0x5c
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	4413      	add	r3, r2
 8002674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267e:	2b40      	cmp	r3, #64	; 0x40
 8002680:	d111      	bne.n	80026a6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	212c      	movs	r1, #44	; 0x2c
 8002688:	fb01 f303 	mul.w	r3, r1, r3
 800268c:	4413      	add	r3, r2
 800268e:	333d      	adds	r3, #61	; 0x3d
 8002690:	2201      	movs	r2, #1
 8002692:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a0:	461a      	mov	r2, r3
 80026a2:	2340      	movs	r3, #64	; 0x40
 80026a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b2:	461a      	mov	r2, r3
 80026b4:	2301      	movs	r3, #1
 80026b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	212c      	movs	r1, #44	; 0x2c
 80026be:	fb01 f303 	mul.w	r3, r1, r3
 80026c2:	4413      	add	r3, r2
 80026c4:	3361      	adds	r3, #97	; 0x61
 80026c6:	2201      	movs	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f003 feae 	bl	8006436 <USB_HC_Halt>
}
 80026da:	e28c      	b.n	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	2b40      	cmp	r3, #64	; 0x40
 80026f0:	d12c      	bne.n	800274c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	212c      	movs	r1, #44	; 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	3361      	adds	r3, #97	; 0x61
 8002700:	2204      	movs	r2, #4
 8002702:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	212c      	movs	r1, #44	; 0x2c
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	4413      	add	r3, r2
 8002710:	333d      	adds	r3, #61	; 0x3d
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	335c      	adds	r3, #92	; 0x5c
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f003 fe7f 	bl	8006436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	461a      	mov	r2, r3
 8002746:	2340      	movs	r3, #64	; 0x40
 8002748:	6093      	str	r3, [r2, #8]
}
 800274a:	e254      	b.n	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b08      	cmp	r3, #8
 8002760:	d11a      	bne.n	8002798 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276e:	461a      	mov	r2, r3
 8002770:	2308      	movs	r3, #8
 8002772:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	212c      	movs	r1, #44	; 0x2c
 800277a:	fb01 f303 	mul.w	r3, r1, r3
 800277e:	4413      	add	r3, r2
 8002780:	3361      	adds	r3, #97	; 0x61
 8002782:	2205      	movs	r2, #5
 8002784:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f003 fe50 	bl	8006436 <USB_HC_Halt>
}
 8002796:	e22e      	b.n	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b10      	cmp	r3, #16
 80027ac:	d140      	bne.n	8002830 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	212c      	movs	r1, #44	; 0x2c
 80027b4:	fb01 f303 	mul.w	r3, r1, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	335c      	adds	r3, #92	; 0x5c
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	212c      	movs	r1, #44	; 0x2c
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	3361      	adds	r3, #97	; 0x61
 80027ce:	2203      	movs	r2, #3
 80027d0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	212c      	movs	r1, #44	; 0x2c
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	333d      	adds	r3, #61	; 0x3d
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d112      	bne.n	800280c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	333c      	adds	r3, #60	; 0x3c
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d108      	bne.n	800280c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	212c      	movs	r1, #44	; 0x2c
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	4413      	add	r3, r2
 8002806:	333d      	adds	r3, #61	; 0x3d
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	4611      	mov	r1, r2
 8002816:	4618      	mov	r0, r3
 8002818:	f003 fe0d 	bl	8006436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002828:	461a      	mov	r2, r3
 800282a:	2310      	movs	r3, #16
 800282c:	6093      	str	r3, [r2, #8]
}
 800282e:	e1e2      	b.n	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	4413      	add	r3, r2
 8002838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002842:	2b80      	cmp	r3, #128	; 0x80
 8002844:	d164      	bne.n	8002910 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d111      	bne.n	8002872 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	212c      	movs	r1, #44	; 0x2c
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	4413      	add	r3, r2
 800285a:	3361      	adds	r3, #97	; 0x61
 800285c:	2206      	movs	r2, #6
 800285e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f003 fde3 	bl	8006436 <USB_HC_Halt>
 8002870:	e044      	b.n	80028fc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	212c      	movs	r1, #44	; 0x2c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	4413      	add	r3, r2
 800287e:	335c      	adds	r3, #92	; 0x5c
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	202c      	movs	r0, #44	; 0x2c
 800288a:	fb00 f303 	mul.w	r3, r0, r3
 800288e:	440b      	add	r3, r1
 8002890:	335c      	adds	r3, #92	; 0x5c
 8002892:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	212c      	movs	r1, #44	; 0x2c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	335c      	adds	r3, #92	; 0x5c
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d920      	bls.n	80028ea <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	335c      	adds	r3, #92	; 0x5c
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	3360      	adds	r3, #96	; 0x60
 80028c8:	2204      	movs	r2, #4
 80028ca:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	b2d9      	uxtb	r1, r3
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	202c      	movs	r0, #44	; 0x2c
 80028d6:	fb00 f303 	mul.w	r3, r0, r3
 80028da:	4413      	add	r3, r2
 80028dc:	3360      	adds	r3, #96	; 0x60
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f006 f84a 	bl	800897c <HAL_HCD_HC_NotifyURBChange_Callback>
 80028e8:	e008      	b.n	80028fc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	3360      	adds	r3, #96	; 0x60
 80028f8:	2202      	movs	r2, #2
 80028fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002908:	461a      	mov	r2, r3
 800290a:	2380      	movs	r3, #128	; 0x80
 800290c:	6093      	str	r3, [r2, #8]
}
 800290e:	e172      	b.n	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002926:	d11b      	bne.n	8002960 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3361      	adds	r3, #97	; 0x61
 8002936:	2208      	movs	r2, #8
 8002938:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	4611      	mov	r1, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f003 fd76 	bl	8006436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002956:	461a      	mov	r2, r3
 8002958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800295c:	6093      	str	r3, [r2, #8]
}
 800295e:	e14a      	b.n	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b02      	cmp	r3, #2
 8002974:	f040 813f 	bne.w	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	3361      	adds	r3, #97	; 0x61
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d17d      	bne.n	8002a88 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	212c      	movs	r1, #44	; 0x2c
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	4413      	add	r3, r2
 8002998:	3360      	adds	r3, #96	; 0x60
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	212c      	movs	r1, #44	; 0x2c
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	333f      	adds	r3, #63	; 0x3f
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d00a      	beq.n	80029c8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	333f      	adds	r3, #63	; 0x3f
 80029c0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	f040 8100 	bne.w	8002bc8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d113      	bne.n	80029f8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	212c      	movs	r1, #44	; 0x2c
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	3355      	adds	r3, #85	; 0x55
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	f083 0301 	eor.w	r3, r3, #1
 80029e4:	b2d8      	uxtb	r0, r3
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	3355      	adds	r3, #85	; 0x55
 80029f4:	4602      	mov	r2, r0
 80029f6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	f040 80e3 	bne.w	8002bc8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	212c      	movs	r1, #44	; 0x2c
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	334c      	adds	r3, #76	; 0x4c
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 80d8 	beq.w	8002bc8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	334c      	adds	r3, #76	; 0x4c
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	202c      	movs	r0, #44	; 0x2c
 8002a2e:	fb00 f202 	mul.w	r2, r0, r2
 8002a32:	440a      	add	r2, r1
 8002a34:	3240      	adds	r2, #64	; 0x40
 8002a36:	8812      	ldrh	r2, [r2, #0]
 8002a38:	4413      	add	r3, r2
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	202c      	movs	r0, #44	; 0x2c
 8002a42:	fb00 f202 	mul.w	r2, r0, r2
 8002a46:	440a      	add	r2, r1
 8002a48:	3240      	adds	r2, #64	; 0x40
 8002a4a:	8812      	ldrh	r2, [r2, #0]
 8002a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80b5 	beq.w	8002bc8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3355      	adds	r3, #85	; 0x55
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	f083 0301 	eor.w	r3, r3, #1
 8002a72:	b2d8      	uxtb	r0, r3
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3355      	adds	r3, #85	; 0x55
 8002a82:	4602      	mov	r2, r0
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	e09f      	b.n	8002bc8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3361      	adds	r3, #97	; 0x61
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d109      	bne.n	8002ab0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3360      	adds	r3, #96	; 0x60
 8002aaa:	2202      	movs	r2, #2
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	e08b      	b.n	8002bc8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	3361      	adds	r3, #97	; 0x61
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d109      	bne.n	8002ad8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	3360      	adds	r3, #96	; 0x60
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e077      	b.n	8002bc8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3361      	adds	r3, #97	; 0x61
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b05      	cmp	r3, #5
 8002aea:	d109      	bne.n	8002b00 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	3360      	adds	r3, #96	; 0x60
 8002afa:	2205      	movs	r2, #5
 8002afc:	701a      	strb	r2, [r3, #0]
 8002afe:	e063      	b.n	8002bc8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	212c      	movs	r1, #44	; 0x2c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3361      	adds	r3, #97	; 0x61
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b06      	cmp	r3, #6
 8002b12:	d009      	beq.n	8002b28 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	212c      	movs	r1, #44	; 0x2c
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	4413      	add	r3, r2
 8002b20:	3361      	adds	r3, #97	; 0x61
 8002b22:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d14f      	bne.n	8002bc8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	335c      	adds	r3, #92	; 0x5c
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	202c      	movs	r0, #44	; 0x2c
 8002b40:	fb00 f303 	mul.w	r3, r0, r3
 8002b44:	440b      	add	r3, r1
 8002b46:	335c      	adds	r3, #92	; 0x5c
 8002b48:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	335c      	adds	r3, #92	; 0x5c
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d912      	bls.n	8002b84 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	212c      	movs	r1, #44	; 0x2c
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	4413      	add	r3, r2
 8002b6a:	335c      	adds	r3, #92	; 0x5c
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3360      	adds	r3, #96	; 0x60
 8002b7e:	2204      	movs	r2, #4
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	e021      	b.n	8002bc8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3360      	adds	r3, #96	; 0x60
 8002b92:	2202      	movs	r2, #2
 8002b94:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bac:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bb4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	b2d9      	uxtb	r1, r3
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	202c      	movs	r0, #44	; 0x2c
 8002be4:	fb00 f303 	mul.w	r3, r0, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	3360      	adds	r3, #96	; 0x60
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f005 fec3 	bl	800897c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bf6:	bf00      	nop
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b08a      	sub	sp, #40	; 0x28
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	0c5b      	lsrs	r3, r3, #17
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c32:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d004      	beq.n	8002c44 <HCD_RXQLVL_IRQHandler+0x46>
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2b05      	cmp	r3, #5
 8002c3e:	f000 80a9 	beq.w	8002d94 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c42:	e0aa      	b.n	8002d9a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 80a6 	beq.w	8002d98 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	212c      	movs	r1, #44	; 0x2c
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	3344      	adds	r3, #68	; 0x44
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 809b 	beq.w	8002d98 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3350      	adds	r3, #80	; 0x50
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	441a      	add	r2, r3
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	202c      	movs	r0, #44	; 0x2c
 8002c7c:	fb00 f303 	mul.w	r3, r0, r3
 8002c80:	440b      	add	r3, r1
 8002c82:	334c      	adds	r3, #76	; 0x4c
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d87a      	bhi.n	8002d80 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	212c      	movs	r1, #44	; 0x2c
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	3344      	adds	r3, #68	; 0x44
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	b292      	uxth	r2, r2
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	f002 ff1e 	bl	8005ae4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3344      	adds	r3, #68	; 0x44
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	441a      	add	r2, r3
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	202c      	movs	r0, #44	; 0x2c
 8002cc2:	fb00 f303 	mul.w	r3, r0, r3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3344      	adds	r3, #68	; 0x44
 8002cca:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3350      	adds	r3, #80	; 0x50
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	441a      	add	r2, r3
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	202c      	movs	r0, #44	; 0x2c
 8002ce6:	fb00 f303 	mul.w	r3, r0, r3
 8002cea:	440b      	add	r3, r1
 8002cec:	3350      	adds	r3, #80	; 0x50
 8002cee:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	0cdb      	lsrs	r3, r3, #19
 8002d00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d04:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	212c      	movs	r1, #44	; 0x2c
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	3340      	adds	r3, #64	; 0x40
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d13c      	bne.n	8002d98 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d039      	beq.n	8002d98 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d3a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d42:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d50:	461a      	mov	r2, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	212c      	movs	r1, #44	; 0x2c
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	3354      	adds	r3, #84	; 0x54
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	f083 0301 	eor.w	r3, r3, #1
 8002d6a:	b2d8      	uxtb	r0, r3
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	3354      	adds	r3, #84	; 0x54
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	701a      	strb	r2, [r3, #0]
      break;
 8002d7e:	e00b      	b.n	8002d98 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	212c      	movs	r1, #44	; 0x2c
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3360      	adds	r3, #96	; 0x60
 8002d8e:	2204      	movs	r2, #4
 8002d90:	701a      	strb	r2, [r3, #0]
      break;
 8002d92:	e001      	b.n	8002d98 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d94:	bf00      	nop
 8002d96:	e000      	b.n	8002d9a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d98:	bf00      	nop
  }
}
 8002d9a:	bf00      	nop
 8002d9c:	3728      	adds	r7, #40	; 0x28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b086      	sub	sp, #24
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002dce:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d10b      	bne.n	8002df2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d102      	bne.n	8002dea <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f005 fdad 	bl	8008944 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f043 0302 	orr.w	r3, r3, #2
 8002df0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d132      	bne.n	8002e62 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f043 0308 	orr.w	r3, r3, #8
 8002e02:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d126      	bne.n	8002e5c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d113      	bne.n	8002e3e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e20:	d106      	bne.n	8002e30 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2102      	movs	r1, #2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f002 ffc9 	bl	8005dc0 <USB_InitFSLSPClkSel>
 8002e2e:	e011      	b.n	8002e54 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2101      	movs	r1, #1
 8002e36:	4618      	mov	r0, r3
 8002e38:	f002 ffc2 	bl	8005dc0 <USB_InitFSLSPClkSel>
 8002e3c:	e00a      	b.n	8002e54 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d106      	bne.n	8002e54 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e52:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f005 fd9f 	bl	8008998 <HAL_HCD_PortEnabled_Callback>
 8002e5a:	e002      	b.n	8002e62 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f005 fda9 	bl	80089b4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d103      	bne.n	8002e74 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f043 0320 	orr.w	r3, r3, #32
 8002e72:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	6013      	str	r3, [r2, #0]
}
 8002e80:	bf00      	nop
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e12b      	b.n	80030f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fd fde0 	bl	8000a74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2224      	movs	r2, #36	; 0x24
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002eec:	f001 fa20 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
 8002ef0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4a81      	ldr	r2, [pc, #516]	; (80030fc <HAL_I2C_Init+0x274>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d807      	bhi.n	8002f0c <HAL_I2C_Init+0x84>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4a80      	ldr	r2, [pc, #512]	; (8003100 <HAL_I2C_Init+0x278>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	bf94      	ite	ls
 8002f04:	2301      	movls	r3, #1
 8002f06:	2300      	movhi	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e006      	b.n	8002f1a <HAL_I2C_Init+0x92>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4a7d      	ldr	r2, [pc, #500]	; (8003104 <HAL_I2C_Init+0x27c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	bf94      	ite	ls
 8002f14:	2301      	movls	r3, #1
 8002f16:	2300      	movhi	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e0e7      	b.n	80030f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4a78      	ldr	r2, [pc, #480]	; (8003108 <HAL_I2C_Init+0x280>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	0c9b      	lsrs	r3, r3, #18
 8002f2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4a6a      	ldr	r2, [pc, #424]	; (80030fc <HAL_I2C_Init+0x274>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d802      	bhi.n	8002f5c <HAL_I2C_Init+0xd4>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	e009      	b.n	8002f70 <HAL_I2C_Init+0xe8>
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f62:	fb02 f303 	mul.w	r3, r2, r3
 8002f66:	4a69      	ldr	r2, [pc, #420]	; (800310c <HAL_I2C_Init+0x284>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	099b      	lsrs	r3, r3, #6
 8002f6e:	3301      	adds	r3, #1
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	430b      	orrs	r3, r1
 8002f76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	495c      	ldr	r1, [pc, #368]	; (80030fc <HAL_I2C_Init+0x274>)
 8002f8c:	428b      	cmp	r3, r1
 8002f8e:	d819      	bhi.n	8002fc4 <HAL_I2C_Init+0x13c>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	1e59      	subs	r1, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f9e:	1c59      	adds	r1, r3, #1
 8002fa0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fa4:	400b      	ands	r3, r1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_I2C_Init+0x138>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1e59      	subs	r1, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fb8:	3301      	adds	r3, #1
 8002fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fbe:	e051      	b.n	8003064 <HAL_I2C_Init+0x1dc>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	e04f      	b.n	8003064 <HAL_I2C_Init+0x1dc>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d111      	bne.n	8002ff0 <HAL_I2C_Init+0x168>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1e58      	subs	r0, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	440b      	add	r3, r1
 8002fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e012      	b.n	8003016 <HAL_I2C_Init+0x18e>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1e58      	subs	r0, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	0099      	lsls	r1, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	fbb0 f3f3 	udiv	r3, r0, r3
 8003006:	3301      	adds	r3, #1
 8003008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_I2C_Init+0x196>
 800301a:	2301      	movs	r3, #1
 800301c:	e022      	b.n	8003064 <HAL_I2C_Init+0x1dc>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10e      	bne.n	8003044 <HAL_I2C_Init+0x1bc>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1e58      	subs	r0, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6859      	ldr	r1, [r3, #4]
 800302e:	460b      	mov	r3, r1
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	440b      	add	r3, r1
 8003034:	fbb0 f3f3 	udiv	r3, r0, r3
 8003038:	3301      	adds	r3, #1
 800303a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003042:	e00f      	b.n	8003064 <HAL_I2C_Init+0x1dc>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1e58      	subs	r0, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	0099      	lsls	r1, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	fbb0 f3f3 	udiv	r3, r0, r3
 800305a:	3301      	adds	r3, #1
 800305c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003060:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	6809      	ldr	r1, [r1, #0]
 8003068:	4313      	orrs	r3, r2
 800306a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69da      	ldr	r2, [r3, #28]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003092:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6911      	ldr	r1, [r2, #16]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	68d2      	ldr	r2, [r2, #12]
 800309e:	4311      	orrs	r1, r2
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	430b      	orrs	r3, r1
 80030a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	000186a0 	.word	0x000186a0
 8003100:	001e847f 	.word	0x001e847f
 8003104:	003d08ff 	.word	0x003d08ff
 8003108:	431bde83 	.word	0x431bde83
 800310c:	10624dd3 	.word	0x10624dd3

08003110 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e128      	b.n	8003374 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a90      	ldr	r2, [pc, #576]	; (800337c <HAL_I2S_Init+0x26c>)
 800313a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7fd fce1 	bl	8000b04 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2202      	movs	r2, #2
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003158:	f023 030f 	bic.w	r3, r3, #15
 800315c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2202      	movs	r2, #2
 8003164:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d060      	beq.n	8003230 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d102      	bne.n	800317c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003176:	2310      	movs	r3, #16
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	e001      	b.n	8003180 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800317c:	2320      	movs	r3, #32
 800317e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b20      	cmp	r3, #32
 8003186:	d802      	bhi.n	800318e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800318e:	2001      	movs	r0, #1
 8003190:	f001 f9d8 	bl	8004544 <HAL_RCCEx_GetPeriphCLKFreq>
 8003194:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800319e:	d125      	bne.n	80031ec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d010      	beq.n	80031ca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	461a      	mov	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c4:	3305      	adds	r3, #5
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	e01f      	b.n	800320a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	461a      	mov	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e6:	3305      	adds	r3, #5
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	e00e      	b.n	800320a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	461a      	mov	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	fbb2 f3f3 	udiv	r3, r2, r3
 8003206:	3305      	adds	r3, #5
 8003208:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4a5c      	ldr	r2, [pc, #368]	; (8003380 <HAL_I2S_Init+0x270>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	08db      	lsrs	r3, r3, #3
 8003214:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	085b      	lsrs	r3, r3, #1
 8003226:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	021b      	lsls	r3, r3, #8
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	e003      	b.n	8003238 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003230:	2302      	movs	r3, #2
 8003232:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d902      	bls.n	8003244 <HAL_I2S_Init+0x134>
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	2bff      	cmp	r3, #255	; 0xff
 8003242:	d907      	bls.n	8003254 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003248:	f043 0210 	orr.w	r2, r3, #16
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e08f      	b.n	8003374 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	ea42 0103 	orr.w	r1, r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69fa      	ldr	r2, [r7, #28]
 8003264:	430a      	orrs	r2, r1
 8003266:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003272:	f023 030f 	bic.w	r3, r3, #15
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6851      	ldr	r1, [r2, #4]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6892      	ldr	r2, [r2, #8]
 800327e:	4311      	orrs	r1, r2
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	68d2      	ldr	r2, [r2, #12]
 8003284:	4311      	orrs	r1, r2
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6992      	ldr	r2, [r2, #24]
 800328a:	430a      	orrs	r2, r1
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003296:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d161      	bne.n	8003364 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a38      	ldr	r2, [pc, #224]	; (8003384 <HAL_I2S_Init+0x274>)
 80032a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a37      	ldr	r2, [pc, #220]	; (8003388 <HAL_I2S_Init+0x278>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d101      	bne.n	80032b4 <HAL_I2S_Init+0x1a4>
 80032b0:	4b36      	ldr	r3, [pc, #216]	; (800338c <HAL_I2S_Init+0x27c>)
 80032b2:	e001      	b.n	80032b8 <HAL_I2S_Init+0x1a8>
 80032b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6812      	ldr	r2, [r2, #0]
 80032be:	4932      	ldr	r1, [pc, #200]	; (8003388 <HAL_I2S_Init+0x278>)
 80032c0:	428a      	cmp	r2, r1
 80032c2:	d101      	bne.n	80032c8 <HAL_I2S_Init+0x1b8>
 80032c4:	4a31      	ldr	r2, [pc, #196]	; (800338c <HAL_I2S_Init+0x27c>)
 80032c6:	e001      	b.n	80032cc <HAL_I2S_Init+0x1bc>
 80032c8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80032cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032d0:	f023 030f 	bic.w	r3, r3, #15
 80032d4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a2b      	ldr	r2, [pc, #172]	; (8003388 <HAL_I2S_Init+0x278>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d101      	bne.n	80032e4 <HAL_I2S_Init+0x1d4>
 80032e0:	4b2a      	ldr	r3, [pc, #168]	; (800338c <HAL_I2S_Init+0x27c>)
 80032e2:	e001      	b.n	80032e8 <HAL_I2S_Init+0x1d8>
 80032e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032e8:	2202      	movs	r2, #2
 80032ea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a25      	ldr	r2, [pc, #148]	; (8003388 <HAL_I2S_Init+0x278>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d101      	bne.n	80032fa <HAL_I2S_Init+0x1ea>
 80032f6:	4b25      	ldr	r3, [pc, #148]	; (800338c <HAL_I2S_Init+0x27c>)
 80032f8:	e001      	b.n	80032fe <HAL_I2S_Init+0x1ee>
 80032fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330a:	d003      	beq.n	8003314 <HAL_I2S_Init+0x204>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d103      	bne.n	800331c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	e001      	b.n	8003320 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800331c:	2300      	movs	r3, #0
 800331e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800332a:	4313      	orrs	r3, r2
 800332c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003334:	4313      	orrs	r3, r2
 8003336:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800333e:	4313      	orrs	r3, r2
 8003340:	b29a      	uxth	r2, r3
 8003342:	897b      	ldrh	r3, [r7, #10]
 8003344:	4313      	orrs	r3, r2
 8003346:	b29b      	uxth	r3, r3
 8003348:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800334c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a0d      	ldr	r2, [pc, #52]	; (8003388 <HAL_I2S_Init+0x278>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d101      	bne.n	800335c <HAL_I2S_Init+0x24c>
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <HAL_I2S_Init+0x27c>)
 800335a:	e001      	b.n	8003360 <HAL_I2S_Init+0x250>
 800335c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003360:	897a      	ldrh	r2, [r7, #10]
 8003362:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3720      	adds	r7, #32
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	08003487 	.word	0x08003487
 8003380:	cccccccd 	.word	0xcccccccd
 8003384:	0800359d 	.word	0x0800359d
 8003388:	40003800 	.word	0x40003800
 800338c:	40003400 	.word	0x40003400

08003390 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	881a      	ldrh	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	1c9a      	adds	r2, r3, #2
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10e      	bne.n	8003420 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003410:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff ffb8 	bl	8003390 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	b292      	uxth	r2, r2
 800343c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003442:	1c9a      	adds	r2, r3, #2
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10e      	bne.n	800347e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800346e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff ff93 	bl	80033a4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b086      	sub	sp, #24
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d13a      	bne.n	8003518 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d109      	bne.n	80034c0 <I2S_IRQHandler+0x3a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b6:	2b40      	cmp	r3, #64	; 0x40
 80034b8:	d102      	bne.n	80034c0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ffb4 	bl	8003428 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c6:	2b40      	cmp	r3, #64	; 0x40
 80034c8:	d126      	bne.n	8003518 <I2S_IRQHandler+0x92>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d11f      	bne.n	8003518 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034e8:	2300      	movs	r3, #0
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	f043 0202 	orr.w	r2, r3, #2
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff ff50 	bl	80033b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b03      	cmp	r3, #3
 8003522:	d136      	bne.n	8003592 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b02      	cmp	r3, #2
 800352c:	d109      	bne.n	8003542 <I2S_IRQHandler+0xbc>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003538:	2b80      	cmp	r3, #128	; 0x80
 800353a:	d102      	bne.n	8003542 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff ff45 	bl	80033cc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b08      	cmp	r3, #8
 800354a:	d122      	bne.n	8003592 <I2S_IRQHandler+0x10c>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b20      	cmp	r3, #32
 8003558:	d11b      	bne.n	8003592 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003568:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003584:	f043 0204 	orr.w	r2, r3, #4
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff ff13 	bl	80033b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003592:	bf00      	nop
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a92      	ldr	r2, [pc, #584]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d101      	bne.n	80035ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80035b6:	4b92      	ldr	r3, [pc, #584]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035b8:	e001      	b.n	80035be <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80035ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a8b      	ldr	r2, [pc, #556]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d101      	bne.n	80035d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80035d4:	4b8a      	ldr	r3, [pc, #552]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035d6:	e001      	b.n	80035dc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80035d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e8:	d004      	beq.n	80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f040 8099 	bne.w	8003726 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d107      	bne.n	800360e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f925 	bl	8003858 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	d107      	bne.n	8003628 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f9c8 	bl	80039b8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362e:	2b40      	cmp	r3, #64	; 0x40
 8003630:	d13a      	bne.n	80036a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d035      	beq.n	80036a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a6e      	ldr	r2, [pc, #440]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d101      	bne.n	800364a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003646:	4b6e      	ldr	r3, [pc, #440]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003648:	e001      	b.n	800364e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800364a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4969      	ldr	r1, [pc, #420]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003656:	428b      	cmp	r3, r1
 8003658:	d101      	bne.n	800365e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800365a:	4b69      	ldr	r3, [pc, #420]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800365c:	e001      	b.n	8003662 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800365e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003662:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003666:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003676:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	f043 0202 	orr.w	r2, r3, #2
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff fe88 	bl	80033b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	f040 80c3 	bne.w	800383a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 80bd 	beq.w	800383a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a49      	ldr	r2, [pc, #292]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d101      	bne.n	80036de <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80036da:	4b49      	ldr	r3, [pc, #292]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036dc:	e001      	b.n	80036e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80036de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4944      	ldr	r1, [pc, #272]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ea:	428b      	cmp	r3, r1
 80036ec:	d101      	bne.n	80036f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80036ee:	4b44      	ldr	r3, [pc, #272]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036f0:	e001      	b.n	80036f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80036f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036fa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036fc:	2300      	movs	r3, #0
 80036fe:	60bb      	str	r3, [r7, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	60bb      	str	r3, [r7, #8]
 8003708:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	f043 0204 	orr.w	r2, r3, #4
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff fe4a 	bl	80033b8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003724:	e089      	b.n	800383a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b02      	cmp	r3, #2
 800372e:	d107      	bne.n	8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f8be 	bl	80038bc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b01      	cmp	r3, #1
 8003748:	d107      	bne.n	800375a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f8fd 	bl	8003954 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003760:	2b40      	cmp	r3, #64	; 0x40
 8003762:	d12f      	bne.n	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d02a      	beq.n	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800377c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1e      	ldr	r2, [pc, #120]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d101      	bne.n	800378c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003788:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800378a:	e001      	b.n	8003790 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800378c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4919      	ldr	r1, [pc, #100]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003798:	428b      	cmp	r3, r1
 800379a:	d101      	bne.n	80037a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800379c:	4b18      	ldr	r3, [pc, #96]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800379e:	e001      	b.n	80037a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80037a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	f043 0202 	orr.w	r2, r3, #2
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff fdfa 	bl	80033b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d136      	bne.n	800383c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f003 0320 	and.w	r3, r3, #32
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d031      	beq.n	800383c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a07      	ldr	r2, [pc, #28]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d101      	bne.n	80037e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037e2:	4b07      	ldr	r3, [pc, #28]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037e4:	e001      	b.n	80037ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80037e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4902      	ldr	r1, [pc, #8]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037f2:	428b      	cmp	r3, r1
 80037f4:	d106      	bne.n	8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80037f6:	4b02      	ldr	r3, [pc, #8]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037f8:	e006      	b.n	8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80037fa:	bf00      	nop
 80037fc:	40003800 	.word	0x40003800
 8003800:	40003400 	.word	0x40003400
 8003804:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003808:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800380c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800381c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382a:	f043 0204 	orr.w	r2, r3, #4
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff fdc0 	bl	80033b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003838:	e000      	b.n	800383c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800383a:	bf00      	nop
}
 800383c:	bf00      	nop
 800383e:	3720      	adds	r7, #32
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	1c99      	adds	r1, r3, #2
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6251      	str	r1, [r2, #36]	; 0x24
 800386a:	881a      	ldrh	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d113      	bne.n	80038b2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003898:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d106      	bne.n	80038b2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ffc9 	bl	8003844 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	1c99      	adds	r1, r3, #2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6251      	str	r1, [r2, #36]	; 0x24
 80038ce:	8819      	ldrh	r1, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1d      	ldr	r2, [pc, #116]	; (800394c <I2SEx_TxISR_I2SExt+0x90>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d101      	bne.n	80038de <I2SEx_TxISR_I2SExt+0x22>
 80038da:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <I2SEx_TxISR_I2SExt+0x94>)
 80038dc:	e001      	b.n	80038e2 <I2SEx_TxISR_I2SExt+0x26>
 80038de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e2:	460a      	mov	r2, r1
 80038e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d121      	bne.n	8003942 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a12      	ldr	r2, [pc, #72]	; (800394c <I2SEx_TxISR_I2SExt+0x90>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d101      	bne.n	800390c <I2SEx_TxISR_I2SExt+0x50>
 8003908:	4b11      	ldr	r3, [pc, #68]	; (8003950 <I2SEx_TxISR_I2SExt+0x94>)
 800390a:	e001      	b.n	8003910 <I2SEx_TxISR_I2SExt+0x54>
 800390c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	490d      	ldr	r1, [pc, #52]	; (800394c <I2SEx_TxISR_I2SExt+0x90>)
 8003918:	428b      	cmp	r3, r1
 800391a:	d101      	bne.n	8003920 <I2SEx_TxISR_I2SExt+0x64>
 800391c:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <I2SEx_TxISR_I2SExt+0x94>)
 800391e:	e001      	b.n	8003924 <I2SEx_TxISR_I2SExt+0x68>
 8003920:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003924:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003928:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d106      	bne.n	8003942 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff ff81 	bl	8003844 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40003800 	.word	0x40003800
 8003950:	40003400 	.word	0x40003400

08003954 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68d8      	ldr	r0, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	1c99      	adds	r1, r3, #2
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800396c:	b282      	uxth	r2, r0
 800396e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d113      	bne.n	80039b0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003996:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff ff4a 	bl	8003844 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a20      	ldr	r2, [pc, #128]	; (8003a48 <I2SEx_RxISR_I2SExt+0x90>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d101      	bne.n	80039ce <I2SEx_RxISR_I2SExt+0x16>
 80039ca:	4b20      	ldr	r3, [pc, #128]	; (8003a4c <I2SEx_RxISR_I2SExt+0x94>)
 80039cc:	e001      	b.n	80039d2 <I2SEx_RxISR_I2SExt+0x1a>
 80039ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d2:	68d8      	ldr	r0, [r3, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	1c99      	adds	r1, r3, #2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039de:	b282      	uxth	r2, r0
 80039e0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d121      	bne.n	8003a3e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a12      	ldr	r2, [pc, #72]	; (8003a48 <I2SEx_RxISR_I2SExt+0x90>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d101      	bne.n	8003a08 <I2SEx_RxISR_I2SExt+0x50>
 8003a04:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <I2SEx_RxISR_I2SExt+0x94>)
 8003a06:	e001      	b.n	8003a0c <I2SEx_RxISR_I2SExt+0x54>
 8003a08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	490d      	ldr	r1, [pc, #52]	; (8003a48 <I2SEx_RxISR_I2SExt+0x90>)
 8003a14:	428b      	cmp	r3, r1
 8003a16:	d101      	bne.n	8003a1c <I2SEx_RxISR_I2SExt+0x64>
 8003a18:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <I2SEx_RxISR_I2SExt+0x94>)
 8003a1a:	e001      	b.n	8003a20 <I2SEx_RxISR_I2SExt+0x68>
 8003a1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a24:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d106      	bne.n	8003a3e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff ff03 	bl	8003844 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40003800 	.word	0x40003800
 8003a4c:	40003400 	.word	0x40003400

08003a50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e267      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d075      	beq.n	8003b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a6e:	4b88      	ldr	r3, [pc, #544]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d00c      	beq.n	8003a94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a7a:	4b85      	ldr	r3, [pc, #532]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d112      	bne.n	8003aac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a86:	4b82      	ldr	r3, [pc, #520]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a92:	d10b      	bne.n	8003aac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a94:	4b7e      	ldr	r3, [pc, #504]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d05b      	beq.n	8003b58 <HAL_RCC_OscConfig+0x108>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d157      	bne.n	8003b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e242      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab4:	d106      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x74>
 8003ab6:	4b76      	ldr	r3, [pc, #472]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a75      	ldr	r2, [pc, #468]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	e01d      	b.n	8003b00 <HAL_RCC_OscConfig+0xb0>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003acc:	d10c      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x98>
 8003ace:	4b70      	ldr	r3, [pc, #448]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a6f      	ldr	r2, [pc, #444]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	4b6d      	ldr	r3, [pc, #436]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a6c      	ldr	r2, [pc, #432]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	e00b      	b.n	8003b00 <HAL_RCC_OscConfig+0xb0>
 8003ae8:	4b69      	ldr	r3, [pc, #420]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a68      	ldr	r2, [pc, #416]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	4b66      	ldr	r3, [pc, #408]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a65      	ldr	r2, [pc, #404]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d013      	beq.n	8003b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b08:	f7fd fa2a 	bl	8000f60 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b10:	f7fd fa26 	bl	8000f60 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b64      	cmp	r3, #100	; 0x64
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e207      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b22:	4b5b      	ldr	r3, [pc, #364]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0xc0>
 8003b2e:	e014      	b.n	8003b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b30:	f7fd fa16 	bl	8000f60 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b38:	f7fd fa12 	bl	8000f60 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b64      	cmp	r3, #100	; 0x64
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e1f3      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4a:	4b51      	ldr	r3, [pc, #324]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCC_OscConfig+0xe8>
 8003b56:	e000      	b.n	8003b5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d063      	beq.n	8003c2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b66:	4b4a      	ldr	r3, [pc, #296]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00b      	beq.n	8003b8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b72:	4b47      	ldr	r3, [pc, #284]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d11c      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b7e:	4b44      	ldr	r3, [pc, #272]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d116      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b8a:	4b41      	ldr	r3, [pc, #260]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d005      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x152>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d001      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e1c7      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba2:	4b3b      	ldr	r3, [pc, #236]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4937      	ldr	r1, [pc, #220]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bb6:	e03a      	b.n	8003c2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d020      	beq.n	8003c02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bc0:	4b34      	ldr	r3, [pc, #208]	; (8003c94 <HAL_RCC_OscConfig+0x244>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc6:	f7fd f9cb 	bl	8000f60 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bce:	f7fd f9c7 	bl	8000f60 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e1a8      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be0:	4b2b      	ldr	r3, [pc, #172]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f0      	beq.n	8003bce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bec:	4b28      	ldr	r3, [pc, #160]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4925      	ldr	r1, [pc, #148]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	600b      	str	r3, [r1, #0]
 8003c00:	e015      	b.n	8003c2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c02:	4b24      	ldr	r3, [pc, #144]	; (8003c94 <HAL_RCC_OscConfig+0x244>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7fd f9aa 	bl	8000f60 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c10:	f7fd f9a6 	bl	8000f60 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e187      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c22:	4b1b      	ldr	r3, [pc, #108]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d036      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d016      	beq.n	8003c70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c42:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <HAL_RCC_OscConfig+0x248>)
 8003c44:	2201      	movs	r2, #1
 8003c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c48:	f7fd f98a 	bl	8000f60 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c50:	f7fd f986 	bl	8000f60 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e167      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c62:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x200>
 8003c6e:	e01b      	b.n	8003ca8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c70:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <HAL_RCC_OscConfig+0x248>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c76:	f7fd f973 	bl	8000f60 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c7c:	e00e      	b.n	8003c9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c7e:	f7fd f96f 	bl	8000f60 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d907      	bls.n	8003c9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e150      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
 8003c90:	40023800 	.word	0x40023800
 8003c94:	42470000 	.word	0x42470000
 8003c98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c9c:	4b88      	ldr	r3, [pc, #544]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1ea      	bne.n	8003c7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8097 	beq.w	8003de4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cba:	4b81      	ldr	r3, [pc, #516]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10f      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	4b7d      	ldr	r3, [pc, #500]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	4a7c      	ldr	r2, [pc, #496]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cd6:	4b7a      	ldr	r3, [pc, #488]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cde:	60bb      	str	r3, [r7, #8]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce6:	4b77      	ldr	r3, [pc, #476]	; (8003ec4 <HAL_RCC_OscConfig+0x474>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d118      	bne.n	8003d24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cf2:	4b74      	ldr	r3, [pc, #464]	; (8003ec4 <HAL_RCC_OscConfig+0x474>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a73      	ldr	r2, [pc, #460]	; (8003ec4 <HAL_RCC_OscConfig+0x474>)
 8003cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cfe:	f7fd f92f 	bl	8000f60 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d06:	f7fd f92b 	bl	8000f60 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e10c      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d18:	4b6a      	ldr	r3, [pc, #424]	; (8003ec4 <HAL_RCC_OscConfig+0x474>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d106      	bne.n	8003d3a <HAL_RCC_OscConfig+0x2ea>
 8003d2c:	4b64      	ldr	r3, [pc, #400]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d30:	4a63      	ldr	r2, [pc, #396]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	6713      	str	r3, [r2, #112]	; 0x70
 8003d38:	e01c      	b.n	8003d74 <HAL_RCC_OscConfig+0x324>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b05      	cmp	r3, #5
 8003d40:	d10c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x30c>
 8003d42:	4b5f      	ldr	r3, [pc, #380]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	4a5e      	ldr	r2, [pc, #376]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d48:	f043 0304 	orr.w	r3, r3, #4
 8003d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4e:	4b5c      	ldr	r3, [pc, #368]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d52:	4a5b      	ldr	r2, [pc, #364]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5a:	e00b      	b.n	8003d74 <HAL_RCC_OscConfig+0x324>
 8003d5c:	4b58      	ldr	r3, [pc, #352]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	4a57      	ldr	r2, [pc, #348]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d62:	f023 0301 	bic.w	r3, r3, #1
 8003d66:	6713      	str	r3, [r2, #112]	; 0x70
 8003d68:	4b55      	ldr	r3, [pc, #340]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	4a54      	ldr	r2, [pc, #336]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d6e:	f023 0304 	bic.w	r3, r3, #4
 8003d72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d015      	beq.n	8003da8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7c:	f7fd f8f0 	bl	8000f60 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d82:	e00a      	b.n	8003d9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d84:	f7fd f8ec 	bl	8000f60 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e0cb      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9a:	4b49      	ldr	r3, [pc, #292]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0ee      	beq.n	8003d84 <HAL_RCC_OscConfig+0x334>
 8003da6:	e014      	b.n	8003dd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da8:	f7fd f8da 	bl	8000f60 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dae:	e00a      	b.n	8003dc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003db0:	f7fd f8d6 	bl	8000f60 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e0b5      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc6:	4b3e      	ldr	r3, [pc, #248]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1ee      	bne.n	8003db0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dd2:	7dfb      	ldrb	r3, [r7, #23]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d105      	bne.n	8003de4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd8:	4b39      	ldr	r3, [pc, #228]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	4a38      	ldr	r2, [pc, #224]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80a1 	beq.w	8003f30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dee:	4b34      	ldr	r3, [pc, #208]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d05c      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d141      	bne.n	8003e86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e02:	4b31      	ldr	r3, [pc, #196]	; (8003ec8 <HAL_RCC_OscConfig+0x478>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e08:	f7fd f8aa 	bl	8000f60 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e10:	f7fd f8a6 	bl	8000f60 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e087      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e22:	4b27      	ldr	r3, [pc, #156]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69da      	ldr	r2, [r3, #28]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	019b      	lsls	r3, r3, #6
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	3b01      	subs	r3, #1
 8003e48:	041b      	lsls	r3, r3, #16
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	061b      	lsls	r3, r3, #24
 8003e52:	491b      	ldr	r1, [pc, #108]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e58:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <HAL_RCC_OscConfig+0x478>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5e:	f7fd f87f 	bl	8000f60 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e66:	f7fd f87b 	bl	8000f60 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e05c      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e78:	4b11      	ldr	r3, [pc, #68]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0x416>
 8003e84:	e054      	b.n	8003f30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e86:	4b10      	ldr	r3, [pc, #64]	; (8003ec8 <HAL_RCC_OscConfig+0x478>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8c:	f7fd f868 	bl	8000f60 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e94:	f7fd f864 	bl	8000f60 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e045      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea6:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0x444>
 8003eb2:	e03d      	b.n	8003f30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d107      	bne.n	8003ecc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e038      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	40007000 	.word	0x40007000
 8003ec8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ecc:	4b1b      	ldr	r3, [pc, #108]	; (8003f3c <HAL_RCC_OscConfig+0x4ec>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d028      	beq.n	8003f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d121      	bne.n	8003f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d11a      	bne.n	8003f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003efc:	4013      	ands	r3, r2
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d111      	bne.n	8003f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f12:	085b      	lsrs	r3, r3, #1
 8003f14:	3b01      	subs	r3, #1
 8003f16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d107      	bne.n	8003f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40023800 	.word	0x40023800

08003f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0cc      	b.n	80040ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f54:	4b68      	ldr	r3, [pc, #416]	; (80040f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d90c      	bls.n	8003f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f62:	4b65      	ldr	r3, [pc, #404]	; (80040f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6a:	4b63      	ldr	r3, [pc, #396]	; (80040f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0307 	and.w	r3, r3, #7
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d001      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0b8      	b.n	80040ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d020      	beq.n	8003fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d005      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f94:	4b59      	ldr	r3, [pc, #356]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	4a58      	ldr	r2, [pc, #352]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fac:	4b53      	ldr	r3, [pc, #332]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	4a52      	ldr	r2, [pc, #328]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb8:	4b50      	ldr	r3, [pc, #320]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	494d      	ldr	r1, [pc, #308]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d044      	beq.n	8004060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d107      	bne.n	8003fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fde:	4b47      	ldr	r3, [pc, #284]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d119      	bne.n	800401e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e07f      	b.n	80040ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d003      	beq.n	8003ffe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d107      	bne.n	800400e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffe:	4b3f      	ldr	r3, [pc, #252]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d109      	bne.n	800401e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e06f      	b.n	80040ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800400e:	4b3b      	ldr	r3, [pc, #236]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e067      	b.n	80040ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800401e:	4b37      	ldr	r3, [pc, #220]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f023 0203 	bic.w	r2, r3, #3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	4934      	ldr	r1, [pc, #208]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 800402c:	4313      	orrs	r3, r2
 800402e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004030:	f7fc ff96 	bl	8000f60 <HAL_GetTick>
 8004034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004036:	e00a      	b.n	800404e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004038:	f7fc ff92 	bl	8000f60 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	f241 3288 	movw	r2, #5000	; 0x1388
 8004046:	4293      	cmp	r3, r2
 8004048:	d901      	bls.n	800404e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e04f      	b.n	80040ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404e:	4b2b      	ldr	r3, [pc, #172]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 020c 	and.w	r2, r3, #12
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	429a      	cmp	r2, r3
 800405e:	d1eb      	bne.n	8004038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004060:	4b25      	ldr	r3, [pc, #148]	; (80040f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d20c      	bcs.n	8004088 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406e:	4b22      	ldr	r3, [pc, #136]	; (80040f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004076:	4b20      	ldr	r3, [pc, #128]	; (80040f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d001      	beq.n	8004088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e032      	b.n	80040ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004094:	4b19      	ldr	r3, [pc, #100]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	4916      	ldr	r1, [pc, #88]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d009      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040b2:	4b12      	ldr	r3, [pc, #72]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	490e      	ldr	r1, [pc, #56]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040c6:	f000 f821 	bl	800410c <HAL_RCC_GetSysClockFreq>
 80040ca:	4602      	mov	r2, r0
 80040cc:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	091b      	lsrs	r3, r3, #4
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	490a      	ldr	r1, [pc, #40]	; (8004100 <HAL_RCC_ClockConfig+0x1c0>)
 80040d8:	5ccb      	ldrb	r3, [r1, r3]
 80040da:	fa22 f303 	lsr.w	r3, r2, r3
 80040de:	4a09      	ldr	r2, [pc, #36]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 80040e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040e2:	4b09      	ldr	r3, [pc, #36]	; (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fc fef6 	bl	8000ed8 <HAL_InitTick>

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40023c00 	.word	0x40023c00
 80040fc:	40023800 	.word	0x40023800
 8004100:	08009054 	.word	0x08009054
 8004104:	20000000 	.word	0x20000000
 8004108:	20000004 	.word	0x20000004

0800410c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800410c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004110:	b094      	sub	sp, #80	; 0x50
 8004112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	647b      	str	r3, [r7, #68]	; 0x44
 8004118:	2300      	movs	r3, #0
 800411a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800411c:	2300      	movs	r3, #0
 800411e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004124:	4b79      	ldr	r3, [pc, #484]	; (800430c <HAL_RCC_GetSysClockFreq+0x200>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 030c 	and.w	r3, r3, #12
 800412c:	2b08      	cmp	r3, #8
 800412e:	d00d      	beq.n	800414c <HAL_RCC_GetSysClockFreq+0x40>
 8004130:	2b08      	cmp	r3, #8
 8004132:	f200 80e1 	bhi.w	80042f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <HAL_RCC_GetSysClockFreq+0x34>
 800413a:	2b04      	cmp	r3, #4
 800413c:	d003      	beq.n	8004146 <HAL_RCC_GetSysClockFreq+0x3a>
 800413e:	e0db      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004140:	4b73      	ldr	r3, [pc, #460]	; (8004310 <HAL_RCC_GetSysClockFreq+0x204>)
 8004142:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004144:	e0db      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004146:	4b73      	ldr	r3, [pc, #460]	; (8004314 <HAL_RCC_GetSysClockFreq+0x208>)
 8004148:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800414a:	e0d8      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800414c:	4b6f      	ldr	r3, [pc, #444]	; (800430c <HAL_RCC_GetSysClockFreq+0x200>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004154:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004156:	4b6d      	ldr	r3, [pc, #436]	; (800430c <HAL_RCC_GetSysClockFreq+0x200>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d063      	beq.n	800422a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004162:	4b6a      	ldr	r3, [pc, #424]	; (800430c <HAL_RCC_GetSysClockFreq+0x200>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	099b      	lsrs	r3, r3, #6
 8004168:	2200      	movs	r2, #0
 800416a:	63bb      	str	r3, [r7, #56]	; 0x38
 800416c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004174:	633b      	str	r3, [r7, #48]	; 0x30
 8004176:	2300      	movs	r3, #0
 8004178:	637b      	str	r3, [r7, #52]	; 0x34
 800417a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800417e:	4622      	mov	r2, r4
 8004180:	462b      	mov	r3, r5
 8004182:	f04f 0000 	mov.w	r0, #0
 8004186:	f04f 0100 	mov.w	r1, #0
 800418a:	0159      	lsls	r1, r3, #5
 800418c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004190:	0150      	lsls	r0, r2, #5
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4621      	mov	r1, r4
 8004198:	1a51      	subs	r1, r2, r1
 800419a:	6139      	str	r1, [r7, #16]
 800419c:	4629      	mov	r1, r5
 800419e:	eb63 0301 	sbc.w	r3, r3, r1
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041b0:	4659      	mov	r1, fp
 80041b2:	018b      	lsls	r3, r1, #6
 80041b4:	4651      	mov	r1, sl
 80041b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041ba:	4651      	mov	r1, sl
 80041bc:	018a      	lsls	r2, r1, #6
 80041be:	4651      	mov	r1, sl
 80041c0:	ebb2 0801 	subs.w	r8, r2, r1
 80041c4:	4659      	mov	r1, fp
 80041c6:	eb63 0901 	sbc.w	r9, r3, r1
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041de:	4690      	mov	r8, r2
 80041e0:	4699      	mov	r9, r3
 80041e2:	4623      	mov	r3, r4
 80041e4:	eb18 0303 	adds.w	r3, r8, r3
 80041e8:	60bb      	str	r3, [r7, #8]
 80041ea:	462b      	mov	r3, r5
 80041ec:	eb49 0303 	adc.w	r3, r9, r3
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	f04f 0300 	mov.w	r3, #0
 80041fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041fe:	4629      	mov	r1, r5
 8004200:	024b      	lsls	r3, r1, #9
 8004202:	4621      	mov	r1, r4
 8004204:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004208:	4621      	mov	r1, r4
 800420a:	024a      	lsls	r2, r1, #9
 800420c:	4610      	mov	r0, r2
 800420e:	4619      	mov	r1, r3
 8004210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004212:	2200      	movs	r2, #0
 8004214:	62bb      	str	r3, [r7, #40]	; 0x28
 8004216:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004218:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800421c:	f7fb ffd4 	bl	80001c8 <__aeabi_uldivmod>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4613      	mov	r3, r2
 8004226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004228:	e058      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800422a:	4b38      	ldr	r3, [pc, #224]	; (800430c <HAL_RCC_GetSysClockFreq+0x200>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	099b      	lsrs	r3, r3, #6
 8004230:	2200      	movs	r2, #0
 8004232:	4618      	mov	r0, r3
 8004234:	4611      	mov	r1, r2
 8004236:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800423a:	623b      	str	r3, [r7, #32]
 800423c:	2300      	movs	r3, #0
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
 8004240:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004244:	4642      	mov	r2, r8
 8004246:	464b      	mov	r3, r9
 8004248:	f04f 0000 	mov.w	r0, #0
 800424c:	f04f 0100 	mov.w	r1, #0
 8004250:	0159      	lsls	r1, r3, #5
 8004252:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004256:	0150      	lsls	r0, r2, #5
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4641      	mov	r1, r8
 800425e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004262:	4649      	mov	r1, r9
 8004264:	eb63 0b01 	sbc.w	fp, r3, r1
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004274:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004278:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800427c:	ebb2 040a 	subs.w	r4, r2, sl
 8004280:	eb63 050b 	sbc.w	r5, r3, fp
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	00eb      	lsls	r3, r5, #3
 800428e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004292:	00e2      	lsls	r2, r4, #3
 8004294:	4614      	mov	r4, r2
 8004296:	461d      	mov	r5, r3
 8004298:	4643      	mov	r3, r8
 800429a:	18e3      	adds	r3, r4, r3
 800429c:	603b      	str	r3, [r7, #0]
 800429e:	464b      	mov	r3, r9
 80042a0:	eb45 0303 	adc.w	r3, r5, r3
 80042a4:	607b      	str	r3, [r7, #4]
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042b2:	4629      	mov	r1, r5
 80042b4:	028b      	lsls	r3, r1, #10
 80042b6:	4621      	mov	r1, r4
 80042b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042bc:	4621      	mov	r1, r4
 80042be:	028a      	lsls	r2, r1, #10
 80042c0:	4610      	mov	r0, r2
 80042c2:	4619      	mov	r1, r3
 80042c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c6:	2200      	movs	r2, #0
 80042c8:	61bb      	str	r3, [r7, #24]
 80042ca:	61fa      	str	r2, [r7, #28]
 80042cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042d0:	f7fb ff7a 	bl	80001c8 <__aeabi_uldivmod>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4613      	mov	r3, r2
 80042da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <HAL_RCC_GetSysClockFreq+0x200>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	0c1b      	lsrs	r3, r3, #16
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	3301      	adds	r3, #1
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80042ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042f6:	e002      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RCC_GetSysClockFreq+0x204>)
 80042fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004300:	4618      	mov	r0, r3
 8004302:	3750      	adds	r7, #80	; 0x50
 8004304:	46bd      	mov	sp, r7
 8004306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800430a:	bf00      	nop
 800430c:	40023800 	.word	0x40023800
 8004310:	00f42400 	.word	0x00f42400
 8004314:	007a1200 	.word	0x007a1200

08004318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800431c:	4b03      	ldr	r3, [pc, #12]	; (800432c <HAL_RCC_GetHCLKFreq+0x14>)
 800431e:	681b      	ldr	r3, [r3, #0]
}
 8004320:	4618      	mov	r0, r3
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	20000000 	.word	0x20000000

08004330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004334:	f7ff fff0 	bl	8004318 <HAL_RCC_GetHCLKFreq>
 8004338:	4602      	mov	r2, r0
 800433a:	4b05      	ldr	r3, [pc, #20]	; (8004350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	0a9b      	lsrs	r3, r3, #10
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	4903      	ldr	r1, [pc, #12]	; (8004354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004346:	5ccb      	ldrb	r3, [r1, r3]
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800434c:	4618      	mov	r0, r3
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40023800 	.word	0x40023800
 8004354:	08009064 	.word	0x08009064

08004358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800435c:	f7ff ffdc 	bl	8004318 <HAL_RCC_GetHCLKFreq>
 8004360:	4602      	mov	r2, r0
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	0b5b      	lsrs	r3, r3, #13
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	4903      	ldr	r1, [pc, #12]	; (800437c <HAL_RCC_GetPCLK2Freq+0x24>)
 800436e:	5ccb      	ldrb	r3, [r1, r3]
 8004370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004374:	4618      	mov	r0, r3
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40023800 	.word	0x40023800
 800437c:	08009064 	.word	0x08009064

08004380 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d105      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d035      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043a8:	4b62      	ldr	r3, [pc, #392]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043ae:	f7fc fdd7 	bl	8000f60 <HAL_GetTick>
 80043b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043b6:	f7fc fdd3 	bl	8000f60 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e0b0      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043c8:	4b5b      	ldr	r3, [pc, #364]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f0      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	019a      	lsls	r2, r3, #6
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	071b      	lsls	r3, r3, #28
 80043e0:	4955      	ldr	r1, [pc, #340]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043e8:	4b52      	ldr	r3, [pc, #328]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043ea:	2201      	movs	r2, #1
 80043ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043ee:	f7fc fdb7 	bl	8000f60 <HAL_GetTick>
 80043f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043f4:	e008      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043f6:	f7fc fdb3 	bl	8000f60 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e090      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004408:	4b4b      	ldr	r3, [pc, #300]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0f0      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 8083 	beq.w	8004528 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	4b44      	ldr	r3, [pc, #272]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	4a43      	ldr	r2, [pc, #268]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800442c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004430:	6413      	str	r3, [r2, #64]	; 0x40
 8004432:	4b41      	ldr	r3, [pc, #260]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800443e:	4b3f      	ldr	r3, [pc, #252]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a3e      	ldr	r2, [pc, #248]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004448:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800444a:	f7fc fd89 	bl	8000f60 <HAL_GetTick>
 800444e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004450:	e008      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004452:	f7fc fd85 	bl	8000f60 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e062      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004464:	4b35      	ldr	r3, [pc, #212]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0f0      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004470:	4b31      	ldr	r3, [pc, #196]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004478:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d02f      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	429a      	cmp	r2, r3
 800448c:	d028      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800448e:	4b2a      	ldr	r3, [pc, #168]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004496:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004498:	4b29      	ldr	r3, [pc, #164]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800449a:	2201      	movs	r2, #1
 800449c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800449e:	4b28      	ldr	r3, [pc, #160]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80044a4:	4a24      	ldr	r2, [pc, #144]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044aa:	4b23      	ldr	r3, [pc, #140]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d114      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80044b6:	f7fc fd53 	bl	8000f60 <HAL_GetTick>
 80044ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044bc:	e00a      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044be:	f7fc fd4f 	bl	8000f60 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e02a      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d4:	4b18      	ldr	r3, [pc, #96]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0ee      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ec:	d10d      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80044ee:	4b12      	ldr	r3, [pc, #72]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004502:	490d      	ldr	r1, [pc, #52]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004504:	4313      	orrs	r3, r2
 8004506:	608b      	str	r3, [r1, #8]
 8004508:	e005      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800450a:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	4a0a      	ldr	r2, [pc, #40]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004510:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004514:	6093      	str	r3, [r2, #8]
 8004516:	4b08      	ldr	r3, [pc, #32]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004518:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004522:	4905      	ldr	r1, [pc, #20]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004524:	4313      	orrs	r3, r2
 8004526:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	42470068 	.word	0x42470068
 8004538:	40023800 	.word	0x40023800
 800453c:	40007000 	.word	0x40007000
 8004540:	42470e40 	.word	0x42470e40

08004544 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d13e      	bne.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004562:	4b23      	ldr	r3, [pc, #140]	; (80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d12f      	bne.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004578:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800457a:	617b      	str	r3, [r7, #20]
          break;
 800457c:	e02f      	b.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800457e:	4b1c      	ldr	r3, [pc, #112]	; (80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800458a:	d108      	bne.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800458c:	4b18      	ldr	r3, [pc, #96]	; (80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004594:	4a18      	ldr	r2, [pc, #96]	; (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004596:	fbb2 f3f3 	udiv	r3, r2, r3
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	e007      	b.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800459e:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045a6:	4a15      	ldr	r2, [pc, #84]	; (80045fc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80045a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ac:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80045ae:	4b10      	ldr	r3, [pc, #64]	; (80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b4:	099b      	lsrs	r3, r3, #6
 80045b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	fb02 f303 	mul.w	r3, r2, r3
 80045c0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80045c2:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045c8:	0f1b      	lsrs	r3, r3, #28
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d4:	617b      	str	r3, [r7, #20]
          break;
 80045d6:	e002      	b.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]
          break;
 80045dc:	bf00      	nop
        }
      }
      break;
 80045de:	bf00      	nop
    }
  }
  return frequency;
 80045e0:	697b      	ldr	r3, [r7, #20]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40023800 	.word	0x40023800
 80045f4:	00bb8000 	.word	0x00bb8000
 80045f8:	007a1200 	.word	0x007a1200
 80045fc:	00f42400 	.word	0x00f42400

08004600 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e07b      	b.n	800470a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	2b00      	cmp	r3, #0
 8004618:	d108      	bne.n	800462c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004622:	d009      	beq.n	8004638 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	61da      	str	r2, [r3, #28]
 800462a:	e005      	b.n	8004638 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fc fad6 	bl	8000c04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800466e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046bc:	ea42 0103 	orr.w	r1, r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	0c1b      	lsrs	r3, r3, #16
 80046d6:	f003 0104 	and.w	r1, r3, #4
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	f003 0210 	and.w	r2, r3, #16
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69da      	ldr	r2, [r3, #28]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e03f      	b.n	80047a4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d106      	bne.n	800473e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7fc faab 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2224      	movs	r2, #36	; 0x24
 8004742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004754:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fdde 	bl	8005318 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800476a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	695a      	ldr	r2, [r3, #20]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800477a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800478a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08a      	sub	sp, #40	; 0x28
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	4613      	mov	r3, r2
 80047ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d17c      	bne.n	80048c6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <HAL_UART_Transmit+0x2c>
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e075      	b.n	80048c8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_UART_Transmit+0x3e>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e06e      	b.n	80048c8 <HAL_UART_Transmit+0x11c>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2221      	movs	r2, #33	; 0x21
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004800:	f7fc fbae 	bl	8000f60 <HAL_GetTick>
 8004804:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	88fa      	ldrh	r2, [r7, #6]
 800480a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	88fa      	ldrh	r2, [r7, #6]
 8004810:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481a:	d108      	bne.n	800482e <HAL_UART_Transmit+0x82>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d104      	bne.n	800482e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004824:	2300      	movs	r3, #0
 8004826:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	61bb      	str	r3, [r7, #24]
 800482c:	e003      	b.n	8004836 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004832:	2300      	movs	r3, #0
 8004834:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800483e:	e02a      	b.n	8004896 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	2200      	movs	r2, #0
 8004848:	2180      	movs	r1, #128	; 0x80
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 fb1e 	bl	8004e8c <UART_WaitOnFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e036      	b.n	80048c8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10b      	bne.n	8004878 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	461a      	mov	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800486e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	3302      	adds	r3, #2
 8004874:	61bb      	str	r3, [r7, #24]
 8004876:	e007      	b.n	8004888 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	781a      	ldrb	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	3301      	adds	r3, #1
 8004886:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800488c:	b29b      	uxth	r3, r3
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1cf      	bne.n	8004840 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2200      	movs	r2, #0
 80048a8:	2140      	movs	r1, #64	; 0x40
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 faee 	bl	8004e8c <UART_WaitOnFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e006      	b.n	80048c8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e000      	b.n	80048c8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048c6:	2302      	movs	r3, #2
  }
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3720      	adds	r7, #32
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	4613      	mov	r3, r2
 80048dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d11d      	bne.n	8004926 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <HAL_UART_Receive_IT+0x26>
 80048f0:	88fb      	ldrh	r3, [r7, #6]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e016      	b.n	8004928 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_UART_Receive_IT+0x38>
 8004904:	2302      	movs	r3, #2
 8004906:	e00f      	b.n	8004928 <HAL_UART_Receive_IT+0x58>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	461a      	mov	r2, r3
 800491a:	68b9      	ldr	r1, [r7, #8]
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 fb23 	bl	8004f68 <UART_Start_Receive_IT>
 8004922:	4603      	mov	r3, r0
 8004924:	e000      	b.n	8004928 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004926:	2302      	movs	r3, #2
  }
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b0ba      	sub	sp, #232	; 0xe8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004956:	2300      	movs	r3, #0
 8004958:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800495c:	2300      	movs	r3, #0
 800495e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800496e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10f      	bne.n	8004996 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	d009      	beq.n	8004996 <HAL_UART_IRQHandler+0x66>
 8004982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fc07 	bl	80051a2 <UART_Receive_IT>
      return;
 8004994:	e256      	b.n	8004e44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 80de 	beq.w	8004b5c <HAL_UART_IRQHandler+0x22c>
 80049a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d106      	bne.n	80049ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80d1 	beq.w	8004b5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00b      	beq.n	80049de <HAL_UART_IRQHandler+0xae>
 80049c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	f043 0201 	orr.w	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00b      	beq.n	8004a02 <HAL_UART_IRQHandler+0xd2>
 80049ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d005      	beq.n	8004a02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	f043 0202 	orr.w	r2, r3, #2
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00b      	beq.n	8004a26 <HAL_UART_IRQHandler+0xf6>
 8004a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f043 0204 	orr.w	r2, r3, #4
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d011      	beq.n	8004a56 <HAL_UART_IRQHandler+0x126>
 8004a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d105      	bne.n	8004a4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d005      	beq.n	8004a56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	f043 0208 	orr.w	r2, r3, #8
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 81ed 	beq.w	8004e3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d008      	beq.n	8004a7e <HAL_UART_IRQHandler+0x14e>
 8004a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a70:	f003 0320 	and.w	r3, r3, #32
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 fb92 	bl	80051a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a88:	2b40      	cmp	r3, #64	; 0x40
 8004a8a:	bf0c      	ite	eq
 8004a8c:	2301      	moveq	r3, #1
 8004a8e:	2300      	movne	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d103      	bne.n	8004aaa <HAL_UART_IRQHandler+0x17a>
 8004aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d04f      	beq.n	8004b4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fa9a 	bl	8004fe4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aba:	2b40      	cmp	r3, #64	; 0x40
 8004abc:	d141      	bne.n	8004b42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3314      	adds	r3, #20
 8004ac4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004adc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3314      	adds	r3, #20
 8004ae6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004aea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004aee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004af6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004afa:	e841 2300 	strex	r3, r2, [r1]
 8004afe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1d9      	bne.n	8004abe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d013      	beq.n	8004b3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	4a7d      	ldr	r2, [pc, #500]	; (8004d0c <HAL_UART_IRQHandler+0x3dc>)
 8004b18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fc fbcf 	bl	80012c2 <HAL_DMA_Abort_IT>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d016      	beq.n	8004b58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b34:	4610      	mov	r0, r2
 8004b36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b38:	e00e      	b.n	8004b58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f990 	bl	8004e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b40:	e00a      	b.n	8004b58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f98c 	bl	8004e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b48:	e006      	b.n	8004b58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f988 	bl	8004e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b56:	e170      	b.n	8004e3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b58:	bf00      	nop
    return;
 8004b5a:	e16e      	b.n	8004e3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	f040 814a 	bne.w	8004dfa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b6a:	f003 0310 	and.w	r3, r3, #16
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 8143 	beq.w	8004dfa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b78:	f003 0310 	and.w	r3, r3, #16
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 813c 	beq.w	8004dfa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b82:	2300      	movs	r3, #0
 8004b84:	60bb      	str	r3, [r7, #8]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	60bb      	str	r3, [r7, #8]
 8004b96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba2:	2b40      	cmp	r3, #64	; 0x40
 8004ba4:	f040 80b4 	bne.w	8004d10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 8140 	beq.w	8004e3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	f080 8139 	bcs.w	8004e3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bde:	f000 8088 	beq.w	8004cf2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	330c      	adds	r3, #12
 8004be8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004bf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	330c      	adds	r3, #12
 8004c0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1d9      	bne.n	8004be2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3314      	adds	r3, #20
 8004c34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c38:	e853 3f00 	ldrex	r3, [r3]
 8004c3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c40:	f023 0301 	bic.w	r3, r3, #1
 8004c44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3314      	adds	r3, #20
 8004c4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c5e:	e841 2300 	strex	r3, r2, [r1]
 8004c62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1e1      	bne.n	8004c2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3314      	adds	r3, #20
 8004c70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c74:	e853 3f00 	ldrex	r3, [r3]
 8004c78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3314      	adds	r3, #20
 8004c8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e3      	bne.n	8004c6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	330c      	adds	r3, #12
 8004cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cc2:	f023 0310 	bic.w	r3, r3, #16
 8004cc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	330c      	adds	r3, #12
 8004cd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004cd4:	65ba      	str	r2, [r7, #88]	; 0x58
 8004cd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cdc:	e841 2300 	strex	r3, r2, [r1]
 8004ce0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e3      	bne.n	8004cb0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fc fa78 	bl	80011e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	4619      	mov	r1, r3
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f8b6 	bl	8004e74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d08:	e099      	b.n	8004e3e <HAL_UART_IRQHandler+0x50e>
 8004d0a:	bf00      	nop
 8004d0c:	080050ab 	.word	0x080050ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 808b 	beq.w	8004e42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004d2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 8086 	beq.w	8004e42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	330c      	adds	r3, #12
 8004d56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d5a:	647a      	str	r2, [r7, #68]	; 0x44
 8004d5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d62:	e841 2300 	strex	r3, r2, [r1]
 8004d66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1e3      	bne.n	8004d36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3314      	adds	r3, #20
 8004d74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	e853 3f00 	ldrex	r3, [r3]
 8004d7c:	623b      	str	r3, [r7, #32]
   return(result);
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	f023 0301 	bic.w	r3, r3, #1
 8004d84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3314      	adds	r3, #20
 8004d8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d92:	633a      	str	r2, [r7, #48]	; 0x30
 8004d94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1e3      	bne.n	8004d6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	330c      	adds	r3, #12
 8004dba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	e853 3f00 	ldrex	r3, [r3]
 8004dc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 0310 	bic.w	r3, r3, #16
 8004dca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	330c      	adds	r3, #12
 8004dd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004dd8:	61fa      	str	r2, [r7, #28]
 8004dda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ddc:	69b9      	ldr	r1, [r7, #24]
 8004dde:	69fa      	ldr	r2, [r7, #28]
 8004de0:	e841 2300 	strex	r3, r2, [r1]
 8004de4:	617b      	str	r3, [r7, #20]
   return(result);
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1e3      	bne.n	8004db4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004df0:	4619      	mov	r1, r3
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f83e 	bl	8004e74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004df8:	e023      	b.n	8004e42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d009      	beq.n	8004e1a <HAL_UART_IRQHandler+0x4ea>
 8004e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f95d 	bl	80050d2 <UART_Transmit_IT>
    return;
 8004e18:	e014      	b.n	8004e44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00e      	beq.n	8004e44 <HAL_UART_IRQHandler+0x514>
 8004e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d008      	beq.n	8004e44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f99d 	bl	8005172 <UART_EndTransmit_IT>
    return;
 8004e38:	e004      	b.n	8004e44 <HAL_UART_IRQHandler+0x514>
    return;
 8004e3a:	bf00      	nop
 8004e3c:	e002      	b.n	8004e44 <HAL_UART_IRQHandler+0x514>
      return;
 8004e3e:	bf00      	nop
 8004e40:	e000      	b.n	8004e44 <HAL_UART_IRQHandler+0x514>
      return;
 8004e42:	bf00      	nop
  }
}
 8004e44:	37e8      	adds	r7, #232	; 0xe8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop

08004e4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b090      	sub	sp, #64	; 0x40
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e9c:	e050      	b.n	8004f40 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ea4:	d04c      	beq.n	8004f40 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d007      	beq.n	8004ebc <UART_WaitOnFlagUntilTimeout+0x30>
 8004eac:	f7fc f858 	bl	8000f60 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d241      	bcs.n	8004f40 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	330c      	adds	r3, #12
 8004ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	e853 3f00 	ldrex	r3, [r3]
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	330c      	adds	r3, #12
 8004eda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004edc:	637a      	str	r2, [r7, #52]	; 0x34
 8004ede:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ee4:	e841 2300 	strex	r3, r2, [r1]
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1e5      	bne.n	8004ebc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3314      	adds	r3, #20
 8004ef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	e853 3f00 	ldrex	r3, [r3]
 8004efe:	613b      	str	r3, [r7, #16]
   return(result);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f023 0301 	bic.w	r3, r3, #1
 8004f06:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3314      	adds	r3, #20
 8004f0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f10:	623a      	str	r2, [r7, #32]
 8004f12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	69f9      	ldr	r1, [r7, #28]
 8004f16:	6a3a      	ldr	r2, [r7, #32]
 8004f18:	e841 2300 	strex	r3, r2, [r1]
 8004f1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1e5      	bne.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e00f      	b.n	8004f60 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	bf0c      	ite	eq
 8004f50:	2301      	moveq	r3, #1
 8004f52:	2300      	movne	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d09f      	beq.n	8004e9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3740      	adds	r7, #64	; 0x40
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	4613      	mov	r3, r2
 8004f74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	88fa      	ldrh	r2, [r7, #6]
 8004f80:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	88fa      	ldrh	r2, [r7, #6]
 8004f86:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2222      	movs	r2, #34	; 0x22
 8004f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d007      	beq.n	8004fb6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fb4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695a      	ldr	r2, [r3, #20]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0201 	orr.w	r2, r2, #1
 8004fc4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0220 	orr.w	r2, r2, #32
 8004fd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b095      	sub	sp, #84	; 0x54
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	330c      	adds	r3, #12
 8004ff2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	330c      	adds	r3, #12
 800500a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800500c:	643a      	str	r2, [r7, #64]	; 0x40
 800500e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005012:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005014:	e841 2300 	strex	r3, r2, [r1]
 8005018:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e5      	bne.n	8004fec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3314      	adds	r3, #20
 8005026:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	e853 3f00 	ldrex	r3, [r3]
 800502e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	f023 0301 	bic.w	r3, r3, #1
 8005036:	64bb      	str	r3, [r7, #72]	; 0x48
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3314      	adds	r3, #20
 800503e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005040:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005042:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005048:	e841 2300 	strex	r3, r2, [r1]
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e5      	bne.n	8005020 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	2b01      	cmp	r3, #1
 800505a:	d119      	bne.n	8005090 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	330c      	adds	r3, #12
 8005062:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	e853 3f00 	ldrex	r3, [r3]
 800506a:	60bb      	str	r3, [r7, #8]
   return(result);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f023 0310 	bic.w	r3, r3, #16
 8005072:	647b      	str	r3, [r7, #68]	; 0x44
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	330c      	adds	r3, #12
 800507a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800507c:	61ba      	str	r2, [r7, #24]
 800507e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005080:	6979      	ldr	r1, [r7, #20]
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	e841 2300 	strex	r3, r2, [r1]
 8005088:	613b      	str	r3, [r7, #16]
   return(result);
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e5      	bne.n	800505c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800509e:	bf00      	nop
 80050a0:	3754      	adds	r7, #84	; 0x54
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f7ff fecb 	bl	8004e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050ca:	bf00      	nop
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b085      	sub	sp, #20
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b21      	cmp	r3, #33	; 0x21
 80050e4:	d13e      	bne.n	8005164 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ee:	d114      	bne.n	800511a <UART_Transmit_IT+0x48>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d110      	bne.n	800511a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800510c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	1c9a      	adds	r2, r3, #2
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	621a      	str	r2, [r3, #32]
 8005118:	e008      	b.n	800512c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	1c59      	adds	r1, r3, #1
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6211      	str	r1, [r2, #32]
 8005124:	781a      	ldrb	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005130:	b29b      	uxth	r3, r3
 8005132:	3b01      	subs	r3, #1
 8005134:	b29b      	uxth	r3, r3
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	4619      	mov	r1, r3
 800513a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10f      	bne.n	8005160 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800514e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800515e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005160:	2300      	movs	r3, #0
 8005162:	e000      	b.n	8005166 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005164:	2302      	movs	r3, #2
  }
}
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b082      	sub	sp, #8
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005188:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2220      	movs	r2, #32
 800518e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7ff fe5a 	bl	8004e4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b08c      	sub	sp, #48	; 0x30
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b22      	cmp	r3, #34	; 0x22
 80051b4:	f040 80ab 	bne.w	800530e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c0:	d117      	bne.n	80051f2 <UART_Receive_IT+0x50>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d113      	bne.n	80051f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	b29b      	uxth	r3, r3
 80051dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ea:	1c9a      	adds	r2, r3, #2
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	629a      	str	r2, [r3, #40]	; 0x28
 80051f0:	e026      	b.n	8005240 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80051f8:	2300      	movs	r3, #0
 80051fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005204:	d007      	beq.n	8005216 <UART_Receive_IT+0x74>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10a      	bne.n	8005224 <UART_Receive_IT+0x82>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	b2da      	uxtb	r2, r3
 800521e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	e008      	b.n	8005236 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	b2db      	uxtb	r3, r3
 800522c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005230:	b2da      	uxtb	r2, r3
 8005232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005234:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005244:	b29b      	uxth	r3, r3
 8005246:	3b01      	subs	r3, #1
 8005248:	b29b      	uxth	r3, r3
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	4619      	mov	r1, r3
 800524e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005250:	2b00      	cmp	r3, #0
 8005252:	d15a      	bne.n	800530a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0220 	bic.w	r2, r2, #32
 8005262:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005272:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695a      	ldr	r2, [r3, #20]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0201 	bic.w	r2, r2, #1
 8005282:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005290:	2b01      	cmp	r3, #1
 8005292:	d135      	bne.n	8005300 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	330c      	adds	r3, #12
 80052a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	613b      	str	r3, [r7, #16]
   return(result);
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f023 0310 	bic.w	r3, r3, #16
 80052b0:	627b      	str	r3, [r7, #36]	; 0x24
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	330c      	adds	r3, #12
 80052b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ba:	623a      	str	r2, [r7, #32]
 80052bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	69f9      	ldr	r1, [r7, #28]
 80052c0:	6a3a      	ldr	r2, [r7, #32]
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e5      	bne.n	800529a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	2b10      	cmp	r3, #16
 80052da:	d10a      	bne.n	80052f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052f6:	4619      	mov	r1, r3
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff fdbb 	bl	8004e74 <HAL_UARTEx_RxEventCallback>
 80052fe:	e002      	b.n	8005306 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7fb fb43 	bl	800098c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	e002      	b.n	8005310 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	e000      	b.n	8005310 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800530e:	2302      	movs	r3, #2
  }
}
 8005310:	4618      	mov	r0, r3
 8005312:	3730      	adds	r7, #48	; 0x30
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800531c:	b0c0      	sub	sp, #256	; 0x100
 800531e:	af00      	add	r7, sp, #0
 8005320:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005334:	68d9      	ldr	r1, [r3, #12]
 8005336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	ea40 0301 	orr.w	r3, r0, r1
 8005340:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	431a      	orrs	r2, r3
 8005350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	431a      	orrs	r2, r3
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005370:	f021 010c 	bic.w	r1, r1, #12
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800537e:	430b      	orrs	r3, r1
 8005380:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800538e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005392:	6999      	ldr	r1, [r3, #24]
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	ea40 0301 	orr.w	r3, r0, r1
 800539e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	4b8f      	ldr	r3, [pc, #572]	; (80055e4 <UART_SetConfig+0x2cc>)
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d005      	beq.n	80053b8 <UART_SetConfig+0xa0>
 80053ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	4b8d      	ldr	r3, [pc, #564]	; (80055e8 <UART_SetConfig+0x2d0>)
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d104      	bne.n	80053c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053b8:	f7fe ffce 	bl	8004358 <HAL_RCC_GetPCLK2Freq>
 80053bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053c0:	e003      	b.n	80053ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053c2:	f7fe ffb5 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
 80053c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053d4:	f040 810c 	bne.w	80055f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053dc:	2200      	movs	r2, #0
 80053de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053ea:	4622      	mov	r2, r4
 80053ec:	462b      	mov	r3, r5
 80053ee:	1891      	adds	r1, r2, r2
 80053f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80053f2:	415b      	adcs	r3, r3
 80053f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053fa:	4621      	mov	r1, r4
 80053fc:	eb12 0801 	adds.w	r8, r2, r1
 8005400:	4629      	mov	r1, r5
 8005402:	eb43 0901 	adc.w	r9, r3, r1
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005412:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005416:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800541a:	4690      	mov	r8, r2
 800541c:	4699      	mov	r9, r3
 800541e:	4623      	mov	r3, r4
 8005420:	eb18 0303 	adds.w	r3, r8, r3
 8005424:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005428:	462b      	mov	r3, r5
 800542a:	eb49 0303 	adc.w	r3, r9, r3
 800542e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800543e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005442:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005446:	460b      	mov	r3, r1
 8005448:	18db      	adds	r3, r3, r3
 800544a:	653b      	str	r3, [r7, #80]	; 0x50
 800544c:	4613      	mov	r3, r2
 800544e:	eb42 0303 	adc.w	r3, r2, r3
 8005452:	657b      	str	r3, [r7, #84]	; 0x54
 8005454:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005458:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800545c:	f7fa feb4 	bl	80001c8 <__aeabi_uldivmod>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	4b61      	ldr	r3, [pc, #388]	; (80055ec <UART_SetConfig+0x2d4>)
 8005466:	fba3 2302 	umull	r2, r3, r3, r2
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	011c      	lsls	r4, r3, #4
 800546e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005472:	2200      	movs	r2, #0
 8005474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005478:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800547c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005480:	4642      	mov	r2, r8
 8005482:	464b      	mov	r3, r9
 8005484:	1891      	adds	r1, r2, r2
 8005486:	64b9      	str	r1, [r7, #72]	; 0x48
 8005488:	415b      	adcs	r3, r3
 800548a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800548c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005490:	4641      	mov	r1, r8
 8005492:	eb12 0a01 	adds.w	sl, r2, r1
 8005496:	4649      	mov	r1, r9
 8005498:	eb43 0b01 	adc.w	fp, r3, r1
 800549c:	f04f 0200 	mov.w	r2, #0
 80054a0:	f04f 0300 	mov.w	r3, #0
 80054a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054b0:	4692      	mov	sl, r2
 80054b2:	469b      	mov	fp, r3
 80054b4:	4643      	mov	r3, r8
 80054b6:	eb1a 0303 	adds.w	r3, sl, r3
 80054ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054be:	464b      	mov	r3, r9
 80054c0:	eb4b 0303 	adc.w	r3, fp, r3
 80054c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80054d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054dc:	460b      	mov	r3, r1
 80054de:	18db      	adds	r3, r3, r3
 80054e0:	643b      	str	r3, [r7, #64]	; 0x40
 80054e2:	4613      	mov	r3, r2
 80054e4:	eb42 0303 	adc.w	r3, r2, r3
 80054e8:	647b      	str	r3, [r7, #68]	; 0x44
 80054ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054f2:	f7fa fe69 	bl	80001c8 <__aeabi_uldivmod>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4611      	mov	r1, r2
 80054fc:	4b3b      	ldr	r3, [pc, #236]	; (80055ec <UART_SetConfig+0x2d4>)
 80054fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005502:	095b      	lsrs	r3, r3, #5
 8005504:	2264      	movs	r2, #100	; 0x64
 8005506:	fb02 f303 	mul.w	r3, r2, r3
 800550a:	1acb      	subs	r3, r1, r3
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005512:	4b36      	ldr	r3, [pc, #216]	; (80055ec <UART_SetConfig+0x2d4>)
 8005514:	fba3 2302 	umull	r2, r3, r3, r2
 8005518:	095b      	lsrs	r3, r3, #5
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005520:	441c      	add	r4, r3
 8005522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005526:	2200      	movs	r2, #0
 8005528:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800552c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005530:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005534:	4642      	mov	r2, r8
 8005536:	464b      	mov	r3, r9
 8005538:	1891      	adds	r1, r2, r2
 800553a:	63b9      	str	r1, [r7, #56]	; 0x38
 800553c:	415b      	adcs	r3, r3
 800553e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005540:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005544:	4641      	mov	r1, r8
 8005546:	1851      	adds	r1, r2, r1
 8005548:	6339      	str	r1, [r7, #48]	; 0x30
 800554a:	4649      	mov	r1, r9
 800554c:	414b      	adcs	r3, r1
 800554e:	637b      	str	r3, [r7, #52]	; 0x34
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800555c:	4659      	mov	r1, fp
 800555e:	00cb      	lsls	r3, r1, #3
 8005560:	4651      	mov	r1, sl
 8005562:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005566:	4651      	mov	r1, sl
 8005568:	00ca      	lsls	r2, r1, #3
 800556a:	4610      	mov	r0, r2
 800556c:	4619      	mov	r1, r3
 800556e:	4603      	mov	r3, r0
 8005570:	4642      	mov	r2, r8
 8005572:	189b      	adds	r3, r3, r2
 8005574:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005578:	464b      	mov	r3, r9
 800557a:	460a      	mov	r2, r1
 800557c:	eb42 0303 	adc.w	r3, r2, r3
 8005580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005590:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005594:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005598:	460b      	mov	r3, r1
 800559a:	18db      	adds	r3, r3, r3
 800559c:	62bb      	str	r3, [r7, #40]	; 0x28
 800559e:	4613      	mov	r3, r2
 80055a0:	eb42 0303 	adc.w	r3, r2, r3
 80055a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055ae:	f7fa fe0b 	bl	80001c8 <__aeabi_uldivmod>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4b0d      	ldr	r3, [pc, #52]	; (80055ec <UART_SetConfig+0x2d4>)
 80055b8:	fba3 1302 	umull	r1, r3, r3, r2
 80055bc:	095b      	lsrs	r3, r3, #5
 80055be:	2164      	movs	r1, #100	; 0x64
 80055c0:	fb01 f303 	mul.w	r3, r1, r3
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	3332      	adds	r3, #50	; 0x32
 80055ca:	4a08      	ldr	r2, [pc, #32]	; (80055ec <UART_SetConfig+0x2d4>)
 80055cc:	fba2 2303 	umull	r2, r3, r2, r3
 80055d0:	095b      	lsrs	r3, r3, #5
 80055d2:	f003 0207 	and.w	r2, r3, #7
 80055d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4422      	add	r2, r4
 80055de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055e0:	e105      	b.n	80057ee <UART_SetConfig+0x4d6>
 80055e2:	bf00      	nop
 80055e4:	40011000 	.word	0x40011000
 80055e8:	40011400 	.word	0x40011400
 80055ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055f4:	2200      	movs	r2, #0
 80055f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005602:	4642      	mov	r2, r8
 8005604:	464b      	mov	r3, r9
 8005606:	1891      	adds	r1, r2, r2
 8005608:	6239      	str	r1, [r7, #32]
 800560a:	415b      	adcs	r3, r3
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
 800560e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005612:	4641      	mov	r1, r8
 8005614:	1854      	adds	r4, r2, r1
 8005616:	4649      	mov	r1, r9
 8005618:	eb43 0501 	adc.w	r5, r3, r1
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	00eb      	lsls	r3, r5, #3
 8005626:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800562a:	00e2      	lsls	r2, r4, #3
 800562c:	4614      	mov	r4, r2
 800562e:	461d      	mov	r5, r3
 8005630:	4643      	mov	r3, r8
 8005632:	18e3      	adds	r3, r4, r3
 8005634:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005638:	464b      	mov	r3, r9
 800563a:	eb45 0303 	adc.w	r3, r5, r3
 800563e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800564e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	f04f 0300 	mov.w	r3, #0
 800565a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800565e:	4629      	mov	r1, r5
 8005660:	008b      	lsls	r3, r1, #2
 8005662:	4621      	mov	r1, r4
 8005664:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005668:	4621      	mov	r1, r4
 800566a:	008a      	lsls	r2, r1, #2
 800566c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005670:	f7fa fdaa 	bl	80001c8 <__aeabi_uldivmod>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4b60      	ldr	r3, [pc, #384]	; (80057fc <UART_SetConfig+0x4e4>)
 800567a:	fba3 2302 	umull	r2, r3, r3, r2
 800567e:	095b      	lsrs	r3, r3, #5
 8005680:	011c      	lsls	r4, r3, #4
 8005682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005686:	2200      	movs	r2, #0
 8005688:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800568c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005690:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005694:	4642      	mov	r2, r8
 8005696:	464b      	mov	r3, r9
 8005698:	1891      	adds	r1, r2, r2
 800569a:	61b9      	str	r1, [r7, #24]
 800569c:	415b      	adcs	r3, r3
 800569e:	61fb      	str	r3, [r7, #28]
 80056a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056a4:	4641      	mov	r1, r8
 80056a6:	1851      	adds	r1, r2, r1
 80056a8:	6139      	str	r1, [r7, #16]
 80056aa:	4649      	mov	r1, r9
 80056ac:	414b      	adcs	r3, r1
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056bc:	4659      	mov	r1, fp
 80056be:	00cb      	lsls	r3, r1, #3
 80056c0:	4651      	mov	r1, sl
 80056c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056c6:	4651      	mov	r1, sl
 80056c8:	00ca      	lsls	r2, r1, #3
 80056ca:	4610      	mov	r0, r2
 80056cc:	4619      	mov	r1, r3
 80056ce:	4603      	mov	r3, r0
 80056d0:	4642      	mov	r2, r8
 80056d2:	189b      	adds	r3, r3, r2
 80056d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056d8:	464b      	mov	r3, r9
 80056da:	460a      	mov	r2, r1
 80056dc:	eb42 0303 	adc.w	r3, r2, r3
 80056e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80056ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	f04f 0300 	mov.w	r3, #0
 80056f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80056fc:	4649      	mov	r1, r9
 80056fe:	008b      	lsls	r3, r1, #2
 8005700:	4641      	mov	r1, r8
 8005702:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005706:	4641      	mov	r1, r8
 8005708:	008a      	lsls	r2, r1, #2
 800570a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800570e:	f7fa fd5b 	bl	80001c8 <__aeabi_uldivmod>
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	4b39      	ldr	r3, [pc, #228]	; (80057fc <UART_SetConfig+0x4e4>)
 8005718:	fba3 1302 	umull	r1, r3, r3, r2
 800571c:	095b      	lsrs	r3, r3, #5
 800571e:	2164      	movs	r1, #100	; 0x64
 8005720:	fb01 f303 	mul.w	r3, r1, r3
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	3332      	adds	r3, #50	; 0x32
 800572a:	4a34      	ldr	r2, [pc, #208]	; (80057fc <UART_SetConfig+0x4e4>)
 800572c:	fba2 2303 	umull	r2, r3, r2, r3
 8005730:	095b      	lsrs	r3, r3, #5
 8005732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005736:	441c      	add	r4, r3
 8005738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800573c:	2200      	movs	r2, #0
 800573e:	673b      	str	r3, [r7, #112]	; 0x70
 8005740:	677a      	str	r2, [r7, #116]	; 0x74
 8005742:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005746:	4642      	mov	r2, r8
 8005748:	464b      	mov	r3, r9
 800574a:	1891      	adds	r1, r2, r2
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	415b      	adcs	r3, r3
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005756:	4641      	mov	r1, r8
 8005758:	1851      	adds	r1, r2, r1
 800575a:	6039      	str	r1, [r7, #0]
 800575c:	4649      	mov	r1, r9
 800575e:	414b      	adcs	r3, r1
 8005760:	607b      	str	r3, [r7, #4]
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	f04f 0300 	mov.w	r3, #0
 800576a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800576e:	4659      	mov	r1, fp
 8005770:	00cb      	lsls	r3, r1, #3
 8005772:	4651      	mov	r1, sl
 8005774:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005778:	4651      	mov	r1, sl
 800577a:	00ca      	lsls	r2, r1, #3
 800577c:	4610      	mov	r0, r2
 800577e:	4619      	mov	r1, r3
 8005780:	4603      	mov	r3, r0
 8005782:	4642      	mov	r2, r8
 8005784:	189b      	adds	r3, r3, r2
 8005786:	66bb      	str	r3, [r7, #104]	; 0x68
 8005788:	464b      	mov	r3, r9
 800578a:	460a      	mov	r2, r1
 800578c:	eb42 0303 	adc.w	r3, r2, r3
 8005790:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	663b      	str	r3, [r7, #96]	; 0x60
 800579c:	667a      	str	r2, [r7, #100]	; 0x64
 800579e:	f04f 0200 	mov.w	r2, #0
 80057a2:	f04f 0300 	mov.w	r3, #0
 80057a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057aa:	4649      	mov	r1, r9
 80057ac:	008b      	lsls	r3, r1, #2
 80057ae:	4641      	mov	r1, r8
 80057b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057b4:	4641      	mov	r1, r8
 80057b6:	008a      	lsls	r2, r1, #2
 80057b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057bc:	f7fa fd04 	bl	80001c8 <__aeabi_uldivmod>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4b0d      	ldr	r3, [pc, #52]	; (80057fc <UART_SetConfig+0x4e4>)
 80057c6:	fba3 1302 	umull	r1, r3, r3, r2
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	2164      	movs	r1, #100	; 0x64
 80057ce:	fb01 f303 	mul.w	r3, r1, r3
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	3332      	adds	r3, #50	; 0x32
 80057d8:	4a08      	ldr	r2, [pc, #32]	; (80057fc <UART_SetConfig+0x4e4>)
 80057da:	fba2 2303 	umull	r2, r3, r2, r3
 80057de:	095b      	lsrs	r3, r3, #5
 80057e0:	f003 020f 	and.w	r2, r3, #15
 80057e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4422      	add	r2, r4
 80057ec:	609a      	str	r2, [r3, #8]
}
 80057ee:	bf00      	nop
 80057f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80057f4:	46bd      	mov	sp, r7
 80057f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057fa:	bf00      	nop
 80057fc:	51eb851f 	.word	0x51eb851f

08005800 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005800:	b084      	sub	sp, #16
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	f107 001c 	add.w	r0, r7, #28
 800580e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	2b01      	cmp	r3, #1
 8005816:	d122      	bne.n	800585e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800582c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005842:	2b01      	cmp	r3, #1
 8005844:	d105      	bne.n	8005852 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f9c0 	bl	8005bd8 <USB_CoreReset>
 8005858:	4603      	mov	r3, r0
 800585a:	73fb      	strb	r3, [r7, #15]
 800585c:	e01a      	b.n	8005894 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f9b4 	bl	8005bd8 <USB_CoreReset>
 8005870:	4603      	mov	r3, r0
 8005872:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	639a      	str	r2, [r3, #56]	; 0x38
 8005886:	e005      	b.n	8005894 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005896:	2b01      	cmp	r3, #1
 8005898:	d10b      	bne.n	80058b2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f043 0206 	orr.w	r2, r3, #6
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f043 0220 	orr.w	r2, r3, #32
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058be:	b004      	add	sp, #16
 80058c0:	4770      	bx	lr

080058c2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f043 0201 	orr.w	r2, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f023 0201 	bic.w	r2, r3, #1
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	460b      	mov	r3, r1
 8005910:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005922:	78fb      	ldrb	r3, [r7, #3]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d115      	bne.n	8005954 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005934:	2001      	movs	r0, #1
 8005936:	f7fb fb1f 	bl	8000f78 <HAL_Delay>
      ms++;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3301      	adds	r3, #1
 800593e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f93a 	bl	8005bba <USB_GetMode>
 8005946:	4603      	mov	r3, r0
 8005948:	2b01      	cmp	r3, #1
 800594a:	d01e      	beq.n	800598a <USB_SetCurrentMode+0x84>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b31      	cmp	r3, #49	; 0x31
 8005950:	d9f0      	bls.n	8005934 <USB_SetCurrentMode+0x2e>
 8005952:	e01a      	b.n	800598a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005954:	78fb      	ldrb	r3, [r7, #3]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d115      	bne.n	8005986 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005966:	2001      	movs	r0, #1
 8005968:	f7fb fb06 	bl	8000f78 <HAL_Delay>
      ms++;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	3301      	adds	r3, #1
 8005970:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f921 	bl	8005bba <USB_GetMode>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <USB_SetCurrentMode+0x84>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b31      	cmp	r3, #49	; 0x31
 8005982:	d9f0      	bls.n	8005966 <USB_SetCurrentMode+0x60>
 8005984:	e001      	b.n	800598a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e005      	b.n	8005996 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b32      	cmp	r3, #50	; 0x32
 800598e:	d101      	bne.n	8005994 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e000      	b.n	8005996 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	3301      	adds	r3, #1
 80059b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4a13      	ldr	r2, [pc, #76]	; (8005a04 <USB_FlushTxFifo+0x64>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d901      	bls.n	80059c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e01b      	b.n	80059f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	daf2      	bge.n	80059ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	019b      	lsls	r3, r3, #6
 80059d0:	f043 0220 	orr.w	r2, r3, #32
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	3301      	adds	r3, #1
 80059dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4a08      	ldr	r2, [pc, #32]	; (8005a04 <USB_FlushTxFifo+0x64>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d901      	bls.n	80059ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e006      	b.n	80059f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0320 	and.w	r3, r3, #32
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	d0f0      	beq.n	80059d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	00030d40 	.word	0x00030d40

08005a08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	3301      	adds	r3, #1
 8005a18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4a11      	ldr	r2, [pc, #68]	; (8005a64 <USB_FlushRxFifo+0x5c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d901      	bls.n	8005a26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e018      	b.n	8005a58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	daf2      	bge.n	8005a14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2210      	movs	r2, #16
 8005a36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4a08      	ldr	r2, [pc, #32]	; (8005a64 <USB_FlushRxFifo+0x5c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d901      	bls.n	8005a4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e006      	b.n	8005a58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0310 	and.w	r3, r3, #16
 8005a52:	2b10      	cmp	r3, #16
 8005a54:	d0f0      	beq.n	8005a38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	00030d40 	.word	0x00030d40

08005a68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b089      	sub	sp, #36	; 0x24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	4611      	mov	r1, r2
 8005a74:	461a      	mov	r2, r3
 8005a76:	460b      	mov	r3, r1
 8005a78:	71fb      	strb	r3, [r7, #7]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d123      	bne.n	8005ad6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a8e:	88bb      	ldrh	r3, [r7, #4]
 8005a90:	3303      	adds	r3, #3
 8005a92:	089b      	lsrs	r3, r3, #2
 8005a94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a96:	2300      	movs	r3, #0
 8005a98:	61bb      	str	r3, [r7, #24]
 8005a9a:	e018      	b.n	8005ace <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a9c:	79fb      	ldrb	r3, [r7, #7]
 8005a9e:	031a      	lsls	r2, r3, #12
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	3301      	adds	r3, #1
 8005acc:	61bb      	str	r3, [r7, #24]
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d3e2      	bcc.n	8005a9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3724      	adds	r7, #36	; 0x24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b08b      	sub	sp, #44	; 0x2c
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	4613      	mov	r3, r2
 8005af0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	089b      	lsrs	r3, r3, #2
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b02:	88fb      	ldrh	r3, [r7, #6]
 8005b04:	f003 0303 	and.w	r3, r3, #3
 8005b08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	623b      	str	r3, [r7, #32]
 8005b0e:	e014      	b.n	8005b3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	3301      	adds	r3, #1
 8005b20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	3301      	adds	r3, #1
 8005b26:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	3301      	adds	r3, #1
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	3301      	adds	r3, #1
 8005b38:	623b      	str	r3, [r7, #32]
 8005b3a:	6a3a      	ldr	r2, [r7, #32]
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d3e6      	bcc.n	8005b10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b42:	8bfb      	ldrh	r3, [r7, #30]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01e      	beq.n	8005b86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b52:	461a      	mov	r2, r3
 8005b54:	f107 0310 	add.w	r3, r7, #16
 8005b58:	6812      	ldr	r2, [r2, #0]
 8005b5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	fa22 f303 	lsr.w	r3, r2, r3
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	701a      	strb	r2, [r3, #0]
      i++;
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	3301      	adds	r3, #1
 8005b72:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	3301      	adds	r3, #1
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b7a:	8bfb      	ldrh	r3, [r7, #30]
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b80:	8bfb      	ldrh	r3, [r7, #30]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1ea      	bne.n	8005b5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	372c      	adds	r7, #44	; 0x2c
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005bac:	68fb      	ldr	r3, [r7, #12]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
	...

08005bd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3301      	adds	r3, #1
 8005be8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4a13      	ldr	r2, [pc, #76]	; (8005c3c <USB_CoreReset+0x64>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d901      	bls.n	8005bf6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e01b      	b.n	8005c2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	daf2      	bge.n	8005be4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f043 0201 	orr.w	r2, r3, #1
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3301      	adds	r3, #1
 8005c12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4a09      	ldr	r2, [pc, #36]	; (8005c3c <USB_CoreReset+0x64>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d901      	bls.n	8005c20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e006      	b.n	8005c2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d0f0      	beq.n	8005c0e <USB_CoreReset+0x36>

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	00030d40 	.word	0x00030d40

08005c40 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c40:	b084      	sub	sp, #16
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b086      	sub	sp, #24
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c60:	461a      	mov	r2, r3
 8005c62:	2300      	movs	r3, #0
 8005c64:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c76:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c82:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d018      	beq.n	8005cc8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d10a      	bne.n	8005cb2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005caa:	f043 0304 	orr.w	r3, r3, #4
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	e014      	b.n	8005cdc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cc0:	f023 0304 	bic.w	r3, r3, #4
 8005cc4:	6013      	str	r3, [r2, #0]
 8005cc6:	e009      	b.n	8005cdc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cd6:	f023 0304 	bic.w	r3, r3, #4
 8005cda:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cdc:	2110      	movs	r1, #16
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7ff fe5e 	bl	80059a0 <USB_FlushTxFifo>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7ff fe8a 	bl	8005a08 <USB_FlushRxFifo>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005cfe:	2300      	movs	r3, #0
 8005d00:	613b      	str	r3, [r7, #16]
 8005d02:	e015      	b.n	8005d30 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d10:	461a      	mov	r2, r3
 8005d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d16:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d24:	461a      	mov	r2, r3
 8005d26:	2300      	movs	r3, #0
 8005d28:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	613b      	str	r3, [r7, #16]
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d3e5      	bcc.n	8005d04 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d44:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00b      	beq.n	8005d6a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d58:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a13      	ldr	r2, [pc, #76]	; (8005dac <USB_HostInit+0x16c>)
 8005d5e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a13      	ldr	r2, [pc, #76]	; (8005db0 <USB_HostInit+0x170>)
 8005d64:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005d68:	e009      	b.n	8005d7e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2280      	movs	r2, #128	; 0x80
 8005d6e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a10      	ldr	r2, [pc, #64]	; (8005db4 <USB_HostInit+0x174>)
 8005d74:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a0f      	ldr	r2, [pc, #60]	; (8005db8 <USB_HostInit+0x178>)
 8005d7a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d105      	bne.n	8005d90 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	f043 0210 	orr.w	r2, r3, #16
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	699a      	ldr	r2, [r3, #24]
 8005d94:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <USB_HostInit+0x17c>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005da8:	b004      	add	sp, #16
 8005daa:	4770      	bx	lr
 8005dac:	01000200 	.word	0x01000200
 8005db0:	00e00300 	.word	0x00e00300
 8005db4:	00600080 	.word	0x00600080
 8005db8:	004000e0 	.word	0x004000e0
 8005dbc:	a3200008 	.word	0xa3200008

08005dc0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005dde:	f023 0303 	bic.w	r3, r3, #3
 8005de2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	78fb      	ldrb	r3, [r7, #3]
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	68f9      	ldr	r1, [r7, #12]
 8005df4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005dfc:	78fb      	ldrb	r3, [r7, #3]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d107      	bne.n	8005e12 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e0e:	6053      	str	r3, [r2, #4]
 8005e10:	e009      	b.n	8005e26 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005e12:	78fb      	ldrb	r3, [r7, #3]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d106      	bne.n	8005e26 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f241 7370 	movw	r3, #6000	; 0x1770
 8005e24:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e54:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e62:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005e64:	2064      	movs	r0, #100	; 0x64
 8005e66:	f7fb f887 	bl	8000f78 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e76:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005e78:	200a      	movs	r0, #10
 8005e7a:	f7fb f87d 	bl	8000f78 <HAL_Delay>

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005eac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d109      	bne.n	8005ecc <USB_DriveVbus+0x44>
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d106      	bne.n	8005ecc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ec6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005eca:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed6:	d109      	bne.n	8005eec <USB_DriveVbus+0x64>
 8005ed8:	78fb      	ldrb	r3, [r7, #3]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ee6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eea:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b085      	sub	sp, #20
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	0c5b      	lsrs	r3, r3, #17
 8005f18:	f003 0303 	and.w	r3, r3, #3
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	b29b      	uxth	r3, r3
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
	...

08005f4c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b088      	sub	sp, #32
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	4608      	mov	r0, r1
 8005f56:	4611      	mov	r1, r2
 8005f58:	461a      	mov	r2, r3
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	70fb      	strb	r3, [r7, #3]
 8005f5e:	460b      	mov	r3, r1
 8005f60:	70bb      	strb	r3, [r7, #2]
 8005f62:	4613      	mov	r3, r2
 8005f64:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005f6e:	78fb      	ldrb	r3, [r7, #3]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f80:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005f82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d87e      	bhi.n	8006088 <USB_HC_Init+0x13c>
 8005f8a:	a201      	add	r2, pc, #4	; (adr r2, 8005f90 <USB_HC_Init+0x44>)
 8005f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f90:	08005fa1 	.word	0x08005fa1
 8005f94:	0800604b 	.word	0x0800604b
 8005f98:	08005fa1 	.word	0x08005fa1
 8005f9c:	0800600d 	.word	0x0800600d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fac:	461a      	mov	r2, r3
 8005fae:	f240 439d 	movw	r3, #1181	; 0x49d
 8005fb2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005fb4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	da10      	bge.n	8005fde <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005fbc:	78fb      	ldrb	r3, [r7, #3]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	78fa      	ldrb	r2, [r7, #3]
 8005fcc:	0151      	lsls	r1, r2, #5
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	440a      	add	r2, r1
 8005fd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fda:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005fdc:	e057      	b.n	800608e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d051      	beq.n	800608e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005fea:	78fb      	ldrb	r3, [r7, #3]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	78fa      	ldrb	r2, [r7, #3]
 8005ffa:	0151      	lsls	r1, r2, #5
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	440a      	add	r2, r1
 8006000:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006004:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006008:	60d3      	str	r3, [r2, #12]
      break;
 800600a:	e040      	b.n	800608e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800600c:	78fb      	ldrb	r3, [r7, #3]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	4413      	add	r3, r2
 8006014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006018:	461a      	mov	r2, r3
 800601a:	f240 639d 	movw	r3, #1693	; 0x69d
 800601e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006020:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006024:	2b00      	cmp	r3, #0
 8006026:	da34      	bge.n	8006092 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006028:	78fb      	ldrb	r3, [r7, #3]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	4413      	add	r3, r2
 8006030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	78fa      	ldrb	r2, [r7, #3]
 8006038:	0151      	lsls	r1, r2, #5
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	440a      	add	r2, r1
 800603e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006046:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006048:	e023      	b.n	8006092 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800604a:	78fb      	ldrb	r3, [r7, #3]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	4413      	add	r3, r2
 8006052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006056:	461a      	mov	r2, r3
 8006058:	f240 2325 	movw	r3, #549	; 0x225
 800605c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800605e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006062:	2b00      	cmp	r3, #0
 8006064:	da17      	bge.n	8006096 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006066:	78fb      	ldrb	r3, [r7, #3]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	4413      	add	r3, r2
 800606e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	78fa      	ldrb	r2, [r7, #3]
 8006076:	0151      	lsls	r1, r2, #5
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	440a      	add	r2, r1
 800607c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006080:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006084:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006086:	e006      	b.n	8006096 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	77fb      	strb	r3, [r7, #31]
      break;
 800608c:	e004      	b.n	8006098 <USB_HC_Init+0x14c>
      break;
 800608e:	bf00      	nop
 8006090:	e002      	b.n	8006098 <USB_HC_Init+0x14c>
      break;
 8006092:	bf00      	nop
 8006094:	e000      	b.n	8006098 <USB_HC_Init+0x14c>
      break;
 8006096:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	78fa      	ldrb	r2, [r7, #3]
 80060a8:	0151      	lsls	r1, r2, #5
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	440a      	add	r2, r1
 80060ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060b2:	f043 0302 	orr.w	r3, r3, #2
 80060b6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060be:	699a      	ldr	r2, [r3, #24]
 80060c0:	78fb      	ldrb	r3, [r7, #3]
 80060c2:	f003 030f 	and.w	r3, r3, #15
 80060c6:	2101      	movs	r1, #1
 80060c8:	fa01 f303 	lsl.w	r3, r1, r3
 80060cc:	6939      	ldr	r1, [r7, #16]
 80060ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80060d2:	4313      	orrs	r3, r2
 80060d4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80060e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	da03      	bge.n	80060f2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80060ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ee:	61bb      	str	r3, [r7, #24]
 80060f0:	e001      	b.n	80060f6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7ff feff 	bl	8005efa <USB_GetHostSpeed>
 80060fc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80060fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006102:	2b02      	cmp	r3, #2
 8006104:	d106      	bne.n	8006114 <USB_HC_Init+0x1c8>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b02      	cmp	r3, #2
 800610a:	d003      	beq.n	8006114 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800610c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006110:	617b      	str	r3, [r7, #20]
 8006112:	e001      	b.n	8006118 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006118:	787b      	ldrb	r3, [r7, #1]
 800611a:	059b      	lsls	r3, r3, #22
 800611c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006120:	78bb      	ldrb	r3, [r7, #2]
 8006122:	02db      	lsls	r3, r3, #11
 8006124:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006128:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800612a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800612e:	049b      	lsls	r3, r3, #18
 8006130:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006134:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006136:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006138:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800613c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006142:	78fb      	ldrb	r3, [r7, #3]
 8006144:	0159      	lsls	r1, r3, #5
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	440b      	add	r3, r1
 800614a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006154:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006156:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800615a:	2b03      	cmp	r3, #3
 800615c:	d003      	beq.n	8006166 <USB_HC_Init+0x21a>
 800615e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006162:	2b01      	cmp	r3, #1
 8006164:	d10f      	bne.n	8006186 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006166:	78fb      	ldrb	r3, [r7, #3]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	4413      	add	r3, r2
 800616e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	78fa      	ldrb	r2, [r7, #3]
 8006176:	0151      	lsls	r1, r2, #5
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	440a      	add	r2, r1
 800617c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006180:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006184:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006186:	7ffb      	ldrb	r3, [r7, #31]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3720      	adds	r7, #32
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08c      	sub	sp, #48	; 0x30
 8006194:	af02      	add	r7, sp, #8
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	4613      	mov	r3, r2
 800619c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	785b      	ldrb	r3, [r3, #1]
 80061a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80061a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061ac:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d02d      	beq.n	8006216 <USB_HC_StartXfer+0x86>
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	791b      	ldrb	r3, [r3, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d129      	bne.n	8006216 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80061c2:	79fb      	ldrb	r3, [r7, #7]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d117      	bne.n	80061f8 <USB_HC_StartXfer+0x68>
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	79db      	ldrb	r3, [r3, #7]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d003      	beq.n	80061d8 <USB_HC_StartXfer+0x48>
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	79db      	ldrb	r3, [r3, #7]
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d10f      	bne.n	80061f8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	69fa      	ldr	r2, [r7, #28]
 80061e8:	0151      	lsls	r1, r2, #5
 80061ea:	6a3a      	ldr	r2, [r7, #32]
 80061ec:	440a      	add	r2, r1
 80061ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80061f8:	79fb      	ldrb	r3, [r7, #7]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10b      	bne.n	8006216 <USB_HC_StartXfer+0x86>
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	795b      	ldrb	r3, [r3, #5]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d107      	bne.n	8006216 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	785b      	ldrb	r3, [r3, #1]
 800620a:	4619      	mov	r1, r3
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 fa0f 	bl	8006630 <USB_DoPing>
      return HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	e0f8      	b.n	8006408 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d018      	beq.n	8006250 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	8912      	ldrh	r2, [r2, #8]
 8006226:	4413      	add	r3, r2
 8006228:	3b01      	subs	r3, #1
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	8912      	ldrh	r2, [r2, #8]
 800622e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006232:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006234:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006236:	8b7b      	ldrh	r3, [r7, #26]
 8006238:	429a      	cmp	r2, r3
 800623a:	d90b      	bls.n	8006254 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800623c:	8b7b      	ldrh	r3, [r7, #26]
 800623e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006240:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	8912      	ldrh	r2, [r2, #8]
 8006246:	fb03 f202 	mul.w	r2, r3, r2
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	611a      	str	r2, [r3, #16]
 800624e:	e001      	b.n	8006254 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006250:	2301      	movs	r3, #1
 8006252:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	78db      	ldrb	r3, [r3, #3]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d007      	beq.n	800626c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800625c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	8912      	ldrh	r2, [r2, #8]
 8006262:	fb03 f202 	mul.w	r2, r3, r2
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	611a      	str	r2, [r3, #16]
 800626a:	e003      	b.n	8006274 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	695a      	ldr	r2, [r3, #20]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800627c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800627e:	04d9      	lsls	r1, r3, #19
 8006280:	4b63      	ldr	r3, [pc, #396]	; (8006410 <USB_HC_StartXfer+0x280>)
 8006282:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006284:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	7a9b      	ldrb	r3, [r3, #10]
 800628a:	075b      	lsls	r3, r3, #29
 800628c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006290:	69f9      	ldr	r1, [r7, #28]
 8006292:	0148      	lsls	r0, r1, #5
 8006294:	6a39      	ldr	r1, [r7, #32]
 8006296:	4401      	add	r1, r0
 8006298:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800629c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800629e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d009      	beq.n	80062ba <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	68d9      	ldr	r1, [r3, #12]
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b6:	460a      	mov	r2, r1
 80062b8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	bf0c      	ite	eq
 80062ca:	2301      	moveq	r3, #1
 80062cc:	2300      	movne	r3, #0
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	69fa      	ldr	r2, [r7, #28]
 80062e2:	0151      	lsls	r1, r2, #5
 80062e4:	6a3a      	ldr	r2, [r7, #32]
 80062e6:	440a      	add	r2, r1
 80062e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80062f0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	7e7b      	ldrb	r3, [r7, #25]
 8006302:	075b      	lsls	r3, r3, #29
 8006304:	69f9      	ldr	r1, [r7, #28]
 8006306:	0148      	lsls	r0, r1, #5
 8006308:	6a39      	ldr	r1, [r7, #32]
 800630a:	4401      	add	r1, r0
 800630c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006310:	4313      	orrs	r3, r2
 8006312:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	4413      	add	r3, r2
 800631c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800632a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	78db      	ldrb	r3, [r3, #3]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d004      	beq.n	800633e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800633a:	613b      	str	r3, [r7, #16]
 800633c:	e003      	b.n	8006346 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006344:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800634c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	4413      	add	r3, r2
 8006356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635a:	461a      	mov	r2, r3
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006360:	79fb      	ldrb	r3, [r7, #7]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	e04e      	b.n	8006408 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	78db      	ldrb	r3, [r3, #3]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d149      	bne.n	8006406 <USB_HC_StartXfer+0x276>
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d045      	beq.n	8006406 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	79db      	ldrb	r3, [r3, #7]
 800637e:	2b03      	cmp	r3, #3
 8006380:	d830      	bhi.n	80063e4 <USB_HC_StartXfer+0x254>
 8006382:	a201      	add	r2, pc, #4	; (adr r2, 8006388 <USB_HC_StartXfer+0x1f8>)
 8006384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006388:	08006399 	.word	0x08006399
 800638c:	080063bd 	.word	0x080063bd
 8006390:	08006399 	.word	0x08006399
 8006394:	080063bd 	.word	0x080063bd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	3303      	adds	r3, #3
 800639e:	089b      	lsrs	r3, r3, #2
 80063a0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80063a2:	8afa      	ldrh	r2, [r7, #22]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d91c      	bls.n	80063e8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	f043 0220 	orr.w	r2, r3, #32
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	619a      	str	r2, [r3, #24]
        }
        break;
 80063ba:	e015      	b.n	80063e8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	3303      	adds	r3, #3
 80063c2:	089b      	lsrs	r3, r3, #2
 80063c4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80063c6:	8afa      	ldrh	r2, [r7, #22]
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d90a      	bls.n	80063ec <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80063e2:	e003      	b.n	80063ec <USB_HC_StartXfer+0x25c>

      default:
        break;
 80063e4:	bf00      	nop
 80063e6:	e002      	b.n	80063ee <USB_HC_StartXfer+0x25e>
        break;
 80063e8:	bf00      	nop
 80063ea:	e000      	b.n	80063ee <USB_HC_StartXfer+0x25e>
        break;
 80063ec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	68d9      	ldr	r1, [r3, #12]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	785a      	ldrb	r2, [r3, #1]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	2000      	movs	r0, #0
 80063fe:	9000      	str	r0, [sp, #0]
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f7ff fb31 	bl	8005a68 <USB_WritePacket>
  }

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3728      	adds	r7, #40	; 0x28
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	1ff80000 	.word	0x1ff80000

08006414 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	b29b      	uxth	r3, r3
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006436:	b480      	push	{r7}
 8006438:	b089      	sub	sp, #36	; 0x24
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	460b      	mov	r3, r1
 8006440:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006446:	78fb      	ldrb	r3, [r7, #3]
 8006448:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	4413      	add	r3, r2
 8006456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	0c9b      	lsrs	r3, r3, #18
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	4413      	add	r3, r2
 800646c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	0fdb      	lsrs	r3, r3, #31
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 0320 	and.w	r3, r3, #32
 8006482:	2b20      	cmp	r3, #32
 8006484:	d104      	bne.n	8006490 <USB_HC_Halt+0x5a>
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	e0c8      	b.n	8006622 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <USB_HC_Halt+0x66>
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2b02      	cmp	r3, #2
 800649a:	d163      	bne.n	8006564 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	0151      	lsls	r1, r2, #5
 80064ae:	69fa      	ldr	r2, [r7, #28]
 80064b0:	440a      	add	r2, r1
 80064b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ba:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 0320 	and.w	r3, r3, #32
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f040 80ab 	bne.w	8006620 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d133      	bne.n	800653e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	0151      	lsls	r1, r2, #5
 80064e8:	69fa      	ldr	r2, [r7, #28]
 80064ea:	440a      	add	r2, r1
 80064ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064f4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	0151      	lsls	r1, r2, #5
 8006508:	69fa      	ldr	r2, [r7, #28]
 800650a:	440a      	add	r2, r1
 800650c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006510:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006514:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	3301      	adds	r3, #1
 800651a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006522:	d81d      	bhi.n	8006560 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	4413      	add	r3, r2
 800652c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800653a:	d0ec      	beq.n	8006516 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800653c:	e070      	b.n	8006620 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	4413      	add	r3, r2
 8006546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	0151      	lsls	r1, r2, #5
 8006550:	69fa      	ldr	r2, [r7, #28]
 8006552:	440a      	add	r2, r1
 8006554:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006558:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800655c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800655e:	e05f      	b.n	8006620 <USB_HC_Halt+0x1ea>
            break;
 8006560:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006562:	e05d      	b.n	8006620 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	4413      	add	r3, r2
 800656c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	0151      	lsls	r1, r2, #5
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	440a      	add	r2, r1
 800657a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800657e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006582:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d133      	bne.n	80065fc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	4413      	add	r3, r2
 800659c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	69fa      	ldr	r2, [r7, #28]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	0151      	lsls	r1, r2, #5
 80065c6:	69fa      	ldr	r2, [r7, #28]
 80065c8:	440a      	add	r2, r1
 80065ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065d2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3301      	adds	r3, #1
 80065d8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065e0:	d81d      	bhi.n	800661e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065f8:	d0ec      	beq.n	80065d4 <USB_HC_Halt+0x19e>
 80065fa:	e011      	b.n	8006620 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	4413      	add	r3, r2
 8006604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	0151      	lsls	r1, r2, #5
 800660e:	69fa      	ldr	r2, [r7, #28]
 8006610:	440a      	add	r2, r1
 8006612:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006616:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	e000      	b.n	8006620 <USB_HC_Halt+0x1ea>
          break;
 800661e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3724      	adds	r7, #36	; 0x24
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
	...

08006630 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006644:	2301      	movs	r3, #1
 8006646:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	04da      	lsls	r2, r3, #19
 800664c:	4b15      	ldr	r3, [pc, #84]	; (80066a4 <USB_DoPing+0x74>)
 800664e:	4013      	ands	r3, r2
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	0151      	lsls	r1, r2, #5
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	440a      	add	r2, r1
 8006658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800665c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006660:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	4413      	add	r3, r2
 800666a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006678:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006680:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	4413      	add	r3, r2
 800668a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668e:	461a      	mov	r2, r3
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	1ff80000 	.word	0x1ff80000

080066a8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff f911 	bl	80058e4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066c2:	2110      	movs	r1, #16
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff f96b 	bl	80059a0 <USB_FlushTxFifo>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7ff f997 	bl	8005a08 <USB_FlushRxFifo>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80066e4:	2300      	movs	r3, #0
 80066e6:	61bb      	str	r3, [r7, #24]
 80066e8:	e01f      	b.n	800672a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006700:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006708:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006710:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	4413      	add	r3, r2
 800671a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671e:	461a      	mov	r2, r3
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	3301      	adds	r3, #1
 8006728:	61bb      	str	r3, [r7, #24]
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	2b0f      	cmp	r3, #15
 800672e:	d9dc      	bls.n	80066ea <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006730:	2300      	movs	r3, #0
 8006732:	61bb      	str	r3, [r7, #24]
 8006734:	e034      	b.n	80067a0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	4413      	add	r3, r2
 800673e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800674c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006754:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800675c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	4413      	add	r3, r2
 8006766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676a:	461a      	mov	r2, r3
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3301      	adds	r3, #1
 8006774:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800677c:	d80c      	bhi.n	8006798 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	4413      	add	r3, r2
 8006786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006794:	d0ec      	beq.n	8006770 <USB_StopHost+0xc8>
 8006796:	e000      	b.n	800679a <USB_StopHost+0xf2>
        break;
 8006798:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	3301      	adds	r3, #1
 800679e:	61bb      	str	r3, [r7, #24]
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	2b0f      	cmp	r3, #15
 80067a4:	d9c7      	bls.n	8006736 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ac:	461a      	mov	r2, r3
 80067ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067b2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067ba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff f880 	bl	80058c2 <USB_EnableGlobalInt>

  return ret;
 80067c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3720      	adds	r7, #32
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80067cc:	b590      	push	{r4, r7, lr}
 80067ce:	b089      	sub	sp, #36	; 0x24
 80067d0:	af04      	add	r7, sp, #16
 80067d2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80067d4:	2301      	movs	r3, #1
 80067d6:	2202      	movs	r2, #2
 80067d8:	2102      	movs	r1, #2
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fc66 	bl	80070ac <USBH_FindInterface>
 80067e0:	4603      	mov	r3, r0
 80067e2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	2bff      	cmp	r3, #255	; 0xff
 80067e8:	d002      	beq.n	80067f0 <USBH_CDC_InterfaceInit+0x24>
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d901      	bls.n	80067f4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80067f0:	2302      	movs	r3, #2
 80067f2:	e13d      	b.n	8006a70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fc3b 	bl	8007074 <USBH_SelectInterface>
 80067fe:	4603      	mov	r3, r0
 8006800:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006802:	7bbb      	ldrb	r3, [r7, #14]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006808:	2302      	movs	r3, #2
 800680a:	e131      	b.n	8006a70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006812:	2050      	movs	r0, #80	; 0x50
 8006814:	f002 fafa 	bl	8008e0c <malloc>
 8006818:	4603      	mov	r3, r0
 800681a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800682c:	2302      	movs	r3, #2
 800682e:	e11f      	b.n	8006a70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006830:	2250      	movs	r2, #80	; 0x50
 8006832:	2100      	movs	r1, #0
 8006834:	68b8      	ldr	r0, [r7, #8]
 8006836:	f002 faf9 	bl	8008e2c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800683a:	7bfb      	ldrb	r3, [r7, #15]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	211a      	movs	r1, #26
 8006840:	fb01 f303 	mul.w	r3, r1, r3
 8006844:	4413      	add	r3, r2
 8006846:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	b25b      	sxtb	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	da15      	bge.n	800687e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006852:	7bfb      	ldrb	r3, [r7, #15]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	211a      	movs	r1, #26
 8006858:	fb01 f303 	mul.w	r3, r1, r3
 800685c:	4413      	add	r3, r2
 800685e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006862:	781a      	ldrb	r2, [r3, #0]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	211a      	movs	r1, #26
 800686e:	fb01 f303 	mul.w	r3, r1, r3
 8006872:	4413      	add	r3, r2
 8006874:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006878:	881a      	ldrh	r2, [r3, #0]
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	785b      	ldrb	r3, [r3, #1]
 8006882:	4619      	mov	r1, r3
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f001 ff2c 	bl	80086e2 <USBH_AllocPipe>
 800688a:	4603      	mov	r3, r0
 800688c:	461a      	mov	r2, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	7819      	ldrb	r1, [r3, #0]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	7858      	ldrb	r0, [r3, #1]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	8952      	ldrh	r2, [r2, #10]
 80068aa:	9202      	str	r2, [sp, #8]
 80068ac:	2203      	movs	r2, #3
 80068ae:	9201      	str	r2, [sp, #4]
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	4623      	mov	r3, r4
 80068b4:	4602      	mov	r2, r0
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 fee4 	bl	8008684 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	2200      	movs	r2, #0
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f002 f9f3 	bl	8008cb0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80068ca:	2300      	movs	r3, #0
 80068cc:	2200      	movs	r2, #0
 80068ce:	210a      	movs	r1, #10
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fbeb 	bl	80070ac <USBH_FindInterface>
 80068d6:	4603      	mov	r3, r0
 80068d8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80068da:	7bfb      	ldrb	r3, [r7, #15]
 80068dc:	2bff      	cmp	r3, #255	; 0xff
 80068de:	d002      	beq.n	80068e6 <USBH_CDC_InterfaceInit+0x11a>
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d901      	bls.n	80068ea <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80068e6:	2302      	movs	r3, #2
 80068e8:	e0c2      	b.n	8006a70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	211a      	movs	r1, #26
 80068f0:	fb01 f303 	mul.w	r3, r1, r3
 80068f4:	4413      	add	r3, r2
 80068f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	b25b      	sxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	da16      	bge.n	8006930 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006902:	7bfb      	ldrb	r3, [r7, #15]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	211a      	movs	r1, #26
 8006908:	fb01 f303 	mul.w	r3, r1, r3
 800690c:	4413      	add	r3, r2
 800690e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006912:	781a      	ldrb	r2, [r3, #0]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006918:	7bfb      	ldrb	r3, [r7, #15]
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	211a      	movs	r1, #26
 800691e:	fb01 f303 	mul.w	r3, r1, r3
 8006922:	4413      	add	r3, r2
 8006924:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006928:	881a      	ldrh	r2, [r3, #0]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	835a      	strh	r2, [r3, #26]
 800692e:	e015      	b.n	800695c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006930:	7bfb      	ldrb	r3, [r7, #15]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	211a      	movs	r1, #26
 8006936:	fb01 f303 	mul.w	r3, r1, r3
 800693a:	4413      	add	r3, r2
 800693c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006940:	781a      	ldrb	r2, [r3, #0]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006946:	7bfb      	ldrb	r3, [r7, #15]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	211a      	movs	r1, #26
 800694c:	fb01 f303 	mul.w	r3, r1, r3
 8006950:	4413      	add	r3, r2
 8006952:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006956:	881a      	ldrh	r2, [r3, #0]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	211a      	movs	r1, #26
 8006962:	fb01 f303 	mul.w	r3, r1, r3
 8006966:	4413      	add	r3, r2
 8006968:	f203 3356 	addw	r3, r3, #854	; 0x356
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	b25b      	sxtb	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	da16      	bge.n	80069a2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	211a      	movs	r1, #26
 800697a:	fb01 f303 	mul.w	r3, r1, r3
 800697e:	4413      	add	r3, r2
 8006980:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006984:	781a      	ldrb	r2, [r3, #0]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800698a:	7bfb      	ldrb	r3, [r7, #15]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	211a      	movs	r1, #26
 8006990:	fb01 f303 	mul.w	r3, r1, r3
 8006994:	4413      	add	r3, r2
 8006996:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800699a:	881a      	ldrh	r2, [r3, #0]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	835a      	strh	r2, [r3, #26]
 80069a0:	e015      	b.n	80069ce <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	211a      	movs	r1, #26
 80069a8:	fb01 f303 	mul.w	r3, r1, r3
 80069ac:	4413      	add	r3, r2
 80069ae:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069b2:	781a      	ldrb	r2, [r3, #0]
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	211a      	movs	r1, #26
 80069be:	fb01 f303 	mul.w	r3, r1, r3
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80069c8:	881a      	ldrh	r2, [r3, #0]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	7b9b      	ldrb	r3, [r3, #14]
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f001 fe84 	bl	80086e2 <USBH_AllocPipe>
 80069da:	4603      	mov	r3, r0
 80069dc:	461a      	mov	r2, r3
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	7bdb      	ldrb	r3, [r3, #15]
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f001 fe7a 	bl	80086e2 <USBH_AllocPipe>
 80069ee:	4603      	mov	r3, r0
 80069f0:	461a      	mov	r2, r3
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	7b59      	ldrb	r1, [r3, #13]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	7b98      	ldrb	r0, [r3, #14]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	8b12      	ldrh	r2, [r2, #24]
 8006a0e:	9202      	str	r2, [sp, #8]
 8006a10:	2202      	movs	r2, #2
 8006a12:	9201      	str	r2, [sp, #4]
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	4623      	mov	r3, r4
 8006a18:	4602      	mov	r2, r0
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f001 fe32 	bl	8008684 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	7b19      	ldrb	r1, [r3, #12]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	7bd8      	ldrb	r0, [r3, #15]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	8b52      	ldrh	r2, [r2, #26]
 8006a38:	9202      	str	r2, [sp, #8]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	9201      	str	r2, [sp, #4]
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	4623      	mov	r3, r4
 8006a42:	4602      	mov	r2, r0
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f001 fe1d 	bl	8008684 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	7b5b      	ldrb	r3, [r3, #13]
 8006a56:	2200      	movs	r2, #0
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f002 f928 	bl	8008cb0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	7b1b      	ldrb	r3, [r3, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f002 f921 	bl	8008cb0 <USBH_LL_SetToggle>

  return USBH_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd90      	pop	{r4, r7, pc}

08006a78 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00e      	beq.n	8006ab0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 fe12 	bl	80086c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f001 fe3d 	bl	8008724 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	7b1b      	ldrb	r3, [r3, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00e      	beq.n	8006ad6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	7b1b      	ldrb	r3, [r3, #12]
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f001 fdff 	bl	80086c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	7b1b      	ldrb	r3, [r3, #12]
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 fe2a 	bl	8008724 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	7b5b      	ldrb	r3, [r3, #13]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00e      	beq.n	8006afc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	7b5b      	ldrb	r3, [r3, #13]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f001 fdec 	bl	80086c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	7b5b      	ldrb	r3, [r3, #13]
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f001 fe17 	bl	8008724 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00b      	beq.n	8006b20 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f002 f983 	bl	8008e1c <free>
    phost->pActiveClass->pData = 0U;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3340      	adds	r3, #64	; 0x40
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f8b1 	bl	8006caa <GetLineCoding>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006b4c:	7afb      	ldrb	r3, [r7, #11]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d105      	bne.n	8006b5e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b58:	2102      	movs	r1, #2
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006b5e:	7afb      	ldrb	r3, [r7, #11]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006b70:	2301      	movs	r3, #1
 8006b72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006b74:	2300      	movs	r3, #0
 8006b76:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006b88:	2b04      	cmp	r3, #4
 8006b8a:	d877      	bhi.n	8006c7c <USBH_CDC_Process+0x114>
 8006b8c:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <USBH_CDC_Process+0x2c>)
 8006b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b92:	bf00      	nop
 8006b94:	08006ba9 	.word	0x08006ba9
 8006b98:	08006baf 	.word	0x08006baf
 8006b9c:	08006bdf 	.word	0x08006bdf
 8006ba0:	08006c53 	.word	0x08006c53
 8006ba4:	08006c61 	.word	0x08006c61
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	73fb      	strb	r3, [r7, #15]
      break;
 8006bac:	e06d      	b.n	8006c8a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f897 	bl	8006ce8 <SetLineCoding>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006bbe:	7bbb      	ldrb	r3, [r7, #14]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d104      	bne.n	8006bce <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006bcc:	e058      	b.n	8006c80 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006bce:	7bbb      	ldrb	r3, [r7, #14]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d055      	beq.n	8006c80 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2204      	movs	r2, #4
 8006bd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006bdc:	e050      	b.n	8006c80 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	3340      	adds	r3, #64	; 0x40
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f860 	bl	8006caa <GetLineCoding>
 8006bea:	4603      	mov	r3, r0
 8006bec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006bee:	7bbb      	ldrb	r3, [r7, #14]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d126      	bne.n	8006c42 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c06:	791b      	ldrb	r3, [r3, #4]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d13b      	bne.n	8006c84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c16:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d133      	bne.n	8006c84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c26:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d12b      	bne.n	8006c84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c34:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d124      	bne.n	8006c84 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f958 	bl	8006ef0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c40:	e020      	b.n	8006c84 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006c42:	7bbb      	ldrb	r3, [r7, #14]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d01d      	beq.n	8006c84 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2204      	movs	r2, #4
 8006c4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c50:	e018      	b.n	8006c84 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f867 	bl	8006d26 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f8da 	bl	8006e12 <CDC_ProcessReception>
      break;
 8006c5e:	e014      	b.n	8006c8a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006c60:	2100      	movs	r1, #0
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 ffef 	bl	8007c46 <USBH_ClrFeature>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10a      	bne.n	8006c88 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006c7a:	e005      	b.n	8006c88 <USBH_CDC_Process+0x120>

    default:
      break;
 8006c7c:	bf00      	nop
 8006c7e:	e004      	b.n	8006c8a <USBH_CDC_Process+0x122>
      break;
 8006c80:	bf00      	nop
 8006c82:	e002      	b.n	8006c8a <USBH_CDC_Process+0x122>
      break;
 8006c84:	bf00      	nop
 8006c86:	e000      	b.n	8006c8a <USBH_CDC_Process+0x122>
      break;
 8006c88:	bf00      	nop

  }

  return status;
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b082      	sub	sp, #8
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	22a1      	movs	r2, #161	; 0xa1
 8006cb8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2221      	movs	r2, #33	; 0x21
 8006cbe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2207      	movs	r2, #7
 8006cd0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2207      	movs	r2, #7
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f001 fa81 	bl	80081e0 <USBH_CtlReq>
 8006cde:	4603      	mov	r3, r0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2221      	movs	r2, #33	; 0x21
 8006cf6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2207      	movs	r2, #7
 8006d0e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	2207      	movs	r2, #7
 8006d14:	4619      	mov	r1, r3
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f001 fa62 	bl	80081e0 <USBH_CtlReq>
 8006d1c:	4603      	mov	r3, r0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b086      	sub	sp, #24
 8006d2a:	af02      	add	r7, sp, #8
 8006d2c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d002      	beq.n	8006d4c <CDC_ProcessTransmission+0x26>
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d023      	beq.n	8006d92 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006d4a:	e05e      	b.n	8006e0a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	8b12      	ldrh	r2, [r2, #24]
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d90b      	bls.n	8006d70 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	69d9      	ldr	r1, [r3, #28]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8b1a      	ldrh	r2, [r3, #24]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	7b5b      	ldrb	r3, [r3, #13]
 8006d64:	2001      	movs	r0, #1
 8006d66:	9000      	str	r0, [sp, #0]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 fc48 	bl	80085fe <USBH_BulkSendData>
 8006d6e:	e00b      	b.n	8006d88 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	7b5b      	ldrb	r3, [r3, #13]
 8006d7e:	2001      	movs	r0, #1
 8006d80:	9000      	str	r0, [sp, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f001 fc3b 	bl	80085fe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d90:	e03b      	b.n	8006e0a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	7b5b      	ldrb	r3, [r3, #13]
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 ff5f 	bl	8008c5c <USBH_LL_GetURBState>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006da2:	7afb      	ldrb	r3, [r7, #11]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d128      	bne.n	8006dfa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	8b12      	ldrh	r2, [r2, #24]
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d90e      	bls.n	8006dd2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	8b12      	ldrh	r2, [r2, #24]
 8006dbc:	1a9a      	subs	r2, r3, r2
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	8b12      	ldrh	r2, [r2, #24]
 8006dca:	441a      	add	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	61da      	str	r2, [r3, #28]
 8006dd0:	e002      	b.n	8006dd8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d004      	beq.n	8006dea <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006de8:	e00e      	b.n	8006e08 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f868 	bl	8006ec8 <USBH_CDC_TransmitCallback>
      break;
 8006df8:	e006      	b.n	8006e08 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006dfa:	7afb      	ldrb	r3, [r7, #11]
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d103      	bne.n	8006e08 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e08:	bf00      	nop
  }
}
 8006e0a:	bf00      	nop
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b086      	sub	sp, #24
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e24:	2300      	movs	r3, #0
 8006e26:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006e2e:	2b03      	cmp	r3, #3
 8006e30:	d002      	beq.n	8006e38 <CDC_ProcessReception+0x26>
 8006e32:	2b04      	cmp	r3, #4
 8006e34:	d00e      	beq.n	8006e54 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006e36:	e043      	b.n	8006ec0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	6a19      	ldr	r1, [r3, #32]
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	8b5a      	ldrh	r2, [r3, #26]
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	7b1b      	ldrb	r3, [r3, #12]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 fbff 	bl	8008648 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	2204      	movs	r2, #4
 8006e4e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e52:	e035      	b.n	8006ec0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	7b1b      	ldrb	r3, [r3, #12]
 8006e58:	4619      	mov	r1, r3
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 fefe 	bl	8008c5c <USBH_LL_GetURBState>
 8006e60:	4603      	mov	r3, r0
 8006e62:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006e64:	7cfb      	ldrb	r3, [r7, #19]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d129      	bne.n	8006ebe <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	7b1b      	ldrb	r3, [r3, #12]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 fe61 	bl	8008b38 <USBH_LL_GetLastXferSize>
 8006e76:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d016      	beq.n	8006eb0 <CDC_ProcessReception+0x9e>
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	8b5b      	ldrh	r3, [r3, #26]
 8006e86:	461a      	mov	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d910      	bls.n	8006eb0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	1ad2      	subs	r2, r2, r3
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	6a1a      	ldr	r2, [r3, #32]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	441a      	add	r2, r3
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2203      	movs	r2, #3
 8006eaa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006eae:	e006      	b.n	8006ebe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f80f 	bl	8006edc <USBH_CDC_ReceiveCallback>
      break;
 8006ebe:	bf00      	nop
  }
}
 8006ec0:	bf00      	nop
 8006ec2:	3718      	adds	r7, #24
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006f18:	2302      	movs	r3, #2
 8006f1a:	e029      	b.n	8006f70 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	79fa      	ldrb	r2, [r7, #7]
 8006f20:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 f81f 	bl	8006f78 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f001 fd31 	bl	80089d0 <USBH_LL_Init>

  return USBH_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f84:	2300      	movs	r3, #0
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	e009      	b.n	8006f9e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	33e0      	adds	r3, #224	; 0xe0
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	2200      	movs	r2, #0
 8006f96:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2b0f      	cmp	r3, #15
 8006fa2:	d9f2      	bls.n	8006f8a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60fb      	str	r3, [r7, #12]
 8006fa8:	e009      	b.n	8006fbe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4413      	add	r3, r2
 8006fb0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fc4:	d3f1      	bcc.n	8006faa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2240      	movs	r2, #64	; 0x40
 8006fea:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d016      	beq.n	8007062 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10e      	bne.n	800705c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007044:	1c59      	adds	r1, r3, #1
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	33de      	adds	r3, #222	; 0xde
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	73fb      	strb	r3, [r7, #15]
 800705a:	e004      	b.n	8007066 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800705c:	2302      	movs	r3, #2
 800705e:	73fb      	strb	r3, [r7, #15]
 8007060:	e001      	b.n	8007066 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007062:	2302      	movs	r3, #2
 8007064:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007066:	7bfb      	ldrb	r3, [r7, #15]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007080:	2300      	movs	r3, #0
 8007082:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800708a:	78fa      	ldrb	r2, [r7, #3]
 800708c:	429a      	cmp	r2, r3
 800708e:	d204      	bcs.n	800709a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	78fa      	ldrb	r2, [r7, #3]
 8007094:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007098:	e001      	b.n	800709e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800709a:	2302      	movs	r3, #2
 800709c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800709e:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	4608      	mov	r0, r1
 80070b6:	4611      	mov	r1, r2
 80070b8:	461a      	mov	r2, r3
 80070ba:	4603      	mov	r3, r0
 80070bc:	70fb      	strb	r3, [r7, #3]
 80070be:	460b      	mov	r3, r1
 80070c0:	70bb      	strb	r3, [r7, #2]
 80070c2:	4613      	mov	r3, r2
 80070c4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80070ca:	2300      	movs	r3, #0
 80070cc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80070d4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80070d6:	e025      	b.n	8007124 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80070d8:	7dfb      	ldrb	r3, [r7, #23]
 80070da:	221a      	movs	r2, #26
 80070dc:	fb02 f303 	mul.w	r3, r2, r3
 80070e0:	3308      	adds	r3, #8
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	4413      	add	r3, r2
 80070e6:	3302      	adds	r3, #2
 80070e8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	795b      	ldrb	r3, [r3, #5]
 80070ee:	78fa      	ldrb	r2, [r7, #3]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d002      	beq.n	80070fa <USBH_FindInterface+0x4e>
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	2bff      	cmp	r3, #255	; 0xff
 80070f8:	d111      	bne.n	800711e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80070fe:	78ba      	ldrb	r2, [r7, #2]
 8007100:	429a      	cmp	r2, r3
 8007102:	d002      	beq.n	800710a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007104:	78bb      	ldrb	r3, [r7, #2]
 8007106:	2bff      	cmp	r3, #255	; 0xff
 8007108:	d109      	bne.n	800711e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800710e:	787a      	ldrb	r2, [r7, #1]
 8007110:	429a      	cmp	r2, r3
 8007112:	d002      	beq.n	800711a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007114:	787b      	ldrb	r3, [r7, #1]
 8007116:	2bff      	cmp	r3, #255	; 0xff
 8007118:	d101      	bne.n	800711e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800711a:	7dfb      	ldrb	r3, [r7, #23]
 800711c:	e006      	b.n	800712c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800711e:	7dfb      	ldrb	r3, [r7, #23]
 8007120:	3301      	adds	r3, #1
 8007122:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007124:	7dfb      	ldrb	r3, [r7, #23]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d9d6      	bls.n	80070d8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800712a:	23ff      	movs	r3, #255	; 0xff
}
 800712c:	4618      	mov	r0, r3
 800712e:	371c      	adds	r7, #28
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f001 fc81 	bl	8008a48 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007146:	2101      	movs	r1, #1
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f001 fd9a 	bl	8008c82 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b088      	sub	sp, #32
 800715c:	af04      	add	r7, sp, #16
 800715e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007160:	2302      	movs	r3, #2
 8007162:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007164:	2300      	movs	r3, #0
 8007166:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b01      	cmp	r3, #1
 8007172:	d102      	bne.n	800717a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2203      	movs	r2, #3
 8007178:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b0b      	cmp	r3, #11
 8007182:	f200 81be 	bhi.w	8007502 <USBH_Process+0x3aa>
 8007186:	a201      	add	r2, pc, #4	; (adr r2, 800718c <USBH_Process+0x34>)
 8007188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718c:	080071bd 	.word	0x080071bd
 8007190:	080071ef 	.word	0x080071ef
 8007194:	08007257 	.word	0x08007257
 8007198:	0800749d 	.word	0x0800749d
 800719c:	08007503 	.word	0x08007503
 80071a0:	080072fb 	.word	0x080072fb
 80071a4:	08007443 	.word	0x08007443
 80071a8:	08007331 	.word	0x08007331
 80071ac:	08007351 	.word	0x08007351
 80071b0:	08007371 	.word	0x08007371
 80071b4:	080073b5 	.word	0x080073b5
 80071b8:	08007485 	.word	0x08007485
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 819e 	beq.w	8007506 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80071d0:	20c8      	movs	r0, #200	; 0xc8
 80071d2:	f001 fd9d 	bl	8008d10 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 fc93 	bl	8008b02 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80071ec:	e18b      	b.n	8007506 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d107      	bne.n	8007208 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007206:	e18d      	b.n	8007524 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800720e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007212:	d914      	bls.n	800723e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800721a:	3301      	adds	r3, #1
 800721c:	b2da      	uxtb	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800722a:	2b03      	cmp	r3, #3
 800722c:	d903      	bls.n	8007236 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	220d      	movs	r2, #13
 8007232:	701a      	strb	r2, [r3, #0]
      break;
 8007234:	e176      	b.n	8007524 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	701a      	strb	r2, [r3, #0]
      break;
 800723c:	e172      	b.n	8007524 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007244:	f103 020a 	add.w	r2, r3, #10
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800724e:	200a      	movs	r0, #10
 8007250:	f001 fd5e 	bl	8008d10 <USBH_Delay>
      break;
 8007254:	e166      	b.n	8007524 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800725c:	2b00      	cmp	r3, #0
 800725e:	d005      	beq.n	800726c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007266:	2104      	movs	r1, #4
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800726c:	2064      	movs	r0, #100	; 0x64
 800726e:	f001 fd4f 	bl	8008d10 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f001 fc1e 	bl	8008ab4 <USBH_LL_GetSpeed>
 8007278:	4603      	mov	r3, r0
 800727a:	461a      	mov	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2205      	movs	r2, #5
 8007286:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007288:	2100      	movs	r1, #0
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 fa29 	bl	80086e2 <USBH_AllocPipe>
 8007290:	4603      	mov	r3, r0
 8007292:	461a      	mov	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007298:	2180      	movs	r1, #128	; 0x80
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f001 fa21 	bl	80086e2 <USBH_AllocPipe>
 80072a0:	4603      	mov	r3, r0
 80072a2:	461a      	mov	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	7919      	ldrb	r1, [r3, #4]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80072bc:	b292      	uxth	r2, r2
 80072be:	9202      	str	r2, [sp, #8]
 80072c0:	2200      	movs	r2, #0
 80072c2:	9201      	str	r2, [sp, #4]
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	4603      	mov	r3, r0
 80072c8:	2280      	movs	r2, #128	; 0x80
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 f9da 	bl	8008684 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	7959      	ldrb	r1, [r3, #5]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80072e4:	b292      	uxth	r2, r2
 80072e6:	9202      	str	r2, [sp, #8]
 80072e8:	2200      	movs	r2, #0
 80072ea:	9201      	str	r2, [sp, #4]
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	4603      	mov	r3, r0
 80072f0:	2200      	movs	r2, #0
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 f9c6 	bl	8008684 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072f8:	e114      	b.n	8007524 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f918 	bl	8007530 <USBH_HandleEnum>
 8007300:	4603      	mov	r3, r0
 8007302:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007304:	7bbb      	ldrb	r3, [r7, #14]
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	f040 80fe 	bne.w	800750a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800731c:	2b01      	cmp	r3, #1
 800731e:	d103      	bne.n	8007328 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2208      	movs	r2, #8
 8007324:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007326:	e0f0      	b.n	800750a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2207      	movs	r2, #7
 800732c:	701a      	strb	r2, [r3, #0]
      break;
 800732e:	e0ec      	b.n	800750a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 80e9 	beq.w	800750e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007342:	2101      	movs	r1, #1
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2208      	movs	r2, #8
 800734c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800734e:	e0de      	b.n	800750e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007356:	b29b      	uxth	r3, r3
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fc2c 	bl	8007bb8 <USBH_SetCfg>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	f040 80d5 	bne.w	8007512 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2209      	movs	r2, #9
 800736c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800736e:	e0d0      	b.n	8007512 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007376:	f003 0320 	and.w	r3, r3, #32
 800737a:	2b00      	cmp	r3, #0
 800737c:	d016      	beq.n	80073ac <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800737e:	2101      	movs	r1, #1
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fc3c 	bl	8007bfe <USBH_SetFeature>
 8007386:	4603      	mov	r3, r0
 8007388:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d103      	bne.n	800739a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	220a      	movs	r2, #10
 8007396:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007398:	e0bd      	b.n	8007516 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800739a:	7bbb      	ldrb	r3, [r7, #14]
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b03      	cmp	r3, #3
 80073a0:	f040 80b9 	bne.w	8007516 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	220a      	movs	r2, #10
 80073a8:	701a      	strb	r2, [r3, #0]
      break;
 80073aa:	e0b4      	b.n	8007516 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	220a      	movs	r2, #10
 80073b0:	701a      	strb	r2, [r3, #0]
      break;
 80073b2:	e0b0      	b.n	8007516 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f000 80ad 	beq.w	800751a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80073c8:	2300      	movs	r3, #0
 80073ca:	73fb      	strb	r3, [r7, #15]
 80073cc:	e016      	b.n	80073fc <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80073ce:	7bfa      	ldrb	r2, [r7, #15]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	32de      	adds	r2, #222	; 0xde
 80073d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d8:	791a      	ldrb	r2, [r3, #4]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d108      	bne.n	80073f6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80073e4:	7bfa      	ldrb	r2, [r7, #15]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	32de      	adds	r2, #222	; 0xde
 80073ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80073f4:	e005      	b.n	8007402 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80073f6:	7bfb      	ldrb	r3, [r7, #15]
 80073f8:	3301      	adds	r3, #1
 80073fa:	73fb      	strb	r3, [r7, #15]
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0e5      	beq.n	80073ce <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007408:	2b00      	cmp	r3, #0
 800740a:	d016      	beq.n	800743a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	4798      	blx	r3
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d109      	bne.n	8007432 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2206      	movs	r2, #6
 8007422:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800742a:	2103      	movs	r1, #3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007430:	e073      	b.n	800751a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	220d      	movs	r2, #13
 8007436:	701a      	strb	r2, [r3, #0]
      break;
 8007438:	e06f      	b.n	800751a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	220d      	movs	r2, #13
 800743e:	701a      	strb	r2, [r3, #0]
      break;
 8007440:	e06b      	b.n	800751a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007448:	2b00      	cmp	r3, #0
 800744a:	d017      	beq.n	800747c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	4798      	blx	r3
 8007458:	4603      	mov	r3, r0
 800745a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800745c:	7bbb      	ldrb	r3, [r7, #14]
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b00      	cmp	r3, #0
 8007462:	d103      	bne.n	800746c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	220b      	movs	r2, #11
 8007468:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800746a:	e058      	b.n	800751e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800746c:	7bbb      	ldrb	r3, [r7, #14]
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b02      	cmp	r3, #2
 8007472:	d154      	bne.n	800751e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	220d      	movs	r2, #13
 8007478:	701a      	strb	r2, [r3, #0]
      break;
 800747a:	e050      	b.n	800751e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	220d      	movs	r2, #13
 8007480:	701a      	strb	r2, [r3, #0]
      break;
 8007482:	e04c      	b.n	800751e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800748a:	2b00      	cmp	r3, #0
 800748c:	d049      	beq.n	8007522 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	4798      	blx	r3
      }
      break;
 800749a:	e042      	b.n	8007522 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7ff fd67 	bl	8006f78 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d009      	beq.n	80074c8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d005      	beq.n	80074de <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074d8:	2105      	movs	r1, #5
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d107      	bne.n	80074fa <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7ff fe20 	bl	8007138 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074f8:	e014      	b.n	8007524 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f001 faa4 	bl	8008a48 <USBH_LL_Start>
      break;
 8007500:	e010      	b.n	8007524 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007502:	bf00      	nop
 8007504:	e00e      	b.n	8007524 <USBH_Process+0x3cc>
      break;
 8007506:	bf00      	nop
 8007508:	e00c      	b.n	8007524 <USBH_Process+0x3cc>
      break;
 800750a:	bf00      	nop
 800750c:	e00a      	b.n	8007524 <USBH_Process+0x3cc>
    break;
 800750e:	bf00      	nop
 8007510:	e008      	b.n	8007524 <USBH_Process+0x3cc>
      break;
 8007512:	bf00      	nop
 8007514:	e006      	b.n	8007524 <USBH_Process+0x3cc>
      break;
 8007516:	bf00      	nop
 8007518:	e004      	b.n	8007524 <USBH_Process+0x3cc>
      break;
 800751a:	bf00      	nop
 800751c:	e002      	b.n	8007524 <USBH_Process+0x3cc>
      break;
 800751e:	bf00      	nop
 8007520:	e000      	b.n	8007524 <USBH_Process+0x3cc>
      break;
 8007522:	bf00      	nop
  }
  return USBH_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop

08007530 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b088      	sub	sp, #32
 8007534:	af04      	add	r7, sp, #16
 8007536:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007538:	2301      	movs	r3, #1
 800753a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800753c:	2301      	movs	r3, #1
 800753e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	785b      	ldrb	r3, [r3, #1]
 8007544:	2b07      	cmp	r3, #7
 8007546:	f200 81c1 	bhi.w	80078cc <USBH_HandleEnum+0x39c>
 800754a:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <USBH_HandleEnum+0x20>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	08007571 	.word	0x08007571
 8007554:	0800762f 	.word	0x0800762f
 8007558:	08007699 	.word	0x08007699
 800755c:	08007727 	.word	0x08007727
 8007560:	08007791 	.word	0x08007791
 8007564:	08007801 	.word	0x08007801
 8007568:	08007847 	.word	0x08007847
 800756c:	0800788d 	.word	0x0800788d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007570:	2108      	movs	r1, #8
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fa50 	bl	8007a18 <USBH_Get_DevDesc>
 8007578:	4603      	mov	r3, r0
 800757a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800757c:	7bbb      	ldrb	r3, [r7, #14]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d130      	bne.n	80075e4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	7919      	ldrb	r1, [r3, #4]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80075a6:	b292      	uxth	r2, r2
 80075a8:	9202      	str	r2, [sp, #8]
 80075aa:	2200      	movs	r2, #0
 80075ac:	9201      	str	r2, [sp, #4]
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	4603      	mov	r3, r0
 80075b2:	2280      	movs	r2, #128	; 0x80
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f001 f865 	bl	8008684 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	7959      	ldrb	r1, [r3, #5]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075ce:	b292      	uxth	r2, r2
 80075d0:	9202      	str	r2, [sp, #8]
 80075d2:	2200      	movs	r2, #0
 80075d4:	9201      	str	r2, [sp, #4]
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	4603      	mov	r3, r0
 80075da:	2200      	movs	r2, #0
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f001 f851 	bl	8008684 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80075e2:	e175      	b.n	80078d0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	f040 8172 	bne.w	80078d0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075f2:	3301      	adds	r3, #1
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007602:	2b03      	cmp	r3, #3
 8007604:	d903      	bls.n	800760e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	220d      	movs	r2, #13
 800760a:	701a      	strb	r2, [r3, #0]
      break;
 800760c:	e160      	b.n	80078d0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	795b      	ldrb	r3, [r3, #5]
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f001 f885 	bl	8008724 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	791b      	ldrb	r3, [r3, #4]
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f001 f87f 	bl	8008724 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	701a      	strb	r2, [r3, #0]
      break;
 800762c:	e150      	b.n	80078d0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800762e:	2112      	movs	r1, #18
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f9f1 	bl	8007a18 <USBH_Get_DevDesc>
 8007636:	4603      	mov	r3, r0
 8007638:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800763a:	7bbb      	ldrb	r3, [r7, #14]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d103      	bne.n	8007648 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007646:	e145      	b.n	80078d4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	2b03      	cmp	r3, #3
 800764c:	f040 8142 	bne.w	80078d4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007656:	3301      	adds	r3, #1
 8007658:	b2da      	uxtb	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007666:	2b03      	cmp	r3, #3
 8007668:	d903      	bls.n	8007672 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	220d      	movs	r2, #13
 800766e:	701a      	strb	r2, [r3, #0]
      break;
 8007670:	e130      	b.n	80078d4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	795b      	ldrb	r3, [r3, #5]
 8007676:	4619      	mov	r1, r3
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f001 f853 	bl	8008724 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	791b      	ldrb	r3, [r3, #4]
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f001 f84d 	bl	8008724 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	701a      	strb	r2, [r3, #0]
      break;
 8007696:	e11d      	b.n	80078d4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007698:	2101      	movs	r1, #1
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fa68 	bl	8007b70 <USBH_SetAddress>
 80076a0:	4603      	mov	r3, r0
 80076a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d132      	bne.n	8007710 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80076aa:	2002      	movs	r0, #2
 80076ac:	f001 fb30 	bl	8008d10 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2203      	movs	r2, #3
 80076bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	7919      	ldrb	r1, [r3, #4]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80076d2:	b292      	uxth	r2, r2
 80076d4:	9202      	str	r2, [sp, #8]
 80076d6:	2200      	movs	r2, #0
 80076d8:	9201      	str	r2, [sp, #4]
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	4603      	mov	r3, r0
 80076de:	2280      	movs	r2, #128	; 0x80
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 ffcf 	bl	8008684 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	7959      	ldrb	r1, [r3, #5]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076fa:	b292      	uxth	r2, r2
 80076fc:	9202      	str	r2, [sp, #8]
 80076fe:	2200      	movs	r2, #0
 8007700:	9201      	str	r2, [sp, #4]
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	4603      	mov	r3, r0
 8007706:	2200      	movs	r2, #0
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 ffbb 	bl	8008684 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800770e:	e0e3      	b.n	80078d8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007710:	7bbb      	ldrb	r3, [r7, #14]
 8007712:	2b03      	cmp	r3, #3
 8007714:	f040 80e0 	bne.w	80078d8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	220d      	movs	r2, #13
 800771c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	705a      	strb	r2, [r3, #1]
      break;
 8007724:	e0d8      	b.n	80078d8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007726:	2109      	movs	r1, #9
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f99d 	bl	8007a68 <USBH_Get_CfgDesc>
 800772e:	4603      	mov	r3, r0
 8007730:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007732:	7bbb      	ldrb	r3, [r7, #14]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d103      	bne.n	8007740 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2204      	movs	r2, #4
 800773c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800773e:	e0cd      	b.n	80078dc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007740:	7bbb      	ldrb	r3, [r7, #14]
 8007742:	2b03      	cmp	r3, #3
 8007744:	f040 80ca 	bne.w	80078dc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800774e:	3301      	adds	r3, #1
 8007750:	b2da      	uxtb	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800775e:	2b03      	cmp	r3, #3
 8007760:	d903      	bls.n	800776a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	220d      	movs	r2, #13
 8007766:	701a      	strb	r2, [r3, #0]
      break;
 8007768:	e0b8      	b.n	80078dc <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	795b      	ldrb	r3, [r3, #5]
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 ffd7 	bl	8008724 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	791b      	ldrb	r3, [r3, #4]
 800777a:	4619      	mov	r1, r3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 ffd1 	bl	8008724 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	701a      	strb	r2, [r3, #0]
      break;
 800778e:	e0a5      	b.n	80078dc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f965 	bl	8007a68 <USBH_Get_CfgDesc>
 800779e:	4603      	mov	r3, r0
 80077a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077a2:	7bbb      	ldrb	r3, [r7, #14]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d103      	bne.n	80077b0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2205      	movs	r2, #5
 80077ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077ae:	e097      	b.n	80078e0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077b0:	7bbb      	ldrb	r3, [r7, #14]
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	f040 8094 	bne.w	80078e0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077be:	3301      	adds	r3, #1
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077ce:	2b03      	cmp	r3, #3
 80077d0:	d903      	bls.n	80077da <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	220d      	movs	r2, #13
 80077d6:	701a      	strb	r2, [r3, #0]
      break;
 80077d8:	e082      	b.n	80078e0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	795b      	ldrb	r3, [r3, #5]
 80077de:	4619      	mov	r1, r3
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 ff9f 	bl	8008724 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	791b      	ldrb	r3, [r3, #4]
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 ff99 	bl	8008724 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	701a      	strb	r2, [r3, #0]
      break;
 80077fe:	e06f      	b.n	80078e0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007806:	2b00      	cmp	r3, #0
 8007808:	d019      	beq.n	800783e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007816:	23ff      	movs	r3, #255	; 0xff
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f949 	bl	8007ab0 <USBH_Get_StringDesc>
 800781e:	4603      	mov	r3, r0
 8007820:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007822:	7bbb      	ldrb	r3, [r7, #14]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d103      	bne.n	8007830 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2206      	movs	r2, #6
 800782c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800782e:	e059      	b.n	80078e4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007830:	7bbb      	ldrb	r3, [r7, #14]
 8007832:	2b03      	cmp	r3, #3
 8007834:	d156      	bne.n	80078e4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2206      	movs	r2, #6
 800783a:	705a      	strb	r2, [r3, #1]
      break;
 800783c:	e052      	b.n	80078e4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2206      	movs	r2, #6
 8007842:	705a      	strb	r2, [r3, #1]
      break;
 8007844:	e04e      	b.n	80078e4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800784c:	2b00      	cmp	r3, #0
 800784e:	d019      	beq.n	8007884 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800785c:	23ff      	movs	r3, #255	; 0xff
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f926 	bl	8007ab0 <USBH_Get_StringDesc>
 8007864:	4603      	mov	r3, r0
 8007866:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007868:	7bbb      	ldrb	r3, [r7, #14]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d103      	bne.n	8007876 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2207      	movs	r2, #7
 8007872:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007874:	e038      	b.n	80078e8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007876:	7bbb      	ldrb	r3, [r7, #14]
 8007878:	2b03      	cmp	r3, #3
 800787a:	d135      	bne.n	80078e8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2207      	movs	r2, #7
 8007880:	705a      	strb	r2, [r3, #1]
      break;
 8007882:	e031      	b.n	80078e8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2207      	movs	r2, #7
 8007888:	705a      	strb	r2, [r3, #1]
      break;
 800788a:	e02d      	b.n	80078e8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007892:	2b00      	cmp	r3, #0
 8007894:	d017      	beq.n	80078c6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078a2:	23ff      	movs	r3, #255	; 0xff
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f903 	bl	8007ab0 <USBH_Get_StringDesc>
 80078aa:	4603      	mov	r3, r0
 80078ac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d102      	bne.n	80078ba <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80078b8:	e018      	b.n	80078ec <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d115      	bne.n	80078ec <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80078c0:	2300      	movs	r3, #0
 80078c2:	73fb      	strb	r3, [r7, #15]
      break;
 80078c4:	e012      	b.n	80078ec <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	73fb      	strb	r3, [r7, #15]
      break;
 80078ca:	e00f      	b.n	80078ec <USBH_HandleEnum+0x3bc>

    default:
      break;
 80078cc:	bf00      	nop
 80078ce:	e00e      	b.n	80078ee <USBH_HandleEnum+0x3be>
      break;
 80078d0:	bf00      	nop
 80078d2:	e00c      	b.n	80078ee <USBH_HandleEnum+0x3be>
      break;
 80078d4:	bf00      	nop
 80078d6:	e00a      	b.n	80078ee <USBH_HandleEnum+0x3be>
      break;
 80078d8:	bf00      	nop
 80078da:	e008      	b.n	80078ee <USBH_HandleEnum+0x3be>
      break;
 80078dc:	bf00      	nop
 80078de:	e006      	b.n	80078ee <USBH_HandleEnum+0x3be>
      break;
 80078e0:	bf00      	nop
 80078e2:	e004      	b.n	80078ee <USBH_HandleEnum+0x3be>
      break;
 80078e4:	bf00      	nop
 80078e6:	e002      	b.n	80078ee <USBH_HandleEnum+0x3be>
      break;
 80078e8:	bf00      	nop
 80078ea:	e000      	b.n	80078ee <USBH_HandleEnum+0x3be>
      break;
 80078ec:	bf00      	nop
  }
  return Status;
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800790a:	bf00      	nop
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b082      	sub	sp, #8
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f804 	bl	800793a <USBH_HandleSof>
}
 8007932:	bf00      	nop
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b082      	sub	sp, #8
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b0b      	cmp	r3, #11
 800794a:	d10a      	bne.n	8007962 <USBH_HandleSof+0x28>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007952:	2b00      	cmp	r3, #0
 8007954:	d005      	beq.n	8007962 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	4798      	blx	r3
  }
}
 8007962:	bf00      	nop
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800797a:	bf00      	nop
}
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007996:	bf00      	nop
}
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f001 f844 	bl	8008a7e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	791b      	ldrb	r3, [r3, #4]
 80079fa:	4619      	mov	r1, r3
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fe91 	bl	8008724 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	795b      	ldrb	r3, [r3, #5]
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fe8b 	bl	8008724 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	460b      	mov	r3, r1
 8007a22:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007a2a:	78fb      	ldrb	r3, [r7, #3]
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	4613      	mov	r3, r2
 8007a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a36:	2100      	movs	r1, #0
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f864 	bl	8007b06 <USBH_GetDescriptor>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007a42:	7bfb      	ldrb	r3, [r7, #15]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10a      	bne.n	8007a5e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a54:	78fa      	ldrb	r2, [r7, #3]
 8007a56:	b292      	uxth	r2, r2
 8007a58:	4619      	mov	r1, r3
 8007a5a:	f000 f918 	bl	8007c8e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af02      	add	r7, sp, #8
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	331c      	adds	r3, #28
 8007a78:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007a7a:	887b      	ldrh	r3, [r7, #2]
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a84:	2100      	movs	r1, #0
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f83d 	bl	8007b06 <USBH_GetDescriptor>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d107      	bne.n	8007aa6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007a96:	887b      	ldrh	r3, [r7, #2]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	68b9      	ldr	r1, [r7, #8]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f987 	bl	8007db0 <USBH_ParseCfgDesc>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b088      	sub	sp, #32
 8007ab4:	af02      	add	r7, sp, #8
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	607a      	str	r2, [r7, #4]
 8007aba:	461a      	mov	r2, r3
 8007abc:	460b      	mov	r3, r1
 8007abe:	72fb      	strb	r3, [r7, #11]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007ac4:	7afb      	ldrb	r3, [r7, #11]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007acc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007ad4:	893b      	ldrh	r3, [r7, #8]
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	2100      	movs	r1, #0
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 f812 	bl	8007b06 <USBH_GetDescriptor>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d107      	bne.n	8007afc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007af2:	893a      	ldrh	r2, [r7, #8]
 8007af4:	6879      	ldr	r1, [r7, #4]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 fb24 	bl	8008144 <USBH_ParseStringDesc>
  }

  return status;
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3718      	adds	r7, #24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b084      	sub	sp, #16
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	60f8      	str	r0, [r7, #12]
 8007b0e:	607b      	str	r3, [r7, #4]
 8007b10:	460b      	mov	r3, r1
 8007b12:	72fb      	strb	r3, [r7, #11]
 8007b14:	4613      	mov	r3, r2
 8007b16:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	789b      	ldrb	r3, [r3, #2]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d11c      	bne.n	8007b5a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007b20:	7afb      	ldrb	r3, [r7, #11]
 8007b22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2206      	movs	r2, #6
 8007b30:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	893a      	ldrh	r2, [r7, #8]
 8007b36:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007b38:	893b      	ldrh	r3, [r7, #8]
 8007b3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b42:	d104      	bne.n	8007b4e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f240 4209 	movw	r2, #1033	; 0x409
 8007b4a:	829a      	strh	r2, [r3, #20]
 8007b4c:	e002      	b.n	8007b54 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	8b3a      	ldrh	r2, [r7, #24]
 8007b58:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007b5a:	8b3b      	ldrh	r3, [r7, #24]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	6879      	ldr	r1, [r7, #4]
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 fb3d 	bl	80081e0 <USBH_CtlReq>
 8007b66:	4603      	mov	r3, r0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	789b      	ldrb	r3, [r3, #2]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d10f      	bne.n	8007ba4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2205      	movs	r2, #5
 8007b8e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007b90:	78fb      	ldrb	r3, [r7, #3]
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 fb19 	bl	80081e0 <USBH_CtlReq>
 8007bae:	4603      	mov	r3, r0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	789b      	ldrb	r3, [r3, #2]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d10e      	bne.n	8007bea <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2209      	movs	r2, #9
 8007bd6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	887a      	ldrh	r2, [r7, #2]
 8007bdc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007bea:	2200      	movs	r2, #0
 8007bec:	2100      	movs	r1, #0
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 faf6 	bl	80081e0 <USBH_CtlReq>
 8007bf4:	4603      	mov	r3, r0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b082      	sub	sp, #8
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	460b      	mov	r3, r1
 8007c08:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	789b      	ldrb	r3, [r3, #2]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d10f      	bne.n	8007c32 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2203      	movs	r2, #3
 8007c1c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007c1e:	78fb      	ldrb	r3, [r7, #3]
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c32:	2200      	movs	r2, #0
 8007c34:	2100      	movs	r1, #0
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fad2 	bl	80081e0 <USBH_CtlReq>
 8007c3c:	4603      	mov	r3, r0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b082      	sub	sp, #8
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	460b      	mov	r3, r1
 8007c50:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	789b      	ldrb	r3, [r3, #2]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d10f      	bne.n	8007c7a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007c6c:	78fb      	ldrb	r3, [r7, #3]
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 faae 	bl	80081e0 <USBH_CtlReq>
 8007c84:	4603      	mov	r3, r0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b085      	sub	sp, #20
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	60f8      	str	r0, [r7, #12]
 8007c96:	60b9      	str	r1, [r7, #8]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	781a      	ldrb	r2, [r3, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	785a      	ldrb	r2, [r3, #1]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	3302      	adds	r3, #2
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	3303      	adds	r3, #3
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	021b      	lsls	r3, r3, #8
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	791a      	ldrb	r2, [r3, #4]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	795a      	ldrb	r2, [r3, #5]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	799a      	ldrb	r2, [r3, #6]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	79da      	ldrb	r2, [r3, #7]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	79db      	ldrb	r3, [r3, #7]
 8007cec:	2b20      	cmp	r3, #32
 8007cee:	dc11      	bgt.n	8007d14 <USBH_ParseDevDesc+0x86>
 8007cf0:	2b08      	cmp	r3, #8
 8007cf2:	db16      	blt.n	8007d22 <USBH_ParseDevDesc+0x94>
 8007cf4:	3b08      	subs	r3, #8
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfc:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	bf14      	ite	ne
 8007d08:	2301      	movne	r3, #1
 8007d0a:	2300      	moveq	r3, #0
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d102      	bne.n	8007d18 <USBH_ParseDevDesc+0x8a>
 8007d12:	e006      	b.n	8007d22 <USBH_ParseDevDesc+0x94>
 8007d14:	2b40      	cmp	r3, #64	; 0x40
 8007d16:	d104      	bne.n	8007d22 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	79da      	ldrb	r2, [r3, #7]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	71da      	strb	r2, [r3, #7]
      break;
 8007d20:	e003      	b.n	8007d2a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2240      	movs	r2, #64	; 0x40
 8007d26:	71da      	strb	r2, [r3, #7]
      break;
 8007d28:	bf00      	nop
  }

  if (length > 8U)
 8007d2a:	88fb      	ldrh	r3, [r7, #6]
 8007d2c:	2b08      	cmp	r3, #8
 8007d2e:	d939      	bls.n	8007da4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	3308      	adds	r3, #8
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	3309      	adds	r3, #9
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	021b      	lsls	r3, r3, #8
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	4313      	orrs	r3, r2
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	330a      	adds	r3, #10
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	330b      	adds	r3, #11
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	021b      	lsls	r3, r3, #8
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	4313      	orrs	r3, r2
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	330c      	adds	r3, #12
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	330d      	adds	r3, #13
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	021b      	lsls	r3, r3, #8
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	7b9a      	ldrb	r2, [r3, #14]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	7bda      	ldrb	r2, [r3, #15]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	7c1a      	ldrb	r2, [r3, #16]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	7c5a      	ldrb	r2, [r3, #17]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	745a      	strb	r2, [r3, #17]
  }
}
 8007da4:	bf00      	nop
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b08c      	sub	sp, #48	; 0x30
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007dc4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	781a      	ldrb	r2, [r3, #0]
 8007de4:	6a3b      	ldr	r3, [r7, #32]
 8007de6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	785a      	ldrb	r2, [r3, #1]
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	3302      	adds	r3, #2
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	3303      	adds	r3, #3
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	021b      	lsls	r3, r3, #8
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	4313      	orrs	r3, r2
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e0c:	bf28      	it	cs
 8007e0e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	791a      	ldrb	r2, [r3, #4]
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	795a      	ldrb	r2, [r3, #5]
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	799a      	ldrb	r2, [r3, #6]
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	79da      	ldrb	r2, [r3, #7]
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	7a1a      	ldrb	r2, [r3, #8]
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2b09      	cmp	r3, #9
 8007e46:	d002      	beq.n	8007e4e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	2209      	movs	r2, #9
 8007e4c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007e4e:	88fb      	ldrh	r3, [r7, #6]
 8007e50:	2b09      	cmp	r3, #9
 8007e52:	f240 809d 	bls.w	8007f90 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007e56:	2309      	movs	r3, #9
 8007e58:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007e5e:	e081      	b.n	8007f64 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e60:	f107 0316 	add.w	r3, r7, #22
 8007e64:	4619      	mov	r1, r3
 8007e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e68:	f000 f99f 	bl	80081aa <USBH_GetNextDesc>
 8007e6c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e70:	785b      	ldrb	r3, [r3, #1]
 8007e72:	2b04      	cmp	r3, #4
 8007e74:	d176      	bne.n	8007f64 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	2b09      	cmp	r3, #9
 8007e7c:	d002      	beq.n	8007e84 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e80:	2209      	movs	r2, #9
 8007e82:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e88:	221a      	movs	r2, #26
 8007e8a:	fb02 f303 	mul.w	r3, r2, r3
 8007e8e:	3308      	adds	r3, #8
 8007e90:	6a3a      	ldr	r2, [r7, #32]
 8007e92:	4413      	add	r3, r2
 8007e94:	3302      	adds	r3, #2
 8007e96:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007e98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e9a:	69f8      	ldr	r0, [r7, #28]
 8007e9c:	f000 f87e 	bl	8007f9c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007eaa:	e043      	b.n	8007f34 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007eac:	f107 0316 	add.w	r3, r7, #22
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eb4:	f000 f979 	bl	80081aa <USBH_GetNextDesc>
 8007eb8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebc:	785b      	ldrb	r3, [r3, #1]
 8007ebe:	2b05      	cmp	r3, #5
 8007ec0:	d138      	bne.n	8007f34 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	795b      	ldrb	r3, [r3, #5]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d10f      	bne.n	8007eea <USBH_ParseCfgDesc+0x13a>
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	799b      	ldrb	r3, [r3, #6]
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d10b      	bne.n	8007eea <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	79db      	ldrb	r3, [r3, #7]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10f      	bne.n	8007efa <USBH_ParseCfgDesc+0x14a>
 8007eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	2b09      	cmp	r3, #9
 8007ee0:	d00b      	beq.n	8007efa <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee4:	2209      	movs	r2, #9
 8007ee6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007ee8:	e007      	b.n	8007efa <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	2b07      	cmp	r3, #7
 8007ef0:	d004      	beq.n	8007efc <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef4:	2207      	movs	r2, #7
 8007ef6:	701a      	strb	r2, [r3, #0]
 8007ef8:	e000      	b.n	8007efc <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007efa:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f00:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f04:	3201      	adds	r2, #1
 8007f06:	00d2      	lsls	r2, r2, #3
 8007f08:	211a      	movs	r1, #26
 8007f0a:	fb01 f303 	mul.w	r3, r1, r3
 8007f0e:	4413      	add	r3, r2
 8007f10:	3308      	adds	r3, #8
 8007f12:	6a3a      	ldr	r2, [r7, #32]
 8007f14:	4413      	add	r3, r2
 8007f16:	3304      	adds	r3, #4
 8007f18:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f1c:	69b9      	ldr	r1, [r7, #24]
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f000 f86b 	bl	8007ffa <USBH_ParseEPDesc>
 8007f24:	4603      	mov	r3, r0
 8007f26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007f2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f2e:	3301      	adds	r3, #1
 8007f30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	791b      	ldrb	r3, [r3, #4]
 8007f38:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d204      	bcs.n	8007f4a <USBH_ParseCfgDesc+0x19a>
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	885a      	ldrh	r2, [r3, #2]
 8007f44:	8afb      	ldrh	r3, [r7, #22]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d8b0      	bhi.n	8007eac <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	791b      	ldrb	r3, [r3, #4]
 8007f4e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d201      	bcs.n	8007f5a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e01c      	b.n	8007f94 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f5e:	3301      	adds	r3, #1
 8007f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d805      	bhi.n	8007f78 <USBH_ParseCfgDesc+0x1c8>
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	885a      	ldrh	r2, [r3, #2]
 8007f70:	8afb      	ldrh	r3, [r7, #22]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	f63f af74 	bhi.w	8007e60 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	791b      	ldrb	r3, [r3, #4]
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	bf28      	it	cs
 8007f80:	2302      	movcs	r3, #2
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d201      	bcs.n	8007f90 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e001      	b.n	8007f94 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007f90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3730      	adds	r7, #48	; 0x30
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	781a      	ldrb	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	785a      	ldrb	r2, [r3, #1]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	789a      	ldrb	r2, [r3, #2]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	78da      	ldrb	r2, [r3, #3]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	791a      	ldrb	r2, [r3, #4]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	795a      	ldrb	r2, [r3, #5]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	799a      	ldrb	r2, [r3, #6]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	79da      	ldrb	r2, [r3, #7]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	7a1a      	ldrb	r2, [r3, #8]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	721a      	strb	r2, [r3, #8]
}
 8007fee:	bf00      	nop
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b087      	sub	sp, #28
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	60f8      	str	r0, [r7, #12]
 8008002:	60b9      	str	r1, [r7, #8]
 8008004:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	781a      	ldrb	r2, [r3, #0]
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	785a      	ldrb	r2, [r3, #1]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	789a      	ldrb	r2, [r3, #2]
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	78da      	ldrb	r2, [r3, #3]
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	3304      	adds	r3, #4
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	b29a      	uxth	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	3305      	adds	r3, #5
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	b29b      	uxth	r3, r3
 800803a:	021b      	lsls	r3, r3, #8
 800803c:	b29b      	uxth	r3, r3
 800803e:	4313      	orrs	r3, r2
 8008040:	b29a      	uxth	r2, r3
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	799a      	ldrb	r2, [r3, #6]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	889b      	ldrh	r3, [r3, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d102      	bne.n	800805c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008056:	2303      	movs	r3, #3
 8008058:	75fb      	strb	r3, [r7, #23]
 800805a:	e033      	b.n	80080c4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	889b      	ldrh	r3, [r3, #4]
 8008060:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008064:	f023 0307 	bic.w	r3, r3, #7
 8008068:	b29a      	uxth	r2, r3
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	889b      	ldrh	r3, [r3, #4]
 8008072:	b21a      	sxth	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	3304      	adds	r3, #4
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	b299      	uxth	r1, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	3305      	adds	r3, #5
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	b29b      	uxth	r3, r3
 8008084:	021b      	lsls	r3, r3, #8
 8008086:	b29b      	uxth	r3, r3
 8008088:	430b      	orrs	r3, r1
 800808a:	b29b      	uxth	r3, r3
 800808c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008090:	2b00      	cmp	r3, #0
 8008092:	d110      	bne.n	80080b6 <USBH_ParseEPDesc+0xbc>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	3304      	adds	r3, #4
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	b299      	uxth	r1, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	3305      	adds	r3, #5
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	021b      	lsls	r3, r3, #8
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	430b      	orrs	r3, r1
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	b21b      	sxth	r3, r3
 80080ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080b2:	b21b      	sxth	r3, r3
 80080b4:	e001      	b.n	80080ba <USBH_ParseEPDesc+0xc0>
 80080b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080ba:	4313      	orrs	r3, r2
 80080bc:	b21b      	sxth	r3, r3
 80080be:	b29a      	uxth	r2, r3
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d116      	bne.n	80080fc <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	78db      	ldrb	r3, [r3, #3]
 80080d2:	f003 0303 	and.w	r3, r3, #3
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d005      	beq.n	80080e6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	78db      	ldrb	r3, [r3, #3]
 80080de:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80080e2:	2b03      	cmp	r3, #3
 80080e4:	d127      	bne.n	8008136 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	799b      	ldrb	r3, [r3, #6]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <USBH_ParseEPDesc+0xfc>
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	799b      	ldrb	r3, [r3, #6]
 80080f2:	2b10      	cmp	r3, #16
 80080f4:	d91f      	bls.n	8008136 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80080f6:	2303      	movs	r3, #3
 80080f8:	75fb      	strb	r3, [r7, #23]
 80080fa:	e01c      	b.n	8008136 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	78db      	ldrb	r3, [r3, #3]
 8008100:	f003 0303 	and.w	r3, r3, #3
 8008104:	2b01      	cmp	r3, #1
 8008106:	d10a      	bne.n	800811e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	799b      	ldrb	r3, [r3, #6]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d003      	beq.n	8008118 <USBH_ParseEPDesc+0x11e>
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	799b      	ldrb	r3, [r3, #6]
 8008114:	2b10      	cmp	r3, #16
 8008116:	d90e      	bls.n	8008136 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008118:	2303      	movs	r3, #3
 800811a:	75fb      	strb	r3, [r7, #23]
 800811c:	e00b      	b.n	8008136 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	78db      	ldrb	r3, [r3, #3]
 8008122:	f003 0303 	and.w	r3, r3, #3
 8008126:	2b03      	cmp	r3, #3
 8008128:	d105      	bne.n	8008136 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	799b      	ldrb	r3, [r3, #6]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008132:	2303      	movs	r3, #3
 8008134:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008136:	7dfb      	ldrb	r3, [r7, #23]
}
 8008138:	4618      	mov	r0, r3
 800813a:	371c      	adds	r7, #28
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	4613      	mov	r3, r2
 8008150:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	3301      	adds	r3, #1
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	2b03      	cmp	r3, #3
 800815a:	d120      	bne.n	800819e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	1e9a      	subs	r2, r3, #2
 8008162:	88fb      	ldrh	r3, [r7, #6]
 8008164:	4293      	cmp	r3, r2
 8008166:	bf28      	it	cs
 8008168:	4613      	movcs	r3, r2
 800816a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	3302      	adds	r3, #2
 8008170:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008172:	2300      	movs	r3, #0
 8008174:	82fb      	strh	r3, [r7, #22]
 8008176:	e00b      	b.n	8008190 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008178:	8afb      	ldrh	r3, [r7, #22]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	4413      	add	r3, r2
 800817e:	781a      	ldrb	r2, [r3, #0]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	3301      	adds	r3, #1
 8008188:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800818a:	8afb      	ldrh	r3, [r7, #22]
 800818c:	3302      	adds	r3, #2
 800818e:	82fb      	strh	r3, [r7, #22]
 8008190:	8afa      	ldrh	r2, [r7, #22]
 8008192:	8abb      	ldrh	r3, [r7, #20]
 8008194:	429a      	cmp	r2, r3
 8008196:	d3ef      	bcc.n	8008178 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	2200      	movs	r2, #0
 800819c:	701a      	strb	r2, [r3, #0]
  }
}
 800819e:	bf00      	nop
 80081a0:	371c      	adds	r7, #28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b085      	sub	sp, #20
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	881a      	ldrh	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	b29b      	uxth	r3, r3
 80081be:	4413      	add	r3, r2
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4413      	add	r3, r2
 80081d0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80081d2:	68fb      	ldr	r3, [r7, #12]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	4613      	mov	r3, r2
 80081ec:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80081ee:	2301      	movs	r3, #1
 80081f0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	789b      	ldrb	r3, [r3, #2]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d002      	beq.n	8008200 <USBH_CtlReq+0x20>
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d00f      	beq.n	800821e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80081fe:	e027      	b.n	8008250 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	88fa      	ldrh	r2, [r7, #6]
 800820a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2201      	movs	r2, #1
 8008210:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2202      	movs	r2, #2
 8008216:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008218:	2301      	movs	r3, #1
 800821a:	75fb      	strb	r3, [r7, #23]
      break;
 800821c:	e018      	b.n	8008250 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f000 f81c 	bl	800825c <USBH_HandleControl>
 8008224:	4603      	mov	r3, r0
 8008226:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008228:	7dfb      	ldrb	r3, [r7, #23]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d002      	beq.n	8008234 <USBH_CtlReq+0x54>
 800822e:	7dfb      	ldrb	r3, [r7, #23]
 8008230:	2b03      	cmp	r3, #3
 8008232:	d106      	bne.n	8008242 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2201      	movs	r2, #1
 8008238:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	761a      	strb	r2, [r3, #24]
      break;
 8008240:	e005      	b.n	800824e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008242:	7dfb      	ldrb	r3, [r7, #23]
 8008244:	2b02      	cmp	r3, #2
 8008246:	d102      	bne.n	800824e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2201      	movs	r2, #1
 800824c:	709a      	strb	r2, [r3, #2]
      break;
 800824e:	bf00      	nop
  }
  return status;
 8008250:	7dfb      	ldrb	r3, [r7, #23]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3718      	adds	r7, #24
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
	...

0800825c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af02      	add	r7, sp, #8
 8008262:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008264:	2301      	movs	r3, #1
 8008266:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008268:	2300      	movs	r3, #0
 800826a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	7e1b      	ldrb	r3, [r3, #24]
 8008270:	3b01      	subs	r3, #1
 8008272:	2b0a      	cmp	r3, #10
 8008274:	f200 8156 	bhi.w	8008524 <USBH_HandleControl+0x2c8>
 8008278:	a201      	add	r2, pc, #4	; (adr r2, 8008280 <USBH_HandleControl+0x24>)
 800827a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827e:	bf00      	nop
 8008280:	080082ad 	.word	0x080082ad
 8008284:	080082c7 	.word	0x080082c7
 8008288:	08008331 	.word	0x08008331
 800828c:	08008357 	.word	0x08008357
 8008290:	0800838f 	.word	0x0800838f
 8008294:	080083b9 	.word	0x080083b9
 8008298:	0800840b 	.word	0x0800840b
 800829c:	0800842d 	.word	0x0800842d
 80082a0:	08008469 	.word	0x08008469
 80082a4:	0800848f 	.word	0x0800848f
 80082a8:	080084cd 	.word	0x080084cd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f103 0110 	add.w	r1, r3, #16
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	795b      	ldrb	r3, [r3, #5]
 80082b6:	461a      	mov	r2, r3
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f943 	bl	8008544 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2202      	movs	r2, #2
 80082c2:	761a      	strb	r2, [r3, #24]
      break;
 80082c4:	e139      	b.n	800853a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	795b      	ldrb	r3, [r3, #5]
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fcc5 	bl	8008c5c <USBH_LL_GetURBState>
 80082d2:	4603      	mov	r3, r0
 80082d4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d11e      	bne.n	800831a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	7c1b      	ldrb	r3, [r3, #16]
 80082e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082e4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	8adb      	ldrh	r3, [r3, #22]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00a      	beq.n	8008304 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80082ee:	7b7b      	ldrb	r3, [r7, #13]
 80082f0:	2b80      	cmp	r3, #128	; 0x80
 80082f2:	d103      	bne.n	80082fc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2203      	movs	r2, #3
 80082f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082fa:	e115      	b.n	8008528 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2205      	movs	r2, #5
 8008300:	761a      	strb	r2, [r3, #24]
      break;
 8008302:	e111      	b.n	8008528 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008304:	7b7b      	ldrb	r3, [r7, #13]
 8008306:	2b80      	cmp	r3, #128	; 0x80
 8008308:	d103      	bne.n	8008312 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2209      	movs	r2, #9
 800830e:	761a      	strb	r2, [r3, #24]
      break;
 8008310:	e10a      	b.n	8008528 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2207      	movs	r2, #7
 8008316:	761a      	strb	r2, [r3, #24]
      break;
 8008318:	e106      	b.n	8008528 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800831a:	7bbb      	ldrb	r3, [r7, #14]
 800831c:	2b04      	cmp	r3, #4
 800831e:	d003      	beq.n	8008328 <USBH_HandleControl+0xcc>
 8008320:	7bbb      	ldrb	r3, [r7, #14]
 8008322:	2b02      	cmp	r3, #2
 8008324:	f040 8100 	bne.w	8008528 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	220b      	movs	r2, #11
 800832c:	761a      	strb	r2, [r3, #24]
      break;
 800832e:	e0fb      	b.n	8008528 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008336:	b29a      	uxth	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6899      	ldr	r1, [r3, #8]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	899a      	ldrh	r2, [r3, #12]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	791b      	ldrb	r3, [r3, #4]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f93a 	bl	80085c2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2204      	movs	r2, #4
 8008352:	761a      	strb	r2, [r3, #24]
      break;
 8008354:	e0f1      	b.n	800853a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	791b      	ldrb	r3, [r3, #4]
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fc7d 	bl	8008c5c <USBH_LL_GetURBState>
 8008362:	4603      	mov	r3, r0
 8008364:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d102      	bne.n	8008372 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2209      	movs	r2, #9
 8008370:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008372:	7bbb      	ldrb	r3, [r7, #14]
 8008374:	2b05      	cmp	r3, #5
 8008376:	d102      	bne.n	800837e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008378:	2303      	movs	r3, #3
 800837a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800837c:	e0d6      	b.n	800852c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800837e:	7bbb      	ldrb	r3, [r7, #14]
 8008380:	2b04      	cmp	r3, #4
 8008382:	f040 80d3 	bne.w	800852c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	220b      	movs	r2, #11
 800838a:	761a      	strb	r2, [r3, #24]
      break;
 800838c:	e0ce      	b.n	800852c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6899      	ldr	r1, [r3, #8]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	899a      	ldrh	r2, [r3, #12]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	795b      	ldrb	r3, [r3, #5]
 800839a:	2001      	movs	r0, #1
 800839c:	9000      	str	r0, [sp, #0]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f8ea 	bl	8008578 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2206      	movs	r2, #6
 80083b4:	761a      	strb	r2, [r3, #24]
      break;
 80083b6:	e0c0      	b.n	800853a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	795b      	ldrb	r3, [r3, #5]
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fc4c 	bl	8008c5c <USBH_LL_GetURBState>
 80083c4:	4603      	mov	r3, r0
 80083c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80083c8:	7bbb      	ldrb	r3, [r7, #14]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d103      	bne.n	80083d6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2207      	movs	r2, #7
 80083d2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083d4:	e0ac      	b.n	8008530 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80083d6:	7bbb      	ldrb	r3, [r7, #14]
 80083d8:	2b05      	cmp	r3, #5
 80083da:	d105      	bne.n	80083e8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	220c      	movs	r2, #12
 80083e0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80083e2:	2303      	movs	r3, #3
 80083e4:	73fb      	strb	r3, [r7, #15]
      break;
 80083e6:	e0a3      	b.n	8008530 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80083e8:	7bbb      	ldrb	r3, [r7, #14]
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d103      	bne.n	80083f6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2205      	movs	r2, #5
 80083f2:	761a      	strb	r2, [r3, #24]
      break;
 80083f4:	e09c      	b.n	8008530 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80083f6:	7bbb      	ldrb	r3, [r7, #14]
 80083f8:	2b04      	cmp	r3, #4
 80083fa:	f040 8099 	bne.w	8008530 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	220b      	movs	r2, #11
 8008402:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008404:	2302      	movs	r3, #2
 8008406:	73fb      	strb	r3, [r7, #15]
      break;
 8008408:	e092      	b.n	8008530 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	791b      	ldrb	r3, [r3, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	2100      	movs	r1, #0
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f8d5 	bl	80085c2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800841e:	b29a      	uxth	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2208      	movs	r2, #8
 8008428:	761a      	strb	r2, [r3, #24]

      break;
 800842a:	e086      	b.n	800853a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	791b      	ldrb	r3, [r3, #4]
 8008430:	4619      	mov	r1, r3
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fc12 	bl	8008c5c <USBH_LL_GetURBState>
 8008438:	4603      	mov	r3, r0
 800843a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800843c:	7bbb      	ldrb	r3, [r7, #14]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d105      	bne.n	800844e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	220d      	movs	r2, #13
 8008446:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800844c:	e072      	b.n	8008534 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800844e:	7bbb      	ldrb	r3, [r7, #14]
 8008450:	2b04      	cmp	r3, #4
 8008452:	d103      	bne.n	800845c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	220b      	movs	r2, #11
 8008458:	761a      	strb	r2, [r3, #24]
      break;
 800845a:	e06b      	b.n	8008534 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800845c:	7bbb      	ldrb	r3, [r7, #14]
 800845e:	2b05      	cmp	r3, #5
 8008460:	d168      	bne.n	8008534 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008462:	2303      	movs	r3, #3
 8008464:	73fb      	strb	r3, [r7, #15]
      break;
 8008466:	e065      	b.n	8008534 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	795b      	ldrb	r3, [r3, #5]
 800846c:	2201      	movs	r2, #1
 800846e:	9200      	str	r2, [sp, #0]
 8008470:	2200      	movs	r2, #0
 8008472:	2100      	movs	r1, #0
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f87f 	bl	8008578 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008480:	b29a      	uxth	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	220a      	movs	r2, #10
 800848a:	761a      	strb	r2, [r3, #24]
      break;
 800848c:	e055      	b.n	800853a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	795b      	ldrb	r3, [r3, #5]
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fbe1 	bl	8008c5c <USBH_LL_GetURBState>
 800849a:	4603      	mov	r3, r0
 800849c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800849e:	7bbb      	ldrb	r3, [r7, #14]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d105      	bne.n	80084b0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	220d      	movs	r2, #13
 80084ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084ae:	e043      	b.n	8008538 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d103      	bne.n	80084be <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2209      	movs	r2, #9
 80084ba:	761a      	strb	r2, [r3, #24]
      break;
 80084bc:	e03c      	b.n	8008538 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80084be:	7bbb      	ldrb	r3, [r7, #14]
 80084c0:	2b04      	cmp	r3, #4
 80084c2:	d139      	bne.n	8008538 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	220b      	movs	r2, #11
 80084c8:	761a      	strb	r2, [r3, #24]
      break;
 80084ca:	e035      	b.n	8008538 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	7e5b      	ldrb	r3, [r3, #25]
 80084d0:	3301      	adds	r3, #1
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	765a      	strb	r2, [r3, #25]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	7e5b      	ldrb	r3, [r3, #25]
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d806      	bhi.n	80084ee <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2201      	movs	r2, #1
 80084ea:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80084ec:	e025      	b.n	800853a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084f4:	2106      	movs	r1, #6
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	795b      	ldrb	r3, [r3, #5]
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f90c 	bl	8008724 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	791b      	ldrb	r3, [r3, #4]
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f906 	bl	8008724 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800851e:	2302      	movs	r3, #2
 8008520:	73fb      	strb	r3, [r7, #15]
      break;
 8008522:	e00a      	b.n	800853a <USBH_HandleControl+0x2de>

    default:
      break;
 8008524:	bf00      	nop
 8008526:	e008      	b.n	800853a <USBH_HandleControl+0x2de>
      break;
 8008528:	bf00      	nop
 800852a:	e006      	b.n	800853a <USBH_HandleControl+0x2de>
      break;
 800852c:	bf00      	nop
 800852e:	e004      	b.n	800853a <USBH_HandleControl+0x2de>
      break;
 8008530:	bf00      	nop
 8008532:	e002      	b.n	800853a <USBH_HandleControl+0x2de>
      break;
 8008534:	bf00      	nop
 8008536:	e000      	b.n	800853a <USBH_HandleControl+0x2de>
      break;
 8008538:	bf00      	nop
  }

  return status;
 800853a:	7bfb      	ldrb	r3, [r7, #15]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b088      	sub	sp, #32
 8008548:	af04      	add	r7, sp, #16
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	4613      	mov	r3, r2
 8008550:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008552:	79f9      	ldrb	r1, [r7, #7]
 8008554:	2300      	movs	r3, #0
 8008556:	9303      	str	r3, [sp, #12]
 8008558:	2308      	movs	r3, #8
 800855a:	9302      	str	r3, [sp, #8]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	9301      	str	r3, [sp, #4]
 8008560:	2300      	movs	r3, #0
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	2300      	movs	r3, #0
 8008566:	2200      	movs	r2, #0
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 fb46 	bl	8008bfa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b088      	sub	sp, #32
 800857c:	af04      	add	r7, sp, #16
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	4611      	mov	r1, r2
 8008584:	461a      	mov	r2, r3
 8008586:	460b      	mov	r3, r1
 8008588:	80fb      	strh	r3, [r7, #6]
 800858a:	4613      	mov	r3, r2
 800858c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008598:	2300      	movs	r3, #0
 800859a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800859c:	7979      	ldrb	r1, [r7, #5]
 800859e:	7e3b      	ldrb	r3, [r7, #24]
 80085a0:	9303      	str	r3, [sp, #12]
 80085a2:	88fb      	ldrh	r3, [r7, #6]
 80085a4:	9302      	str	r3, [sp, #8]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	9301      	str	r3, [sp, #4]
 80085aa:	2301      	movs	r3, #1
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	2300      	movs	r3, #0
 80085b0:	2200      	movs	r2, #0
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f000 fb21 	bl	8008bfa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b088      	sub	sp, #32
 80085c6:	af04      	add	r7, sp, #16
 80085c8:	60f8      	str	r0, [r7, #12]
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	4611      	mov	r1, r2
 80085ce:	461a      	mov	r2, r3
 80085d0:	460b      	mov	r3, r1
 80085d2:	80fb      	strh	r3, [r7, #6]
 80085d4:	4613      	mov	r3, r2
 80085d6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085d8:	7979      	ldrb	r1, [r7, #5]
 80085da:	2300      	movs	r3, #0
 80085dc:	9303      	str	r3, [sp, #12]
 80085de:	88fb      	ldrh	r3, [r7, #6]
 80085e0:	9302      	str	r3, [sp, #8]
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	9301      	str	r3, [sp, #4]
 80085e6:	2301      	movs	r3, #1
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	2300      	movs	r3, #0
 80085ec:	2201      	movs	r2, #1
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f000 fb03 	bl	8008bfa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80085f4:	2300      	movs	r3, #0

}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b088      	sub	sp, #32
 8008602:	af04      	add	r7, sp, #16
 8008604:	60f8      	str	r0, [r7, #12]
 8008606:	60b9      	str	r1, [r7, #8]
 8008608:	4611      	mov	r1, r2
 800860a:	461a      	mov	r2, r3
 800860c:	460b      	mov	r3, r1
 800860e:	80fb      	strh	r3, [r7, #6]
 8008610:	4613      	mov	r3, r2
 8008612:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800861e:	2300      	movs	r3, #0
 8008620:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008622:	7979      	ldrb	r1, [r7, #5]
 8008624:	7e3b      	ldrb	r3, [r7, #24]
 8008626:	9303      	str	r3, [sp, #12]
 8008628:	88fb      	ldrh	r3, [r7, #6]
 800862a:	9302      	str	r3, [sp, #8]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	9301      	str	r3, [sp, #4]
 8008630:	2301      	movs	r3, #1
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	2302      	movs	r3, #2
 8008636:	2200      	movs	r2, #0
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 fade 	bl	8008bfa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b088      	sub	sp, #32
 800864c:	af04      	add	r7, sp, #16
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	4611      	mov	r1, r2
 8008654:	461a      	mov	r2, r3
 8008656:	460b      	mov	r3, r1
 8008658:	80fb      	strh	r3, [r7, #6]
 800865a:	4613      	mov	r3, r2
 800865c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800865e:	7979      	ldrb	r1, [r7, #5]
 8008660:	2300      	movs	r3, #0
 8008662:	9303      	str	r3, [sp, #12]
 8008664:	88fb      	ldrh	r3, [r7, #6]
 8008666:	9302      	str	r3, [sp, #8]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	9301      	str	r3, [sp, #4]
 800866c:	2301      	movs	r3, #1
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	2302      	movs	r3, #2
 8008672:	2201      	movs	r2, #1
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 fac0 	bl	8008bfa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af04      	add	r7, sp, #16
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	4608      	mov	r0, r1
 800868e:	4611      	mov	r1, r2
 8008690:	461a      	mov	r2, r3
 8008692:	4603      	mov	r3, r0
 8008694:	70fb      	strb	r3, [r7, #3]
 8008696:	460b      	mov	r3, r1
 8008698:	70bb      	strb	r3, [r7, #2]
 800869a:	4613      	mov	r3, r2
 800869c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800869e:	7878      	ldrb	r0, [r7, #1]
 80086a0:	78ba      	ldrb	r2, [r7, #2]
 80086a2:	78f9      	ldrb	r1, [r7, #3]
 80086a4:	8b3b      	ldrh	r3, [r7, #24]
 80086a6:	9302      	str	r3, [sp, #8]
 80086a8:	7d3b      	ldrb	r3, [r7, #20]
 80086aa:	9301      	str	r3, [sp, #4]
 80086ac:	7c3b      	ldrb	r3, [r7, #16]
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	4603      	mov	r3, r0
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fa53 	bl	8008b5e <USBH_LL_OpenPipe>

  return USBH_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b082      	sub	sp, #8
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	460b      	mov	r3, r1
 80086cc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80086ce:	78fb      	ldrb	r3, [r7, #3]
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fa72 	bl	8008bbc <USBH_LL_ClosePipe>

  return USBH_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	460b      	mov	r3, r1
 80086ec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f836 	bl	8008760 <USBH_GetFreePipe>
 80086f4:	4603      	mov	r3, r0
 80086f6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80086f8:	89fb      	ldrh	r3, [r7, #14]
 80086fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086fe:	4293      	cmp	r3, r2
 8008700:	d00a      	beq.n	8008718 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008702:	78fa      	ldrb	r2, [r7, #3]
 8008704:	89fb      	ldrh	r3, [r7, #14]
 8008706:	f003 030f 	and.w	r3, r3, #15
 800870a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800870e:	6879      	ldr	r1, [r7, #4]
 8008710:	33e0      	adds	r3, #224	; 0xe0
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	440b      	add	r3, r1
 8008716:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008718:	89fb      	ldrh	r3, [r7, #14]
 800871a:	b2db      	uxtb	r3, r3
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008730:	78fb      	ldrb	r3, [r7, #3]
 8008732:	2b0f      	cmp	r3, #15
 8008734:	d80d      	bhi.n	8008752 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008736:	78fb      	ldrb	r3, [r7, #3]
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	33e0      	adds	r3, #224	; 0xe0
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4413      	add	r3, r2
 8008740:	685a      	ldr	r2, [r3, #4]
 8008742:	78fb      	ldrb	r3, [r7, #3]
 8008744:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008748:	6879      	ldr	r1, [r7, #4]
 800874a:	33e0      	adds	r3, #224	; 0xe0
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	440b      	add	r3, r1
 8008750:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008768:	2300      	movs	r3, #0
 800876a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800876c:	2300      	movs	r3, #0
 800876e:	73fb      	strb	r3, [r7, #15]
 8008770:	e00f      	b.n	8008792 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008772:	7bfb      	ldrb	r3, [r7, #15]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	33e0      	adds	r3, #224	; 0xe0
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4413      	add	r3, r2
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d102      	bne.n	800878c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008786:	7bfb      	ldrb	r3, [r7, #15]
 8008788:	b29b      	uxth	r3, r3
 800878a:	e007      	b.n	800879c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800878c:	7bfb      	ldrb	r3, [r7, #15]
 800878e:	3301      	adds	r3, #1
 8008790:	73fb      	strb	r3, [r7, #15]
 8008792:	7bfb      	ldrb	r3, [r7, #15]
 8008794:	2b0f      	cmp	r3, #15
 8008796:	d9ec      	bls.n	8008772 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008798:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800879c:	4618      	mov	r0, r3
 800879e:	3714      	adds	r7, #20
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80087ac:	2201      	movs	r2, #1
 80087ae:	490e      	ldr	r1, [pc, #56]	; (80087e8 <MX_USB_HOST_Init+0x40>)
 80087b0:	480e      	ldr	r0, [pc, #56]	; (80087ec <MX_USB_HOST_Init+0x44>)
 80087b2:	f7fe fba7 	bl	8006f04 <USBH_Init>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80087bc:	f7f8 f92c 	bl	8000a18 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80087c0:	490b      	ldr	r1, [pc, #44]	; (80087f0 <MX_USB_HOST_Init+0x48>)
 80087c2:	480a      	ldr	r0, [pc, #40]	; (80087ec <MX_USB_HOST_Init+0x44>)
 80087c4:	f7fe fc2c 	bl	8007020 <USBH_RegisterClass>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80087ce:	f7f8 f923 	bl	8000a18 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80087d2:	4806      	ldr	r0, [pc, #24]	; (80087ec <MX_USB_HOST_Init+0x44>)
 80087d4:	f7fe fcb0 	bl	8007138 <USBH_Start>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d001      	beq.n	80087e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80087de:	f7f8 f91b 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80087e2:	bf00      	nop
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	08008809 	.word	0x08008809
 80087ec:	20000204 	.word	0x20000204
 80087f0:	2000000c 	.word	0x2000000c

080087f4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80087f8:	4802      	ldr	r0, [pc, #8]	; (8008804 <MX_USB_HOST_Process+0x10>)
 80087fa:	f7fe fcad 	bl	8007158 <USBH_Process>
}
 80087fe:	bf00      	nop
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20000204 	.word	0x20000204

08008808 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	460b      	mov	r3, r1
 8008812:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008814:	78fb      	ldrb	r3, [r7, #3]
 8008816:	3b01      	subs	r3, #1
 8008818:	2b04      	cmp	r3, #4
 800881a:	d819      	bhi.n	8008850 <USBH_UserProcess+0x48>
 800881c:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <USBH_UserProcess+0x1c>)
 800881e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008822:	bf00      	nop
 8008824:	08008851 	.word	0x08008851
 8008828:	08008841 	.word	0x08008841
 800882c:	08008851 	.word	0x08008851
 8008830:	08008849 	.word	0x08008849
 8008834:	08008839 	.word	0x08008839
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008838:	4b09      	ldr	r3, [pc, #36]	; (8008860 <USBH_UserProcess+0x58>)
 800883a:	2203      	movs	r2, #3
 800883c:	701a      	strb	r2, [r3, #0]
  break;
 800883e:	e008      	b.n	8008852 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008840:	4b07      	ldr	r3, [pc, #28]	; (8008860 <USBH_UserProcess+0x58>)
 8008842:	2202      	movs	r2, #2
 8008844:	701a      	strb	r2, [r3, #0]
  break;
 8008846:	e004      	b.n	8008852 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008848:	4b05      	ldr	r3, [pc, #20]	; (8008860 <USBH_UserProcess+0x58>)
 800884a:	2201      	movs	r2, #1
 800884c:	701a      	strb	r2, [r3, #0]
  break;
 800884e:	e000      	b.n	8008852 <USBH_UserProcess+0x4a>

  default:
  break;
 8008850:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008852:	bf00      	nop
 8008854:	370c      	adds	r7, #12
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	200005dc 	.word	0x200005dc

08008864 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b08a      	sub	sp, #40	; 0x28
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800886c:	f107 0314 	add.w	r3, r7, #20
 8008870:	2200      	movs	r2, #0
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	605a      	str	r2, [r3, #4]
 8008876:	609a      	str	r2, [r3, #8]
 8008878:	60da      	str	r2, [r3, #12]
 800887a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008884:	d147      	bne.n	8008916 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008886:	2300      	movs	r3, #0
 8008888:	613b      	str	r3, [r7, #16]
 800888a:	4b25      	ldr	r3, [pc, #148]	; (8008920 <HAL_HCD_MspInit+0xbc>)
 800888c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888e:	4a24      	ldr	r2, [pc, #144]	; (8008920 <HAL_HCD_MspInit+0xbc>)
 8008890:	f043 0301 	orr.w	r3, r3, #1
 8008894:	6313      	str	r3, [r2, #48]	; 0x30
 8008896:	4b22      	ldr	r3, [pc, #136]	; (8008920 <HAL_HCD_MspInit+0xbc>)
 8008898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889a:	f003 0301 	and.w	r3, r3, #1
 800889e:	613b      	str	r3, [r7, #16]
 80088a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80088a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088a8:	2300      	movs	r3, #0
 80088aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ac:	2300      	movs	r3, #0
 80088ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80088b0:	f107 0314 	add.w	r3, r7, #20
 80088b4:	4619      	mov	r1, r3
 80088b6:	481b      	ldr	r0, [pc, #108]	; (8008924 <HAL_HCD_MspInit+0xc0>)
 80088b8:	f7f8 fd26 	bl	8001308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80088bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80088c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088c2:	2302      	movs	r3, #2
 80088c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088c6:	2300      	movs	r3, #0
 80088c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088ca:	2300      	movs	r3, #0
 80088cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088ce:	230a      	movs	r3, #10
 80088d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088d2:	f107 0314 	add.w	r3, r7, #20
 80088d6:	4619      	mov	r1, r3
 80088d8:	4812      	ldr	r0, [pc, #72]	; (8008924 <HAL_HCD_MspInit+0xc0>)
 80088da:	f7f8 fd15 	bl	8001308 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088de:	4b10      	ldr	r3, [pc, #64]	; (8008920 <HAL_HCD_MspInit+0xbc>)
 80088e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e2:	4a0f      	ldr	r2, [pc, #60]	; (8008920 <HAL_HCD_MspInit+0xbc>)
 80088e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088e8:	6353      	str	r3, [r2, #52]	; 0x34
 80088ea:	2300      	movs	r3, #0
 80088ec:	60fb      	str	r3, [r7, #12]
 80088ee:	4b0c      	ldr	r3, [pc, #48]	; (8008920 <HAL_HCD_MspInit+0xbc>)
 80088f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088f2:	4a0b      	ldr	r2, [pc, #44]	; (8008920 <HAL_HCD_MspInit+0xbc>)
 80088f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088f8:	6453      	str	r3, [r2, #68]	; 0x44
 80088fa:	4b09      	ldr	r3, [pc, #36]	; (8008920 <HAL_HCD_MspInit+0xbc>)
 80088fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008902:	60fb      	str	r3, [r7, #12]
 8008904:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008906:	2200      	movs	r2, #0
 8008908:	2100      	movs	r1, #0
 800890a:	2043      	movs	r0, #67	; 0x43
 800890c:	f7f8 fc33 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008910:	2043      	movs	r0, #67	; 0x43
 8008912:	f7f8 fc4c 	bl	80011ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008916:	bf00      	nop
 8008918:	3728      	adds	r7, #40	; 0x28
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	40023800 	.word	0x40023800
 8008924:	40020000 	.word	0x40020000

08008928 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008936:	4618      	mov	r0, r3
 8008938:	f7fe ffed 	bl	8007916 <USBH_LL_IncTimer>
}
 800893c:	bf00      	nop
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008952:	4618      	mov	r0, r3
 8008954:	f7ff f825 	bl	80079a2 <USBH_LL_Connect>
}
 8008958:	bf00      	nop
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800896e:	4618      	mov	r0, r3
 8008970:	f7ff f82e 	bl	80079d0 <USBH_LL_Disconnect>
}
 8008974:	bf00      	nop
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	460b      	mov	r3, r1
 8008986:	70fb      	strb	r3, [r7, #3]
 8008988:	4613      	mov	r3, r2
 800898a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fe ffdf 	bl	800796a <USBH_LL_PortEnabled>
}
 80089ac:	bf00      	nop
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fe ffdf 	bl	8007986 <USBH_LL_PortDisabled>
}
 80089c8:	bf00      	nop
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d12a      	bne.n	8008a38 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80089e2:	4a18      	ldr	r2, [pc, #96]	; (8008a44 <USBH_LL_Init+0x74>)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a15      	ldr	r2, [pc, #84]	; (8008a44 <USBH_LL_Init+0x74>)
 80089ee:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089f2:	4b14      	ldr	r3, [pc, #80]	; (8008a44 <USBH_LL_Init+0x74>)
 80089f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80089f8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80089fa:	4b12      	ldr	r3, [pc, #72]	; (8008a44 <USBH_LL_Init+0x74>)
 80089fc:	2208      	movs	r2, #8
 80089fe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008a00:	4b10      	ldr	r3, [pc, #64]	; (8008a44 <USBH_LL_Init+0x74>)
 8008a02:	2201      	movs	r2, #1
 8008a04:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a06:	4b0f      	ldr	r3, [pc, #60]	; (8008a44 <USBH_LL_Init+0x74>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008a0c:	4b0d      	ldr	r3, [pc, #52]	; (8008a44 <USBH_LL_Init+0x74>)
 8008a0e:	2202      	movs	r2, #2
 8008a10:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a12:	4b0c      	ldr	r3, [pc, #48]	; (8008a44 <USBH_LL_Init+0x74>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008a18:	480a      	ldr	r0, [pc, #40]	; (8008a44 <USBH_LL_Init+0x74>)
 8008a1a:	f7f8 fe2a 	bl	8001672 <HAL_HCD_Init>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d001      	beq.n	8008a28 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008a24:	f7f7 fff8 	bl	8000a18 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008a28:	4806      	ldr	r0, [pc, #24]	; (8008a44 <USBH_LL_Init+0x74>)
 8008a2a:	f7f9 fa0e 	bl	8001e4a <HAL_HCD_GetCurrentFrame>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7fe ff60 	bl	80078f8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	200005e0 	.word	0x200005e0

08008a48 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7f9 f97d 	bl	8001d5e <HAL_HCD_Start>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 f95c 	bl	8008d28 <USBH_Get_USB_Status>
 8008a70:	4603      	mov	r3, r0
 8008a72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a74:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7f9 f985 	bl	8001da4 <HAL_HCD_Stop>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 f941 	bl	8008d28 <USBH_Get_USB_Status>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008abc:	2301      	movs	r3, #1
 8008abe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7f9 f9cd 	bl	8001e66 <HAL_HCD_GetCurrentSpeed>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d00c      	beq.n	8008aec <USBH_LL_GetSpeed+0x38>
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d80d      	bhi.n	8008af2 <USBH_LL_GetSpeed+0x3e>
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d002      	beq.n	8008ae0 <USBH_LL_GetSpeed+0x2c>
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d003      	beq.n	8008ae6 <USBH_LL_GetSpeed+0x32>
 8008ade:	e008      	b.n	8008af2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae4:	e008      	b.n	8008af8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	73fb      	strb	r3, [r7, #15]
    break;
 8008aea:	e005      	b.n	8008af8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008aec:	2302      	movs	r3, #2
 8008aee:	73fb      	strb	r3, [r7, #15]
    break;
 8008af0:	e002      	b.n	8008af8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008af2:	2301      	movs	r3, #1
 8008af4:	73fb      	strb	r3, [r7, #15]
    break;
 8008af6:	bf00      	nop
  }
  return  speed;
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b084      	sub	sp, #16
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7f9 f960 	bl	8001dde <HAL_HCD_ResetPort>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f000 f8ff 	bl	8008d28 <USBH_Get_USB_Status>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b4a:	78fa      	ldrb	r2, [r7, #3]
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7f9 f967 	bl	8001e22 <HAL_HCD_HC_GetXferCount>
 8008b54:	4603      	mov	r3, r0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b5e:	b590      	push	{r4, r7, lr}
 8008b60:	b089      	sub	sp, #36	; 0x24
 8008b62:	af04      	add	r7, sp, #16
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	4608      	mov	r0, r1
 8008b68:	4611      	mov	r1, r2
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	70fb      	strb	r3, [r7, #3]
 8008b70:	460b      	mov	r3, r1
 8008b72:	70bb      	strb	r3, [r7, #2]
 8008b74:	4613      	mov	r3, r2
 8008b76:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b86:	787c      	ldrb	r4, [r7, #1]
 8008b88:	78ba      	ldrb	r2, [r7, #2]
 8008b8a:	78f9      	ldrb	r1, [r7, #3]
 8008b8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b8e:	9302      	str	r3, [sp, #8]
 8008b90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b94:	9301      	str	r3, [sp, #4]
 8008b96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	4623      	mov	r3, r4
 8008b9e:	f7f8 fdca 	bl	8001736 <HAL_HCD_HC_Init>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 f8bd 	bl	8008d28 <USBH_Get_USB_Status>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd90      	pop	{r4, r7, pc}

08008bbc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bd6:	78fa      	ldrb	r2, [r7, #3]
 8008bd8:	4611      	mov	r1, r2
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7f8 fe3a 	bl	8001854 <HAL_HCD_HC_Halt>
 8008be0:	4603      	mov	r3, r0
 8008be2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 f89e 	bl	8008d28 <USBH_Get_USB_Status>
 8008bec:	4603      	mov	r3, r0
 8008bee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008bfa:	b590      	push	{r4, r7, lr}
 8008bfc:	b089      	sub	sp, #36	; 0x24
 8008bfe:	af04      	add	r7, sp, #16
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	4608      	mov	r0, r1
 8008c04:	4611      	mov	r1, r2
 8008c06:	461a      	mov	r2, r3
 8008c08:	4603      	mov	r3, r0
 8008c0a:	70fb      	strb	r3, [r7, #3]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	70bb      	strb	r3, [r7, #2]
 8008c10:	4613      	mov	r3, r2
 8008c12:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c22:	787c      	ldrb	r4, [r7, #1]
 8008c24:	78ba      	ldrb	r2, [r7, #2]
 8008c26:	78f9      	ldrb	r1, [r7, #3]
 8008c28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c2c:	9303      	str	r3, [sp, #12]
 8008c2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c30:	9302      	str	r3, [sp, #8]
 8008c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c34:	9301      	str	r3, [sp, #4]
 8008c36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	4623      	mov	r3, r4
 8008c3e:	f7f8 fe2d 	bl	800189c <HAL_HCD_HC_SubmitRequest>
 8008c42:	4603      	mov	r3, r0
 8008c44:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f000 f86d 	bl	8008d28 <USBH_Get_USB_Status>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c52:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd90      	pop	{r4, r7, pc}

08008c5c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	460b      	mov	r3, r1
 8008c66:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c6e:	78fa      	ldrb	r2, [r7, #3]
 8008c70:	4611      	mov	r1, r2
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7f9 f8c1 	bl	8001dfa <HAL_HCD_HC_GetURBState>
 8008c78:	4603      	mov	r3, r0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b082      	sub	sp, #8
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d103      	bne.n	8008ca0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008c98:	78fb      	ldrb	r3, [r7, #3]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 f870 	bl	8008d80 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008ca0:	20c8      	movs	r0, #200	; 0xc8
 8008ca2:	f7f8 f969 	bl	8000f78 <HAL_Delay>
  return USBH_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	70fb      	strb	r3, [r7, #3]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cc6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008cc8:	78fb      	ldrb	r3, [r7, #3]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	212c      	movs	r1, #44	; 0x2c
 8008cce:	fb01 f303 	mul.w	r3, r1, r3
 8008cd2:	4413      	add	r3, r2
 8008cd4:	333b      	adds	r3, #59	; 0x3b
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d009      	beq.n	8008cf0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008cdc:	78fb      	ldrb	r3, [r7, #3]
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	212c      	movs	r1, #44	; 0x2c
 8008ce2:	fb01 f303 	mul.w	r3, r1, r3
 8008ce6:	4413      	add	r3, r2
 8008ce8:	3354      	adds	r3, #84	; 0x54
 8008cea:	78ba      	ldrb	r2, [r7, #2]
 8008cec:	701a      	strb	r2, [r3, #0]
 8008cee:	e008      	b.n	8008d02 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008cf0:	78fb      	ldrb	r3, [r7, #3]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	212c      	movs	r1, #44	; 0x2c
 8008cf6:	fb01 f303 	mul.w	r3, r1, r3
 8008cfa:	4413      	add	r3, r2
 8008cfc:	3355      	adds	r3, #85	; 0x55
 8008cfe:	78ba      	ldrb	r2, [r7, #2]
 8008d00:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7f8 f92d 	bl	8000f78 <HAL_Delay>
}
 8008d1e:	bf00      	nop
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
	...

08008d28 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	4603      	mov	r3, r0
 8008d30:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d36:	79fb      	ldrb	r3, [r7, #7]
 8008d38:	2b03      	cmp	r3, #3
 8008d3a:	d817      	bhi.n	8008d6c <USBH_Get_USB_Status+0x44>
 8008d3c:	a201      	add	r2, pc, #4	; (adr r2, 8008d44 <USBH_Get_USB_Status+0x1c>)
 8008d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d42:	bf00      	nop
 8008d44:	08008d55 	.word	0x08008d55
 8008d48:	08008d5b 	.word	0x08008d5b
 8008d4c:	08008d61 	.word	0x08008d61
 8008d50:	08008d67 	.word	0x08008d67
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73fb      	strb	r3, [r7, #15]
    break;
 8008d58:	e00b      	b.n	8008d72 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d5e:	e008      	b.n	8008d72 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008d60:	2301      	movs	r3, #1
 8008d62:	73fb      	strb	r3, [r7, #15]
    break;
 8008d64:	e005      	b.n	8008d72 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008d66:	2302      	movs	r3, #2
 8008d68:	73fb      	strb	r3, [r7, #15]
    break;
 8008d6a:	e002      	b.n	8008d72 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d70:	bf00      	nop
  }
  return usb_status;
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3714      	adds	r7, #20
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	4603      	mov	r3, r0
 8008d88:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008d8a:	79fb      	ldrb	r3, [r7, #7]
 8008d8c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008d8e:	79fb      	ldrb	r3, [r7, #7]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d102      	bne.n	8008d9a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008d94:	2300      	movs	r3, #0
 8008d96:	73fb      	strb	r3, [r7, #15]
 8008d98:	e001      	b.n	8008d9e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
 8008da0:	461a      	mov	r2, r3
 8008da2:	2101      	movs	r1, #1
 8008da4:	4803      	ldr	r0, [pc, #12]	; (8008db4 <MX_DriverVbusFS+0x34>)
 8008da6:	f7f8 fc4b 	bl	8001640 <HAL_GPIO_WritePin>
}
 8008daa:	bf00      	nop
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	40020800 	.word	0x40020800

08008db8 <__errno>:
 8008db8:	4b01      	ldr	r3, [pc, #4]	; (8008dc0 <__errno+0x8>)
 8008dba:	6818      	ldr	r0, [r3, #0]
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	2000002c 	.word	0x2000002c

08008dc4 <__libc_init_array>:
 8008dc4:	b570      	push	{r4, r5, r6, lr}
 8008dc6:	4d0d      	ldr	r5, [pc, #52]	; (8008dfc <__libc_init_array+0x38>)
 8008dc8:	4c0d      	ldr	r4, [pc, #52]	; (8008e00 <__libc_init_array+0x3c>)
 8008dca:	1b64      	subs	r4, r4, r5
 8008dcc:	10a4      	asrs	r4, r4, #2
 8008dce:	2600      	movs	r6, #0
 8008dd0:	42a6      	cmp	r6, r4
 8008dd2:	d109      	bne.n	8008de8 <__libc_init_array+0x24>
 8008dd4:	4d0b      	ldr	r5, [pc, #44]	; (8008e04 <__libc_init_array+0x40>)
 8008dd6:	4c0c      	ldr	r4, [pc, #48]	; (8008e08 <__libc_init_array+0x44>)
 8008dd8:	f000 f92e 	bl	8009038 <_init>
 8008ddc:	1b64      	subs	r4, r4, r5
 8008dde:	10a4      	asrs	r4, r4, #2
 8008de0:	2600      	movs	r6, #0
 8008de2:	42a6      	cmp	r6, r4
 8008de4:	d105      	bne.n	8008df2 <__libc_init_array+0x2e>
 8008de6:	bd70      	pop	{r4, r5, r6, pc}
 8008de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dec:	4798      	blx	r3
 8008dee:	3601      	adds	r6, #1
 8008df0:	e7ee      	b.n	8008dd0 <__libc_init_array+0xc>
 8008df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008df6:	4798      	blx	r3
 8008df8:	3601      	adds	r6, #1
 8008dfa:	e7f2      	b.n	8008de2 <__libc_init_array+0x1e>
 8008dfc:	08009074 	.word	0x08009074
 8008e00:	08009074 	.word	0x08009074
 8008e04:	08009074 	.word	0x08009074
 8008e08:	08009078 	.word	0x08009078

08008e0c <malloc>:
 8008e0c:	4b02      	ldr	r3, [pc, #8]	; (8008e18 <malloc+0xc>)
 8008e0e:	4601      	mov	r1, r0
 8008e10:	6818      	ldr	r0, [r3, #0]
 8008e12:	f000 b87f 	b.w	8008f14 <_malloc_r>
 8008e16:	bf00      	nop
 8008e18:	2000002c 	.word	0x2000002c

08008e1c <free>:
 8008e1c:	4b02      	ldr	r3, [pc, #8]	; (8008e28 <free+0xc>)
 8008e1e:	4601      	mov	r1, r0
 8008e20:	6818      	ldr	r0, [r3, #0]
 8008e22:	f000 b80b 	b.w	8008e3c <_free_r>
 8008e26:	bf00      	nop
 8008e28:	2000002c 	.word	0x2000002c

08008e2c <memset>:
 8008e2c:	4402      	add	r2, r0
 8008e2e:	4603      	mov	r3, r0
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d100      	bne.n	8008e36 <memset+0xa>
 8008e34:	4770      	bx	lr
 8008e36:	f803 1b01 	strb.w	r1, [r3], #1
 8008e3a:	e7f9      	b.n	8008e30 <memset+0x4>

08008e3c <_free_r>:
 8008e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e3e:	2900      	cmp	r1, #0
 8008e40:	d044      	beq.n	8008ecc <_free_r+0x90>
 8008e42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e46:	9001      	str	r0, [sp, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e4e:	bfb8      	it	lt
 8008e50:	18e4      	addlt	r4, r4, r3
 8008e52:	f000 f8e3 	bl	800901c <__malloc_lock>
 8008e56:	4a1e      	ldr	r2, [pc, #120]	; (8008ed0 <_free_r+0x94>)
 8008e58:	9801      	ldr	r0, [sp, #4]
 8008e5a:	6813      	ldr	r3, [r2, #0]
 8008e5c:	b933      	cbnz	r3, 8008e6c <_free_r+0x30>
 8008e5e:	6063      	str	r3, [r4, #4]
 8008e60:	6014      	str	r4, [r2, #0]
 8008e62:	b003      	add	sp, #12
 8008e64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e68:	f000 b8de 	b.w	8009028 <__malloc_unlock>
 8008e6c:	42a3      	cmp	r3, r4
 8008e6e:	d908      	bls.n	8008e82 <_free_r+0x46>
 8008e70:	6825      	ldr	r5, [r4, #0]
 8008e72:	1961      	adds	r1, r4, r5
 8008e74:	428b      	cmp	r3, r1
 8008e76:	bf01      	itttt	eq
 8008e78:	6819      	ldreq	r1, [r3, #0]
 8008e7a:	685b      	ldreq	r3, [r3, #4]
 8008e7c:	1949      	addeq	r1, r1, r5
 8008e7e:	6021      	streq	r1, [r4, #0]
 8008e80:	e7ed      	b.n	8008e5e <_free_r+0x22>
 8008e82:	461a      	mov	r2, r3
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	b10b      	cbz	r3, 8008e8c <_free_r+0x50>
 8008e88:	42a3      	cmp	r3, r4
 8008e8a:	d9fa      	bls.n	8008e82 <_free_r+0x46>
 8008e8c:	6811      	ldr	r1, [r2, #0]
 8008e8e:	1855      	adds	r5, r2, r1
 8008e90:	42a5      	cmp	r5, r4
 8008e92:	d10b      	bne.n	8008eac <_free_r+0x70>
 8008e94:	6824      	ldr	r4, [r4, #0]
 8008e96:	4421      	add	r1, r4
 8008e98:	1854      	adds	r4, r2, r1
 8008e9a:	42a3      	cmp	r3, r4
 8008e9c:	6011      	str	r1, [r2, #0]
 8008e9e:	d1e0      	bne.n	8008e62 <_free_r+0x26>
 8008ea0:	681c      	ldr	r4, [r3, #0]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	6053      	str	r3, [r2, #4]
 8008ea6:	4421      	add	r1, r4
 8008ea8:	6011      	str	r1, [r2, #0]
 8008eaa:	e7da      	b.n	8008e62 <_free_r+0x26>
 8008eac:	d902      	bls.n	8008eb4 <_free_r+0x78>
 8008eae:	230c      	movs	r3, #12
 8008eb0:	6003      	str	r3, [r0, #0]
 8008eb2:	e7d6      	b.n	8008e62 <_free_r+0x26>
 8008eb4:	6825      	ldr	r5, [r4, #0]
 8008eb6:	1961      	adds	r1, r4, r5
 8008eb8:	428b      	cmp	r3, r1
 8008eba:	bf04      	itt	eq
 8008ebc:	6819      	ldreq	r1, [r3, #0]
 8008ebe:	685b      	ldreq	r3, [r3, #4]
 8008ec0:	6063      	str	r3, [r4, #4]
 8008ec2:	bf04      	itt	eq
 8008ec4:	1949      	addeq	r1, r1, r5
 8008ec6:	6021      	streq	r1, [r4, #0]
 8008ec8:	6054      	str	r4, [r2, #4]
 8008eca:	e7ca      	b.n	8008e62 <_free_r+0x26>
 8008ecc:	b003      	add	sp, #12
 8008ece:	bd30      	pop	{r4, r5, pc}
 8008ed0:	200008e4 	.word	0x200008e4

08008ed4 <sbrk_aligned>:
 8008ed4:	b570      	push	{r4, r5, r6, lr}
 8008ed6:	4e0e      	ldr	r6, [pc, #56]	; (8008f10 <sbrk_aligned+0x3c>)
 8008ed8:	460c      	mov	r4, r1
 8008eda:	6831      	ldr	r1, [r6, #0]
 8008edc:	4605      	mov	r5, r0
 8008ede:	b911      	cbnz	r1, 8008ee6 <sbrk_aligned+0x12>
 8008ee0:	f000 f88c 	bl	8008ffc <_sbrk_r>
 8008ee4:	6030      	str	r0, [r6, #0]
 8008ee6:	4621      	mov	r1, r4
 8008ee8:	4628      	mov	r0, r5
 8008eea:	f000 f887 	bl	8008ffc <_sbrk_r>
 8008eee:	1c43      	adds	r3, r0, #1
 8008ef0:	d00a      	beq.n	8008f08 <sbrk_aligned+0x34>
 8008ef2:	1cc4      	adds	r4, r0, #3
 8008ef4:	f024 0403 	bic.w	r4, r4, #3
 8008ef8:	42a0      	cmp	r0, r4
 8008efa:	d007      	beq.n	8008f0c <sbrk_aligned+0x38>
 8008efc:	1a21      	subs	r1, r4, r0
 8008efe:	4628      	mov	r0, r5
 8008f00:	f000 f87c 	bl	8008ffc <_sbrk_r>
 8008f04:	3001      	adds	r0, #1
 8008f06:	d101      	bne.n	8008f0c <sbrk_aligned+0x38>
 8008f08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}
 8008f10:	200008e8 	.word	0x200008e8

08008f14 <_malloc_r>:
 8008f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f18:	1ccd      	adds	r5, r1, #3
 8008f1a:	f025 0503 	bic.w	r5, r5, #3
 8008f1e:	3508      	adds	r5, #8
 8008f20:	2d0c      	cmp	r5, #12
 8008f22:	bf38      	it	cc
 8008f24:	250c      	movcc	r5, #12
 8008f26:	2d00      	cmp	r5, #0
 8008f28:	4607      	mov	r7, r0
 8008f2a:	db01      	blt.n	8008f30 <_malloc_r+0x1c>
 8008f2c:	42a9      	cmp	r1, r5
 8008f2e:	d905      	bls.n	8008f3c <_malloc_r+0x28>
 8008f30:	230c      	movs	r3, #12
 8008f32:	603b      	str	r3, [r7, #0]
 8008f34:	2600      	movs	r6, #0
 8008f36:	4630      	mov	r0, r6
 8008f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f3c:	4e2e      	ldr	r6, [pc, #184]	; (8008ff8 <_malloc_r+0xe4>)
 8008f3e:	f000 f86d 	bl	800901c <__malloc_lock>
 8008f42:	6833      	ldr	r3, [r6, #0]
 8008f44:	461c      	mov	r4, r3
 8008f46:	bb34      	cbnz	r4, 8008f96 <_malloc_r+0x82>
 8008f48:	4629      	mov	r1, r5
 8008f4a:	4638      	mov	r0, r7
 8008f4c:	f7ff ffc2 	bl	8008ed4 <sbrk_aligned>
 8008f50:	1c43      	adds	r3, r0, #1
 8008f52:	4604      	mov	r4, r0
 8008f54:	d14d      	bne.n	8008ff2 <_malloc_r+0xde>
 8008f56:	6834      	ldr	r4, [r6, #0]
 8008f58:	4626      	mov	r6, r4
 8008f5a:	2e00      	cmp	r6, #0
 8008f5c:	d140      	bne.n	8008fe0 <_malloc_r+0xcc>
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	4631      	mov	r1, r6
 8008f62:	4638      	mov	r0, r7
 8008f64:	eb04 0803 	add.w	r8, r4, r3
 8008f68:	f000 f848 	bl	8008ffc <_sbrk_r>
 8008f6c:	4580      	cmp	r8, r0
 8008f6e:	d13a      	bne.n	8008fe6 <_malloc_r+0xd2>
 8008f70:	6821      	ldr	r1, [r4, #0]
 8008f72:	3503      	adds	r5, #3
 8008f74:	1a6d      	subs	r5, r5, r1
 8008f76:	f025 0503 	bic.w	r5, r5, #3
 8008f7a:	3508      	adds	r5, #8
 8008f7c:	2d0c      	cmp	r5, #12
 8008f7e:	bf38      	it	cc
 8008f80:	250c      	movcc	r5, #12
 8008f82:	4629      	mov	r1, r5
 8008f84:	4638      	mov	r0, r7
 8008f86:	f7ff ffa5 	bl	8008ed4 <sbrk_aligned>
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d02b      	beq.n	8008fe6 <_malloc_r+0xd2>
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	442b      	add	r3, r5
 8008f92:	6023      	str	r3, [r4, #0]
 8008f94:	e00e      	b.n	8008fb4 <_malloc_r+0xa0>
 8008f96:	6822      	ldr	r2, [r4, #0]
 8008f98:	1b52      	subs	r2, r2, r5
 8008f9a:	d41e      	bmi.n	8008fda <_malloc_r+0xc6>
 8008f9c:	2a0b      	cmp	r2, #11
 8008f9e:	d916      	bls.n	8008fce <_malloc_r+0xba>
 8008fa0:	1961      	adds	r1, r4, r5
 8008fa2:	42a3      	cmp	r3, r4
 8008fa4:	6025      	str	r5, [r4, #0]
 8008fa6:	bf18      	it	ne
 8008fa8:	6059      	strne	r1, [r3, #4]
 8008faa:	6863      	ldr	r3, [r4, #4]
 8008fac:	bf08      	it	eq
 8008fae:	6031      	streq	r1, [r6, #0]
 8008fb0:	5162      	str	r2, [r4, r5]
 8008fb2:	604b      	str	r3, [r1, #4]
 8008fb4:	4638      	mov	r0, r7
 8008fb6:	f104 060b 	add.w	r6, r4, #11
 8008fba:	f000 f835 	bl	8009028 <__malloc_unlock>
 8008fbe:	f026 0607 	bic.w	r6, r6, #7
 8008fc2:	1d23      	adds	r3, r4, #4
 8008fc4:	1af2      	subs	r2, r6, r3
 8008fc6:	d0b6      	beq.n	8008f36 <_malloc_r+0x22>
 8008fc8:	1b9b      	subs	r3, r3, r6
 8008fca:	50a3      	str	r3, [r4, r2]
 8008fcc:	e7b3      	b.n	8008f36 <_malloc_r+0x22>
 8008fce:	6862      	ldr	r2, [r4, #4]
 8008fd0:	42a3      	cmp	r3, r4
 8008fd2:	bf0c      	ite	eq
 8008fd4:	6032      	streq	r2, [r6, #0]
 8008fd6:	605a      	strne	r2, [r3, #4]
 8008fd8:	e7ec      	b.n	8008fb4 <_malloc_r+0xa0>
 8008fda:	4623      	mov	r3, r4
 8008fdc:	6864      	ldr	r4, [r4, #4]
 8008fde:	e7b2      	b.n	8008f46 <_malloc_r+0x32>
 8008fe0:	4634      	mov	r4, r6
 8008fe2:	6876      	ldr	r6, [r6, #4]
 8008fe4:	e7b9      	b.n	8008f5a <_malloc_r+0x46>
 8008fe6:	230c      	movs	r3, #12
 8008fe8:	603b      	str	r3, [r7, #0]
 8008fea:	4638      	mov	r0, r7
 8008fec:	f000 f81c 	bl	8009028 <__malloc_unlock>
 8008ff0:	e7a1      	b.n	8008f36 <_malloc_r+0x22>
 8008ff2:	6025      	str	r5, [r4, #0]
 8008ff4:	e7de      	b.n	8008fb4 <_malloc_r+0xa0>
 8008ff6:	bf00      	nop
 8008ff8:	200008e4 	.word	0x200008e4

08008ffc <_sbrk_r>:
 8008ffc:	b538      	push	{r3, r4, r5, lr}
 8008ffe:	4d06      	ldr	r5, [pc, #24]	; (8009018 <_sbrk_r+0x1c>)
 8009000:	2300      	movs	r3, #0
 8009002:	4604      	mov	r4, r0
 8009004:	4608      	mov	r0, r1
 8009006:	602b      	str	r3, [r5, #0]
 8009008:	f7f7 fed2 	bl	8000db0 <_sbrk>
 800900c:	1c43      	adds	r3, r0, #1
 800900e:	d102      	bne.n	8009016 <_sbrk_r+0x1a>
 8009010:	682b      	ldr	r3, [r5, #0]
 8009012:	b103      	cbz	r3, 8009016 <_sbrk_r+0x1a>
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	bd38      	pop	{r3, r4, r5, pc}
 8009018:	200008ec 	.word	0x200008ec

0800901c <__malloc_lock>:
 800901c:	4801      	ldr	r0, [pc, #4]	; (8009024 <__malloc_lock+0x8>)
 800901e:	f000 b809 	b.w	8009034 <__retarget_lock_acquire_recursive>
 8009022:	bf00      	nop
 8009024:	200008f0 	.word	0x200008f0

08009028 <__malloc_unlock>:
 8009028:	4801      	ldr	r0, [pc, #4]	; (8009030 <__malloc_unlock+0x8>)
 800902a:	f000 b804 	b.w	8009036 <__retarget_lock_release_recursive>
 800902e:	bf00      	nop
 8009030:	200008f0 	.word	0x200008f0

08009034 <__retarget_lock_acquire_recursive>:
 8009034:	4770      	bx	lr

08009036 <__retarget_lock_release_recursive>:
 8009036:	4770      	bx	lr

08009038 <_init>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	bf00      	nop
 800903c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903e:	bc08      	pop	{r3}
 8009040:	469e      	mov	lr, r3
 8009042:	4770      	bx	lr

08009044 <_fini>:
 8009044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009046:	bf00      	nop
 8009048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904a:	bc08      	pop	{r3}
 800904c:	469e      	mov	lr, r3
 800904e:	4770      	bx	lr
