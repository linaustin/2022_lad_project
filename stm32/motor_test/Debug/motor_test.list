
motor_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b28  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009cb0  08009cb0  00019cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ccc  08009ccc  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08009ccc  08009ccc  00019ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cd4  08009cd4  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cd4  08009cd4  00019cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cd8  08009cd8  00019cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08009cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          000008cc  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000964  20000964  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001affc  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c91  00000000  00000000  0003b0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001690  00000000  00000000  0003ed58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001500  00000000  00000000  000403e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245b5  00000000  00000000  000418e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c571  00000000  00000000  00065e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3ca9  00000000  00000000  0008240e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001560b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006314  00000000  00000000  00156108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009c98 	.word	0x08009c98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08009c98 	.word	0x08009c98

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009c8:	f000 b974 	b.w	8000cb4 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468e      	mov	lr, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14d      	bne.n	8000a8e <__udivmoddi4+0xaa>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4694      	mov	ip, r2
 80009f6:	d969      	bls.n	8000acc <__udivmoddi4+0xe8>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b152      	cbz	r2, 8000a14 <__udivmoddi4+0x30>
 80009fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000a02:	f1c2 0120 	rsb	r1, r2, #32
 8000a06:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a12:	4094      	lsls	r4, r2
 8000a14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a18:	0c21      	lsrs	r1, r4, #16
 8000a1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a1e:	fa1f f78c 	uxth.w	r7, ip
 8000a22:	fb08 e316 	mls	r3, r8, r6, lr
 8000a26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a2a:	fb06 f107 	mul.w	r1, r6, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x64>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a3a:	f080 811f 	bcs.w	8000c7c <__udivmoddi4+0x298>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 811c 	bls.w	8000c7c <__udivmoddi4+0x298>
 8000a44:	3e02      	subs	r6, #2
 8000a46:	4463      	add	r3, ip
 8000a48:	1a5b      	subs	r3, r3, r1
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a50:	fb08 3310 	mls	r3, r8, r0, r3
 8000a54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a58:	fb00 f707 	mul.w	r7, r0, r7
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	d90a      	bls.n	8000a76 <__udivmoddi4+0x92>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a68:	f080 810a 	bcs.w	8000c80 <__udivmoddi4+0x29c>
 8000a6c:	42a7      	cmp	r7, r4
 8000a6e:	f240 8107 	bls.w	8000c80 <__udivmoddi4+0x29c>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a7a:	1be4      	subs	r4, r4, r7
 8000a7c:	2600      	movs	r6, #0
 8000a7e:	b11d      	cbz	r5, 8000a88 <__udivmoddi4+0xa4>
 8000a80:	40d4      	lsrs	r4, r2
 8000a82:	2300      	movs	r3, #0
 8000a84:	e9c5 4300 	strd	r4, r3, [r5]
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d909      	bls.n	8000aa6 <__udivmoddi4+0xc2>
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	f000 80ef 	beq.w	8000c76 <__udivmoddi4+0x292>
 8000a98:	2600      	movs	r6, #0
 8000a9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	fab3 f683 	clz	r6, r3
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	d14a      	bne.n	8000b44 <__udivmoddi4+0x160>
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xd4>
 8000ab2:	4282      	cmp	r2, r0
 8000ab4:	f200 80f9 	bhi.w	8000caa <__udivmoddi4+0x2c6>
 8000ab8:	1a84      	subs	r4, r0, r2
 8000aba:	eb61 0303 	sbc.w	r3, r1, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	469e      	mov	lr, r3
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d0e0      	beq.n	8000a88 <__udivmoddi4+0xa4>
 8000ac6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aca:	e7dd      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000acc:	b902      	cbnz	r2, 8000ad0 <__udivmoddi4+0xec>
 8000ace:	deff      	udf	#255	; 0xff
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	2a00      	cmp	r2, #0
 8000ad6:	f040 8092 	bne.w	8000bfe <__udivmoddi4+0x21a>
 8000ada:	eba1 010c 	sub.w	r1, r1, ip
 8000ade:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae2:	fa1f fe8c 	uxth.w	lr, ip
 8000ae6:	2601      	movs	r6, #1
 8000ae8:	0c20      	lsrs	r0, r4, #16
 8000aea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000aee:	fb07 1113 	mls	r1, r7, r3, r1
 8000af2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af6:	fb0e f003 	mul.w	r0, lr, r3
 8000afa:	4288      	cmp	r0, r1
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x12c>
 8000afe:	eb1c 0101 	adds.w	r1, ip, r1
 8000b02:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x12a>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f200 80cb 	bhi.w	8000ca4 <__udivmoddi4+0x2c0>
 8000b0e:	4643      	mov	r3, r8
 8000b10:	1a09      	subs	r1, r1, r0
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b18:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b20:	fb0e fe00 	mul.w	lr, lr, r0
 8000b24:	45a6      	cmp	lr, r4
 8000b26:	d908      	bls.n	8000b3a <__udivmoddi4+0x156>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b30:	d202      	bcs.n	8000b38 <__udivmoddi4+0x154>
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	f200 80bb 	bhi.w	8000cae <__udivmoddi4+0x2ca>
 8000b38:	4608      	mov	r0, r1
 8000b3a:	eba4 040e 	sub.w	r4, r4, lr
 8000b3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b42:	e79c      	b.n	8000a7e <__udivmoddi4+0x9a>
 8000b44:	f1c6 0720 	rsb	r7, r6, #32
 8000b48:	40b3      	lsls	r3, r6
 8000b4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b52:	fa20 f407 	lsr.w	r4, r0, r7
 8000b56:	fa01 f306 	lsl.w	r3, r1, r6
 8000b5a:	431c      	orrs	r4, r3
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b62:	fa00 f306 	lsl.w	r3, r0, r6
 8000b66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b6a:	0c20      	lsrs	r0, r4, #16
 8000b6c:	fa1f fe8c 	uxth.w	lr, ip
 8000b70:	fb09 1118 	mls	r1, r9, r8, r1
 8000b74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b78:	fb08 f00e 	mul.w	r0, r8, lr
 8000b7c:	4288      	cmp	r0, r1
 8000b7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x1b8>
 8000b84:	eb1c 0101 	adds.w	r1, ip, r1
 8000b88:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b8c:	f080 8088 	bcs.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b90:	4288      	cmp	r0, r1
 8000b92:	f240 8085 	bls.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b96:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9a:	4461      	add	r1, ip
 8000b9c:	1a09      	subs	r1, r1, r0
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ba4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ba8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb0:	458e      	cmp	lr, r1
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x1e2>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000bbc:	d26c      	bcs.n	8000c98 <__udivmoddi4+0x2b4>
 8000bbe:	458e      	cmp	lr, r1
 8000bc0:	d96a      	bls.n	8000c98 <__udivmoddi4+0x2b4>
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	4461      	add	r1, ip
 8000bc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bca:	fba0 9402 	umull	r9, r4, r0, r2
 8000bce:	eba1 010e 	sub.w	r1, r1, lr
 8000bd2:	42a1      	cmp	r1, r4
 8000bd4:	46c8      	mov	r8, r9
 8000bd6:	46a6      	mov	lr, r4
 8000bd8:	d356      	bcc.n	8000c88 <__udivmoddi4+0x2a4>
 8000bda:	d053      	beq.n	8000c84 <__udivmoddi4+0x2a0>
 8000bdc:	b15d      	cbz	r5, 8000bf6 <__udivmoddi4+0x212>
 8000bde:	ebb3 0208 	subs.w	r2, r3, r8
 8000be2:	eb61 010e 	sbc.w	r1, r1, lr
 8000be6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bea:	fa22 f306 	lsr.w	r3, r2, r6
 8000bee:	40f1      	lsrs	r1, r6
 8000bf0:	431f      	orrs	r7, r3
 8000bf2:	e9c5 7100 	strd	r7, r1, [r5]
 8000bf6:	2600      	movs	r6, #0
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	40d8      	lsrs	r0, r3
 8000c04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c08:	fa21 f303 	lsr.w	r3, r1, r3
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4301      	orrs	r1, r0
 8000c10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c20:	0c0b      	lsrs	r3, r1, #16
 8000c22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c26:	fb00 f60e 	mul.w	r6, r0, lr
 8000c2a:	429e      	cmp	r6, r3
 8000c2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x260>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c3a:	d22f      	bcs.n	8000c9c <__udivmoddi4+0x2b8>
 8000c3c:	429e      	cmp	r6, r3
 8000c3e:	d92d      	bls.n	8000c9c <__udivmoddi4+0x2b8>
 8000c40:	3802      	subs	r0, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	1b9b      	subs	r3, r3, r6
 8000c46:	b289      	uxth	r1, r1
 8000c48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c54:	fb06 f30e 	mul.w	r3, r6, lr
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x28a>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000c64:	d216      	bcs.n	8000c94 <__udivmoddi4+0x2b0>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d914      	bls.n	8000c94 <__udivmoddi4+0x2b0>
 8000c6a:	3e02      	subs	r6, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	1ac9      	subs	r1, r1, r3
 8000c70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c74:	e738      	b.n	8000ae8 <__udivmoddi4+0x104>
 8000c76:	462e      	mov	r6, r5
 8000c78:	4628      	mov	r0, r5
 8000c7a:	e705      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	e6e3      	b.n	8000a48 <__udivmoddi4+0x64>
 8000c80:	4618      	mov	r0, r3
 8000c82:	e6f8      	b.n	8000a76 <__udivmoddi4+0x92>
 8000c84:	454b      	cmp	r3, r9
 8000c86:	d2a9      	bcs.n	8000bdc <__udivmoddi4+0x1f8>
 8000c88:	ebb9 0802 	subs.w	r8, r9, r2
 8000c8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c90:	3801      	subs	r0, #1
 8000c92:	e7a3      	b.n	8000bdc <__udivmoddi4+0x1f8>
 8000c94:	4646      	mov	r6, r8
 8000c96:	e7ea      	b.n	8000c6e <__udivmoddi4+0x28a>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	e794      	b.n	8000bc6 <__udivmoddi4+0x1e2>
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	e7d1      	b.n	8000c44 <__udivmoddi4+0x260>
 8000ca0:	46d0      	mov	r8, sl
 8000ca2:	e77b      	b.n	8000b9c <__udivmoddi4+0x1b8>
 8000ca4:	3b02      	subs	r3, #2
 8000ca6:	4461      	add	r1, ip
 8000ca8:	e732      	b.n	8000b10 <__udivmoddi4+0x12c>
 8000caa:	4630      	mov	r0, r6
 8000cac:	e709      	b.n	8000ac2 <__udivmoddi4+0xde>
 8000cae:	4464      	add	r4, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	e742      	b.n	8000b3a <__udivmoddi4+0x156>

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbc:	f000 ff5c 	bl	8001b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc0:	f000 f878 	bl	8000db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc4:	f000 fa42 	bl	800114c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cc8:	f000 f8de 	bl	8000e88 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000ccc:	f000 f90a 	bl	8000ee4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000cd0:	f000 f938 	bl	8000f44 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000cd4:	f008 fb98 	bl	8009408 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000cd8:	f000 f96a 	bl	8000fb0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cdc:	f000 f9e8 	bl	80010b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if(!reverse){
 8000ce0:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <main+0xe0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d114      	bne.n	8000d12 <main+0x5a>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2110      	movs	r1, #16
 8000cec:	482b      	ldr	r0, [pc, #172]	; (8000d9c <main+0xe4>)
 8000cee:	f001 fa9f 	bl	8002230 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2120      	movs	r1, #32
 8000cf6:	4829      	ldr	r0, [pc, #164]	; (8000d9c <main+0xe4>)
 8000cf8:	f001 fa9a 	bl	8002230 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2140      	movs	r1, #64	; 0x40
 8000d00:	4826      	ldr	r0, [pc, #152]	; (8000d9c <main+0xe4>)
 8000d02:	f001 fa95 	bl	8002230 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	4824      	ldr	r0, [pc, #144]	; (8000d9c <main+0xe4>)
 8000d0c:	f001 fa90 	bl	8002230 <HAL_GPIO_WritePin>
 8000d10:	e013      	b.n	8000d3a <main+0x82>
  }
  else{
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8000d12:	2201      	movs	r2, #1
 8000d14:	2120      	movs	r1, #32
 8000d16:	4821      	ldr	r0, [pc, #132]	; (8000d9c <main+0xe4>)
 8000d18:	f001 fa8a 	bl	8002230 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2110      	movs	r1, #16
 8000d20:	481e      	ldr	r0, [pc, #120]	; (8000d9c <main+0xe4>)
 8000d22:	f001 fa85 	bl	8002230 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8000d26:	2201      	movs	r2, #1
 8000d28:	2180      	movs	r1, #128	; 0x80
 8000d2a:	481c      	ldr	r0, [pc, #112]	; (8000d9c <main+0xe4>)
 8000d2c:	f001 fa80 	bl	8002230 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2140      	movs	r1, #64	; 0x40
 8000d34:	4819      	ldr	r0, [pc, #100]	; (8000d9c <main+0xe4>)
 8000d36:	f001 fa7b 	bl	8002230 <HAL_GPIO_WritePin>
  }

  TIM2->CCR1 = pwm_Val;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <main+0xe8>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d42:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = pwm_Val;
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <main+0xe8>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d4c:	639a      	str	r2, [r3, #56]	; 0x38

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4814      	ldr	r0, [pc, #80]	; (8000da4 <main+0xec>)
 8000d52:	f004 fbf3 	bl	800553c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000d56:	2104      	movs	r1, #4
 8000d58:	4812      	ldr	r0, [pc, #72]	; (8000da4 <main+0xec>)
 8000d5a:	f004 fbef 	bl	800553c <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim3);
 8000d5e:	4812      	ldr	r0, [pc, #72]	; (8000da8 <main+0xf0>)
 8000d60:	f004 fb22 	bl	80053a8 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000d64:	f008 fb76 	bl	8009454 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000d68:	2101      	movs	r1, #1
 8000d6a:	4810      	ldr	r0, [pc, #64]	; (8000dac <main+0xf4>)
 8000d6c:	f001 fa48 	bl	8002200 <HAL_GPIO_ReadPin>
 8000d70:	4603      	mov	r3, r0
 8000d72:	461a      	mov	r2, r3
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <main+0xf8>)
 8000d76:	601a      	str	r2, [r3, #0]

    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8000d78:	2101      	movs	r1, #1
 8000d7a:	480c      	ldr	r0, [pc, #48]	; (8000dac <main+0xf4>)
 8000d7c:	f001 fa40 	bl	8002200 <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d1ee      	bne.n	8000d64 <main+0xac>

    	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000d86:	2100      	movs	r1, #0
 8000d88:	4806      	ldr	r0, [pc, #24]	; (8000da4 <main+0xec>)
 8000d8a:	f004 fc9f 	bl	80056cc <HAL_TIM_PWM_Stop>
    	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8000d8e:	2104      	movs	r1, #4
 8000d90:	4804      	ldr	r0, [pc, #16]	; (8000da4 <main+0xec>)
 8000d92:	f004 fc9b 	bl	80056cc <HAL_TIM_PWM_Stop>
    MX_USB_HOST_Process();
 8000d96:	e7e5      	b.n	8000d64 <main+0xac>
 8000d98:	20000264 	.word	0x20000264
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	20000268 	.word	0x20000268
 8000da4:	200001a8 	.word	0x200001a8
 8000da8:	200001f0 	.word	0x200001f0
 8000dac:	40020000 	.word	0x40020000
 8000db0:	20000260 	.word	0x20000260

08000db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b094      	sub	sp, #80	; 0x50
 8000db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 0320 	add.w	r3, r7, #32
 8000dbe:	2230      	movs	r2, #48	; 0x30
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f008 fe62 	bl	8009a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <SystemClock_Config+0xcc>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	4a27      	ldr	r2, [pc, #156]	; (8000e80 <SystemClock_Config+0xcc>)
 8000de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de6:	6413      	str	r3, [r2, #64]	; 0x40
 8000de8:	4b25      	ldr	r3, [pc, #148]	; (8000e80 <SystemClock_Config+0xcc>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df4:	2300      	movs	r3, #0
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <SystemClock_Config+0xd0>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a21      	ldr	r2, [pc, #132]	; (8000e84 <SystemClock_Config+0xd0>)
 8000dfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <SystemClock_Config+0xd0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e10:	2301      	movs	r3, #1
 8000e12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e24:	2308      	movs	r3, #8
 8000e26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e28:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e32:	2307      	movs	r3, #7
 8000e34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e36:	f107 0320 	add.w	r3, r7, #32
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 fc18 	bl	8004670 <HAL_RCC_OscConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e46:	f000 fc29 	bl	800169c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4a:	230f      	movs	r3, #15
 8000e4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000e5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e60:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	2105      	movs	r1, #5
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 fe79 	bl	8004b60 <HAL_RCC_ClockConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e74:	f000 fc12 	bl	800169c <Error_Handler>
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3750      	adds	r7, #80	; 0x50
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40007000 	.word	0x40007000

08000e88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_I2C1_Init+0x50>)
 8000e8e:	4a13      	ldr	r2, [pc, #76]	; (8000edc <MX_I2C1_Init+0x54>)
 8000e90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_I2C1_Init+0x50>)
 8000e94:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <MX_I2C1_Init+0x58>)
 8000e96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_I2C1_Init+0x50>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <MX_I2C1_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_I2C1_Init+0x50>)
 8000ea6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <MX_I2C1_Init+0x50>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_I2C1_Init+0x50>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <MX_I2C1_Init+0x50>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_I2C1_Init+0x50>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <MX_I2C1_Init+0x50>)
 8000ec6:	f002 fdef 	bl	8003aa8 <HAL_I2C_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ed0:	f000 fbe4 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200000b4 	.word	0x200000b4
 8000edc:	40005400 	.word	0x40005400
 8000ee0:	000186a0 	.word	0x000186a0

08000ee4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_I2S3_Init+0x54>)
 8000eea:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <MX_I2S3_Init+0x58>)
 8000eec:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_I2S3_Init+0x54>)
 8000ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_I2S3_Init+0x54>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_I2S3_Init+0x54>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <MX_I2S3_Init+0x54>)
 8000f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f08:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_I2S3_Init+0x54>)
 8000f0c:	4a0c      	ldr	r2, [pc, #48]	; (8000f40 <MX_I2S3_Init+0x5c>)
 8000f0e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_I2S3_Init+0x54>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_I2S3_Init+0x54>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_I2S3_Init+0x54>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_I2S3_Init+0x54>)
 8000f24:	f002 ff04 	bl	8003d30 <HAL_I2S_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000f2e:	f000 fbb5 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000108 	.word	0x20000108
 8000f3c:	40003c00 	.word	0x40003c00
 8000f40:	00017700 	.word	0x00017700

08000f44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f4a:	4a18      	ldr	r2, [pc, #96]	; (8000fac <MX_SPI1_Init+0x68>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f90:	220a      	movs	r2, #10
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f96:	f004 f92f 	bl	80051f8 <HAL_SPI_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fa0:	f000 fb7c 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000150 	.word	0x20000150
 8000fac:	40013000 	.word	0x40013000

08000fb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08e      	sub	sp, #56	; 0x38
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc4:	f107 0320 	add.w	r3, r7, #32
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
 8000fdc:	615a      	str	r2, [r3, #20]
 8000fde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fe0:	4b32      	ldr	r3, [pc, #200]	; (80010ac <MX_TIM2_Init+0xfc>)
 8000fe2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fe6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84 - 1;
 8000fe8:	4b30      	ldr	r3, [pc, #192]	; (80010ac <MX_TIM2_Init+0xfc>)
 8000fea:	2253      	movs	r2, #83	; 0x53
 8000fec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fee:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <MX_TIM2_Init+0xfc>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 8000ff4:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <MX_TIM2_Init+0xfc>)
 8000ff6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ffa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffc:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <MX_TIM2_Init+0xfc>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001002:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <MX_TIM2_Init+0xfc>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001008:	4828      	ldr	r0, [pc, #160]	; (80010ac <MX_TIM2_Init+0xfc>)
 800100a:	f004 f97e 	bl	800530a <HAL_TIM_Base_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001014:	f000 fb42 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800101e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001022:	4619      	mov	r1, r3
 8001024:	4821      	ldr	r0, [pc, #132]	; (80010ac <MX_TIM2_Init+0xfc>)
 8001026:	f004 fd8b 	bl	8005b40 <HAL_TIM_ConfigClockSource>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001030:	f000 fb34 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001034:	481d      	ldr	r0, [pc, #116]	; (80010ac <MX_TIM2_Init+0xfc>)
 8001036:	f004 fa27 	bl	8005488 <HAL_TIM_PWM_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001040:	f000 fb2c 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800104c:	f107 0320 	add.w	r3, r7, #32
 8001050:	4619      	mov	r1, r3
 8001052:	4816      	ldr	r0, [pc, #88]	; (80010ac <MX_TIM2_Init+0xfc>)
 8001054:	f005 f974 	bl	8006340 <HAL_TIMEx_MasterConfigSynchronization>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800105e:	f000 fb1d 	bl	800169c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001062:	2360      	movs	r3, #96	; 0x60
 8001064:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2200      	movs	r2, #0
 8001076:	4619      	mov	r1, r3
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <MX_TIM2_Init+0xfc>)
 800107a:	f004 fc9f 	bl	80059bc <HAL_TIM_PWM_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001084:	f000 fb0a 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2204      	movs	r2, #4
 800108c:	4619      	mov	r1, r3
 800108e:	4807      	ldr	r0, [pc, #28]	; (80010ac <MX_TIM2_Init+0xfc>)
 8001090:	f004 fc94 	bl	80059bc <HAL_TIM_PWM_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800109a:	f000 faff 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800109e:	4803      	ldr	r0, [pc, #12]	; (80010ac <MX_TIM2_Init+0xfc>)
 80010a0:	f000 fc76 	bl	8001990 <HAL_TIM_MspPostInit>

}
 80010a4:	bf00      	nop
 80010a6:	3738      	adds	r7, #56	; 0x38
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200001a8 	.word	0x200001a8

080010b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	463b      	mov	r3, r7
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <MX_TIM3_Init+0x94>)
 80010ce:	4a1e      	ldr	r2, [pc, #120]	; (8001148 <MX_TIM3_Init+0x98>)
 80010d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (84*100)-1;
 80010d2:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <MX_TIM3_Init+0x94>)
 80010d4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80010d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <MX_TIM3_Init+0x94>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MX_TIM3_Init+0x94>)
 80010e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <MX_TIM3_Init+0x94>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MX_TIM3_Init+0x94>)
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010f4:	4813      	ldr	r0, [pc, #76]	; (8001144 <MX_TIM3_Init+0x94>)
 80010f6:	f004 f908 	bl	800530a <HAL_TIM_Base_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001100:	f000 facc 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001108:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	4619      	mov	r1, r3
 8001110:	480c      	ldr	r0, [pc, #48]	; (8001144 <MX_TIM3_Init+0x94>)
 8001112:	f004 fd15 	bl	8005b40 <HAL_TIM_ConfigClockSource>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800111c:	f000 fabe 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001120:	2300      	movs	r3, #0
 8001122:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001128:	463b      	mov	r3, r7
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_TIM3_Init+0x94>)
 800112e:	f005 f907 	bl	8006340 <HAL_TIMEx_MasterConfigSynchronization>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001138:	f000 fab0 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200001f0 	.word	0x200001f0
 8001148:	40000400 	.word	0x40000400

0800114c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08c      	sub	sp, #48	; 0x30
 8001150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
 8001166:	4b83      	ldr	r3, [pc, #524]	; (8001374 <MX_GPIO_Init+0x228>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a82      	ldr	r2, [pc, #520]	; (8001374 <MX_GPIO_Init+0x228>)
 800116c:	f043 0310 	orr.w	r3, r3, #16
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b80      	ldr	r3, [pc, #512]	; (8001374 <MX_GPIO_Init+0x228>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0310 	and.w	r3, r3, #16
 800117a:	61bb      	str	r3, [r7, #24]
 800117c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	4b7c      	ldr	r3, [pc, #496]	; (8001374 <MX_GPIO_Init+0x228>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a7b      	ldr	r2, [pc, #492]	; (8001374 <MX_GPIO_Init+0x228>)
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b79      	ldr	r3, [pc, #484]	; (8001374 <MX_GPIO_Init+0x228>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	4b75      	ldr	r3, [pc, #468]	; (8001374 <MX_GPIO_Init+0x228>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a74      	ldr	r2, [pc, #464]	; (8001374 <MX_GPIO_Init+0x228>)
 80011a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b72      	ldr	r3, [pc, #456]	; (8001374 <MX_GPIO_Init+0x228>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b6e      	ldr	r3, [pc, #440]	; (8001374 <MX_GPIO_Init+0x228>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a6d      	ldr	r2, [pc, #436]	; (8001374 <MX_GPIO_Init+0x228>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b6b      	ldr	r3, [pc, #428]	; (8001374 <MX_GPIO_Init+0x228>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	4b67      	ldr	r3, [pc, #412]	; (8001374 <MX_GPIO_Init+0x228>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a66      	ldr	r2, [pc, #408]	; (8001374 <MX_GPIO_Init+0x228>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b64      	ldr	r3, [pc, #400]	; (8001374 <MX_GPIO_Init+0x228>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	4b60      	ldr	r3, [pc, #384]	; (8001374 <MX_GPIO_Init+0x228>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a5f      	ldr	r2, [pc, #380]	; (8001374 <MX_GPIO_Init+0x228>)
 80011f8:	f043 0308 	orr.w	r3, r3, #8
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b5d      	ldr	r3, [pc, #372]	; (8001374 <MX_GPIO_Init+0x228>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800120a:	2200      	movs	r2, #0
 800120c:	21f8      	movs	r1, #248	; 0xf8
 800120e:	485a      	ldr	r0, [pc, #360]	; (8001378 <MX_GPIO_Init+0x22c>)
 8001210:	f001 f80e 	bl	8002230 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	2101      	movs	r1, #1
 8001218:	4858      	ldr	r0, [pc, #352]	; (800137c <MX_GPIO_Init+0x230>)
 800121a:	f001 f809 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800121e:	2200      	movs	r2, #0
 8001220:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001224:	4856      	ldr	r0, [pc, #344]	; (8001380 <MX_GPIO_Init+0x234>)
 8001226:	f001 f803 	bl	8002230 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE4 PE5 PE6
                           PE7 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800122a:	23f8      	movs	r3, #248	; 0xf8
 800122c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	484d      	ldr	r0, [pc, #308]	; (8001378 <MX_GPIO_Init+0x22c>)
 8001242:	f000 fe41 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001246:	2301      	movs	r3, #1
 8001248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124a:	2301      	movs	r3, #1
 800124c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4619      	mov	r1, r3
 800125c:	4847      	ldr	r0, [pc, #284]	; (800137c <MX_GPIO_Init+0x230>)
 800125e:	f000 fe33 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001262:	2308      	movs	r3, #8
 8001264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001272:	2305      	movs	r3, #5
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	4619      	mov	r1, r3
 800127c:	483f      	ldr	r0, [pc, #252]	; (800137c <MX_GPIO_Init+0x230>)
 800127e:	f000 fe23 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001282:	2301      	movs	r3, #1
 8001284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	4619      	mov	r1, r3
 8001294:	483b      	ldr	r0, [pc, #236]	; (8001384 <MX_GPIO_Init+0x238>)
 8001296:	f000 fe17 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800129a:	2304      	movs	r3, #4
 800129c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4836      	ldr	r0, [pc, #216]	; (8001388 <MX_GPIO_Init+0x23c>)
 80012ae:	f000 fe0b 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80012b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012c4:	2305      	movs	r3, #5
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	482e      	ldr	r0, [pc, #184]	; (8001388 <MX_GPIO_Init+0x23c>)
 80012d0:	f000 fdfa 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80012d4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80012d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012da:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80012de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012e0:	2302      	movs	r3, #2
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	4827      	ldr	r0, [pc, #156]	; (8001388 <MX_GPIO_Init+0x23c>)
 80012ec:	f000 fdec 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80012f0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012fa:	2302      	movs	r3, #2
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	4820      	ldr	r0, [pc, #128]	; (8001388 <MX_GPIO_Init+0x23c>)
 8001306:	f000 fddf 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800130a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800130e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	4817      	ldr	r0, [pc, #92]	; (8001380 <MX_GPIO_Init+0x234>)
 8001324:	f000 fdd0 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001328:	2320      	movs	r3, #32
 800132a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4619      	mov	r1, r3
 800133a:	4811      	ldr	r0, [pc, #68]	; (8001380 <MX_GPIO_Init+0x234>)
 800133c:	f000 fdc4 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001340:	2302      	movs	r3, #2
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001344:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	4619      	mov	r1, r3
 8001354:	4808      	ldr	r0, [pc, #32]	; (8001378 <MX_GPIO_Init+0x22c>)
 8001356:	f000 fdb7 	bl	8001ec8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	2028      	movs	r0, #40	; 0x28
 8001360:	f000 fd7b 	bl	8001e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001364:	2028      	movs	r0, #40	; 0x28
 8001366:	f000 fd94 	bl	8001e92 <HAL_NVIC_EnableIRQ>

}
 800136a:	bf00      	nop
 800136c:	3730      	adds	r7, #48	; 0x30
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40021000 	.word	0x40021000
 800137c:	40020800 	.word	0x40020800
 8001380:	40020c00 	.word	0x40020c00
 8001384:	40020000 	.word	0x40020000
 8001388:	40020400 	.word	0x40020400

0800138c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == GPIO_PIN_12){
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800139c:	d14b      	bne.n	8001436 <HAL_GPIO_EXTI_Callback+0xaa>
		//pb12 rising edge
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)){
 800139e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a2:	4850      	ldr	r0, [pc, #320]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x158>)
 80013a4:	f000 ff2c 	bl	8002200 <HAL_GPIO_ReadPin>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d013      	beq.n	80013d6 <HAL_GPIO_EXTI_Callback+0x4a>
			//pb13 HIGH and pb12 rising edge
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)){
 80013ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b2:	484c      	ldr	r0, [pc, #304]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x158>)
 80013b4:	f000 ff24 	bl	8002200 <HAL_GPIO_ReadPin>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d005      	beq.n	80013ca <HAL_GPIO_EXTI_Callback+0x3e>
				wheel_1_Step--;
 80013be:	4b4a      	ldr	r3, [pc, #296]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x15c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	4a48      	ldr	r2, [pc, #288]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x15c>)
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	e018      	b.n	80013fc <HAL_GPIO_EXTI_Callback+0x70>
			}
			//pb13 LOW and pb12 rising edge
			else{
				wheel_1_Step++;
 80013ca:	4b47      	ldr	r3, [pc, #284]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x15c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	4a45      	ldr	r2, [pc, #276]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x15c>)
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	e012      	b.n	80013fc <HAL_GPIO_EXTI_Callback+0x70>
			}
		}
		//pb12 falling edge
		else{
			//pb13 HIGH and pb12 falling edge
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)){
 80013d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013da:	4842      	ldr	r0, [pc, #264]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x158>)
 80013dc:	f000 ff10 	bl	8002200 <HAL_GPIO_ReadPin>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d005      	beq.n	80013f2 <HAL_GPIO_EXTI_Callback+0x66>
				wheel_1_Step++;
 80013e6:	4b40      	ldr	r3, [pc, #256]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x15c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	3301      	adds	r3, #1
 80013ec:	4a3e      	ldr	r2, [pc, #248]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x15c>)
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	e004      	b.n	80013fc <HAL_GPIO_EXTI_Callback+0x70>
			}
			//pb13 LOW and pb12 falling edge
			else{
				wheel_1_Step--;
 80013f2:	4b3d      	ldr	r3, [pc, #244]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x15c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	4a3b      	ldr	r2, [pc, #236]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x15c>)
 80013fa:	6013      	str	r3, [r2, #0]
			}
		}

		if(wheel_1_Step > step_Per_Round_1){
 80013fc:	4b3a      	ldr	r3, [pc, #232]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x15c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b3a      	ldr	r3, [pc, #232]	; (80014ec <HAL_GPIO_EXTI_Callback+0x160>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	dd08      	ble.n	800141a <HAL_GPIO_EXTI_Callback+0x8e>
			wheel_1_Step = 0;
 8001408:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x15c>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
			wheel_1_Round++;
 800140e:	4b38      	ldr	r3, [pc, #224]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x164>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	4a36      	ldr	r2, [pc, #216]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x164>)
 8001416:	6013      	str	r3, [r2, #0]
		else if(wheel_1_Step < 0){
			wheel_1_Step = step_Per_Round_1;
			wheel_1_Round--;
		}

		return;
 8001418:	e05d      	b.n	80014d6 <HAL_GPIO_EXTI_Callback+0x14a>
		else if(wheel_1_Step < 0){
 800141a:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x15c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	da59      	bge.n	80014d6 <HAL_GPIO_EXTI_Callback+0x14a>
			wheel_1_Step = step_Per_Round_1;
 8001422:	4b32      	ldr	r3, [pc, #200]	; (80014ec <HAL_GPIO_EXTI_Callback+0x160>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a30      	ldr	r2, [pc, #192]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001428:	6013      	str	r3, [r2, #0]
			wheel_1_Round--;
 800142a:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x164>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	3b01      	subs	r3, #1
 8001430:	4a2f      	ldr	r2, [pc, #188]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x164>)
 8001432:	6013      	str	r3, [r2, #0]
		return;
 8001434:	e04f      	b.n	80014d6 <HAL_GPIO_EXTI_Callback+0x14a>
	}
	else if(GPIO_PIN == GPIO_PIN_14){
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800143c:	d14e      	bne.n	80014dc <HAL_GPIO_EXTI_Callback+0x150>
		//pb14 rising edge
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)){
 800143e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001442:	4828      	ldr	r0, [pc, #160]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x158>)
 8001444:	f000 fedc 	bl	8002200 <HAL_GPIO_ReadPin>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d013      	beq.n	8001476 <HAL_GPIO_EXTI_Callback+0xea>
			//pb15 HIGH and pb14 rising edge
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 800144e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001452:	4824      	ldr	r0, [pc, #144]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x158>)
 8001454:	f000 fed4 	bl	8002200 <HAL_GPIO_ReadPin>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <HAL_GPIO_EXTI_Callback+0xde>
				wheel_2_Step--;
 800145e:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x168>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3b01      	subs	r3, #1
 8001464:	4a23      	ldr	r2, [pc, #140]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x168>)
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	e018      	b.n	800149c <HAL_GPIO_EXTI_Callback+0x110>
			}
			//pb15 LOW and pb14 rising edge
			else{
				wheel_2_Step++;
 800146a:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x168>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	4a20      	ldr	r2, [pc, #128]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x168>)
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	e012      	b.n	800149c <HAL_GPIO_EXTI_Callback+0x110>
			}
		}
		//pb12 falling edge
		else{
			//pb15 HIGH and pb14 falling edge
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 8001476:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800147a:	481a      	ldr	r0, [pc, #104]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x158>)
 800147c:	f000 fec0 	bl	8002200 <HAL_GPIO_ReadPin>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d005      	beq.n	8001492 <HAL_GPIO_EXTI_Callback+0x106>
				wheel_2_Step++;
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x168>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	3301      	adds	r3, #1
 800148c:	4a19      	ldr	r2, [pc, #100]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x168>)
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	e004      	b.n	800149c <HAL_GPIO_EXTI_Callback+0x110>
			}
			//pb15 LOW and pb14 falling edge
			else{
				wheel_2_Step--;
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x168>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3b01      	subs	r3, #1
 8001498:	4a16      	ldr	r2, [pc, #88]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x168>)
 800149a:	6013      	str	r3, [r2, #0]
			}
		}

		if(wheel_2_Step > step_Per_Round_2){
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x168>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x16c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dd08      	ble.n	80014ba <HAL_GPIO_EXTI_Callback+0x12e>
			wheel_2_Step = 0;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x168>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
			wheel_2_Round++;
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <HAL_GPIO_EXTI_Callback+0x170>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	4a11      	ldr	r2, [pc, #68]	; (80014fc <HAL_GPIO_EXTI_Callback+0x170>)
 80014b6:	6013      	str	r3, [r2, #0]
		else if(wheel_2_Step < 0){
			wheel_2_Step = step_Per_Round_2;
			wheel_2_Round--;
		}

		return;
 80014b8:	e00f      	b.n	80014da <HAL_GPIO_EXTI_Callback+0x14e>
		else if(wheel_2_Step < 0){
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x168>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	da0b      	bge.n	80014da <HAL_GPIO_EXTI_Callback+0x14e>
			wheel_2_Step = step_Per_Round_2;
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x16c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x168>)
 80014c8:	6013      	str	r3, [r2, #0]
			wheel_2_Round--;
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_GPIO_EXTI_Callback+0x170>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <HAL_GPIO_EXTI_Callback+0x170>)
 80014d2:	6013      	str	r3, [r2, #0]
		return;
 80014d4:	e001      	b.n	80014da <HAL_GPIO_EXTI_Callback+0x14e>
		return;
 80014d6:	bf00      	nop
 80014d8:	e000      	b.n	80014dc <HAL_GPIO_EXTI_Callback+0x150>
		return;
 80014da:	bf00      	nop
	}
}
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40020400 	.word	0x40020400
 80014e8:	20000238 	.word	0x20000238
 80014ec:	20000000 	.word	0x20000000
 80014f0:	20000240 	.word	0x20000240
 80014f4:	2000023c 	.word	0x2000023c
 80014f8:	20000004 	.word	0x20000004
 80014fc:	20000244 	.word	0x20000244

08001500 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a56      	ldr	r2, [pc, #344]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800150e:	4293      	cmp	r3, r2
 8001510:	f040 80a1 	bne.w	8001656 <HAL_TIM_PeriodElapsedCallback+0x156>
		float wheel_1_Pos = wheel_1_Round + (wheel_1_Step/(float)step_Per_Round_1);
 8001514:	4b55      	ldr	r3, [pc, #340]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	ee07 3a90 	vmov	s15, r3
 800151c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001520:	4b53      	ldr	r3, [pc, #332]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	ee07 3a90 	vmov	s15, r3
 8001528:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800152c:	4b51      	ldr	r3, [pc, #324]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	ee07 3a90 	vmov	s15, r3
 8001534:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001538:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800153c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001540:	edc7 7a05 	vstr	s15, [r7, #20]
		float last_Wheel_1_Pos = last_Wheel_1_Round + (last_Wheel_1_Step/(float)step_Per_Round_1);
 8001544:	4b4c      	ldr	r3, [pc, #304]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	ee07 3a90 	vmov	s15, r3
 800154c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001550:	4b4a      	ldr	r3, [pc, #296]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	ee07 3a90 	vmov	s15, r3
 8001558:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800155c:	4b45      	ldr	r3, [pc, #276]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	ee07 3a90 	vmov	s15, r3
 8001564:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001568:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800156c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001570:	edc7 7a04 	vstr	s15, [r7, #16]

		wheel_1_Velocity = (wheel_1_Pos - last_Wheel_1_Pos)/0.1;
 8001574:	ed97 7a05 	vldr	s14, [r7, #20]
 8001578:	edd7 7a04 	vldr	s15, [r7, #16]
 800157c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001580:	ee17 0a90 	vmov	r0, s15
 8001584:	f7fe ff84 	bl	8000490 <__aeabi_f2d>
 8001588:	a335      	add	r3, pc, #212	; (adr r3, 8001660 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	f7ff f901 	bl	8000794 <__aeabi_ddiv>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	f7ff f9e3 	bl	8000964 <__aeabi_d2iz>
 800159e:	4603      	mov	r3, r0
 80015a0:	4a37      	ldr	r2, [pc, #220]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80015a2:	6013      	str	r3, [r2, #0]

		last_Wheel_1_Step = wheel_1_Step;
 80015a4:	4b32      	ldr	r3, [pc, #200]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a34      	ldr	r2, [pc, #208]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80015aa:	6013      	str	r3, [r2, #0]
		last_Wheel_1_Round = wheel_1_Round;
 80015ac:	4b2f      	ldr	r3, [pc, #188]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a31      	ldr	r2, [pc, #196]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80015b2:	6013      	str	r3, [r2, #0]

		float wheel_2_Pos = wheel_2_Round + (wheel_2_Step/(float)step_Per_Round_2);
 80015b4:	4b33      	ldr	r3, [pc, #204]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	ee07 3a90 	vmov	s15, r3
 80015bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015c0:	4b31      	ldr	r3, [pc, #196]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80015cc:	4b2f      	ldr	r3, [pc, #188]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015d8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80015dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e0:	edc7 7a03 	vstr	s15, [r7, #12]
		float last_Wheel_2_Pos = last_Wheel_2_Round + (last_Wheel_2_Step/(float)step_Per_Round_2);
 80015e4:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	ee07 3a90 	vmov	s15, r3
 80015ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f0:	4b28      	ldr	r3, [pc, #160]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	ee07 3a90 	vmov	s15, r3
 80015f8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80015fc:	4b23      	ldr	r3, [pc, #140]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001608:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800160c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001610:	edc7 7a02 	vstr	s15, [r7, #8]

		wheel_2_Velocity = (wheel_2_Pos - last_Wheel_2_Pos)/0.1;
 8001614:	ed97 7a03 	vldr	s14, [r7, #12]
 8001618:	edd7 7a02 	vldr	s15, [r7, #8]
 800161c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001620:	ee17 0a90 	vmov	r0, s15
 8001624:	f7fe ff34 	bl	8000490 <__aeabi_f2d>
 8001628:	a30d      	add	r3, pc, #52	; (adr r3, 8001660 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7ff f8b1 	bl	8000794 <__aeabi_ddiv>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff f993 	bl	8000964 <__aeabi_d2iz>
 800163e:	4603      	mov	r3, r0
 8001640:	4a15      	ldr	r2, [pc, #84]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001642:	6013      	str	r3, [r2, #0]

		last_Wheel_2_Step = wheel_2_Step;
 8001644:	4b10      	ldr	r3, [pc, #64]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a12      	ldr	r2, [pc, #72]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800164a:	6013      	str	r3, [r2, #0]
		last_Wheel_2_Round = wheel_2_Round;
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0f      	ldr	r2, [pc, #60]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001652:	6013      	str	r3, [r2, #0]
	}

	return;
 8001654:	bf00      	nop
 8001656:	bf00      	nop
}
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	9999999a 	.word	0x9999999a
 8001664:	3fb99999 	.word	0x3fb99999
 8001668:	40000400 	.word	0x40000400
 800166c:	20000240 	.word	0x20000240
 8001670:	20000238 	.word	0x20000238
 8001674:	20000000 	.word	0x20000000
 8001678:	20000250 	.word	0x20000250
 800167c:	20000248 	.word	0x20000248
 8001680:	20000258 	.word	0x20000258
 8001684:	20000244 	.word	0x20000244
 8001688:	2000023c 	.word	0x2000023c
 800168c:	20000004 	.word	0x20000004
 8001690:	20000254 	.word	0x20000254
 8001694:	2000024c 	.word	0x2000024c
 8001698:	2000025c 	.word	0x2000025c

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <Error_Handler+0x8>
	...

080016a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_MspInit+0x4c>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <HAL_MspInit+0x4c>)
 80016b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016bc:	6453      	str	r3, [r2, #68]	; 0x44
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <HAL_MspInit+0x4c>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_MspInit+0x4c>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <HAL_MspInit+0x4c>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_MspInit+0x4c>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016e6:	2007      	movs	r0, #7
 80016e8:	f000 fbac 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40023800 	.word	0x40023800

080016f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a19      	ldr	r2, [pc, #100]	; (800177c <HAL_I2C_MspInit+0x84>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d12c      	bne.n	8001774 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_I2C_MspInit+0x88>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a17      	ldr	r2, [pc, #92]	; (8001780 <HAL_I2C_MspInit+0x88>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_I2C_MspInit+0x88>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001736:	f44f 7310 	mov.w	r3, #576	; 0x240
 800173a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800173c:	2312      	movs	r3, #18
 800173e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001740:	2301      	movs	r3, #1
 8001742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001748:	2304      	movs	r3, #4
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	4619      	mov	r1, r3
 8001752:	480c      	ldr	r0, [pc, #48]	; (8001784 <HAL_I2C_MspInit+0x8c>)
 8001754:	f000 fbb8 	bl	8001ec8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <HAL_I2C_MspInit+0x88>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	4a07      	ldr	r2, [pc, #28]	; (8001780 <HAL_I2C_MspInit+0x88>)
 8001762:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001766:	6413      	str	r3, [r2, #64]	; 0x40
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_I2C_MspInit+0x88>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001774:	bf00      	nop
 8001776:	3728      	adds	r7, #40	; 0x28
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40005400 	.word	0x40005400
 8001780:	40023800 	.word	0x40023800
 8001784:	40020400 	.word	0x40020400

08001788 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08e      	sub	sp, #56	; 0x38
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a31      	ldr	r2, [pc, #196]	; (8001878 <HAL_I2S_MspInit+0xf0>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d15a      	bne.n	800186e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80017b8:	2301      	movs	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80017bc:	23c0      	movs	r3, #192	; 0xc0
 80017be:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80017c0:	2302      	movs	r3, #2
 80017c2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 fbd5 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80017d4:	f7ff ff62 	bl	800169c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	4b27      	ldr	r3, [pc, #156]	; (800187c <HAL_I2S_MspInit+0xf4>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	4a26      	ldr	r2, [pc, #152]	; (800187c <HAL_I2S_MspInit+0xf4>)
 80017e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017e6:	6413      	str	r3, [r2, #64]	; 0x40
 80017e8:	4b24      	ldr	r3, [pc, #144]	; (800187c <HAL_I2S_MspInit+0xf4>)
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_I2S_MspInit+0xf4>)
 80017fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fc:	4a1f      	ldr	r2, [pc, #124]	; (800187c <HAL_I2S_MspInit+0xf4>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6313      	str	r3, [r2, #48]	; 0x30
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <HAL_I2S_MspInit+0xf4>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_I2S_MspInit+0xf4>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	4a18      	ldr	r2, [pc, #96]	; (800187c <HAL_I2S_MspInit+0xf4>)
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	6313      	str	r3, [r2, #48]	; 0x30
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <HAL_I2S_MspInit+0xf4>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800182c:	2310      	movs	r3, #16
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800183c:	2306      	movs	r3, #6
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001844:	4619      	mov	r1, r3
 8001846:	480e      	ldr	r0, [pc, #56]	; (8001880 <HAL_I2S_MspInit+0xf8>)
 8001848:	f000 fb3e 	bl	8001ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800184c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800185e:	2306      	movs	r3, #6
 8001860:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001866:	4619      	mov	r1, r3
 8001868:	4806      	ldr	r0, [pc, #24]	; (8001884 <HAL_I2S_MspInit+0xfc>)
 800186a:	f000 fb2d 	bl	8001ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800186e:	bf00      	nop
 8001870:	3738      	adds	r7, #56	; 0x38
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40003c00 	.word	0x40003c00
 800187c:	40023800 	.word	0x40023800
 8001880:	40020000 	.word	0x40020000
 8001884:	40020800 	.word	0x40020800

08001888 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <HAL_SPI_MspInit+0x84>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d12b      	bne.n	8001902 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_SPI_MspInit+0x88>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_SPI_MspInit+0x88>)
 80018b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_SPI_MspInit+0x88>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_SPI_MspInit+0x88>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a10      	ldr	r2, [pc, #64]	; (8001910 <HAL_SPI_MspInit+0x88>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_SPI_MspInit+0x88>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80018e2:	23e0      	movs	r3, #224	; 0xe0
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018f2:	2305      	movs	r3, #5
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <HAL_SPI_MspInit+0x8c>)
 80018fe:	f000 fae3 	bl	8001ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001902:	bf00      	nop
 8001904:	3728      	adds	r7, #40	; 0x28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40013000 	.word	0x40013000
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000

08001918 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001928:	d10e      	bne.n	8001948 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b16      	ldr	r3, [pc, #88]	; (8001988 <HAL_TIM_Base_MspInit+0x70>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a15      	ldr	r2, [pc, #84]	; (8001988 <HAL_TIM_Base_MspInit+0x70>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <HAL_TIM_Base_MspInit+0x70>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001946:	e01a      	b.n	800197e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0f      	ldr	r2, [pc, #60]	; (800198c <HAL_TIM_Base_MspInit+0x74>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d115      	bne.n	800197e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <HAL_TIM_Base_MspInit+0x70>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <HAL_TIM_Base_MspInit+0x70>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	6413      	str	r3, [r2, #64]	; 0x40
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_TIM_Base_MspInit+0x70>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	201d      	movs	r0, #29
 8001974:	f000 fa71 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001978:	201d      	movs	r0, #29
 800197a:	f000 fa8a 	bl	8001e92 <HAL_NVIC_EnableIRQ>
}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	40000400 	.word	0x40000400

08001990 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b0:	d11e      	bne.n	80019f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_TIM_MspPostInit+0x68>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a0f      	ldr	r2, [pc, #60]	; (80019f8 <HAL_TIM_MspPostInit+0x68>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_TIM_MspPostInit+0x68>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80019ce:	f248 0302 	movw	r3, #32770	; 0x8002
 80019d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019e0:	2301      	movs	r3, #1
 80019e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	4619      	mov	r1, r3
 80019ea:	4804      	ldr	r0, [pc, #16]	; (80019fc <HAL_TIM_MspPostInit+0x6c>)
 80019ec:	f000 fa6c 	bl	8001ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019f0:	bf00      	nop
 80019f2:	3720      	adds	r7, #32
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020000 	.word	0x40020000

08001a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <NMI_Handler+0x4>

08001a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <HardFault_Handler+0x4>

08001a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <MemManage_Handler+0x4>

08001a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <BusFault_Handler+0x4>

08001a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <UsageFault_Handler+0x4>

08001a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a4c:	f000 f8e6 	bl	8001c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <TIM3_IRQHandler+0x10>)
 8001a5a:	f003 fea7 	bl	80057ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200001f0 	.word	0x200001f0

08001a68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001a6c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a70:	f000 fbf8 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001a74:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a78:	f000 fbf4 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <OTG_FS_IRQHandler+0x10>)
 8001a86:	f000 fe6f 	bl	8002768 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000650 	.word	0x20000650

08001a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a9c:	4a14      	ldr	r2, [pc, #80]	; (8001af0 <_sbrk+0x5c>)
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <_sbrk+0x60>)
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d102      	bne.n	8001ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <_sbrk+0x64>)
 8001ab2:	4a12      	ldr	r2, [pc, #72]	; (8001afc <_sbrk+0x68>)
 8001ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d207      	bcs.n	8001ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac4:	f007 ffa8 	bl	8009a18 <__errno>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	220c      	movs	r2, #12
 8001acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ad2:	e009      	b.n	8001ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <_sbrk+0x64>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <_sbrk+0x64>)
 8001ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20020000 	.word	0x20020000
 8001af4:	00000400 	.word	0x00000400
 8001af8:	2000026c 	.word	0x2000026c
 8001afc:	20000968 	.word	0x20000968

08001b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <SystemInit+0x20>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <SystemInit+0x20>)
 8001b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b28:	480d      	ldr	r0, [pc, #52]	; (8001b60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b2a:	490e      	ldr	r1, [pc, #56]	; (8001b64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b2c:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b30:	e002      	b.n	8001b38 <LoopCopyDataInit>

08001b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b36:	3304      	adds	r3, #4

08001b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b3c:	d3f9      	bcc.n	8001b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b40:	4c0b      	ldr	r4, [pc, #44]	; (8001b70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b44:	e001      	b.n	8001b4a <LoopFillZerobss>

08001b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b48:	3204      	adds	r2, #4

08001b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b4c:	d3fb      	bcc.n	8001b46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b4e:	f7ff ffd7 	bl	8001b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b52:	f007 ff67 	bl	8009a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b56:	f7ff f8af 	bl	8000cb8 <main>
  bx  lr    
 8001b5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b64:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001b68:	08009cdc 	.word	0x08009cdc
  ldr r2, =_sbss
 8001b6c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001b70:	20000964 	.word	0x20000964

08001b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC_IRQHandler>
	...

08001b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <HAL_Init+0x40>)
 8001b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <HAL_Init+0x40>)
 8001b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <HAL_Init+0x40>)
 8001b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f000 f94f 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f000 f808 	bl	8001bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bac:	f7ff fd7c 	bl	80016a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_InitTick+0x54>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_InitTick+0x58>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f967 	bl	8001eae <HAL_SYSTICK_Config>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00e      	b.n	8001c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b0f      	cmp	r3, #15
 8001bee:	d80a      	bhi.n	8001c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bf8:	f000 f92f 	bl	8001e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <HAL_InitTick+0x5c>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e000      	b.n	8001c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000008 	.word	0x20000008
 8001c14:	20000010 	.word	0x20000010
 8001c18:	2000000c 	.word	0x2000000c

08001c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_IncTick+0x20>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_IncTick+0x24>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <HAL_IncTick+0x24>)
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000010 	.word	0x20000010
 8001c40:	20000270 	.word	0x20000270

08001c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return uwTick;
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <HAL_GetTick+0x14>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000270 	.word	0x20000270

08001c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff ffee 	bl	8001c44 <HAL_GetTick>
 8001c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c74:	d005      	beq.n	8001c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <HAL_Delay+0x44>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c82:	bf00      	nop
 8001c84:	f7ff ffde 	bl	8001c44 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d8f7      	bhi.n	8001c84 <HAL_Delay+0x28>
  {
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000010 	.word	0x20000010

08001ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	f003 0307 	and.w	r3, r3, #7
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	db0b      	blt.n	8001d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	4907      	ldr	r1, [pc, #28]	; (8001d40 <__NVIC_EnableIRQ+0x38>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2001      	movs	r0, #1
 8001d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000e100 	.word	0xe000e100

08001d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	db0a      	blt.n	8001d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	490c      	ldr	r1, [pc, #48]	; (8001d90 <__NVIC_SetPriority+0x4c>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	0112      	lsls	r2, r2, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	440b      	add	r3, r1
 8001d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d6c:	e00a      	b.n	8001d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4908      	ldr	r1, [pc, #32]	; (8001d94 <__NVIC_SetPriority+0x50>)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	3b04      	subs	r3, #4
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	440b      	add	r3, r1
 8001d82:	761a      	strb	r2, [r3, #24]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000e100 	.word	0xe000e100
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f1c3 0307 	rsb	r3, r3, #7
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	bf28      	it	cs
 8001db6:	2304      	movcs	r3, #4
 8001db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d902      	bls.n	8001dc8 <NVIC_EncodePriority+0x30>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3b03      	subs	r3, #3
 8001dc6:	e000      	b.n	8001dca <NVIC_EncodePriority+0x32>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	401a      	ands	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	43d9      	mvns	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	4313      	orrs	r3, r2
         );
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3724      	adds	r7, #36	; 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e10:	d301      	bcc.n	8001e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00f      	b.n	8001e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <SysTick_Config+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1e:	210f      	movs	r1, #15
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e24:	f7ff ff8e 	bl	8001d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <SysTick_Config+0x40>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <SysTick_Config+0x40>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff29 	bl	8001ca4 <__NVIC_SetPriorityGrouping>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff3e 	bl	8001cec <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff8e 	bl	8001d98 <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5d 	bl	8001d44 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff31 	bl	8001d08 <__NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffa2 	bl	8001e00 <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	; 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	e16b      	b.n	80021bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	f040 815a 	bne.w	80021b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d005      	beq.n	8001f1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d130      	bne.n	8001f7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	2203      	movs	r2, #3
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f50:	2201      	movs	r2, #1
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 0201 	and.w	r2, r3, #1
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d017      	beq.n	8001fb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	2203      	movs	r2, #3
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d123      	bne.n	800200c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	08da      	lsrs	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3208      	adds	r2, #8
 8001fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	220f      	movs	r2, #15
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	08da      	lsrs	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3208      	adds	r2, #8
 8002006:	69b9      	ldr	r1, [r7, #24]
 8002008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	2203      	movs	r2, #3
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0203 	and.w	r2, r3, #3
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80b4 	beq.w	80021b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	4b60      	ldr	r3, [pc, #384]	; (80021d4 <HAL_GPIO_Init+0x30c>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	4a5f      	ldr	r2, [pc, #380]	; (80021d4 <HAL_GPIO_Init+0x30c>)
 8002058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205c:	6453      	str	r3, [r2, #68]	; 0x44
 800205e:	4b5d      	ldr	r3, [pc, #372]	; (80021d4 <HAL_GPIO_Init+0x30c>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800206a:	4a5b      	ldr	r2, [pc, #364]	; (80021d8 <HAL_GPIO_Init+0x310>)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	220f      	movs	r2, #15
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a52      	ldr	r2, [pc, #328]	; (80021dc <HAL_GPIO_Init+0x314>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d02b      	beq.n	80020ee <HAL_GPIO_Init+0x226>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a51      	ldr	r2, [pc, #324]	; (80021e0 <HAL_GPIO_Init+0x318>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d025      	beq.n	80020ea <HAL_GPIO_Init+0x222>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a50      	ldr	r2, [pc, #320]	; (80021e4 <HAL_GPIO_Init+0x31c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d01f      	beq.n	80020e6 <HAL_GPIO_Init+0x21e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4f      	ldr	r2, [pc, #316]	; (80021e8 <HAL_GPIO_Init+0x320>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d019      	beq.n	80020e2 <HAL_GPIO_Init+0x21a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4e      	ldr	r2, [pc, #312]	; (80021ec <HAL_GPIO_Init+0x324>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <HAL_GPIO_Init+0x216>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4d      	ldr	r2, [pc, #308]	; (80021f0 <HAL_GPIO_Init+0x328>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00d      	beq.n	80020da <HAL_GPIO_Init+0x212>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4c      	ldr	r2, [pc, #304]	; (80021f4 <HAL_GPIO_Init+0x32c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d007      	beq.n	80020d6 <HAL_GPIO_Init+0x20e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4b      	ldr	r2, [pc, #300]	; (80021f8 <HAL_GPIO_Init+0x330>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d101      	bne.n	80020d2 <HAL_GPIO_Init+0x20a>
 80020ce:	2307      	movs	r3, #7
 80020d0:	e00e      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020d2:	2308      	movs	r3, #8
 80020d4:	e00c      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020d6:	2306      	movs	r3, #6
 80020d8:	e00a      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020da:	2305      	movs	r3, #5
 80020dc:	e008      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020de:	2304      	movs	r3, #4
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020e2:	2303      	movs	r3, #3
 80020e4:	e004      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e002      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020ee:	2300      	movs	r3, #0
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	f002 0203 	and.w	r2, r2, #3
 80020f6:	0092      	lsls	r2, r2, #2
 80020f8:	4093      	lsls	r3, r2
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002100:	4935      	ldr	r1, [pc, #212]	; (80021d8 <HAL_GPIO_Init+0x310>)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	089b      	lsrs	r3, r3, #2
 8002106:	3302      	adds	r3, #2
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800210e:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <HAL_GPIO_Init+0x334>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002132:	4a32      	ldr	r2, [pc, #200]	; (80021fc <HAL_GPIO_Init+0x334>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002138:	4b30      	ldr	r3, [pc, #192]	; (80021fc <HAL_GPIO_Init+0x334>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800215c:	4a27      	ldr	r2, [pc, #156]	; (80021fc <HAL_GPIO_Init+0x334>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002162:	4b26      	ldr	r3, [pc, #152]	; (80021fc <HAL_GPIO_Init+0x334>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002186:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <HAL_GPIO_Init+0x334>)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800218c:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_GPIO_Init+0x334>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021b0:	4a12      	ldr	r2, [pc, #72]	; (80021fc <HAL_GPIO_Init+0x334>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3301      	adds	r3, #1
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	2b0f      	cmp	r3, #15
 80021c0:	f67f ae90 	bls.w	8001ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3724      	adds	r7, #36	; 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40013800 	.word	0x40013800
 80021dc:	40020000 	.word	0x40020000
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40020800 	.word	0x40020800
 80021e8:	40020c00 	.word	0x40020c00
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40021400 	.word	0x40021400
 80021f4:	40021800 	.word	0x40021800
 80021f8:	40021c00 	.word	0x40021c00
 80021fc:	40013c00 	.word	0x40013c00

08002200 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	887b      	ldrh	r3, [r7, #2]
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
 800221c:	e001      	b.n	8002222 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
 800223c:	4613      	mov	r3, r2
 800223e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002240:	787b      	ldrb	r3, [r7, #1]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800224c:	e003      	b.n	8002256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800224e:	887b      	ldrh	r3, [r7, #2]
 8002250:	041a      	lsls	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	619a      	str	r2, [r3, #24]
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	4013      	ands	r3, r2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d006      	beq.n	8002288 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800227a:	4a05      	ldr	r2, [pc, #20]	; (8002290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff f882 	bl	800138c <HAL_GPIO_EXTI_Callback>
  }
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40013c00 	.word	0x40013c00

08002294 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002296:	b08f      	sub	sp, #60	; 0x3c
 8002298:	af0a      	add	r7, sp, #40	; 0x28
 800229a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e054      	b.n	8002350 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d106      	bne.n	80022c6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f007 f8ff 	bl	80094c4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2203      	movs	r2, #3
 80022ca:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f004 f92d 	bl	8006544 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	687e      	ldr	r6, [r7, #4]
 80022f2:	466d      	mov	r5, sp
 80022f4:	f106 0410 	add.w	r4, r6, #16
 80022f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002300:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002304:	e885 0003 	stmia.w	r5, {r0, r1}
 8002308:	1d33      	adds	r3, r6, #4
 800230a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800230c:	6838      	ldr	r0, [r7, #0]
 800230e:	f004 f8a7 	bl	8006460 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2101      	movs	r1, #1
 8002318:	4618      	mov	r0, r3
 800231a:	f004 f924 	bl	8006566 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	687e      	ldr	r6, [r7, #4]
 8002326:	466d      	mov	r5, sp
 8002328:	f106 0410 	add.w	r4, r6, #16
 800232c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800232e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002334:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002338:	e885 0003 	stmia.w	r5, {r0, r1}
 800233c:	1d33      	adds	r3, r6, #4
 800233e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002340:	6838      	ldr	r0, [r7, #0]
 8002342:	f004 faad 	bl	80068a0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002358 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b089      	sub	sp, #36	; 0x24
 800235c:	af04      	add	r7, sp, #16
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	4608      	mov	r0, r1
 8002362:	4611      	mov	r1, r2
 8002364:	461a      	mov	r2, r3
 8002366:	4603      	mov	r3, r0
 8002368:	70fb      	strb	r3, [r7, #3]
 800236a:	460b      	mov	r3, r1
 800236c:	70bb      	strb	r3, [r7, #2]
 800236e:	4613      	mov	r3, r2
 8002370:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_HCD_HC_Init+0x28>
 800237c:	2302      	movs	r3, #2
 800237e:	e076      	b.n	800246e <HAL_HCD_HC_Init+0x116>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	212c      	movs	r1, #44	; 0x2c
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	4413      	add	r3, r2
 8002394:	333d      	adds	r3, #61	; 0x3d
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	212c      	movs	r1, #44	; 0x2c
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	3338      	adds	r3, #56	; 0x38
 80023a8:	787a      	ldrb	r2, [r7, #1]
 80023aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	212c      	movs	r1, #44	; 0x2c
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	3340      	adds	r3, #64	; 0x40
 80023ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023bc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	212c      	movs	r1, #44	; 0x2c
 80023c4:	fb01 f303 	mul.w	r3, r1, r3
 80023c8:	4413      	add	r3, r2
 80023ca:	3339      	adds	r3, #57	; 0x39
 80023cc:	78fa      	ldrb	r2, [r7, #3]
 80023ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	212c      	movs	r1, #44	; 0x2c
 80023d6:	fb01 f303 	mul.w	r3, r1, r3
 80023da:	4413      	add	r3, r2
 80023dc:	333f      	adds	r3, #63	; 0x3f
 80023de:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80023e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	78ba      	ldrb	r2, [r7, #2]
 80023e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023ec:	b2d0      	uxtb	r0, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	212c      	movs	r1, #44	; 0x2c
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	4413      	add	r3, r2
 80023f8:	333a      	adds	r3, #58	; 0x3a
 80023fa:	4602      	mov	r2, r0
 80023fc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80023fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002402:	2b00      	cmp	r3, #0
 8002404:	da09      	bge.n	800241a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	333b      	adds	r3, #59	; 0x3b
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
 8002418:	e008      	b.n	800242c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	212c      	movs	r1, #44	; 0x2c
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	4413      	add	r3, r2
 8002426:	333b      	adds	r3, #59	; 0x3b
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	212c      	movs	r1, #44	; 0x2c
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	4413      	add	r3, r2
 8002438:	333c      	adds	r3, #60	; 0x3c
 800243a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800243e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	787c      	ldrb	r4, [r7, #1]
 8002446:	78ba      	ldrb	r2, [r7, #2]
 8002448:	78f9      	ldrb	r1, [r7, #3]
 800244a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800244c:	9302      	str	r3, [sp, #8]
 800244e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	4623      	mov	r3, r4
 800245c:	f004 fba6 	bl	8006bac <USB_HC_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800246c:	7bfb      	ldrb	r3, [r7, #15]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	bd90      	pop	{r4, r7, pc}

08002476 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_HCD_HC_Halt+0x1e>
 8002490:	2302      	movs	r3, #2
 8002492:	e00f      	b.n	80024b4 <HAL_HCD_HC_Halt+0x3e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f004 fdf6 	bl	8007096 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	4608      	mov	r0, r1
 80024c6:	4611      	mov	r1, r2
 80024c8:	461a      	mov	r2, r3
 80024ca:	4603      	mov	r3, r0
 80024cc:	70fb      	strb	r3, [r7, #3]
 80024ce:	460b      	mov	r3, r1
 80024d0:	70bb      	strb	r3, [r7, #2]
 80024d2:	4613      	mov	r3, r2
 80024d4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	212c      	movs	r1, #44	; 0x2c
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	333b      	adds	r3, #59	; 0x3b
 80024e4:	78ba      	ldrb	r2, [r7, #2]
 80024e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	212c      	movs	r1, #44	; 0x2c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	333f      	adds	r3, #63	; 0x3f
 80024f6:	787a      	ldrb	r2, [r7, #1]
 80024f8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80024fa:	7c3b      	ldrb	r3, [r7, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d112      	bne.n	8002526 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	212c      	movs	r1, #44	; 0x2c
 8002506:	fb01 f303 	mul.w	r3, r1, r3
 800250a:	4413      	add	r3, r2
 800250c:	3342      	adds	r3, #66	; 0x42
 800250e:	2203      	movs	r2, #3
 8002510:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002512:	78fb      	ldrb	r3, [r7, #3]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	212c      	movs	r1, #44	; 0x2c
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	4413      	add	r3, r2
 800251e:	333d      	adds	r3, #61	; 0x3d
 8002520:	7f3a      	ldrb	r2, [r7, #28]
 8002522:	701a      	strb	r2, [r3, #0]
 8002524:	e008      	b.n	8002538 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	212c      	movs	r1, #44	; 0x2c
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	4413      	add	r3, r2
 8002532:	3342      	adds	r3, #66	; 0x42
 8002534:	2202      	movs	r2, #2
 8002536:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002538:	787b      	ldrb	r3, [r7, #1]
 800253a:	2b03      	cmp	r3, #3
 800253c:	f200 80c6 	bhi.w	80026cc <HAL_HCD_HC_SubmitRequest+0x210>
 8002540:	a201      	add	r2, pc, #4	; (adr r2, 8002548 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002546:	bf00      	nop
 8002548:	08002559 	.word	0x08002559
 800254c:	080026b9 	.word	0x080026b9
 8002550:	080025bd 	.word	0x080025bd
 8002554:	0800263b 	.word	0x0800263b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002558:	7c3b      	ldrb	r3, [r7, #16]
 800255a:	2b01      	cmp	r3, #1
 800255c:	f040 80b8 	bne.w	80026d0 <HAL_HCD_HC_SubmitRequest+0x214>
 8002560:	78bb      	ldrb	r3, [r7, #2]
 8002562:	2b00      	cmp	r3, #0
 8002564:	f040 80b4 	bne.w	80026d0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002568:	8b3b      	ldrh	r3, [r7, #24]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d108      	bne.n	8002580 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	212c      	movs	r1, #44	; 0x2c
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	4413      	add	r3, r2
 800257a:	3355      	adds	r3, #85	; 0x55
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	212c      	movs	r1, #44	; 0x2c
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	3355      	adds	r3, #85	; 0x55
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d109      	bne.n	80025a8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	212c      	movs	r1, #44	; 0x2c
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	4413      	add	r3, r2
 80025a0:	3342      	adds	r3, #66	; 0x42
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80025a6:	e093      	b.n	80026d0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	3342      	adds	r3, #66	; 0x42
 80025b6:	2202      	movs	r2, #2
 80025b8:	701a      	strb	r2, [r3, #0]
      break;
 80025ba:	e089      	b.n	80026d0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80025bc:	78bb      	ldrb	r3, [r7, #2]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d11d      	bne.n	80025fe <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	212c      	movs	r1, #44	; 0x2c
 80025c8:	fb01 f303 	mul.w	r3, r1, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	3355      	adds	r3, #85	; 0x55
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025d6:	78fb      	ldrb	r3, [r7, #3]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	212c      	movs	r1, #44	; 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	3342      	adds	r3, #66	; 0x42
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80025e8:	e073      	b.n	80026d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025ea:	78fb      	ldrb	r3, [r7, #3]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	212c      	movs	r1, #44	; 0x2c
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	4413      	add	r3, r2
 80025f6:	3342      	adds	r3, #66	; 0x42
 80025f8:	2202      	movs	r2, #2
 80025fa:	701a      	strb	r2, [r3, #0]
      break;
 80025fc:	e069      	b.n	80026d2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	212c      	movs	r1, #44	; 0x2c
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	4413      	add	r3, r2
 800260a:	3354      	adds	r3, #84	; 0x54
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	212c      	movs	r1, #44	; 0x2c
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	4413      	add	r3, r2
 800261e:	3342      	adds	r3, #66	; 0x42
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
      break;
 8002624:	e055      	b.n	80026d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002626:	78fb      	ldrb	r3, [r7, #3]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	212c      	movs	r1, #44	; 0x2c
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	4413      	add	r3, r2
 8002632:	3342      	adds	r3, #66	; 0x42
 8002634:	2202      	movs	r2, #2
 8002636:	701a      	strb	r2, [r3, #0]
      break;
 8002638:	e04b      	b.n	80026d2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800263a:	78bb      	ldrb	r3, [r7, #2]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d11d      	bne.n	800267c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	3355      	adds	r3, #85	; 0x55
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d109      	bne.n	8002668 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	3342      	adds	r3, #66	; 0x42
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002666:	e034      	b.n	80026d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	212c      	movs	r1, #44	; 0x2c
 800266e:	fb01 f303 	mul.w	r3, r1, r3
 8002672:	4413      	add	r3, r2
 8002674:	3342      	adds	r3, #66	; 0x42
 8002676:	2202      	movs	r2, #2
 8002678:	701a      	strb	r2, [r3, #0]
      break;
 800267a:	e02a      	b.n	80026d2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	212c      	movs	r1, #44	; 0x2c
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	3354      	adds	r3, #84	; 0x54
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d109      	bne.n	80026a4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	212c      	movs	r1, #44	; 0x2c
 8002696:	fb01 f303 	mul.w	r3, r1, r3
 800269a:	4413      	add	r3, r2
 800269c:	3342      	adds	r3, #66	; 0x42
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
      break;
 80026a2:	e016      	b.n	80026d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	212c      	movs	r1, #44	; 0x2c
 80026aa:	fb01 f303 	mul.w	r3, r1, r3
 80026ae:	4413      	add	r3, r2
 80026b0:	3342      	adds	r3, #66	; 0x42
 80026b2:	2202      	movs	r2, #2
 80026b4:	701a      	strb	r2, [r3, #0]
      break;
 80026b6:	e00c      	b.n	80026d2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	212c      	movs	r1, #44	; 0x2c
 80026be:	fb01 f303 	mul.w	r3, r1, r3
 80026c2:	4413      	add	r3, r2
 80026c4:	3342      	adds	r3, #66	; 0x42
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
      break;
 80026ca:	e002      	b.n	80026d2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80026cc:	bf00      	nop
 80026ce:	e000      	b.n	80026d2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80026d0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80026d2:	78fb      	ldrb	r3, [r7, #3]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	3344      	adds	r3, #68	; 0x44
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	8b3a      	ldrh	r2, [r7, #24]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	202c      	movs	r0, #44	; 0x2c
 80026ec:	fb00 f303 	mul.w	r3, r0, r3
 80026f0:	440b      	add	r3, r1
 80026f2:	334c      	adds	r3, #76	; 0x4c
 80026f4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	3360      	adds	r3, #96	; 0x60
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	212c      	movs	r1, #44	; 0x2c
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	4413      	add	r3, r2
 8002714:	3350      	adds	r3, #80	; 0x50
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800271a:	78fb      	ldrb	r3, [r7, #3]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	212c      	movs	r1, #44	; 0x2c
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	3339      	adds	r3, #57	; 0x39
 8002728:	78fa      	ldrb	r2, [r7, #3]
 800272a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	212c      	movs	r1, #44	; 0x2c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	3361      	adds	r3, #97	; 0x61
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	222c      	movs	r2, #44	; 0x2c
 8002746:	fb02 f303 	mul.w	r3, r2, r3
 800274a:	3338      	adds	r3, #56	; 0x38
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	18d1      	adds	r1, r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	f004 fb4a 	bl	8006df0 <USB_HC_StartXfer>
 800275c:	4603      	mov	r3, r0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop

08002768 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f004 f84b 	bl	800681a <USB_GetMode>
 8002784:	4603      	mov	r3, r0
 8002786:	2b01      	cmp	r3, #1
 8002788:	f040 80f6 	bne.w	8002978 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f004 f82f 	bl	80067f4 <USB_ReadInterrupts>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80ec 	beq.w	8002976 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f004 f826 	bl	80067f4 <USB_ReadInterrupts>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027b2:	d104      	bne.n	80027be <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80027bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f004 f816 	bl	80067f4 <USB_ReadInterrupts>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027d2:	d104      	bne.n	80027de <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f004 f806 	bl	80067f4 <USB_ReadInterrupts>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027f2:	d104      	bne.n	80027fe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f003 fff6 	bl	80067f4 <USB_ReadInterrupts>
 8002808:	4603      	mov	r3, r0
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b02      	cmp	r3, #2
 8002810:	d103      	bne.n	800281a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2202      	movs	r2, #2
 8002818:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f003 ffe8 	bl	80067f4 <USB_ReadInterrupts>
 8002824:	4603      	mov	r3, r0
 8002826:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800282a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800282e:	d11c      	bne.n	800286a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002838:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10f      	bne.n	800286a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800284a:	2110      	movs	r1, #16
 800284c:	6938      	ldr	r0, [r7, #16]
 800284e:	f003 fed7 	bl	8006600 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002852:	6938      	ldr	r0, [r7, #16]
 8002854:	f003 ff08 	bl	8006668 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2101      	movs	r1, #1
 800285e:	4618      	mov	r0, r3
 8002860:	f004 f8de 	bl	8006a20 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f006 feab 	bl	80095c0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f003 ffc0 	bl	80067f4 <USB_ReadInterrupts>
 8002874:	4603      	mov	r3, r0
 8002876:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800287a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800287e:	d102      	bne.n	8002886 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f001 f89e 	bl	80039c2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f003 ffb2 	bl	80067f4 <USB_ReadInterrupts>
 8002890:	4603      	mov	r3, r0
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b08      	cmp	r3, #8
 8002898:	d106      	bne.n	80028a8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f006 fe74 	bl	8009588 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2208      	movs	r2, #8
 80028a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f003 ffa1 	bl	80067f4 <USB_ReadInterrupts>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	2b10      	cmp	r3, #16
 80028ba:	d101      	bne.n	80028c0 <HAL_HCD_IRQHandler+0x158>
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <HAL_HCD_IRQHandler+0x15a>
 80028c0:	2300      	movs	r3, #0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d012      	beq.n	80028ec <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699a      	ldr	r2, [r3, #24]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0210 	bic.w	r2, r2, #16
 80028d4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 ffa1 	bl	800381e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699a      	ldr	r2, [r3, #24]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0210 	orr.w	r2, r2, #16
 80028ea:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f003 ff7f 	bl	80067f4 <USB_ReadInterrupts>
 80028f6:	4603      	mov	r3, r0
 80028f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002900:	d13a      	bne.n	8002978 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f004 fbb4 	bl	8007074 <USB_HC_ReadInterrupt>
 800290c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	e025      	b.n	8002960 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d018      	beq.n	800295a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	015a      	lsls	r2, r3, #5
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4413      	add	r3, r2
 8002930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800293a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800293e:	d106      	bne.n	800294e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	4619      	mov	r1, r3
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f8ab 	bl	8002aa2 <HCD_HC_IN_IRQHandler>
 800294c:	e005      	b.n	800295a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	4619      	mov	r1, r3
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 fbf9 	bl	800314c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	3301      	adds	r3, #1
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	429a      	cmp	r2, r3
 8002968:	d3d4      	bcc.n	8002914 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002972:	615a      	str	r2, [r3, #20]
 8002974:	e000      	b.n	8002978 <HAL_HCD_IRQHandler+0x210>
      return;
 8002976:	bf00      	nop
    }
  }
}
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_HCD_Start+0x16>
 8002990:	2302      	movs	r3, #2
 8002992:	e013      	b.n	80029bc <HAL_HCD_Start+0x3e>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2101      	movs	r1, #1
 80029a2:	4618      	mov	r0, r3
 80029a4:	f004 f8a0 	bl	8006ae8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 fdb8 	bl	8006522 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_HCD_Stop+0x16>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e00d      	b.n	80029f6 <HAL_HCD_Stop+0x32>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f004 fc8e 	bl	8007308 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f004 f842 	bl	8006a94 <USB_ResetPort>
 8002a10:	4603      	mov	r3, r0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	3360      	adds	r3, #96	; 0x60
 8002a34:	781b      	ldrb	r3, [r3, #0]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	3350      	adds	r3, #80	; 0x50
 8002a5c:	681b      	ldr	r3, [r3, #0]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f004 f886 	bl	8006b88 <USB_GetCurrentFrame>
 8002a7c:	4603      	mov	r3, r0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f004 f861 	bl	8006b5a <USB_GetHostSpeed>
 8002a98:	4603      	mov	r3, r0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b086      	sub	sp, #24
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d11a      	bne.n	8002b08 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	212c      	movs	r1, #44	; 0x2c
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	3361      	adds	r3, #97	; 0x61
 8002af2:	2206      	movs	r2, #6
 8002af4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f004 fac8 	bl	8007096 <USB_HC_Halt>
 8002b06:	e0af      	b.n	8002c68 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b1e:	d11b      	bne.n	8002b58 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b32:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	212c      	movs	r1, #44	; 0x2c
 8002b3a:	fb01 f303 	mul.w	r3, r1, r3
 8002b3e:	4413      	add	r3, r2
 8002b40:	3361      	adds	r3, #97	; 0x61
 8002b42:	2207      	movs	r2, #7
 8002b44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f004 faa0 	bl	8007096 <USB_HC_Halt>
 8002b56:	e087      	b.n	8002c68 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0320 	and.w	r3, r3, #32
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	d109      	bne.n	8002b82 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	2320      	movs	r3, #32
 8002b7e:	6093      	str	r3, [r2, #8]
 8002b80:	e072      	b.n	8002c68 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d11a      	bne.n	8002bce <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	2308      	movs	r3, #8
 8002ba8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3361      	adds	r3, #97	; 0x61
 8002bb8:	2205      	movs	r2, #5
 8002bba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f004 fa65 	bl	8007096 <USB_HC_Halt>
 8002bcc:	e04c      	b.n	8002c68 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be4:	d11b      	bne.n	8002c1e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bf8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	3361      	adds	r3, #97	; 0x61
 8002c08:	2208      	movs	r2, #8
 8002c0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	4611      	mov	r1, r2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f004 fa3d 	bl	8007096 <USB_HC_Halt>
 8002c1c:	e024      	b.n	8002c68 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c30:	2b80      	cmp	r3, #128	; 0x80
 8002c32:	d119      	bne.n	8002c68 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c40:	461a      	mov	r2, r3
 8002c42:	2380      	movs	r3, #128	; 0x80
 8002c44:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	3361      	adds	r3, #97	; 0x61
 8002c54:	2206      	movs	r2, #6
 8002c56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f004 fa17 	bl	8007096 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c7e:	d112      	bne.n	8002ca6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f004 fa03 	bl	8007096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ca2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002ca4:	e24e      	b.n	8003144 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	f040 80df 	bne.w	8002e7c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d019      	beq.n	8002cfa <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3348      	adds	r3, #72	; 0x48
 8002cd4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	0159      	lsls	r1, r3, #5
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	440b      	add	r3, r1
 8002cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002ce8:	1ad2      	subs	r2, r2, r3
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	202c      	movs	r0, #44	; 0x2c
 8002cf0:	fb00 f303 	mul.w	r3, r0, r3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3350      	adds	r3, #80	; 0x50
 8002cf8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	212c      	movs	r1, #44	; 0x2c
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	4413      	add	r3, r2
 8002d06:	3361      	adds	r3, #97	; 0x61
 8002d08:	2201      	movs	r2, #1
 8002d0a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	212c      	movs	r1, #44	; 0x2c
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	335c      	adds	r3, #92	; 0x5c
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	212c      	movs	r1, #44	; 0x2c
 8002d36:	fb01 f303 	mul.w	r3, r1, r3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	333f      	adds	r3, #63	; 0x3f
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d009      	beq.n	8002d58 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	333f      	adds	r3, #63	; 0x3f
 8002d52:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d111      	bne.n	8002d7c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f004 f997 	bl	8007096 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d74:	461a      	mov	r2, r3
 8002d76:	2310      	movs	r3, #16
 8002d78:	6093      	str	r3, [r2, #8]
 8002d7a:	e03a      	b.n	8002df2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	212c      	movs	r1, #44	; 0x2c
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	333f      	adds	r3, #63	; 0x3f
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d009      	beq.n	8002da4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	212c      	movs	r1, #44	; 0x2c
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	333f      	adds	r3, #63	; 0x3f
 8002d9e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d126      	bne.n	8002df2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	0151      	lsls	r1, r2, #5
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	440a      	add	r2, r1
 8002dba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002dc2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	212c      	movs	r1, #44	; 0x2c
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	3360      	adds	r3, #96	; 0x60
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	b2d9      	uxtb	r1, r3
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	202c      	movs	r0, #44	; 0x2c
 8002de0:	fb00 f303 	mul.w	r3, r0, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	3360      	adds	r3, #96	; 0x60
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f006 fbf5 	bl	80095dc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d12b      	bne.n	8002e52 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	212c      	movs	r1, #44	; 0x2c
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	3348      	adds	r3, #72	; 0x48
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	202c      	movs	r0, #44	; 0x2c
 8002e10:	fb00 f202 	mul.w	r2, r0, r2
 8002e14:	440a      	add	r2, r1
 8002e16:	3240      	adds	r2, #64	; 0x40
 8002e18:	8812      	ldrh	r2, [r2, #0]
 8002e1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 818e 	beq.w	8003144 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	212c      	movs	r1, #44	; 0x2c
 8002e2e:	fb01 f303 	mul.w	r3, r1, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	3354      	adds	r3, #84	; 0x54
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	f083 0301 	eor.w	r3, r3, #1
 8002e3c:	b2d8      	uxtb	r0, r3
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	212c      	movs	r1, #44	; 0x2c
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	3354      	adds	r3, #84	; 0x54
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	701a      	strb	r2, [r3, #0]
}
 8002e50:	e178      	b.n	8003144 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	212c      	movs	r1, #44	; 0x2c
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3354      	adds	r3, #84	; 0x54
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	f083 0301 	eor.w	r3, r3, #1
 8002e66:	b2d8      	uxtb	r0, r3
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	3354      	adds	r3, #84	; 0x54
 8002e76:	4602      	mov	r2, r0
 8002e78:	701a      	strb	r2, [r3, #0]
}
 8002e7a:	e163      	b.n	8003144 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	f040 80f6 	bne.w	8003080 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	212c      	movs	r1, #44	; 0x2c
 8002e9a:	fb01 f303 	mul.w	r3, r1, r3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3361      	adds	r3, #97	; 0x61
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d109      	bne.n	8002ebc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	212c      	movs	r1, #44	; 0x2c
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3360      	adds	r3, #96	; 0x60
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	e0c9      	b.n	8003050 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	212c      	movs	r1, #44	; 0x2c
 8002ec2:	fb01 f303 	mul.w	r3, r1, r3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3361      	adds	r3, #97	; 0x61
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b05      	cmp	r3, #5
 8002ece:	d109      	bne.n	8002ee4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	212c      	movs	r1, #44	; 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	3360      	adds	r3, #96	; 0x60
 8002ede:	2205      	movs	r2, #5
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	e0b5      	b.n	8003050 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	212c      	movs	r1, #44	; 0x2c
 8002eea:	fb01 f303 	mul.w	r3, r1, r3
 8002eee:	4413      	add	r3, r2
 8002ef0:	3361      	adds	r3, #97	; 0x61
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b06      	cmp	r3, #6
 8002ef6:	d009      	beq.n	8002f0c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	212c      	movs	r1, #44	; 0x2c
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	3361      	adds	r3, #97	; 0x61
 8002f06:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d150      	bne.n	8002fae <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	212c      	movs	r1, #44	; 0x2c
 8002f12:	fb01 f303 	mul.w	r3, r1, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	335c      	adds	r3, #92	; 0x5c
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	202c      	movs	r0, #44	; 0x2c
 8002f24:	fb00 f303 	mul.w	r3, r0, r3
 8002f28:	440b      	add	r3, r1
 8002f2a:	335c      	adds	r3, #92	; 0x5c
 8002f2c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	335c      	adds	r3, #92	; 0x5c
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d912      	bls.n	8002f68 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	212c      	movs	r1, #44	; 0x2c
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	335c      	adds	r3, #92	; 0x5c
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	212c      	movs	r1, #44	; 0x2c
 8002f5a:	fb01 f303 	mul.w	r3, r1, r3
 8002f5e:	4413      	add	r3, r2
 8002f60:	3360      	adds	r3, #96	; 0x60
 8002f62:	2204      	movs	r2, #4
 8002f64:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f66:	e073      	b.n	8003050 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	212c      	movs	r1, #44	; 0x2c
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
 8002f72:	4413      	add	r3, r2
 8002f74:	3360      	adds	r3, #96	; 0x60
 8002f76:	2202      	movs	r2, #2
 8002f78:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f90:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f98:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fac:	e050      	b.n	8003050 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	212c      	movs	r1, #44	; 0x2c
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	4413      	add	r3, r2
 8002fba:	3361      	adds	r3, #97	; 0x61
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d122      	bne.n	8003008 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	212c      	movs	r1, #44	; 0x2c
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	3360      	adds	r3, #96	; 0x60
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ff2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003000:	461a      	mov	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	e023      	b.n	8003050 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	212c      	movs	r1, #44	; 0x2c
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	4413      	add	r3, r2
 8003014:	3361      	adds	r3, #97	; 0x61
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b07      	cmp	r3, #7
 800301a:	d119      	bne.n	8003050 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	212c      	movs	r1, #44	; 0x2c
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	4413      	add	r3, r2
 8003028:	335c      	adds	r3, #92	; 0x5c
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	202c      	movs	r0, #44	; 0x2c
 8003034:	fb00 f303 	mul.w	r3, r0, r3
 8003038:	440b      	add	r3, r1
 800303a:	335c      	adds	r3, #92	; 0x5c
 800303c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	212c      	movs	r1, #44	; 0x2c
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	4413      	add	r3, r2
 800304a:	3360      	adds	r3, #96	; 0x60
 800304c:	2204      	movs	r2, #4
 800304e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305c:	461a      	mov	r2, r3
 800305e:	2302      	movs	r3, #2
 8003060:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	b2d9      	uxtb	r1, r3
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	202c      	movs	r0, #44	; 0x2c
 800306c:	fb00 f303 	mul.w	r3, r0, r3
 8003070:	4413      	add	r3, r2
 8003072:	3360      	adds	r3, #96	; 0x60
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f006 faaf 	bl	80095dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800307e:	e061      	b.n	8003144 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4413      	add	r3, r2
 8003088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	2b10      	cmp	r3, #16
 8003094:	d156      	bne.n	8003144 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	212c      	movs	r1, #44	; 0x2c
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	4413      	add	r3, r2
 80030a2:	333f      	adds	r3, #63	; 0x3f
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d111      	bne.n	80030ce <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	212c      	movs	r1, #44	; 0x2c
 80030b0:	fb01 f303 	mul.w	r3, r1, r3
 80030b4:	4413      	add	r3, r2
 80030b6:	335c      	adds	r3, #92	; 0x5c
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	4611      	mov	r1, r2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f003 ffe5 	bl	8007096 <USB_HC_Halt>
 80030cc:	e031      	b.n	8003132 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	212c      	movs	r1, #44	; 0x2c
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	4413      	add	r3, r2
 80030da:	333f      	adds	r3, #63	; 0x3f
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	212c      	movs	r1, #44	; 0x2c
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	333f      	adds	r3, #63	; 0x3f
 80030f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d11d      	bne.n	8003132 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	212c      	movs	r1, #44	; 0x2c
 80030fc:	fb01 f303 	mul.w	r3, r1, r3
 8003100:	4413      	add	r3, r2
 8003102:	335c      	adds	r3, #92	; 0x5c
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d110      	bne.n	8003132 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	212c      	movs	r1, #44	; 0x2c
 8003116:	fb01 f303 	mul.w	r3, r1, r3
 800311a:	4413      	add	r3, r2
 800311c:	3361      	adds	r3, #97	; 0x61
 800311e:	2203      	movs	r2, #3
 8003120:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f003 ffb2 	bl	8007096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4413      	add	r3, r2
 800313a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313e:	461a      	mov	r2, r3
 8003140:	2310      	movs	r3, #16
 8003142:	6093      	str	r3, [r2, #8]
}
 8003144:	bf00      	nop
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	4413      	add	r3, r2
 800316e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b04      	cmp	r3, #4
 800317a:	d11a      	bne.n	80031b2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	4413      	add	r3, r2
 8003184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003188:	461a      	mov	r2, r3
 800318a:	2304      	movs	r3, #4
 800318c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	212c      	movs	r1, #44	; 0x2c
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	4413      	add	r3, r2
 800319a:	3361      	adds	r3, #97	; 0x61
 800319c:	2206      	movs	r2, #6
 800319e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f003 ff73 	bl	8007096 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80031b0:	e331      	b.n	8003816 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d12e      	bne.n	8003226 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d4:	461a      	mov	r2, r3
 80031d6:	2320      	movs	r3, #32
 80031d8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	212c      	movs	r1, #44	; 0x2c
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	4413      	add	r3, r2
 80031e6:	333d      	adds	r3, #61	; 0x3d
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	f040 8313 	bne.w	8003816 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	212c      	movs	r1, #44	; 0x2c
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	333d      	adds	r3, #61	; 0x3d
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	212c      	movs	r1, #44	; 0x2c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	3360      	adds	r3, #96	; 0x60
 8003210:	2202      	movs	r2, #2
 8003212:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	4611      	mov	r1, r2
 800321e:	4618      	mov	r0, r3
 8003220:	f003 ff39 	bl	8007096 <USB_HC_Halt>
}
 8003224:	e2f7      	b.n	8003816 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	4413      	add	r3, r2
 800322e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800323c:	d112      	bne.n	8003264 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	4413      	add	r3, r2
 8003246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324a:	461a      	mov	r2, r3
 800324c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003250:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f003 ff1a 	bl	8007096 <USB_HC_Halt>
}
 8003262:	e2d8      	b.n	8003816 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	4413      	add	r3, r2
 800326c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b01      	cmp	r3, #1
 8003278:	d140      	bne.n	80032fc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	212c      	movs	r1, #44	; 0x2c
 8003280:	fb01 f303 	mul.w	r3, r1, r3
 8003284:	4413      	add	r3, r2
 8003286:	335c      	adds	r3, #92	; 0x5c
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	4413      	add	r3, r2
 8003294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329e:	2b40      	cmp	r3, #64	; 0x40
 80032a0:	d111      	bne.n	80032c6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	212c      	movs	r1, #44	; 0x2c
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	4413      	add	r3, r2
 80032ae:	333d      	adds	r3, #61	; 0x3d
 80032b0:	2201      	movs	r2, #1
 80032b2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c0:	461a      	mov	r2, r3
 80032c2:	2340      	movs	r3, #64	; 0x40
 80032c4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	015a      	lsls	r2, r3, #5
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	4413      	add	r3, r2
 80032ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d2:	461a      	mov	r2, r3
 80032d4:	2301      	movs	r3, #1
 80032d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	212c      	movs	r1, #44	; 0x2c
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	3361      	adds	r3, #97	; 0x61
 80032e6:	2201      	movs	r2, #1
 80032e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	4611      	mov	r1, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f003 fece 	bl	8007096 <USB_HC_Halt>
}
 80032fa:	e28c      	b.n	8003816 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	4413      	add	r3, r2
 8003304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330e:	2b40      	cmp	r3, #64	; 0x40
 8003310:	d12c      	bne.n	800336c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	212c      	movs	r1, #44	; 0x2c
 8003318:	fb01 f303 	mul.w	r3, r1, r3
 800331c:	4413      	add	r3, r2
 800331e:	3361      	adds	r3, #97	; 0x61
 8003320:	2204      	movs	r2, #4
 8003322:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	212c      	movs	r1, #44	; 0x2c
 800332a:	fb01 f303 	mul.w	r3, r1, r3
 800332e:	4413      	add	r3, r2
 8003330:	333d      	adds	r3, #61	; 0x3d
 8003332:	2201      	movs	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	212c      	movs	r1, #44	; 0x2c
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	4413      	add	r3, r2
 8003342:	335c      	adds	r3, #92	; 0x5c
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	4611      	mov	r1, r2
 8003352:	4618      	mov	r0, r3
 8003354:	f003 fe9f 	bl	8007096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	4413      	add	r3, r2
 8003360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003364:	461a      	mov	r2, r3
 8003366:	2340      	movs	r3, #64	; 0x40
 8003368:	6093      	str	r3, [r2, #8]
}
 800336a:	e254      	b.n	8003816 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	4413      	add	r3, r2
 8003374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b08      	cmp	r3, #8
 8003380:	d11a      	bne.n	80033b8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	4413      	add	r3, r2
 800338a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338e:	461a      	mov	r2, r3
 8003390:	2308      	movs	r3, #8
 8003392:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	212c      	movs	r1, #44	; 0x2c
 800339a:	fb01 f303 	mul.w	r3, r1, r3
 800339e:	4413      	add	r3, r2
 80033a0:	3361      	adds	r3, #97	; 0x61
 80033a2:	2205      	movs	r2, #5
 80033a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	4611      	mov	r1, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f003 fe70 	bl	8007096 <USB_HC_Halt>
}
 80033b6:	e22e      	b.n	8003816 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d140      	bne.n	8003450 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	212c      	movs	r1, #44	; 0x2c
 80033d4:	fb01 f303 	mul.w	r3, r1, r3
 80033d8:	4413      	add	r3, r2
 80033da:	335c      	adds	r3, #92	; 0x5c
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	212c      	movs	r1, #44	; 0x2c
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	3361      	adds	r3, #97	; 0x61
 80033ee:	2203      	movs	r2, #3
 80033f0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	212c      	movs	r1, #44	; 0x2c
 80033f8:	fb01 f303 	mul.w	r3, r1, r3
 80033fc:	4413      	add	r3, r2
 80033fe:	333d      	adds	r3, #61	; 0x3d
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d112      	bne.n	800342c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	212c      	movs	r1, #44	; 0x2c
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	4413      	add	r3, r2
 8003412:	333c      	adds	r3, #60	; 0x3c
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d108      	bne.n	800342c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	212c      	movs	r1, #44	; 0x2c
 8003420:	fb01 f303 	mul.w	r3, r1, r3
 8003424:	4413      	add	r3, r2
 8003426:	333d      	adds	r3, #61	; 0x3d
 8003428:	2201      	movs	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	4611      	mov	r1, r2
 8003436:	4618      	mov	r0, r3
 8003438:	f003 fe2d 	bl	8007096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	4413      	add	r3, r2
 8003444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003448:	461a      	mov	r2, r3
 800344a:	2310      	movs	r3, #16
 800344c:	6093      	str	r3, [r2, #8]
}
 800344e:	e1e2      	b.n	8003816 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	4413      	add	r3, r2
 8003458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003462:	2b80      	cmp	r3, #128	; 0x80
 8003464:	d164      	bne.n	8003530 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d111      	bne.n	8003492 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	212c      	movs	r1, #44	; 0x2c
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	4413      	add	r3, r2
 800347a:	3361      	adds	r3, #97	; 0x61
 800347c:	2206      	movs	r2, #6
 800347e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	4611      	mov	r1, r2
 800348a:	4618      	mov	r0, r3
 800348c:	f003 fe03 	bl	8007096 <USB_HC_Halt>
 8003490:	e044      	b.n	800351c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	212c      	movs	r1, #44	; 0x2c
 8003498:	fb01 f303 	mul.w	r3, r1, r3
 800349c:	4413      	add	r3, r2
 800349e:	335c      	adds	r3, #92	; 0x5c
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	202c      	movs	r0, #44	; 0x2c
 80034aa:	fb00 f303 	mul.w	r3, r0, r3
 80034ae:	440b      	add	r3, r1
 80034b0:	335c      	adds	r3, #92	; 0x5c
 80034b2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	212c      	movs	r1, #44	; 0x2c
 80034ba:	fb01 f303 	mul.w	r3, r1, r3
 80034be:	4413      	add	r3, r2
 80034c0:	335c      	adds	r3, #92	; 0x5c
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d920      	bls.n	800350a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	212c      	movs	r1, #44	; 0x2c
 80034ce:	fb01 f303 	mul.w	r3, r1, r3
 80034d2:	4413      	add	r3, r2
 80034d4:	335c      	adds	r3, #92	; 0x5c
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	212c      	movs	r1, #44	; 0x2c
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	4413      	add	r3, r2
 80034e6:	3360      	adds	r3, #96	; 0x60
 80034e8:	2204      	movs	r2, #4
 80034ea:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	b2d9      	uxtb	r1, r3
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	202c      	movs	r0, #44	; 0x2c
 80034f6:	fb00 f303 	mul.w	r3, r0, r3
 80034fa:	4413      	add	r3, r2
 80034fc:	3360      	adds	r3, #96	; 0x60
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	461a      	mov	r2, r3
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f006 f86a 	bl	80095dc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003508:	e008      	b.n	800351c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	212c      	movs	r1, #44	; 0x2c
 8003510:	fb01 f303 	mul.w	r3, r1, r3
 8003514:	4413      	add	r3, r2
 8003516:	3360      	adds	r3, #96	; 0x60
 8003518:	2202      	movs	r2, #2
 800351a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003528:	461a      	mov	r2, r3
 800352a:	2380      	movs	r3, #128	; 0x80
 800352c:	6093      	str	r3, [r2, #8]
}
 800352e:	e172      	b.n	8003816 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	4413      	add	r3, r2
 8003538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003546:	d11b      	bne.n	8003580 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	212c      	movs	r1, #44	; 0x2c
 800354e:	fb01 f303 	mul.w	r3, r1, r3
 8003552:	4413      	add	r3, r2
 8003554:	3361      	adds	r3, #97	; 0x61
 8003556:	2208      	movs	r2, #8
 8003558:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	4611      	mov	r1, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f003 fd96 	bl	8007096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	4413      	add	r3, r2
 8003572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003576:	461a      	mov	r2, r3
 8003578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800357c:	6093      	str	r3, [r2, #8]
}
 800357e:	e14a      	b.n	8003816 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	4413      	add	r3, r2
 8003588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b02      	cmp	r3, #2
 8003594:	f040 813f 	bne.w	8003816 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	212c      	movs	r1, #44	; 0x2c
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	3361      	adds	r3, #97	; 0x61
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d17d      	bne.n	80036a8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	3360      	adds	r3, #96	; 0x60
 80035ba:	2201      	movs	r2, #1
 80035bc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	212c      	movs	r1, #44	; 0x2c
 80035c4:	fb01 f303 	mul.w	r3, r1, r3
 80035c8:	4413      	add	r3, r2
 80035ca:	333f      	adds	r3, #63	; 0x3f
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d00a      	beq.n	80035e8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	212c      	movs	r1, #44	; 0x2c
 80035d8:	fb01 f303 	mul.w	r3, r1, r3
 80035dc:	4413      	add	r3, r2
 80035de:	333f      	adds	r3, #63	; 0x3f
 80035e0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	f040 8100 	bne.w	80037e8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d113      	bne.n	8003618 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	212c      	movs	r1, #44	; 0x2c
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	4413      	add	r3, r2
 80035fc:	3355      	adds	r3, #85	; 0x55
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	f083 0301 	eor.w	r3, r3, #1
 8003604:	b2d8      	uxtb	r0, r3
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	212c      	movs	r1, #44	; 0x2c
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	4413      	add	r3, r2
 8003612:	3355      	adds	r3, #85	; 0x55
 8003614:	4602      	mov	r2, r0
 8003616:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	2b01      	cmp	r3, #1
 800361e:	f040 80e3 	bne.w	80037e8 <HCD_HC_OUT_IRQHandler+0x69c>
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	212c      	movs	r1, #44	; 0x2c
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	4413      	add	r3, r2
 800362e:	334c      	adds	r3, #76	; 0x4c
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 80d8 	beq.w	80037e8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	212c      	movs	r1, #44	; 0x2c
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	4413      	add	r3, r2
 8003644:	334c      	adds	r3, #76	; 0x4c
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	202c      	movs	r0, #44	; 0x2c
 800364e:	fb00 f202 	mul.w	r2, r0, r2
 8003652:	440a      	add	r2, r1
 8003654:	3240      	adds	r2, #64	; 0x40
 8003656:	8812      	ldrh	r2, [r2, #0]
 8003658:	4413      	add	r3, r2
 800365a:	3b01      	subs	r3, #1
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	202c      	movs	r0, #44	; 0x2c
 8003662:	fb00 f202 	mul.w	r2, r0, r2
 8003666:	440a      	add	r2, r1
 8003668:	3240      	adds	r2, #64	; 0x40
 800366a:	8812      	ldrh	r2, [r2, #0]
 800366c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80b5 	beq.w	80037e8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	212c      	movs	r1, #44	; 0x2c
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	4413      	add	r3, r2
 800368a:	3355      	adds	r3, #85	; 0x55
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	f083 0301 	eor.w	r3, r3, #1
 8003692:	b2d8      	uxtb	r0, r3
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	212c      	movs	r1, #44	; 0x2c
 800369a:	fb01 f303 	mul.w	r3, r1, r3
 800369e:	4413      	add	r3, r2
 80036a0:	3355      	adds	r3, #85	; 0x55
 80036a2:	4602      	mov	r2, r0
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	e09f      	b.n	80037e8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	212c      	movs	r1, #44	; 0x2c
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	4413      	add	r3, r2
 80036b4:	3361      	adds	r3, #97	; 0x61
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d109      	bne.n	80036d0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	212c      	movs	r1, #44	; 0x2c
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	3360      	adds	r3, #96	; 0x60
 80036ca:	2202      	movs	r2, #2
 80036cc:	701a      	strb	r2, [r3, #0]
 80036ce:	e08b      	b.n	80037e8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	212c      	movs	r1, #44	; 0x2c
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	4413      	add	r3, r2
 80036dc:	3361      	adds	r3, #97	; 0x61
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d109      	bne.n	80036f8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	212c      	movs	r1, #44	; 0x2c
 80036ea:	fb01 f303 	mul.w	r3, r1, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	3360      	adds	r3, #96	; 0x60
 80036f2:	2202      	movs	r2, #2
 80036f4:	701a      	strb	r2, [r3, #0]
 80036f6:	e077      	b.n	80037e8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	212c      	movs	r1, #44	; 0x2c
 80036fe:	fb01 f303 	mul.w	r3, r1, r3
 8003702:	4413      	add	r3, r2
 8003704:	3361      	adds	r3, #97	; 0x61
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b05      	cmp	r3, #5
 800370a:	d109      	bne.n	8003720 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	212c      	movs	r1, #44	; 0x2c
 8003712:	fb01 f303 	mul.w	r3, r1, r3
 8003716:	4413      	add	r3, r2
 8003718:	3360      	adds	r3, #96	; 0x60
 800371a:	2205      	movs	r2, #5
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	e063      	b.n	80037e8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	212c      	movs	r1, #44	; 0x2c
 8003726:	fb01 f303 	mul.w	r3, r1, r3
 800372a:	4413      	add	r3, r2
 800372c:	3361      	adds	r3, #97	; 0x61
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b06      	cmp	r3, #6
 8003732:	d009      	beq.n	8003748 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	212c      	movs	r1, #44	; 0x2c
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	4413      	add	r3, r2
 8003740:	3361      	adds	r3, #97	; 0x61
 8003742:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003744:	2b08      	cmp	r3, #8
 8003746:	d14f      	bne.n	80037e8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	212c      	movs	r1, #44	; 0x2c
 800374e:	fb01 f303 	mul.w	r3, r1, r3
 8003752:	4413      	add	r3, r2
 8003754:	335c      	adds	r3, #92	; 0x5c
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	202c      	movs	r0, #44	; 0x2c
 8003760:	fb00 f303 	mul.w	r3, r0, r3
 8003764:	440b      	add	r3, r1
 8003766:	335c      	adds	r3, #92	; 0x5c
 8003768:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	212c      	movs	r1, #44	; 0x2c
 8003770:	fb01 f303 	mul.w	r3, r1, r3
 8003774:	4413      	add	r3, r2
 8003776:	335c      	adds	r3, #92	; 0x5c
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d912      	bls.n	80037a4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	212c      	movs	r1, #44	; 0x2c
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	4413      	add	r3, r2
 800378a:	335c      	adds	r3, #92	; 0x5c
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	212c      	movs	r1, #44	; 0x2c
 8003796:	fb01 f303 	mul.w	r3, r1, r3
 800379a:	4413      	add	r3, r2
 800379c:	3360      	adds	r3, #96	; 0x60
 800379e:	2204      	movs	r2, #4
 80037a0:	701a      	strb	r2, [r3, #0]
 80037a2:	e021      	b.n	80037e8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	212c      	movs	r1, #44	; 0x2c
 80037aa:	fb01 f303 	mul.w	r3, r1, r3
 80037ae:	4413      	add	r3, r2
 80037b0:	3360      	adds	r3, #96	; 0x60
 80037b2:	2202      	movs	r2, #2
 80037b4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037cc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037d4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e2:	461a      	mov	r2, r3
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f4:	461a      	mov	r2, r3
 80037f6:	2302      	movs	r3, #2
 80037f8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	b2d9      	uxtb	r1, r3
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	202c      	movs	r0, #44	; 0x2c
 8003804:	fb00 f303 	mul.w	r3, r0, r3
 8003808:	4413      	add	r3, r2
 800380a:	3360      	adds	r3, #96	; 0x60
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f005 fee3 	bl	80095dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003816:	bf00      	nop
 8003818:	3720      	adds	r7, #32
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b08a      	sub	sp, #40	; 0x28
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	0c5b      	lsrs	r3, r3, #17
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	091b      	lsrs	r3, r3, #4
 800384e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003852:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d004      	beq.n	8003864 <HCD_RXQLVL_IRQHandler+0x46>
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b05      	cmp	r3, #5
 800385e:	f000 80a9 	beq.w	80039b4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003862:	e0aa      	b.n	80039ba <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 80a6 	beq.w	80039b8 <HCD_RXQLVL_IRQHandler+0x19a>
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	212c      	movs	r1, #44	; 0x2c
 8003872:	fb01 f303 	mul.w	r3, r1, r3
 8003876:	4413      	add	r3, r2
 8003878:	3344      	adds	r3, #68	; 0x44
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 809b 	beq.w	80039b8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	212c      	movs	r1, #44	; 0x2c
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	4413      	add	r3, r2
 800388e:	3350      	adds	r3, #80	; 0x50
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	441a      	add	r2, r3
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	202c      	movs	r0, #44	; 0x2c
 800389c:	fb00 f303 	mul.w	r3, r0, r3
 80038a0:	440b      	add	r3, r1
 80038a2:	334c      	adds	r3, #76	; 0x4c
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d87a      	bhi.n	80039a0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	212c      	movs	r1, #44	; 0x2c
 80038b4:	fb01 f303 	mul.w	r3, r1, r3
 80038b8:	4413      	add	r3, r2
 80038ba:	3344      	adds	r3, #68	; 0x44
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	b292      	uxth	r2, r2
 80038c2:	4619      	mov	r1, r3
 80038c4:	f002 ff3e 	bl	8006744 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	212c      	movs	r1, #44	; 0x2c
 80038ce:	fb01 f303 	mul.w	r3, r1, r3
 80038d2:	4413      	add	r3, r2
 80038d4:	3344      	adds	r3, #68	; 0x44
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	441a      	add	r2, r3
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	202c      	movs	r0, #44	; 0x2c
 80038e2:	fb00 f303 	mul.w	r3, r0, r3
 80038e6:	440b      	add	r3, r1
 80038e8:	3344      	adds	r3, #68	; 0x44
 80038ea:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	212c      	movs	r1, #44	; 0x2c
 80038f2:	fb01 f303 	mul.w	r3, r1, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	3350      	adds	r3, #80	; 0x50
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	441a      	add	r2, r3
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	202c      	movs	r0, #44	; 0x2c
 8003906:	fb00 f303 	mul.w	r3, r0, r3
 800390a:	440b      	add	r3, r1
 800390c:	3350      	adds	r3, #80	; 0x50
 800390e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	4413      	add	r3, r2
 8003918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	0cdb      	lsrs	r3, r3, #19
 8003920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003924:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	212c      	movs	r1, #44	; 0x2c
 800392c:	fb01 f303 	mul.w	r3, r1, r3
 8003930:	4413      	add	r3, r2
 8003932:	3340      	adds	r3, #64	; 0x40
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4293      	cmp	r3, r2
 800393c:	d13c      	bne.n	80039b8 <HCD_RXQLVL_IRQHandler+0x19a>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d039      	beq.n	80039b8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	4413      	add	r3, r2
 800394c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800395a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003962:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	4413      	add	r3, r2
 800396c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003970:	461a      	mov	r2, r3
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	212c      	movs	r1, #44	; 0x2c
 800397c:	fb01 f303 	mul.w	r3, r1, r3
 8003980:	4413      	add	r3, r2
 8003982:	3354      	adds	r3, #84	; 0x54
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	f083 0301 	eor.w	r3, r3, #1
 800398a:	b2d8      	uxtb	r0, r3
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	212c      	movs	r1, #44	; 0x2c
 8003992:	fb01 f303 	mul.w	r3, r1, r3
 8003996:	4413      	add	r3, r2
 8003998:	3354      	adds	r3, #84	; 0x54
 800399a:	4602      	mov	r2, r0
 800399c:	701a      	strb	r2, [r3, #0]
      break;
 800399e:	e00b      	b.n	80039b8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	212c      	movs	r1, #44	; 0x2c
 80039a6:	fb01 f303 	mul.w	r3, r1, r3
 80039aa:	4413      	add	r3, r2
 80039ac:	3360      	adds	r3, #96	; 0x60
 80039ae:	2204      	movs	r2, #4
 80039b0:	701a      	strb	r2, [r3, #0]
      break;
 80039b2:	e001      	b.n	80039b8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80039b4:	bf00      	nop
 80039b6:	e000      	b.n	80039ba <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80039b8:	bf00      	nop
  }
}
 80039ba:	bf00      	nop
 80039bc:	3728      	adds	r7, #40	; 0x28
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b086      	sub	sp, #24
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80039ee:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d10b      	bne.n	8003a12 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d102      	bne.n	8003a0a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f005 fdcd 	bl	80095a4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f043 0302 	orr.w	r3, r3, #2
 8003a10:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d132      	bne.n	8003a82 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f043 0308 	orr.w	r3, r3, #8
 8003a22:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d126      	bne.n	8003a7c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d113      	bne.n	8003a5e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003a3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a40:	d106      	bne.n	8003a50 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2102      	movs	r1, #2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f002 ffe9 	bl	8006a20 <USB_InitFSLSPClkSel>
 8003a4e:	e011      	b.n	8003a74 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2101      	movs	r1, #1
 8003a56:	4618      	mov	r0, r3
 8003a58:	f002 ffe2 	bl	8006a20 <USB_InitFSLSPClkSel>
 8003a5c:	e00a      	b.n	8003a74 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d106      	bne.n	8003a74 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003a72:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f005 fdbf 	bl	80095f8 <HAL_HCD_PortEnabled_Callback>
 8003a7a:	e002      	b.n	8003a82 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f005 fdc9 	bl	8009614 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b20      	cmp	r3, #32
 8003a8a:	d103      	bne.n	8003a94 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f043 0320 	orr.w	r3, r3, #32
 8003a92:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	6013      	str	r3, [r2, #0]
}
 8003aa0:	bf00      	nop
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e12b      	b.n	8003d12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fd fe12 	bl	80016f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2224      	movs	r2, #36	; 0x24
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003afa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b0c:	f001 fa20 	bl	8004f50 <HAL_RCC_GetPCLK1Freq>
 8003b10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	4a81      	ldr	r2, [pc, #516]	; (8003d1c <HAL_I2C_Init+0x274>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d807      	bhi.n	8003b2c <HAL_I2C_Init+0x84>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4a80      	ldr	r2, [pc, #512]	; (8003d20 <HAL_I2C_Init+0x278>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	bf94      	ite	ls
 8003b24:	2301      	movls	r3, #1
 8003b26:	2300      	movhi	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	e006      	b.n	8003b3a <HAL_I2C_Init+0x92>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4a7d      	ldr	r2, [pc, #500]	; (8003d24 <HAL_I2C_Init+0x27c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	bf94      	ite	ls
 8003b34:	2301      	movls	r3, #1
 8003b36:	2300      	movhi	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e0e7      	b.n	8003d12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4a78      	ldr	r2, [pc, #480]	; (8003d28 <HAL_I2C_Init+0x280>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	0c9b      	lsrs	r3, r3, #18
 8003b4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	4a6a      	ldr	r2, [pc, #424]	; (8003d1c <HAL_I2C_Init+0x274>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d802      	bhi.n	8003b7c <HAL_I2C_Init+0xd4>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	e009      	b.n	8003b90 <HAL_I2C_Init+0xe8>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b82:	fb02 f303 	mul.w	r3, r2, r3
 8003b86:	4a69      	ldr	r2, [pc, #420]	; (8003d2c <HAL_I2C_Init+0x284>)
 8003b88:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8c:	099b      	lsrs	r3, r3, #6
 8003b8e:	3301      	adds	r3, #1
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	6812      	ldr	r2, [r2, #0]
 8003b94:	430b      	orrs	r3, r1
 8003b96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ba2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	495c      	ldr	r1, [pc, #368]	; (8003d1c <HAL_I2C_Init+0x274>)
 8003bac:	428b      	cmp	r3, r1
 8003bae:	d819      	bhi.n	8003be4 <HAL_I2C_Init+0x13c>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1e59      	subs	r1, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bbe:	1c59      	adds	r1, r3, #1
 8003bc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bc4:	400b      	ands	r3, r1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <HAL_I2C_Init+0x138>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	1e59      	subs	r1, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bd8:	3301      	adds	r3, #1
 8003bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bde:	e051      	b.n	8003c84 <HAL_I2C_Init+0x1dc>
 8003be0:	2304      	movs	r3, #4
 8003be2:	e04f      	b.n	8003c84 <HAL_I2C_Init+0x1dc>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d111      	bne.n	8003c10 <HAL_I2C_Init+0x168>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1e58      	subs	r0, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	440b      	add	r3, r1
 8003bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bfe:	3301      	adds	r3, #1
 8003c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf0c      	ite	eq
 8003c08:	2301      	moveq	r3, #1
 8003c0a:	2300      	movne	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	e012      	b.n	8003c36 <HAL_I2C_Init+0x18e>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1e58      	subs	r0, r3, #1
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6859      	ldr	r1, [r3, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	0099      	lsls	r1, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c26:	3301      	adds	r3, #1
 8003c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	bf0c      	ite	eq
 8003c30:	2301      	moveq	r3, #1
 8003c32:	2300      	movne	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_I2C_Init+0x196>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e022      	b.n	8003c84 <HAL_I2C_Init+0x1dc>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10e      	bne.n	8003c64 <HAL_I2C_Init+0x1bc>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1e58      	subs	r0, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6859      	ldr	r1, [r3, #4]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	440b      	add	r3, r1
 8003c54:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c58:	3301      	adds	r3, #1
 8003c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c62:	e00f      	b.n	8003c84 <HAL_I2C_Init+0x1dc>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	1e58      	subs	r0, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6859      	ldr	r1, [r3, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	0099      	lsls	r1, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	6809      	ldr	r1, [r1, #0]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69da      	ldr	r2, [r3, #28]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6911      	ldr	r1, [r2, #16]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	68d2      	ldr	r2, [r2, #12]
 8003cbe:	4311      	orrs	r1, r2
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	430b      	orrs	r3, r1
 8003cc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	000186a0 	.word	0x000186a0
 8003d20:	001e847f 	.word	0x001e847f
 8003d24:	003d08ff 	.word	0x003d08ff
 8003d28:	431bde83 	.word	0x431bde83
 8003d2c:	10624dd3 	.word	0x10624dd3

08003d30 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e128      	b.n	8003f94 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d109      	bne.n	8003d62 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a90      	ldr	r2, [pc, #576]	; (8003f9c <HAL_I2S_Init+0x26c>)
 8003d5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7fd fd13 	bl	8001788 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d78:	f023 030f 	bic.w	r3, r3, #15
 8003d7c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2202      	movs	r2, #2
 8003d84:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d060      	beq.n	8003e50 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d102      	bne.n	8003d9c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003d96:	2310      	movs	r3, #16
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	e001      	b.n	8003da0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003d9c:	2320      	movs	r3, #32
 8003d9e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d802      	bhi.n	8003dae <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003dae:	2001      	movs	r0, #1
 8003db0:	f001 f9c4 	bl	800513c <HAL_RCCEx_GetPeriphCLKFreq>
 8003db4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dbe:	d125      	bne.n	8003e0c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d010      	beq.n	8003dea <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	461a      	mov	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de4:	3305      	adds	r3, #5
 8003de6:	613b      	str	r3, [r7, #16]
 8003de8:	e01f      	b.n	8003e2a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e06:	3305      	adds	r3, #5
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	e00e      	b.n	8003e2a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e26:	3305      	adds	r3, #5
 8003e28:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4a5c      	ldr	r2, [pc, #368]	; (8003fa0 <HAL_I2S_Init+0x270>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	08db      	lsrs	r3, r3, #3
 8003e34:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	021b      	lsls	r3, r3, #8
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	e003      	b.n	8003e58 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003e50:	2302      	movs	r3, #2
 8003e52:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d902      	bls.n	8003e64 <HAL_I2S_Init+0x134>
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	2bff      	cmp	r3, #255	; 0xff
 8003e62:	d907      	bls.n	8003e74 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e68:	f043 0210 	orr.w	r2, r3, #16
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e08f      	b.n	8003f94 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	ea42 0103 	orr.w	r1, r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69fa      	ldr	r2, [r7, #28]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e92:	f023 030f 	bic.w	r3, r3, #15
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6851      	ldr	r1, [r2, #4]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6892      	ldr	r2, [r2, #8]
 8003e9e:	4311      	orrs	r1, r2
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	68d2      	ldr	r2, [r2, #12]
 8003ea4:	4311      	orrs	r1, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6992      	ldr	r2, [r2, #24]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eb6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d161      	bne.n	8003f84 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a38      	ldr	r2, [pc, #224]	; (8003fa4 <HAL_I2S_Init+0x274>)
 8003ec4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a37      	ldr	r2, [pc, #220]	; (8003fa8 <HAL_I2S_Init+0x278>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d101      	bne.n	8003ed4 <HAL_I2S_Init+0x1a4>
 8003ed0:	4b36      	ldr	r3, [pc, #216]	; (8003fac <HAL_I2S_Init+0x27c>)
 8003ed2:	e001      	b.n	8003ed8 <HAL_I2S_Init+0x1a8>
 8003ed4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	4932      	ldr	r1, [pc, #200]	; (8003fa8 <HAL_I2S_Init+0x278>)
 8003ee0:	428a      	cmp	r2, r1
 8003ee2:	d101      	bne.n	8003ee8 <HAL_I2S_Init+0x1b8>
 8003ee4:	4a31      	ldr	r2, [pc, #196]	; (8003fac <HAL_I2S_Init+0x27c>)
 8003ee6:	e001      	b.n	8003eec <HAL_I2S_Init+0x1bc>
 8003ee8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003eec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ef0:	f023 030f 	bic.w	r3, r3, #15
 8003ef4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a2b      	ldr	r2, [pc, #172]	; (8003fa8 <HAL_I2S_Init+0x278>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d101      	bne.n	8003f04 <HAL_I2S_Init+0x1d4>
 8003f00:	4b2a      	ldr	r3, [pc, #168]	; (8003fac <HAL_I2S_Init+0x27c>)
 8003f02:	e001      	b.n	8003f08 <HAL_I2S_Init+0x1d8>
 8003f04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f08:	2202      	movs	r2, #2
 8003f0a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a25      	ldr	r2, [pc, #148]	; (8003fa8 <HAL_I2S_Init+0x278>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d101      	bne.n	8003f1a <HAL_I2S_Init+0x1ea>
 8003f16:	4b25      	ldr	r3, [pc, #148]	; (8003fac <HAL_I2S_Init+0x27c>)
 8003f18:	e001      	b.n	8003f1e <HAL_I2S_Init+0x1ee>
 8003f1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f2a:	d003      	beq.n	8003f34 <HAL_I2S_Init+0x204>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d103      	bne.n	8003f3c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	e001      	b.n	8003f40 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f54:	4313      	orrs	r3, r2
 8003f56:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	897b      	ldrh	r3, [r7, #10]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f6c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a0d      	ldr	r2, [pc, #52]	; (8003fa8 <HAL_I2S_Init+0x278>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d101      	bne.n	8003f7c <HAL_I2S_Init+0x24c>
 8003f78:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <HAL_I2S_Init+0x27c>)
 8003f7a:	e001      	b.n	8003f80 <HAL_I2S_Init+0x250>
 8003f7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f80:	897a      	ldrh	r2, [r7, #10]
 8003f82:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3720      	adds	r7, #32
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	080040a7 	.word	0x080040a7
 8003fa0:	cccccccd 	.word	0xcccccccd
 8003fa4:	080041bd 	.word	0x080041bd
 8003fa8:	40003800 	.word	0x40003800
 8003fac:	40003400 	.word	0x40003400

08003fb0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	881a      	ldrh	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	1c9a      	adds	r2, r3, #2
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10e      	bne.n	8004040 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004030:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7ff ffb8 	bl	8003fb0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004040:	bf00      	nop
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	b292      	uxth	r2, r2
 800405c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004062:	1c9a      	adds	r2, r3, #2
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800406c:	b29b      	uxth	r3, r3
 800406e:	3b01      	subs	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10e      	bne.n	800409e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800408e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff ff93 	bl	8003fc4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b086      	sub	sp, #24
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d13a      	bne.n	8004138 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d109      	bne.n	80040e0 <I2S_IRQHandler+0x3a>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d6:	2b40      	cmp	r3, #64	; 0x40
 80040d8:	d102      	bne.n	80040e0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff ffb4 	bl	8004048 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e6:	2b40      	cmp	r3, #64	; 0x40
 80040e8:	d126      	bne.n	8004138 <I2S_IRQHandler+0x92>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b20      	cmp	r3, #32
 80040f6:	d11f      	bne.n	8004138 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004106:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004108:	2300      	movs	r3, #0
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412a:	f043 0202 	orr.w	r2, r3, #2
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff ff50 	bl	8003fd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b03      	cmp	r3, #3
 8004142:	d136      	bne.n	80041b2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b02      	cmp	r3, #2
 800414c:	d109      	bne.n	8004162 <I2S_IRQHandler+0xbc>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004158:	2b80      	cmp	r3, #128	; 0x80
 800415a:	d102      	bne.n	8004162 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff ff45 	bl	8003fec <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b08      	cmp	r3, #8
 800416a:	d122      	bne.n	80041b2 <I2S_IRQHandler+0x10c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b20      	cmp	r3, #32
 8004178:	d11b      	bne.n	80041b2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004188:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a4:	f043 0204 	orr.w	r2, r3, #4
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff ff13 	bl	8003fd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041b2:	bf00      	nop
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a92      	ldr	r2, [pc, #584]	; (800441c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d101      	bne.n	80041da <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80041d6:	4b92      	ldr	r3, [pc, #584]	; (8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041d8:	e001      	b.n	80041de <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80041da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a8b      	ldr	r2, [pc, #556]	; (800441c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d101      	bne.n	80041f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80041f4:	4b8a      	ldr	r3, [pc, #552]	; (8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041f6:	e001      	b.n	80041fc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80041f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004208:	d004      	beq.n	8004214 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	f040 8099 	bne.w	8004346 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b02      	cmp	r3, #2
 800421c:	d107      	bne.n	800422e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f925 	bl	8004478 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b01      	cmp	r3, #1
 8004236:	d107      	bne.n	8004248 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f9c8 	bl	80045d8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424e:	2b40      	cmp	r3, #64	; 0x40
 8004250:	d13a      	bne.n	80042c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d035      	beq.n	80042c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a6e      	ldr	r2, [pc, #440]	; (800441c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d101      	bne.n	800426a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004266:	4b6e      	ldr	r3, [pc, #440]	; (8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004268:	e001      	b.n	800426e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800426a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4969      	ldr	r1, [pc, #420]	; (800441c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004276:	428b      	cmp	r3, r1
 8004278:	d101      	bne.n	800427e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800427a:	4b69      	ldr	r3, [pc, #420]	; (8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800427c:	e001      	b.n	8004282 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800427e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004282:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004286:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004296:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004298:	2300      	movs	r3, #0
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ba:	f043 0202 	orr.w	r2, r3, #2
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff fe88 	bl	8003fd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	f040 80c3 	bne.w	800445a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80bd 	beq.w	800445a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042ee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a49      	ldr	r2, [pc, #292]	; (800441c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d101      	bne.n	80042fe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80042fa:	4b49      	ldr	r3, [pc, #292]	; (8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042fc:	e001      	b.n	8004302 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80042fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4944      	ldr	r1, [pc, #272]	; (800441c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800430a:	428b      	cmp	r3, r1
 800430c:	d101      	bne.n	8004312 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800430e:	4b44      	ldr	r3, [pc, #272]	; (8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004310:	e001      	b.n	8004316 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004312:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004316:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800431a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800431c:	2300      	movs	r3, #0
 800431e:	60bb      	str	r3, [r7, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004336:	f043 0204 	orr.w	r2, r3, #4
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff fe4a 	bl	8003fd8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004344:	e089      	b.n	800445a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b02      	cmp	r3, #2
 800434e:	d107      	bne.n	8004360 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f8be 	bl	80044dc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b01      	cmp	r3, #1
 8004368:	d107      	bne.n	800437a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f8fd 	bl	8004574 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004380:	2b40      	cmp	r3, #64	; 0x40
 8004382:	d12f      	bne.n	80043e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f003 0320 	and.w	r3, r3, #32
 800438a:	2b00      	cmp	r3, #0
 800438c:	d02a      	beq.n	80043e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800439c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1e      	ldr	r2, [pc, #120]	; (800441c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d101      	bne.n	80043ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80043a8:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043aa:	e001      	b.n	80043b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80043ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4919      	ldr	r1, [pc, #100]	; (800441c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043b8:	428b      	cmp	r3, r1
 80043ba:	d101      	bne.n	80043c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80043bc:	4b18      	ldr	r3, [pc, #96]	; (8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043be:	e001      	b.n	80043c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80043c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043c8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d6:	f043 0202 	orr.w	r2, r3, #2
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7ff fdfa 	bl	8003fd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d136      	bne.n	800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d031      	beq.n	800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a07      	ldr	r2, [pc, #28]	; (800441c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d101      	bne.n	8004406 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004402:	4b07      	ldr	r3, [pc, #28]	; (8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004404:	e001      	b.n	800440a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004406:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4902      	ldr	r1, [pc, #8]	; (800441c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004412:	428b      	cmp	r3, r1
 8004414:	d106      	bne.n	8004424 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004416:	4b02      	ldr	r3, [pc, #8]	; (8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004418:	e006      	b.n	8004428 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800441a:	bf00      	nop
 800441c:	40003800 	.word	0x40003800
 8004420:	40003400 	.word	0x40003400
 8004424:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004428:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800442c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800443c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444a:	f043 0204 	orr.w	r2, r3, #4
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7ff fdc0 	bl	8003fd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004458:	e000      	b.n	800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800445a:	bf00      	nop
}
 800445c:	bf00      	nop
 800445e:	3720      	adds	r7, #32
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	1c99      	adds	r1, r3, #2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6251      	str	r1, [r2, #36]	; 0x24
 800448a:	881a      	ldrh	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004496:	b29b      	uxth	r3, r3
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d113      	bne.n	80044d2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d106      	bne.n	80044d2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ffc9 	bl	8004464 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	1c99      	adds	r1, r3, #2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6251      	str	r1, [r2, #36]	; 0x24
 80044ee:	8819      	ldrh	r1, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1d      	ldr	r2, [pc, #116]	; (800456c <I2SEx_TxISR_I2SExt+0x90>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d101      	bne.n	80044fe <I2SEx_TxISR_I2SExt+0x22>
 80044fa:	4b1d      	ldr	r3, [pc, #116]	; (8004570 <I2SEx_TxISR_I2SExt+0x94>)
 80044fc:	e001      	b.n	8004502 <I2SEx_TxISR_I2SExt+0x26>
 80044fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004502:	460a      	mov	r2, r1
 8004504:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d121      	bne.n	8004562 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a12      	ldr	r2, [pc, #72]	; (800456c <I2SEx_TxISR_I2SExt+0x90>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d101      	bne.n	800452c <I2SEx_TxISR_I2SExt+0x50>
 8004528:	4b11      	ldr	r3, [pc, #68]	; (8004570 <I2SEx_TxISR_I2SExt+0x94>)
 800452a:	e001      	b.n	8004530 <I2SEx_TxISR_I2SExt+0x54>
 800452c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	490d      	ldr	r1, [pc, #52]	; (800456c <I2SEx_TxISR_I2SExt+0x90>)
 8004538:	428b      	cmp	r3, r1
 800453a:	d101      	bne.n	8004540 <I2SEx_TxISR_I2SExt+0x64>
 800453c:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <I2SEx_TxISR_I2SExt+0x94>)
 800453e:	e001      	b.n	8004544 <I2SEx_TxISR_I2SExt+0x68>
 8004540:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004544:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004548:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d106      	bne.n	8004562 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7ff ff81 	bl	8004464 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40003800 	.word	0x40003800
 8004570:	40003400 	.word	0x40003400

08004574 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68d8      	ldr	r0, [r3, #12]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004586:	1c99      	adds	r1, r3, #2
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800458c:	b282      	uxth	r2, r0
 800458e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004594:	b29b      	uxth	r3, r3
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d113      	bne.n	80045d0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045b6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7ff ff4a 	bl	8004464 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045d0:	bf00      	nop
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a20      	ldr	r2, [pc, #128]	; (8004668 <I2SEx_RxISR_I2SExt+0x90>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d101      	bne.n	80045ee <I2SEx_RxISR_I2SExt+0x16>
 80045ea:	4b20      	ldr	r3, [pc, #128]	; (800466c <I2SEx_RxISR_I2SExt+0x94>)
 80045ec:	e001      	b.n	80045f2 <I2SEx_RxISR_I2SExt+0x1a>
 80045ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045f2:	68d8      	ldr	r0, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	1c99      	adds	r1, r3, #2
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80045fe:	b282      	uxth	r2, r0
 8004600:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d121      	bne.n	800465e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a12      	ldr	r2, [pc, #72]	; (8004668 <I2SEx_RxISR_I2SExt+0x90>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d101      	bne.n	8004628 <I2SEx_RxISR_I2SExt+0x50>
 8004624:	4b11      	ldr	r3, [pc, #68]	; (800466c <I2SEx_RxISR_I2SExt+0x94>)
 8004626:	e001      	b.n	800462c <I2SEx_RxISR_I2SExt+0x54>
 8004628:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	490d      	ldr	r1, [pc, #52]	; (8004668 <I2SEx_RxISR_I2SExt+0x90>)
 8004634:	428b      	cmp	r3, r1
 8004636:	d101      	bne.n	800463c <I2SEx_RxISR_I2SExt+0x64>
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <I2SEx_RxISR_I2SExt+0x94>)
 800463a:	e001      	b.n	8004640 <I2SEx_RxISR_I2SExt+0x68>
 800463c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004640:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004644:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d106      	bne.n	800465e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff ff03 	bl	8004464 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800465e:	bf00      	nop
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40003800 	.word	0x40003800
 800466c:	40003400 	.word	0x40003400

08004670 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e267      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d075      	beq.n	800477a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800468e:	4b88      	ldr	r3, [pc, #544]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 030c 	and.w	r3, r3, #12
 8004696:	2b04      	cmp	r3, #4
 8004698:	d00c      	beq.n	80046b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800469a:	4b85      	ldr	r3, [pc, #532]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d112      	bne.n	80046cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046a6:	4b82      	ldr	r3, [pc, #520]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046b2:	d10b      	bne.n	80046cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b4:	4b7e      	ldr	r3, [pc, #504]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d05b      	beq.n	8004778 <HAL_RCC_OscConfig+0x108>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d157      	bne.n	8004778 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e242      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d4:	d106      	bne.n	80046e4 <HAL_RCC_OscConfig+0x74>
 80046d6:	4b76      	ldr	r3, [pc, #472]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a75      	ldr	r2, [pc, #468]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80046dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	e01d      	b.n	8004720 <HAL_RCC_OscConfig+0xb0>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046ec:	d10c      	bne.n	8004708 <HAL_RCC_OscConfig+0x98>
 80046ee:	4b70      	ldr	r3, [pc, #448]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a6f      	ldr	r2, [pc, #444]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80046f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	4b6d      	ldr	r3, [pc, #436]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a6c      	ldr	r2, [pc, #432]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	e00b      	b.n	8004720 <HAL_RCC_OscConfig+0xb0>
 8004708:	4b69      	ldr	r3, [pc, #420]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a68      	ldr	r2, [pc, #416]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 800470e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	4b66      	ldr	r3, [pc, #408]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a65      	ldr	r2, [pc, #404]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 800471a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800471e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d013      	beq.n	8004750 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004728:	f7fd fa8c 	bl	8001c44 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004730:	f7fd fa88 	bl	8001c44 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b64      	cmp	r3, #100	; 0x64
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e207      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004742:	4b5b      	ldr	r3, [pc, #364]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0f0      	beq.n	8004730 <HAL_RCC_OscConfig+0xc0>
 800474e:	e014      	b.n	800477a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7fd fa78 	bl	8001c44 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004758:	f7fd fa74 	bl	8001c44 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b64      	cmp	r3, #100	; 0x64
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e1f3      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800476a:	4b51      	ldr	r3, [pc, #324]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0xe8>
 8004776:	e000      	b.n	800477a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d063      	beq.n	800484e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004786:	4b4a      	ldr	r3, [pc, #296]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00b      	beq.n	80047aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004792:	4b47      	ldr	r3, [pc, #284]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800479a:	2b08      	cmp	r3, #8
 800479c:	d11c      	bne.n	80047d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800479e:	4b44      	ldr	r3, [pc, #272]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d116      	bne.n	80047d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047aa:	4b41      	ldr	r3, [pc, #260]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d005      	beq.n	80047c2 <HAL_RCC_OscConfig+0x152>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d001      	beq.n	80047c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e1c7      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c2:	4b3b      	ldr	r3, [pc, #236]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	4937      	ldr	r1, [pc, #220]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d6:	e03a      	b.n	800484e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d020      	beq.n	8004822 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047e0:	4b34      	ldr	r3, [pc, #208]	; (80048b4 <HAL_RCC_OscConfig+0x244>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e6:	f7fd fa2d 	bl	8001c44 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ee:	f7fd fa29 	bl	8001c44 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e1a8      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004800:	4b2b      	ldr	r3, [pc, #172]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0f0      	beq.n	80047ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480c:	4b28      	ldr	r3, [pc, #160]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	4925      	ldr	r1, [pc, #148]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 800481c:	4313      	orrs	r3, r2
 800481e:	600b      	str	r3, [r1, #0]
 8004820:	e015      	b.n	800484e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004822:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <HAL_RCC_OscConfig+0x244>)
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fd fa0c 	bl	8001c44 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004830:	f7fd fa08 	bl	8001c44 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e187      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004842:	4b1b      	ldr	r3, [pc, #108]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f0      	bne.n	8004830 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b00      	cmp	r3, #0
 8004858:	d036      	beq.n	80048c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d016      	beq.n	8004890 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004862:	4b15      	ldr	r3, [pc, #84]	; (80048b8 <HAL_RCC_OscConfig+0x248>)
 8004864:	2201      	movs	r2, #1
 8004866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004868:	f7fd f9ec 	bl	8001c44 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004870:	f7fd f9e8 	bl	8001c44 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e167      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004882:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0x200>
 800488e:	e01b      	b.n	80048c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004890:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <HAL_RCC_OscConfig+0x248>)
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004896:	f7fd f9d5 	bl	8001c44 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800489c:	e00e      	b.n	80048bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800489e:	f7fd f9d1 	bl	8001c44 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d907      	bls.n	80048bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e150      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
 80048b0:	40023800 	.word	0x40023800
 80048b4:	42470000 	.word	0x42470000
 80048b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048bc:	4b88      	ldr	r3, [pc, #544]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80048be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1ea      	bne.n	800489e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 8097 	beq.w	8004a04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d6:	2300      	movs	r3, #0
 80048d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048da:	4b81      	ldr	r3, [pc, #516]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10f      	bne.n	8004906 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e6:	2300      	movs	r3, #0
 80048e8:	60bb      	str	r3, [r7, #8]
 80048ea:	4b7d      	ldr	r3, [pc, #500]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	4a7c      	ldr	r2, [pc, #496]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80048f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f4:	6413      	str	r3, [r2, #64]	; 0x40
 80048f6:	4b7a      	ldr	r3, [pc, #488]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fe:	60bb      	str	r3, [r7, #8]
 8004900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004902:	2301      	movs	r3, #1
 8004904:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004906:	4b77      	ldr	r3, [pc, #476]	; (8004ae4 <HAL_RCC_OscConfig+0x474>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490e:	2b00      	cmp	r3, #0
 8004910:	d118      	bne.n	8004944 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004912:	4b74      	ldr	r3, [pc, #464]	; (8004ae4 <HAL_RCC_OscConfig+0x474>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a73      	ldr	r2, [pc, #460]	; (8004ae4 <HAL_RCC_OscConfig+0x474>)
 8004918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800491c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800491e:	f7fd f991 	bl	8001c44 <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004924:	e008      	b.n	8004938 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004926:	f7fd f98d 	bl	8001c44 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e10c      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004938:	4b6a      	ldr	r3, [pc, #424]	; (8004ae4 <HAL_RCC_OscConfig+0x474>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0f0      	beq.n	8004926 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d106      	bne.n	800495a <HAL_RCC_OscConfig+0x2ea>
 800494c:	4b64      	ldr	r3, [pc, #400]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 800494e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004950:	4a63      	ldr	r2, [pc, #396]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	6713      	str	r3, [r2, #112]	; 0x70
 8004958:	e01c      	b.n	8004994 <HAL_RCC_OscConfig+0x324>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	2b05      	cmp	r3, #5
 8004960:	d10c      	bne.n	800497c <HAL_RCC_OscConfig+0x30c>
 8004962:	4b5f      	ldr	r3, [pc, #380]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004966:	4a5e      	ldr	r2, [pc, #376]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004968:	f043 0304 	orr.w	r3, r3, #4
 800496c:	6713      	str	r3, [r2, #112]	; 0x70
 800496e:	4b5c      	ldr	r3, [pc, #368]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	4a5b      	ldr	r2, [pc, #364]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004974:	f043 0301 	orr.w	r3, r3, #1
 8004978:	6713      	str	r3, [r2, #112]	; 0x70
 800497a:	e00b      	b.n	8004994 <HAL_RCC_OscConfig+0x324>
 800497c:	4b58      	ldr	r3, [pc, #352]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 800497e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004980:	4a57      	ldr	r2, [pc, #348]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004982:	f023 0301 	bic.w	r3, r3, #1
 8004986:	6713      	str	r3, [r2, #112]	; 0x70
 8004988:	4b55      	ldr	r3, [pc, #340]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 800498a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498c:	4a54      	ldr	r2, [pc, #336]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 800498e:	f023 0304 	bic.w	r3, r3, #4
 8004992:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d015      	beq.n	80049c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499c:	f7fd f952 	bl	8001c44 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a2:	e00a      	b.n	80049ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a4:	f7fd f94e 	bl	8001c44 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e0cb      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ba:	4b49      	ldr	r3, [pc, #292]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80049bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0ee      	beq.n	80049a4 <HAL_RCC_OscConfig+0x334>
 80049c6:	e014      	b.n	80049f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c8:	f7fd f93c 	bl	8001c44 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ce:	e00a      	b.n	80049e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d0:	f7fd f938 	bl	8001c44 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f241 3288 	movw	r2, #5000	; 0x1388
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e0b5      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e6:	4b3e      	ldr	r3, [pc, #248]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1ee      	bne.n	80049d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049f2:	7dfb      	ldrb	r3, [r7, #23]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d105      	bne.n	8004a04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f8:	4b39      	ldr	r3, [pc, #228]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80049fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fc:	4a38      	ldr	r2, [pc, #224]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80049fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 80a1 	beq.w	8004b50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a0e:	4b34      	ldr	r3, [pc, #208]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d05c      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d141      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a22:	4b31      	ldr	r3, [pc, #196]	; (8004ae8 <HAL_RCC_OscConfig+0x478>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a28:	f7fd f90c 	bl	8001c44 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a30:	f7fd f908 	bl	8001c44 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e087      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a42:	4b27      	ldr	r3, [pc, #156]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f0      	bne.n	8004a30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69da      	ldr	r2, [r3, #28]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	019b      	lsls	r3, r3, #6
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a64:	085b      	lsrs	r3, r3, #1
 8004a66:	3b01      	subs	r3, #1
 8004a68:	041b      	lsls	r3, r3, #16
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	061b      	lsls	r3, r3, #24
 8004a72:	491b      	ldr	r1, [pc, #108]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a78:	4b1b      	ldr	r3, [pc, #108]	; (8004ae8 <HAL_RCC_OscConfig+0x478>)
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7e:	f7fd f8e1 	bl	8001c44 <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a84:	e008      	b.n	8004a98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a86:	f7fd f8dd 	bl	8001c44 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e05c      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a98:	4b11      	ldr	r3, [pc, #68]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0f0      	beq.n	8004a86 <HAL_RCC_OscConfig+0x416>
 8004aa4:	e054      	b.n	8004b50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa6:	4b10      	ldr	r3, [pc, #64]	; (8004ae8 <HAL_RCC_OscConfig+0x478>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aac:	f7fd f8ca 	bl	8001c44 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab4:	f7fd f8c6 	bl	8001c44 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e045      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac6:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f0      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x444>
 8004ad2:	e03d      	b.n	8004b50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d107      	bne.n	8004aec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e038      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	40007000 	.word	0x40007000
 8004ae8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004aec:	4b1b      	ldr	r3, [pc, #108]	; (8004b5c <HAL_RCC_OscConfig+0x4ec>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d028      	beq.n	8004b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d121      	bne.n	8004b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d11a      	bne.n	8004b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d111      	bne.n	8004b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b32:	085b      	lsrs	r3, r3, #1
 8004b34:	3b01      	subs	r3, #1
 8004b36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d107      	bne.n	8004b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e000      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40023800 	.word	0x40023800

08004b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e0cc      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b74:	4b68      	ldr	r3, [pc, #416]	; (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d90c      	bls.n	8004b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b82:	4b65      	ldr	r3, [pc, #404]	; (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8a:	4b63      	ldr	r3, [pc, #396]	; (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d001      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e0b8      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d020      	beq.n	8004bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bb4:	4b59      	ldr	r3, [pc, #356]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	4a58      	ldr	r2, [pc, #352]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bcc:	4b53      	ldr	r3, [pc, #332]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	4a52      	ldr	r2, [pc, #328]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd8:	4b50      	ldr	r3, [pc, #320]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	494d      	ldr	r1, [pc, #308]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d044      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d107      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfe:	4b47      	ldr	r3, [pc, #284]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d119      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e07f      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d003      	beq.n	8004c1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	d107      	bne.n	8004c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1e:	4b3f      	ldr	r3, [pc, #252]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d109      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e06f      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2e:	4b3b      	ldr	r3, [pc, #236]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e067      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c3e:	4b37      	ldr	r3, [pc, #220]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f023 0203 	bic.w	r2, r3, #3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	4934      	ldr	r1, [pc, #208]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c50:	f7fc fff8 	bl	8001c44 <HAL_GetTick>
 8004c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c56:	e00a      	b.n	8004c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c58:	f7fc fff4 	bl	8001c44 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e04f      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6e:	4b2b      	ldr	r3, [pc, #172]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 020c 	and.w	r2, r3, #12
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d1eb      	bne.n	8004c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c80:	4b25      	ldr	r3, [pc, #148]	; (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d20c      	bcs.n	8004ca8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8e:	4b22      	ldr	r3, [pc, #136]	; (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c96:	4b20      	ldr	r3, [pc, #128]	; (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d001      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e032      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d008      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cb4:	4b19      	ldr	r3, [pc, #100]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	4916      	ldr	r1, [pc, #88]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cd2:	4b12      	ldr	r3, [pc, #72]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	490e      	ldr	r1, [pc, #56]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ce6:	f000 f821 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 8004cea:	4602      	mov	r2, r0
 8004cec:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	091b      	lsrs	r3, r3, #4
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	490a      	ldr	r1, [pc, #40]	; (8004d20 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf8:	5ccb      	ldrb	r3, [r1, r3]
 8004cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfe:	4a09      	ldr	r2, [pc, #36]	; (8004d24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d02:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <HAL_RCC_ClockConfig+0x1c8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fc ff58 	bl	8001bbc <HAL_InitTick>

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40023c00 	.word	0x40023c00
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	08009cb4 	.word	0x08009cb4
 8004d24:	20000008 	.word	0x20000008
 8004d28:	2000000c 	.word	0x2000000c

08004d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d30:	b094      	sub	sp, #80	; 0x50
 8004d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	647b      	str	r3, [r7, #68]	; 0x44
 8004d38:	2300      	movs	r3, #0
 8004d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d44:	4b79      	ldr	r3, [pc, #484]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 030c 	and.w	r3, r3, #12
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d00d      	beq.n	8004d6c <HAL_RCC_GetSysClockFreq+0x40>
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	f200 80e1 	bhi.w	8004f18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_RCC_GetSysClockFreq+0x34>
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d003      	beq.n	8004d66 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d5e:	e0db      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d60:	4b73      	ldr	r3, [pc, #460]	; (8004f30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d64:	e0db      	b.n	8004f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d66:	4b73      	ldr	r3, [pc, #460]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d6a:	e0d8      	b.n	8004f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d6c:	4b6f      	ldr	r3, [pc, #444]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d76:	4b6d      	ldr	r3, [pc, #436]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d063      	beq.n	8004e4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d82:	4b6a      	ldr	r3, [pc, #424]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	099b      	lsrs	r3, r3, #6
 8004d88:	2200      	movs	r2, #0
 8004d8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d94:	633b      	str	r3, [r7, #48]	; 0x30
 8004d96:	2300      	movs	r3, #0
 8004d98:	637b      	str	r3, [r7, #52]	; 0x34
 8004d9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d9e:	4622      	mov	r2, r4
 8004da0:	462b      	mov	r3, r5
 8004da2:	f04f 0000 	mov.w	r0, #0
 8004da6:	f04f 0100 	mov.w	r1, #0
 8004daa:	0159      	lsls	r1, r3, #5
 8004dac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004db0:	0150      	lsls	r0, r2, #5
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	4621      	mov	r1, r4
 8004db8:	1a51      	subs	r1, r2, r1
 8004dba:	6139      	str	r1, [r7, #16]
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dd0:	4659      	mov	r1, fp
 8004dd2:	018b      	lsls	r3, r1, #6
 8004dd4:	4651      	mov	r1, sl
 8004dd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dda:	4651      	mov	r1, sl
 8004ddc:	018a      	lsls	r2, r1, #6
 8004dde:	4651      	mov	r1, sl
 8004de0:	ebb2 0801 	subs.w	r8, r2, r1
 8004de4:	4659      	mov	r1, fp
 8004de6:	eb63 0901 	sbc.w	r9, r3, r1
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004df6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dfe:	4690      	mov	r8, r2
 8004e00:	4699      	mov	r9, r3
 8004e02:	4623      	mov	r3, r4
 8004e04:	eb18 0303 	adds.w	r3, r8, r3
 8004e08:	60bb      	str	r3, [r7, #8]
 8004e0a:	462b      	mov	r3, r5
 8004e0c:	eb49 0303 	adc.w	r3, r9, r3
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e1e:	4629      	mov	r1, r5
 8004e20:	024b      	lsls	r3, r1, #9
 8004e22:	4621      	mov	r1, r4
 8004e24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e28:	4621      	mov	r1, r4
 8004e2a:	024a      	lsls	r2, r1, #9
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	4619      	mov	r1, r3
 8004e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e32:	2200      	movs	r2, #0
 8004e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e3c:	f7fb fdba 	bl	80009b4 <__aeabi_uldivmod>
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	4613      	mov	r3, r2
 8004e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e48:	e058      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e4a:	4b38      	ldr	r3, [pc, #224]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	099b      	lsrs	r3, r3, #6
 8004e50:	2200      	movs	r2, #0
 8004e52:	4618      	mov	r0, r3
 8004e54:	4611      	mov	r1, r2
 8004e56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e5a:	623b      	str	r3, [r7, #32]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e64:	4642      	mov	r2, r8
 8004e66:	464b      	mov	r3, r9
 8004e68:	f04f 0000 	mov.w	r0, #0
 8004e6c:	f04f 0100 	mov.w	r1, #0
 8004e70:	0159      	lsls	r1, r3, #5
 8004e72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e76:	0150      	lsls	r0, r2, #5
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4641      	mov	r1, r8
 8004e7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e82:	4649      	mov	r1, r9
 8004e84:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e9c:	ebb2 040a 	subs.w	r4, r2, sl
 8004ea0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	00eb      	lsls	r3, r5, #3
 8004eae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eb2:	00e2      	lsls	r2, r4, #3
 8004eb4:	4614      	mov	r4, r2
 8004eb6:	461d      	mov	r5, r3
 8004eb8:	4643      	mov	r3, r8
 8004eba:	18e3      	adds	r3, r4, r3
 8004ebc:	603b      	str	r3, [r7, #0]
 8004ebe:	464b      	mov	r3, r9
 8004ec0:	eb45 0303 	adc.w	r3, r5, r3
 8004ec4:	607b      	str	r3, [r7, #4]
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	028b      	lsls	r3, r1, #10
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004edc:	4621      	mov	r1, r4
 8004ede:	028a      	lsls	r2, r1, #10
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	61bb      	str	r3, [r7, #24]
 8004eea:	61fa      	str	r2, [r7, #28]
 8004eec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ef0:	f7fb fd60 	bl	80009b4 <__aeabi_uldivmod>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4613      	mov	r3, r2
 8004efa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004efc:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	0c1b      	lsrs	r3, r3, #16
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	3301      	adds	r3, #1
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f16:	e002      	b.n	8004f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f18:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3750      	adds	r7, #80	; 0x50
 8004f24:	46bd      	mov	sp, r7
 8004f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	00f42400 	.word	0x00f42400
 8004f34:	007a1200 	.word	0x007a1200

08004f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f3c:	4b03      	ldr	r3, [pc, #12]	; (8004f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	20000008 	.word	0x20000008

08004f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f54:	f7ff fff0 	bl	8004f38 <HAL_RCC_GetHCLKFreq>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	0a9b      	lsrs	r3, r3, #10
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	4903      	ldr	r1, [pc, #12]	; (8004f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f66:	5ccb      	ldrb	r3, [r1, r3]
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40023800 	.word	0x40023800
 8004f74:	08009cc4 	.word	0x08009cc4

08004f78 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d105      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d035      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fa0:	4b62      	ldr	r3, [pc, #392]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fa6:	f7fc fe4d 	bl	8001c44 <HAL_GetTick>
 8004faa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fae:	f7fc fe49 	bl	8001c44 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e0b0      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fc0:	4b5b      	ldr	r3, [pc, #364]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1f0      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	019a      	lsls	r2, r3, #6
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	071b      	lsls	r3, r3, #28
 8004fd8:	4955      	ldr	r1, [pc, #340]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fe0:	4b52      	ldr	r3, [pc, #328]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fe6:	f7fc fe2d 	bl	8001c44 <HAL_GetTick>
 8004fea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fec:	e008      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fee:	f7fc fe29 	bl	8001c44 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e090      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005000:	4b4b      	ldr	r3, [pc, #300]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0f0      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 8083 	beq.w	8005120 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800501a:	2300      	movs	r3, #0
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	4b44      	ldr	r3, [pc, #272]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	4a43      	ldr	r2, [pc, #268]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005028:	6413      	str	r3, [r2, #64]	; 0x40
 800502a:	4b41      	ldr	r3, [pc, #260]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005036:	4b3f      	ldr	r3, [pc, #252]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a3e      	ldr	r2, [pc, #248]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800503c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005040:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005042:	f7fc fdff 	bl	8001c44 <HAL_GetTick>
 8005046:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005048:	e008      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800504a:	f7fc fdfb 	bl	8001c44 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e062      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800505c:	4b35      	ldr	r3, [pc, #212]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0f0      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005068:	4b31      	ldr	r3, [pc, #196]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800506a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005070:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d02f      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	429a      	cmp	r2, r3
 8005084:	d028      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005086:	4b2a      	ldr	r3, [pc, #168]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005090:	4b29      	ldr	r3, [pc, #164]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005092:	2201      	movs	r2, #1
 8005094:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005096:	4b28      	ldr	r3, [pc, #160]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800509c:	4a24      	ldr	r2, [pc, #144]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050a2:	4b23      	ldr	r3, [pc, #140]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d114      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050ae:	f7fc fdc9 	bl	8001c44 <HAL_GetTick>
 80050b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b4:	e00a      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050b6:	f7fc fdc5 	bl	8001c44 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d901      	bls.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e02a      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050cc:	4b18      	ldr	r3, [pc, #96]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0ee      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050e4:	d10d      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80050e6:	4b12      	ldr	r3, [pc, #72]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050fa:	490d      	ldr	r1, [pc, #52]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	608b      	str	r3, [r1, #8]
 8005100:	e005      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005102:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	4a0a      	ldr	r2, [pc, #40]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005108:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800510c:	6093      	str	r3, [r2, #8]
 800510e:	4b08      	ldr	r3, [pc, #32]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005110:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800511a:	4905      	ldr	r1, [pc, #20]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800511c:	4313      	orrs	r3, r2
 800511e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	42470068 	.word	0x42470068
 8005130:	40023800 	.word	0x40023800
 8005134:	40007000 	.word	0x40007000
 8005138:	42470e40 	.word	0x42470e40

0800513c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d13e      	bne.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800515a:	4b23      	ldr	r3, [pc, #140]	; (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d005      	beq.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d12f      	bne.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005170:	4b1e      	ldr	r3, [pc, #120]	; (80051ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005172:	617b      	str	r3, [r7, #20]
          break;
 8005174:	e02f      	b.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005176:	4b1c      	ldr	r3, [pc, #112]	; (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800517e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005182:	d108      	bne.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005184:	4b18      	ldr	r3, [pc, #96]	; (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800518c:	4a18      	ldr	r2, [pc, #96]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800518e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	e007      	b.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005196:	4b14      	ldr	r3, [pc, #80]	; (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800519e:	4a15      	ldr	r2, [pc, #84]	; (80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80051a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80051a6:	4b10      	ldr	r3, [pc, #64]	; (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ac:	099b      	lsrs	r3, r3, #6
 80051ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	fb02 f303 	mul.w	r3, r2, r3
 80051b8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80051ba:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c0:	0f1b      	lsrs	r3, r3, #28
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051cc:	617b      	str	r3, [r7, #20]
          break;
 80051ce:	e002      	b.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	617b      	str	r3, [r7, #20]
          break;
 80051d4:	bf00      	nop
        }
      }
      break;
 80051d6:	bf00      	nop
    }
  }
  return frequency;
 80051d8:	697b      	ldr	r3, [r7, #20]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40023800 	.word	0x40023800
 80051ec:	00bb8000 	.word	0x00bb8000
 80051f0:	007a1200 	.word	0x007a1200
 80051f4:	00f42400 	.word	0x00f42400

080051f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e07b      	b.n	8005302 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	2b00      	cmp	r3, #0
 8005210:	d108      	bne.n	8005224 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800521a:	d009      	beq.n	8005230 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	61da      	str	r2, [r3, #28]
 8005222:	e005      	b.n	8005230 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fc fb1c 	bl	8001888 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005266:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005278:	431a      	orrs	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	431a      	orrs	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052a0:	431a      	orrs	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b4:	ea42 0103 	orr.w	r1, r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	0c1b      	lsrs	r3, r3, #16
 80052ce:	f003 0104 	and.w	r1, r3, #4
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	f003 0210 	and.w	r2, r3, #16
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69da      	ldr	r2, [r3, #28]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b082      	sub	sp, #8
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e041      	b.n	80053a0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d106      	bne.n	8005336 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7fc faf1 	bl	8001918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2202      	movs	r2, #2
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3304      	adds	r3, #4
 8005346:	4619      	mov	r1, r3
 8005348:	4610      	mov	r0, r2
 800534a:	f000 fce9 	bl	8005d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d001      	beq.n	80053c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e04e      	b.n	800545e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0201 	orr.w	r2, r2, #1
 80053d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a23      	ldr	r2, [pc, #140]	; (800546c <HAL_TIM_Base_Start_IT+0xc4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d022      	beq.n	8005428 <HAL_TIM_Base_Start_IT+0x80>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ea:	d01d      	beq.n	8005428 <HAL_TIM_Base_Start_IT+0x80>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a1f      	ldr	r2, [pc, #124]	; (8005470 <HAL_TIM_Base_Start_IT+0xc8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d018      	beq.n	8005428 <HAL_TIM_Base_Start_IT+0x80>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a1e      	ldr	r2, [pc, #120]	; (8005474 <HAL_TIM_Base_Start_IT+0xcc>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d013      	beq.n	8005428 <HAL_TIM_Base_Start_IT+0x80>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a1c      	ldr	r2, [pc, #112]	; (8005478 <HAL_TIM_Base_Start_IT+0xd0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00e      	beq.n	8005428 <HAL_TIM_Base_Start_IT+0x80>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a1b      	ldr	r2, [pc, #108]	; (800547c <HAL_TIM_Base_Start_IT+0xd4>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d009      	beq.n	8005428 <HAL_TIM_Base_Start_IT+0x80>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a19      	ldr	r2, [pc, #100]	; (8005480 <HAL_TIM_Base_Start_IT+0xd8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d004      	beq.n	8005428 <HAL_TIM_Base_Start_IT+0x80>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a18      	ldr	r2, [pc, #96]	; (8005484 <HAL_TIM_Base_Start_IT+0xdc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d111      	bne.n	800544c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 0307 	and.w	r3, r3, #7
 8005432:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b06      	cmp	r3, #6
 8005438:	d010      	beq.n	800545c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f042 0201 	orr.w	r2, r2, #1
 8005448:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800544a:	e007      	b.n	800545c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f042 0201 	orr.w	r2, r2, #1
 800545a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	40010000 	.word	0x40010000
 8005470:	40000400 	.word	0x40000400
 8005474:	40000800 	.word	0x40000800
 8005478:	40000c00 	.word	0x40000c00
 800547c:	40010400 	.word	0x40010400
 8005480:	40014000 	.word	0x40014000
 8005484:	40001800 	.word	0x40001800

08005488 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e041      	b.n	800551e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d106      	bne.n	80054b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f839 	bl	8005526 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3304      	adds	r3, #4
 80054c4:	4619      	mov	r1, r3
 80054c6:	4610      	mov	r0, r2
 80054c8:	f000 fc2a 	bl	8005d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
	...

0800553c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d109      	bne.n	8005560 <HAL_TIM_PWM_Start+0x24>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b01      	cmp	r3, #1
 8005556:	bf14      	ite	ne
 8005558:	2301      	movne	r3, #1
 800555a:	2300      	moveq	r3, #0
 800555c:	b2db      	uxtb	r3, r3
 800555e:	e022      	b.n	80055a6 <HAL_TIM_PWM_Start+0x6a>
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	2b04      	cmp	r3, #4
 8005564:	d109      	bne.n	800557a <HAL_TIM_PWM_Start+0x3e>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b01      	cmp	r3, #1
 8005570:	bf14      	ite	ne
 8005572:	2301      	movne	r3, #1
 8005574:	2300      	moveq	r3, #0
 8005576:	b2db      	uxtb	r3, r3
 8005578:	e015      	b.n	80055a6 <HAL_TIM_PWM_Start+0x6a>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b08      	cmp	r3, #8
 800557e:	d109      	bne.n	8005594 <HAL_TIM_PWM_Start+0x58>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b01      	cmp	r3, #1
 800558a:	bf14      	ite	ne
 800558c:	2301      	movne	r3, #1
 800558e:	2300      	moveq	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	e008      	b.n	80055a6 <HAL_TIM_PWM_Start+0x6a>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b01      	cmp	r3, #1
 800559e:	bf14      	ite	ne
 80055a0:	2301      	movne	r3, #1
 80055a2:	2300      	moveq	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e07c      	b.n	80056a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d104      	bne.n	80055be <HAL_TIM_PWM_Start+0x82>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055bc:	e013      	b.n	80055e6 <HAL_TIM_PWM_Start+0xaa>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d104      	bne.n	80055ce <HAL_TIM_PWM_Start+0x92>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055cc:	e00b      	b.n	80055e6 <HAL_TIM_PWM_Start+0xaa>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d104      	bne.n	80055de <HAL_TIM_PWM_Start+0xa2>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055dc:	e003      	b.n	80055e6 <HAL_TIM_PWM_Start+0xaa>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2202      	movs	r2, #2
 80055e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2201      	movs	r2, #1
 80055ec:	6839      	ldr	r1, [r7, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fe80 	bl	80062f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a2d      	ldr	r2, [pc, #180]	; (80056b0 <HAL_TIM_PWM_Start+0x174>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d004      	beq.n	8005608 <HAL_TIM_PWM_Start+0xcc>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a2c      	ldr	r2, [pc, #176]	; (80056b4 <HAL_TIM_PWM_Start+0x178>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d101      	bne.n	800560c <HAL_TIM_PWM_Start+0xd0>
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <HAL_TIM_PWM_Start+0xd2>
 800560c:	2300      	movs	r3, #0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d007      	beq.n	8005622 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005620:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a22      	ldr	r2, [pc, #136]	; (80056b0 <HAL_TIM_PWM_Start+0x174>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d022      	beq.n	8005672 <HAL_TIM_PWM_Start+0x136>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005634:	d01d      	beq.n	8005672 <HAL_TIM_PWM_Start+0x136>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1f      	ldr	r2, [pc, #124]	; (80056b8 <HAL_TIM_PWM_Start+0x17c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d018      	beq.n	8005672 <HAL_TIM_PWM_Start+0x136>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1d      	ldr	r2, [pc, #116]	; (80056bc <HAL_TIM_PWM_Start+0x180>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <HAL_TIM_PWM_Start+0x136>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1c      	ldr	r2, [pc, #112]	; (80056c0 <HAL_TIM_PWM_Start+0x184>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00e      	beq.n	8005672 <HAL_TIM_PWM_Start+0x136>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a16      	ldr	r2, [pc, #88]	; (80056b4 <HAL_TIM_PWM_Start+0x178>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d009      	beq.n	8005672 <HAL_TIM_PWM_Start+0x136>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a18      	ldr	r2, [pc, #96]	; (80056c4 <HAL_TIM_PWM_Start+0x188>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d004      	beq.n	8005672 <HAL_TIM_PWM_Start+0x136>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a16      	ldr	r2, [pc, #88]	; (80056c8 <HAL_TIM_PWM_Start+0x18c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d111      	bne.n	8005696 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2b06      	cmp	r3, #6
 8005682:	d010      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0201 	orr.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005694:	e007      	b.n	80056a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f042 0201 	orr.w	r2, r2, #1
 80056a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	40010000 	.word	0x40010000
 80056b4:	40010400 	.word	0x40010400
 80056b8:	40000400 	.word	0x40000400
 80056bc:	40000800 	.word	0x40000800
 80056c0:	40000c00 	.word	0x40000c00
 80056c4:	40014000 	.word	0x40014000
 80056c8:	40001800 	.word	0x40001800

080056cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2200      	movs	r2, #0
 80056dc:	6839      	ldr	r1, [r7, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fe08 	bl	80062f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a2e      	ldr	r2, [pc, #184]	; (80057a4 <HAL_TIM_PWM_Stop+0xd8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d004      	beq.n	80056f8 <HAL_TIM_PWM_Stop+0x2c>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a2d      	ldr	r2, [pc, #180]	; (80057a8 <HAL_TIM_PWM_Stop+0xdc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d101      	bne.n	80056fc <HAL_TIM_PWM_Stop+0x30>
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <HAL_TIM_PWM_Stop+0x32>
 80056fc:	2300      	movs	r3, #0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d017      	beq.n	8005732 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6a1a      	ldr	r2, [r3, #32]
 8005708:	f241 1311 	movw	r3, #4369	; 0x1111
 800570c:	4013      	ands	r3, r2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10f      	bne.n	8005732 <HAL_TIM_PWM_Stop+0x66>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6a1a      	ldr	r2, [r3, #32]
 8005718:	f240 4344 	movw	r3, #1092	; 0x444
 800571c:	4013      	ands	r3, r2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d107      	bne.n	8005732 <HAL_TIM_PWM_Stop+0x66>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005730:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6a1a      	ldr	r2, [r3, #32]
 8005738:	f241 1311 	movw	r3, #4369	; 0x1111
 800573c:	4013      	ands	r3, r2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10f      	bne.n	8005762 <HAL_TIM_PWM_Stop+0x96>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6a1a      	ldr	r2, [r3, #32]
 8005748:	f240 4344 	movw	r3, #1092	; 0x444
 800574c:	4013      	ands	r3, r2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d107      	bne.n	8005762 <HAL_TIM_PWM_Stop+0x96>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0201 	bic.w	r2, r2, #1
 8005760:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d104      	bne.n	8005772 <HAL_TIM_PWM_Stop+0xa6>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005770:	e013      	b.n	800579a <HAL_TIM_PWM_Stop+0xce>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b04      	cmp	r3, #4
 8005776:	d104      	bne.n	8005782 <HAL_TIM_PWM_Stop+0xb6>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005780:	e00b      	b.n	800579a <HAL_TIM_PWM_Stop+0xce>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b08      	cmp	r3, #8
 8005786:	d104      	bne.n	8005792 <HAL_TIM_PWM_Stop+0xc6>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005790:	e003      	b.n	800579a <HAL_TIM_PWM_Stop+0xce>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	40010000 	.word	0x40010000
 80057a8:	40010400 	.word	0x40010400

080057ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d122      	bne.n	8005808 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d11b      	bne.n	8005808 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0202 	mvn.w	r2, #2
 80057d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fa77 	bl	8005ce2 <HAL_TIM_IC_CaptureCallback>
 80057f4:	e005      	b.n	8005802 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fa69 	bl	8005cce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fa7a 	bl	8005cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b04      	cmp	r3, #4
 8005814:	d122      	bne.n	800585c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b04      	cmp	r3, #4
 8005822:	d11b      	bne.n	800585c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0204 	mvn.w	r2, #4
 800582c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2202      	movs	r2, #2
 8005832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fa4d 	bl	8005ce2 <HAL_TIM_IC_CaptureCallback>
 8005848:	e005      	b.n	8005856 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fa3f 	bl	8005cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fa50 	bl	8005cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f003 0308 	and.w	r3, r3, #8
 8005866:	2b08      	cmp	r3, #8
 8005868:	d122      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b08      	cmp	r3, #8
 8005876:	d11b      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0208 	mvn.w	r2, #8
 8005880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2204      	movs	r2, #4
 8005886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fa23 	bl	8005ce2 <HAL_TIM_IC_CaptureCallback>
 800589c:	e005      	b.n	80058aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fa15 	bl	8005cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fa26 	bl	8005cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b10      	cmp	r3, #16
 80058bc:	d122      	bne.n	8005904 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b10      	cmp	r3, #16
 80058ca:	d11b      	bne.n	8005904 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0210 	mvn.w	r2, #16
 80058d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2208      	movs	r2, #8
 80058da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f9f9 	bl	8005ce2 <HAL_TIM_IC_CaptureCallback>
 80058f0:	e005      	b.n	80058fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f9eb 	bl	8005cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f9fc 	bl	8005cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b01      	cmp	r3, #1
 8005910:	d10e      	bne.n	8005930 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b01      	cmp	r3, #1
 800591e:	d107      	bne.n	8005930 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0201 	mvn.w	r2, #1
 8005928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7fb fde8 	bl	8001500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593a:	2b80      	cmp	r3, #128	; 0x80
 800593c:	d10e      	bne.n	800595c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005948:	2b80      	cmp	r3, #128	; 0x80
 800594a:	d107      	bne.n	800595c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fd78 	bl	800644c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005966:	2b40      	cmp	r3, #64	; 0x40
 8005968:	d10e      	bne.n	8005988 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005974:	2b40      	cmp	r3, #64	; 0x40
 8005976:	d107      	bne.n	8005988 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f9c1 	bl	8005d0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b20      	cmp	r3, #32
 8005994:	d10e      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d107      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f06f 0220 	mvn.w	r2, #32
 80059ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fd42 	bl	8006438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059b4:	bf00      	nop
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059d6:	2302      	movs	r3, #2
 80059d8:	e0ae      	b.n	8005b38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b0c      	cmp	r3, #12
 80059e6:	f200 809f 	bhi.w	8005b28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80059ea:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a25 	.word	0x08005a25
 80059f4:	08005b29 	.word	0x08005b29
 80059f8:	08005b29 	.word	0x08005b29
 80059fc:	08005b29 	.word	0x08005b29
 8005a00:	08005a65 	.word	0x08005a65
 8005a04:	08005b29 	.word	0x08005b29
 8005a08:	08005b29 	.word	0x08005b29
 8005a0c:	08005b29 	.word	0x08005b29
 8005a10:	08005aa7 	.word	0x08005aa7
 8005a14:	08005b29 	.word	0x08005b29
 8005a18:	08005b29 	.word	0x08005b29
 8005a1c:	08005b29 	.word	0x08005b29
 8005a20:	08005ae7 	.word	0x08005ae7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68b9      	ldr	r1, [r7, #8]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fa18 	bl	8005e60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	699a      	ldr	r2, [r3, #24]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0208 	orr.w	r2, r2, #8
 8005a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699a      	ldr	r2, [r3, #24]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0204 	bic.w	r2, r2, #4
 8005a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6999      	ldr	r1, [r3, #24]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	619a      	str	r2, [r3, #24]
      break;
 8005a62:	e064      	b.n	8005b2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68b9      	ldr	r1, [r7, #8]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 fa68 	bl	8005f40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699a      	ldr	r2, [r3, #24]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699a      	ldr	r2, [r3, #24]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6999      	ldr	r1, [r3, #24]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	021a      	lsls	r2, r3, #8
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	619a      	str	r2, [r3, #24]
      break;
 8005aa4:	e043      	b.n	8005b2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 fabd 	bl	800602c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69da      	ldr	r2, [r3, #28]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 0208 	orr.w	r2, r2, #8
 8005ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69da      	ldr	r2, [r3, #28]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 0204 	bic.w	r2, r2, #4
 8005ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69d9      	ldr	r1, [r3, #28]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	691a      	ldr	r2, [r3, #16]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	61da      	str	r2, [r3, #28]
      break;
 8005ae4:	e023      	b.n	8005b2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68b9      	ldr	r1, [r7, #8]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fb11 	bl	8006114 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	69da      	ldr	r2, [r3, #28]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69da      	ldr	r2, [r3, #28]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69d9      	ldr	r1, [r3, #28]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	021a      	lsls	r2, r3, #8
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	61da      	str	r2, [r3, #28]
      break;
 8005b26:	e002      	b.n	8005b2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d101      	bne.n	8005b5c <HAL_TIM_ConfigClockSource+0x1c>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	e0b4      	b.n	8005cc6 <HAL_TIM_ConfigClockSource+0x186>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b94:	d03e      	beq.n	8005c14 <HAL_TIM_ConfigClockSource+0xd4>
 8005b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b9a:	f200 8087 	bhi.w	8005cac <HAL_TIM_ConfigClockSource+0x16c>
 8005b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba2:	f000 8086 	beq.w	8005cb2 <HAL_TIM_ConfigClockSource+0x172>
 8005ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005baa:	d87f      	bhi.n	8005cac <HAL_TIM_ConfigClockSource+0x16c>
 8005bac:	2b70      	cmp	r3, #112	; 0x70
 8005bae:	d01a      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0xa6>
 8005bb0:	2b70      	cmp	r3, #112	; 0x70
 8005bb2:	d87b      	bhi.n	8005cac <HAL_TIM_ConfigClockSource+0x16c>
 8005bb4:	2b60      	cmp	r3, #96	; 0x60
 8005bb6:	d050      	beq.n	8005c5a <HAL_TIM_ConfigClockSource+0x11a>
 8005bb8:	2b60      	cmp	r3, #96	; 0x60
 8005bba:	d877      	bhi.n	8005cac <HAL_TIM_ConfigClockSource+0x16c>
 8005bbc:	2b50      	cmp	r3, #80	; 0x50
 8005bbe:	d03c      	beq.n	8005c3a <HAL_TIM_ConfigClockSource+0xfa>
 8005bc0:	2b50      	cmp	r3, #80	; 0x50
 8005bc2:	d873      	bhi.n	8005cac <HAL_TIM_ConfigClockSource+0x16c>
 8005bc4:	2b40      	cmp	r3, #64	; 0x40
 8005bc6:	d058      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0x13a>
 8005bc8:	2b40      	cmp	r3, #64	; 0x40
 8005bca:	d86f      	bhi.n	8005cac <HAL_TIM_ConfigClockSource+0x16c>
 8005bcc:	2b30      	cmp	r3, #48	; 0x30
 8005bce:	d064      	beq.n	8005c9a <HAL_TIM_ConfigClockSource+0x15a>
 8005bd0:	2b30      	cmp	r3, #48	; 0x30
 8005bd2:	d86b      	bhi.n	8005cac <HAL_TIM_ConfigClockSource+0x16c>
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d060      	beq.n	8005c9a <HAL_TIM_ConfigClockSource+0x15a>
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	d867      	bhi.n	8005cac <HAL_TIM_ConfigClockSource+0x16c>
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d05c      	beq.n	8005c9a <HAL_TIM_ConfigClockSource+0x15a>
 8005be0:	2b10      	cmp	r3, #16
 8005be2:	d05a      	beq.n	8005c9a <HAL_TIM_ConfigClockSource+0x15a>
 8005be4:	e062      	b.n	8005cac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6818      	ldr	r0, [r3, #0]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6899      	ldr	r1, [r3, #8]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f000 fb5d 	bl	80062b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	609a      	str	r2, [r3, #8]
      break;
 8005c12:	e04f      	b.n	8005cb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6818      	ldr	r0, [r3, #0]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	6899      	ldr	r1, [r3, #8]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f000 fb46 	bl	80062b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689a      	ldr	r2, [r3, #8]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c36:	609a      	str	r2, [r3, #8]
      break;
 8005c38:	e03c      	b.n	8005cb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	6859      	ldr	r1, [r3, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	461a      	mov	r2, r3
 8005c48:	f000 faba 	bl	80061c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2150      	movs	r1, #80	; 0x50
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fb13 	bl	800627e <TIM_ITRx_SetConfig>
      break;
 8005c58:	e02c      	b.n	8005cb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6818      	ldr	r0, [r3, #0]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	6859      	ldr	r1, [r3, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	461a      	mov	r2, r3
 8005c68:	f000 fad9 	bl	800621e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2160      	movs	r1, #96	; 0x60
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 fb03 	bl	800627e <TIM_ITRx_SetConfig>
      break;
 8005c78:	e01c      	b.n	8005cb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6859      	ldr	r1, [r3, #4]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	461a      	mov	r2, r3
 8005c88:	f000 fa9a 	bl	80061c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2140      	movs	r1, #64	; 0x40
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 faf3 	bl	800627e <TIM_ITRx_SetConfig>
      break;
 8005c98:	e00c      	b.n	8005cb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	f000 faea 	bl	800627e <TIM_ITRx_SetConfig>
      break;
 8005caa:	e003      	b.n	8005cb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb0:	e000      	b.n	8005cb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b083      	sub	sp, #12
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d12:	bf00      	nop
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
	...

08005d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a40      	ldr	r2, [pc, #256]	; (8005e34 <TIM_Base_SetConfig+0x114>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d013      	beq.n	8005d60 <TIM_Base_SetConfig+0x40>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3e:	d00f      	beq.n	8005d60 <TIM_Base_SetConfig+0x40>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a3d      	ldr	r2, [pc, #244]	; (8005e38 <TIM_Base_SetConfig+0x118>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00b      	beq.n	8005d60 <TIM_Base_SetConfig+0x40>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a3c      	ldr	r2, [pc, #240]	; (8005e3c <TIM_Base_SetConfig+0x11c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d007      	beq.n	8005d60 <TIM_Base_SetConfig+0x40>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a3b      	ldr	r2, [pc, #236]	; (8005e40 <TIM_Base_SetConfig+0x120>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d003      	beq.n	8005d60 <TIM_Base_SetConfig+0x40>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a3a      	ldr	r2, [pc, #232]	; (8005e44 <TIM_Base_SetConfig+0x124>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d108      	bne.n	8005d72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a2f      	ldr	r2, [pc, #188]	; (8005e34 <TIM_Base_SetConfig+0x114>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d02b      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d80:	d027      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a2c      	ldr	r2, [pc, #176]	; (8005e38 <TIM_Base_SetConfig+0x118>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d023      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a2b      	ldr	r2, [pc, #172]	; (8005e3c <TIM_Base_SetConfig+0x11c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d01f      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a2a      	ldr	r2, [pc, #168]	; (8005e40 <TIM_Base_SetConfig+0x120>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d01b      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a29      	ldr	r2, [pc, #164]	; (8005e44 <TIM_Base_SetConfig+0x124>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d017      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a28      	ldr	r2, [pc, #160]	; (8005e48 <TIM_Base_SetConfig+0x128>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d013      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a27      	ldr	r2, [pc, #156]	; (8005e4c <TIM_Base_SetConfig+0x12c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00f      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a26      	ldr	r2, [pc, #152]	; (8005e50 <TIM_Base_SetConfig+0x130>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00b      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a25      	ldr	r2, [pc, #148]	; (8005e54 <TIM_Base_SetConfig+0x134>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d007      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a24      	ldr	r2, [pc, #144]	; (8005e58 <TIM_Base_SetConfig+0x138>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d003      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a23      	ldr	r2, [pc, #140]	; (8005e5c <TIM_Base_SetConfig+0x13c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d108      	bne.n	8005de4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a0a      	ldr	r2, [pc, #40]	; (8005e34 <TIM_Base_SetConfig+0x114>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d003      	beq.n	8005e18 <TIM_Base_SetConfig+0xf8>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a0c      	ldr	r2, [pc, #48]	; (8005e44 <TIM_Base_SetConfig+0x124>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d103      	bne.n	8005e20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	615a      	str	r2, [r3, #20]
}
 8005e26:	bf00      	nop
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	40010000 	.word	0x40010000
 8005e38:	40000400 	.word	0x40000400
 8005e3c:	40000800 	.word	0x40000800
 8005e40:	40000c00 	.word	0x40000c00
 8005e44:	40010400 	.word	0x40010400
 8005e48:	40014000 	.word	0x40014000
 8005e4c:	40014400 	.word	0x40014400
 8005e50:	40014800 	.word	0x40014800
 8005e54:	40001800 	.word	0x40001800
 8005e58:	40001c00 	.word	0x40001c00
 8005e5c:	40002000 	.word	0x40002000

08005e60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	f023 0201 	bic.w	r2, r3, #1
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 0303 	bic.w	r3, r3, #3
 8005e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f023 0302 	bic.w	r3, r3, #2
 8005ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a20      	ldr	r2, [pc, #128]	; (8005f38 <TIM_OC1_SetConfig+0xd8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d003      	beq.n	8005ec4 <TIM_OC1_SetConfig+0x64>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a1f      	ldr	r2, [pc, #124]	; (8005f3c <TIM_OC1_SetConfig+0xdc>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d10c      	bne.n	8005ede <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f023 0308 	bic.w	r3, r3, #8
 8005eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f023 0304 	bic.w	r3, r3, #4
 8005edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a15      	ldr	r2, [pc, #84]	; (8005f38 <TIM_OC1_SetConfig+0xd8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d003      	beq.n	8005eee <TIM_OC1_SetConfig+0x8e>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a14      	ldr	r2, [pc, #80]	; (8005f3c <TIM_OC1_SetConfig+0xdc>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d111      	bne.n	8005f12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	621a      	str	r2, [r3, #32]
}
 8005f2c:	bf00      	nop
 8005f2e:	371c      	adds	r7, #28
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40010400 	.word	0x40010400

08005f40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f023 0210 	bic.w	r2, r3, #16
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	021b      	lsls	r3, r3, #8
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f023 0320 	bic.w	r3, r3, #32
 8005f8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	011b      	lsls	r3, r3, #4
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a22      	ldr	r2, [pc, #136]	; (8006024 <TIM_OC2_SetConfig+0xe4>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d003      	beq.n	8005fa8 <TIM_OC2_SetConfig+0x68>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a21      	ldr	r2, [pc, #132]	; (8006028 <TIM_OC2_SetConfig+0xe8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d10d      	bne.n	8005fc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	011b      	lsls	r3, r3, #4
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a17      	ldr	r2, [pc, #92]	; (8006024 <TIM_OC2_SetConfig+0xe4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d003      	beq.n	8005fd4 <TIM_OC2_SetConfig+0x94>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a16      	ldr	r2, [pc, #88]	; (8006028 <TIM_OC2_SetConfig+0xe8>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d113      	bne.n	8005ffc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	621a      	str	r2, [r3, #32]
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	40010000 	.word	0x40010000
 8006028:	40010400 	.word	0x40010400

0800602c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0303 	bic.w	r3, r3, #3
 8006062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	4313      	orrs	r3, r2
 8006080:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a21      	ldr	r2, [pc, #132]	; (800610c <TIM_OC3_SetConfig+0xe0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d003      	beq.n	8006092 <TIM_OC3_SetConfig+0x66>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a20      	ldr	r2, [pc, #128]	; (8006110 <TIM_OC3_SetConfig+0xe4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d10d      	bne.n	80060ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006098:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a16      	ldr	r2, [pc, #88]	; (800610c <TIM_OC3_SetConfig+0xe0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d003      	beq.n	80060be <TIM_OC3_SetConfig+0x92>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a15      	ldr	r2, [pc, #84]	; (8006110 <TIM_OC3_SetConfig+0xe4>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d113      	bne.n	80060e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	011b      	lsls	r3, r3, #4
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	621a      	str	r2, [r3, #32]
}
 8006100:	bf00      	nop
 8006102:	371c      	adds	r7, #28
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	40010000 	.word	0x40010000
 8006110:	40010400 	.word	0x40010400

08006114 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800614a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	021b      	lsls	r3, r3, #8
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	4313      	orrs	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800615e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	031b      	lsls	r3, r3, #12
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	4313      	orrs	r3, r2
 800616a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a12      	ldr	r2, [pc, #72]	; (80061b8 <TIM_OC4_SetConfig+0xa4>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d003      	beq.n	800617c <TIM_OC4_SetConfig+0x68>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a11      	ldr	r2, [pc, #68]	; (80061bc <TIM_OC4_SetConfig+0xa8>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d109      	bne.n	8006190 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006182:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	019b      	lsls	r3, r3, #6
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	40010000 	.word	0x40010000
 80061bc:	40010400 	.word	0x40010400

080061c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	f023 0201 	bic.w	r2, r3, #1
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f023 030a 	bic.w	r3, r3, #10
 80061fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	621a      	str	r2, [r3, #32]
}
 8006212:	bf00      	nop
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800621e:	b480      	push	{r7}
 8006220:	b087      	sub	sp, #28
 8006222:	af00      	add	r7, sp, #0
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	f023 0210 	bic.w	r2, r3, #16
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6a1b      	ldr	r3, [r3, #32]
 8006240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006248:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	031b      	lsls	r3, r3, #12
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800625a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	4313      	orrs	r3, r2
 8006264:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	621a      	str	r2, [r3, #32]
}
 8006272:	bf00      	nop
 8006274:	371c      	adds	r7, #28
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800627e:	b480      	push	{r7}
 8006280:	b085      	sub	sp, #20
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006294:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4313      	orrs	r3, r2
 800629c:	f043 0307 	orr.w	r3, r3, #7
 80062a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	609a      	str	r2, [r3, #8]
}
 80062a8:	bf00      	nop
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
 80062c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	021a      	lsls	r2, r3, #8
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	431a      	orrs	r2, r3
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	4313      	orrs	r3, r2
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	609a      	str	r2, [r3, #8]
}
 80062e8:	bf00      	nop
 80062ea:	371c      	adds	r7, #28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b087      	sub	sp, #28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f003 031f 	and.w	r3, r3, #31
 8006306:	2201      	movs	r2, #1
 8006308:	fa02 f303 	lsl.w	r3, r2, r3
 800630c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a1a      	ldr	r2, [r3, #32]
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	43db      	mvns	r3, r3
 8006316:	401a      	ands	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a1a      	ldr	r2, [r3, #32]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f003 031f 	and.w	r3, r3, #31
 8006326:	6879      	ldr	r1, [r7, #4]
 8006328:	fa01 f303 	lsl.w	r3, r1, r3
 800632c:	431a      	orrs	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	621a      	str	r2, [r3, #32]
}
 8006332:	bf00      	nop
 8006334:	371c      	adds	r7, #28
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
	...

08006340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006350:	2b01      	cmp	r3, #1
 8006352:	d101      	bne.n	8006358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006354:	2302      	movs	r3, #2
 8006356:	e05a      	b.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4313      	orrs	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a21      	ldr	r2, [pc, #132]	; (800641c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d022      	beq.n	80063e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a4:	d01d      	beq.n	80063e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a1d      	ldr	r2, [pc, #116]	; (8006420 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d018      	beq.n	80063e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a1b      	ldr	r2, [pc, #108]	; (8006424 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d013      	beq.n	80063e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a1a      	ldr	r2, [pc, #104]	; (8006428 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d00e      	beq.n	80063e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a18      	ldr	r2, [pc, #96]	; (800642c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d009      	beq.n	80063e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a17      	ldr	r2, [pc, #92]	; (8006430 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d004      	beq.n	80063e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a15      	ldr	r2, [pc, #84]	; (8006434 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d10c      	bne.n	80063fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	40010000 	.word	0x40010000
 8006420:	40000400 	.word	0x40000400
 8006424:	40000800 	.word	0x40000800
 8006428:	40000c00 	.word	0x40000c00
 800642c:	40010400 	.word	0x40010400
 8006430:	40014000 	.word	0x40014000
 8006434:	40001800 	.word	0x40001800

08006438 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006460:	b084      	sub	sp, #16
 8006462:	b580      	push	{r7, lr}
 8006464:	b084      	sub	sp, #16
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	f107 001c 	add.w	r0, r7, #28
 800646e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	2b01      	cmp	r3, #1
 8006476:	d122      	bne.n	80064be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800648c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d105      	bne.n	80064b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f9c0 	bl	8006838 <USB_CoreReset>
 80064b8:	4603      	mov	r3, r0
 80064ba:	73fb      	strb	r3, [r7, #15]
 80064bc:	e01a      	b.n	80064f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f9b4 	bl	8006838 <USB_CoreReset>
 80064d0:	4603      	mov	r3, r0
 80064d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d106      	bne.n	80064e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	639a      	str	r2, [r3, #56]	; 0x38
 80064e6:	e005      	b.n	80064f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d10b      	bne.n	8006512 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f043 0206 	orr.w	r2, r3, #6
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f043 0220 	orr.w	r2, r3, #32
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006512:	7bfb      	ldrb	r3, [r7, #15]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800651e:	b004      	add	sp, #16
 8006520:	4770      	bx	lr

08006522 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006522:	b480      	push	{r7}
 8006524:	b083      	sub	sp, #12
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f043 0201 	orr.w	r2, r3, #1
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f023 0201 	bic.w	r2, r3, #1
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	460b      	mov	r3, r1
 8006570:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006582:	78fb      	ldrb	r3, [r7, #3]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d115      	bne.n	80065b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006594:	2001      	movs	r0, #1
 8006596:	f7fb fb61 	bl	8001c5c <HAL_Delay>
      ms++;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	3301      	adds	r3, #1
 800659e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f93a 	bl	800681a <USB_GetMode>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d01e      	beq.n	80065ea <USB_SetCurrentMode+0x84>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2b31      	cmp	r3, #49	; 0x31
 80065b0:	d9f0      	bls.n	8006594 <USB_SetCurrentMode+0x2e>
 80065b2:	e01a      	b.n	80065ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80065b4:	78fb      	ldrb	r3, [r7, #3]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d115      	bne.n	80065e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065c6:	2001      	movs	r0, #1
 80065c8:	f7fb fb48 	bl	8001c5c <HAL_Delay>
      ms++;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3301      	adds	r3, #1
 80065d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f921 	bl	800681a <USB_GetMode>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d005      	beq.n	80065ea <USB_SetCurrentMode+0x84>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b31      	cmp	r3, #49	; 0x31
 80065e2:	d9f0      	bls.n	80065c6 <USB_SetCurrentMode+0x60>
 80065e4:	e001      	b.n	80065ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e005      	b.n	80065f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b32      	cmp	r3, #50	; 0x32
 80065ee:	d101      	bne.n	80065f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e000      	b.n	80065f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3301      	adds	r3, #1
 8006612:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4a13      	ldr	r2, [pc, #76]	; (8006664 <USB_FlushTxFifo+0x64>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d901      	bls.n	8006620 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e01b      	b.n	8006658 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	daf2      	bge.n	800660e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006628:	2300      	movs	r3, #0
 800662a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	019b      	lsls	r3, r3, #6
 8006630:	f043 0220 	orr.w	r2, r3, #32
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3301      	adds	r3, #1
 800663c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4a08      	ldr	r2, [pc, #32]	; (8006664 <USB_FlushTxFifo+0x64>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d901      	bls.n	800664a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e006      	b.n	8006658 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	f003 0320 	and.w	r3, r3, #32
 8006652:	2b20      	cmp	r3, #32
 8006654:	d0f0      	beq.n	8006638 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	00030d40 	.word	0x00030d40

08006668 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3301      	adds	r3, #1
 8006678:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4a11      	ldr	r2, [pc, #68]	; (80066c4 <USB_FlushRxFifo+0x5c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d901      	bls.n	8006686 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e018      	b.n	80066b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	daf2      	bge.n	8006674 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2210      	movs	r2, #16
 8006696:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3301      	adds	r3, #1
 800669c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4a08      	ldr	r2, [pc, #32]	; (80066c4 <USB_FlushRxFifo+0x5c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d901      	bls.n	80066aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e006      	b.n	80066b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f003 0310 	and.w	r3, r3, #16
 80066b2:	2b10      	cmp	r3, #16
 80066b4:	d0f0      	beq.n	8006698 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	00030d40 	.word	0x00030d40

080066c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b089      	sub	sp, #36	; 0x24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	4611      	mov	r1, r2
 80066d4:	461a      	mov	r2, r3
 80066d6:	460b      	mov	r3, r1
 80066d8:	71fb      	strb	r3, [r7, #7]
 80066da:	4613      	mov	r3, r2
 80066dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80066e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d123      	bne.n	8006736 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80066ee:	88bb      	ldrh	r3, [r7, #4]
 80066f0:	3303      	adds	r3, #3
 80066f2:	089b      	lsrs	r3, r3, #2
 80066f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80066f6:	2300      	movs	r3, #0
 80066f8:	61bb      	str	r3, [r7, #24]
 80066fa:	e018      	b.n	800672e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066fc:	79fb      	ldrb	r3, [r7, #7]
 80066fe:	031a      	lsls	r2, r3, #12
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	4413      	add	r3, r2
 8006704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006708:	461a      	mov	r2, r3
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	3301      	adds	r3, #1
 8006714:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	3301      	adds	r3, #1
 800671a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	3301      	adds	r3, #1
 8006720:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	3301      	adds	r3, #1
 8006726:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	3301      	adds	r3, #1
 800672c:	61bb      	str	r3, [r7, #24]
 800672e:	69ba      	ldr	r2, [r7, #24]
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	429a      	cmp	r2, r3
 8006734:	d3e2      	bcc.n	80066fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3724      	adds	r7, #36	; 0x24
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006744:	b480      	push	{r7}
 8006746:	b08b      	sub	sp, #44	; 0x2c
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	4613      	mov	r3, r2
 8006750:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800675a:	88fb      	ldrh	r3, [r7, #6]
 800675c:	089b      	lsrs	r3, r3, #2
 800675e:	b29b      	uxth	r3, r3
 8006760:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006762:	88fb      	ldrh	r3, [r7, #6]
 8006764:	f003 0303 	and.w	r3, r3, #3
 8006768:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800676a:	2300      	movs	r3, #0
 800676c:	623b      	str	r3, [r7, #32]
 800676e:	e014      	b.n	800679a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	601a      	str	r2, [r3, #0]
    pDest++;
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	3301      	adds	r3, #1
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	3301      	adds	r3, #1
 8006786:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	3301      	adds	r3, #1
 800678c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	3301      	adds	r3, #1
 8006792:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	3301      	adds	r3, #1
 8006798:	623b      	str	r3, [r7, #32]
 800679a:	6a3a      	ldr	r2, [r7, #32]
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d3e6      	bcc.n	8006770 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80067a2:	8bfb      	ldrh	r3, [r7, #30]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d01e      	beq.n	80067e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067b2:	461a      	mov	r2, r3
 80067b4:	f107 0310 	add.w	r3, r7, #16
 80067b8:	6812      	ldr	r2, [r2, #0]
 80067ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	6a3b      	ldr	r3, [r7, #32]
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	fa22 f303 	lsr.w	r3, r2, r3
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	701a      	strb	r2, [r3, #0]
      i++;
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	3301      	adds	r3, #1
 80067d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	3301      	adds	r3, #1
 80067d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80067da:	8bfb      	ldrh	r3, [r7, #30]
 80067dc:	3b01      	subs	r3, #1
 80067de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80067e0:	8bfb      	ldrh	r3, [r7, #30]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1ea      	bne.n	80067bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	372c      	adds	r7, #44	; 0x2c
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	4013      	ands	r3, r2
 800680a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800680c:	68fb      	ldr	r3, [r7, #12]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	f003 0301 	and.w	r3, r3, #1
}
 800682a:	4618      	mov	r0, r3
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
	...

08006838 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	3301      	adds	r3, #1
 8006848:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4a13      	ldr	r2, [pc, #76]	; (800689c <USB_CoreReset+0x64>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d901      	bls.n	8006856 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e01b      	b.n	800688e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	daf2      	bge.n	8006844 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	f043 0201 	orr.w	r2, r3, #1
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3301      	adds	r3, #1
 8006872:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4a09      	ldr	r2, [pc, #36]	; (800689c <USB_CoreReset+0x64>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d901      	bls.n	8006880 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e006      	b.n	800688e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b01      	cmp	r3, #1
 800688a:	d0f0      	beq.n	800686e <USB_CoreReset+0x36>

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	00030d40 	.word	0x00030d40

080068a0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068a0:	b084      	sub	sp, #16
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b086      	sub	sp, #24
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80068ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068c0:	461a      	mov	r2, r3
 80068c2:	2300      	movs	r3, #0
 80068c4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d018      	beq.n	8006928 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80068f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d10a      	bne.n	8006912 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800690a:	f043 0304 	orr.w	r3, r3, #4
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	e014      	b.n	800693c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006920:	f023 0304 	bic.w	r3, r3, #4
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	e009      	b.n	800693c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006936:	f023 0304 	bic.w	r3, r3, #4
 800693a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800693c:	2110      	movs	r1, #16
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7ff fe5e 	bl	8006600 <USB_FlushTxFifo>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7ff fe8a 	bl	8006668 <USB_FlushRxFifo>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800695e:	2300      	movs	r3, #0
 8006960:	613b      	str	r3, [r7, #16]
 8006962:	e015      	b.n	8006990 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4413      	add	r3, r2
 800696c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006970:	461a      	mov	r2, r3
 8006972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006976:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4413      	add	r3, r2
 8006980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006984:	461a      	mov	r2, r3
 8006986:	2300      	movs	r3, #0
 8006988:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	3301      	adds	r3, #1
 800698e:	613b      	str	r3, [r7, #16]
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	429a      	cmp	r2, r3
 8006996:	d3e5      	bcc.n	8006964 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069a4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00b      	beq.n	80069ca <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069b8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a13      	ldr	r2, [pc, #76]	; (8006a0c <USB_HostInit+0x16c>)
 80069be:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a13      	ldr	r2, [pc, #76]	; (8006a10 <USB_HostInit+0x170>)
 80069c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80069c8:	e009      	b.n	80069de <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2280      	movs	r2, #128	; 0x80
 80069ce:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a10      	ldr	r2, [pc, #64]	; (8006a14 <USB_HostInit+0x174>)
 80069d4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a0f      	ldr	r2, [pc, #60]	; (8006a18 <USB_HostInit+0x178>)
 80069da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80069de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d105      	bne.n	80069f0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	f043 0210 	orr.w	r2, r3, #16
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	699a      	ldr	r2, [r3, #24]
 80069f4:	4b09      	ldr	r3, [pc, #36]	; (8006a1c <USB_HostInit+0x17c>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80069fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a08:	b004      	add	sp, #16
 8006a0a:	4770      	bx	lr
 8006a0c:	01000200 	.word	0x01000200
 8006a10:	00e00300 	.word	0x00e00300
 8006a14:	00600080 	.word	0x00600080
 8006a18:	004000e0 	.word	0x004000e0
 8006a1c:	a3200008 	.word	0xa3200008

08006a20 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a3e:	f023 0303 	bic.w	r3, r3, #3
 8006a42:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	78fb      	ldrb	r3, [r7, #3]
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	68f9      	ldr	r1, [r7, #12]
 8006a54:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006a5c:	78fb      	ldrb	r3, [r7, #3]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d107      	bne.n	8006a72 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a68:	461a      	mov	r2, r3
 8006a6a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006a6e:	6053      	str	r3, [r2, #4]
 8006a70:	e009      	b.n	8006a86 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006a72:	78fb      	ldrb	r3, [r7, #3]
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d106      	bne.n	8006a86 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f241 7370 	movw	r3, #6000	; 0x1770
 8006a84:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ab4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ac2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006ac4:	2064      	movs	r0, #100	; 0x64
 8006ac6:	f7fb f8c9 	bl	8001c5c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ad2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ad6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006ad8:	200a      	movs	r0, #10
 8006ada:	f7fb f8bf 	bl	8001c5c <HAL_Delay>

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	460b      	mov	r3, r1
 8006af2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006b0c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d109      	bne.n	8006b2c <USB_DriveVbus+0x44>
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d106      	bne.n	8006b2c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b2a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b36:	d109      	bne.n	8006b4c <USB_DriveVbus+0x64>
 8006b38:	78fb      	ldrb	r3, [r7, #3]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b4a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	0c5b      	lsrs	r3, r3, #17
 8006b78:	f003 0303 	and.w	r3, r3, #3
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	b29b      	uxth	r3, r3
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
	...

08006bac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b088      	sub	sp, #32
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	4608      	mov	r0, r1
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	461a      	mov	r2, r3
 8006bba:	4603      	mov	r3, r0
 8006bbc:	70fb      	strb	r3, [r7, #3]
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	70bb      	strb	r3, [r7, #2]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006bce:	78fb      	ldrb	r3, [r7, #3]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bda:	461a      	mov	r2, r3
 8006bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006be0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006be2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	d87e      	bhi.n	8006ce8 <USB_HC_Init+0x13c>
 8006bea:	a201      	add	r2, pc, #4	; (adr r2, 8006bf0 <USB_HC_Init+0x44>)
 8006bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf0:	08006c01 	.word	0x08006c01
 8006bf4:	08006cab 	.word	0x08006cab
 8006bf8:	08006c01 	.word	0x08006c01
 8006bfc:	08006c6d 	.word	0x08006c6d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c00:	78fb      	ldrb	r3, [r7, #3]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006c12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006c14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	da10      	bge.n	8006c3e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c1c:	78fb      	ldrb	r3, [r7, #3]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	78fa      	ldrb	r2, [r7, #3]
 8006c2c:	0151      	lsls	r1, r2, #5
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	440a      	add	r2, r1
 8006c32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c3a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006c3c:	e057      	b.n	8006cee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d051      	beq.n	8006cee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006c4a:	78fb      	ldrb	r3, [r7, #3]
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	78fa      	ldrb	r2, [r7, #3]
 8006c5a:	0151      	lsls	r1, r2, #5
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	440a      	add	r2, r1
 8006c60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006c68:	60d3      	str	r3, [r2, #12]
      break;
 8006c6a:	e040      	b.n	8006cee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c78:	461a      	mov	r2, r3
 8006c7a:	f240 639d 	movw	r3, #1693	; 0x69d
 8006c7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	da34      	bge.n	8006cf2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c88:	78fb      	ldrb	r3, [r7, #3]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	78fa      	ldrb	r2, [r7, #3]
 8006c98:	0151      	lsls	r1, r2, #5
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ca6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006ca8:	e023      	b.n	8006cf2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006caa:	78fb      	ldrb	r3, [r7, #3]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f240 2325 	movw	r3, #549	; 0x225
 8006cbc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006cbe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	da17      	bge.n	8006cf6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006cc6:	78fb      	ldrb	r3, [r7, #3]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	78fa      	ldrb	r2, [r7, #3]
 8006cd6:	0151      	lsls	r1, r2, #5
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	440a      	add	r2, r1
 8006cdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ce0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006ce4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006ce6:	e006      	b.n	8006cf6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	77fb      	strb	r3, [r7, #31]
      break;
 8006cec:	e004      	b.n	8006cf8 <USB_HC_Init+0x14c>
      break;
 8006cee:	bf00      	nop
 8006cf0:	e002      	b.n	8006cf8 <USB_HC_Init+0x14c>
      break;
 8006cf2:	bf00      	nop
 8006cf4:	e000      	b.n	8006cf8 <USB_HC_Init+0x14c>
      break;
 8006cf6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006cf8:	78fb      	ldrb	r3, [r7, #3]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	78fa      	ldrb	r2, [r7, #3]
 8006d08:	0151      	lsls	r1, r2, #5
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	440a      	add	r2, r1
 8006d0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d12:	f043 0302 	orr.w	r3, r3, #2
 8006d16:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d1e:	699a      	ldr	r2, [r3, #24]
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	f003 030f 	and.w	r3, r3, #15
 8006d26:	2101      	movs	r1, #1
 8006d28:	fa01 f303 	lsl.w	r3, r1, r3
 8006d2c:	6939      	ldr	r1, [r7, #16]
 8006d2e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006d32:	4313      	orrs	r3, r2
 8006d34:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006d42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	da03      	bge.n	8006d52 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d4e:	61bb      	str	r3, [r7, #24]
 8006d50:	e001      	b.n	8006d56 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7ff feff 	bl	8006b5a <USB_GetHostSpeed>
 8006d5c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006d5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d106      	bne.n	8006d74 <USB_HC_Init+0x1c8>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d003      	beq.n	8006d74 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006d6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	e001      	b.n	8006d78 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d78:	787b      	ldrb	r3, [r7, #1]
 8006d7a:	059b      	lsls	r3, r3, #22
 8006d7c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d80:	78bb      	ldrb	r3, [r7, #2]
 8006d82:	02db      	lsls	r3, r3, #11
 8006d84:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d88:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d8e:	049b      	lsls	r3, r3, #18
 8006d90:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d94:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d96:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006d98:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d9c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006da2:	78fb      	ldrb	r3, [r7, #3]
 8006da4:	0159      	lsls	r1, r3, #5
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	440b      	add	r3, r1
 8006daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dae:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006db4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006db6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d003      	beq.n	8006dc6 <USB_HC_Init+0x21a>
 8006dbe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d10f      	bne.n	8006de6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006dc6:	78fb      	ldrb	r3, [r7, #3]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	78fa      	ldrb	r2, [r7, #3]
 8006dd6:	0151      	lsls	r1, r2, #5
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	440a      	add	r2, r1
 8006ddc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006de0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006de4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006de6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3720      	adds	r7, #32
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b08c      	sub	sp, #48	; 0x30
 8006df4:	af02      	add	r7, sp, #8
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	785b      	ldrb	r3, [r3, #1]
 8006e06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006e08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e0c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d02d      	beq.n	8006e76 <USB_HC_StartXfer+0x86>
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	791b      	ldrb	r3, [r3, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d129      	bne.n	8006e76 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006e22:	79fb      	ldrb	r3, [r7, #7]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d117      	bne.n	8006e58 <USB_HC_StartXfer+0x68>
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	79db      	ldrb	r3, [r3, #7]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d003      	beq.n	8006e38 <USB_HC_StartXfer+0x48>
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	79db      	ldrb	r3, [r3, #7]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d10f      	bne.n	8006e58 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	69fa      	ldr	r2, [r7, #28]
 8006e48:	0151      	lsls	r1, r2, #5
 8006e4a:	6a3a      	ldr	r2, [r7, #32]
 8006e4c:	440a      	add	r2, r1
 8006e4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e56:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006e58:	79fb      	ldrb	r3, [r7, #7]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10b      	bne.n	8006e76 <USB_HC_StartXfer+0x86>
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	795b      	ldrb	r3, [r3, #5]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d107      	bne.n	8006e76 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	785b      	ldrb	r3, [r3, #1]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 fa0f 	bl	8007290 <USB_DoPing>
      return HAL_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	e0f8      	b.n	8007068 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d018      	beq.n	8006eb0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	8912      	ldrh	r2, [r2, #8]
 8006e86:	4413      	add	r3, r2
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	8912      	ldrh	r2, [r2, #8]
 8006e8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e92:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006e94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e96:	8b7b      	ldrh	r3, [r7, #26]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d90b      	bls.n	8006eb4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006e9c:	8b7b      	ldrh	r3, [r7, #26]
 8006e9e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ea0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	8912      	ldrh	r2, [r2, #8]
 8006ea6:	fb03 f202 	mul.w	r2, r3, r2
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	611a      	str	r2, [r3, #16]
 8006eae:	e001      	b.n	8006eb4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	78db      	ldrb	r3, [r3, #3]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d007      	beq.n	8006ecc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ebc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	8912      	ldrh	r2, [r2, #8]
 8006ec2:	fb03 f202 	mul.w	r2, r3, r2
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	611a      	str	r2, [r3, #16]
 8006eca:	e003      	b.n	8006ed4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	695a      	ldr	r2, [r3, #20]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006edc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ede:	04d9      	lsls	r1, r3, #19
 8006ee0:	4b63      	ldr	r3, [pc, #396]	; (8007070 <USB_HC_StartXfer+0x280>)
 8006ee2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ee4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	7a9b      	ldrb	r3, [r3, #10]
 8006eea:	075b      	lsls	r3, r3, #29
 8006eec:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ef0:	69f9      	ldr	r1, [r7, #28]
 8006ef2:	0148      	lsls	r0, r1, #5
 8006ef4:	6a39      	ldr	r1, [r7, #32]
 8006ef6:	4401      	add	r1, r0
 8006ef8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006efc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006efe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d009      	beq.n	8006f1a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	68d9      	ldr	r1, [r3, #12]
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f16:	460a      	mov	r2, r1
 8006f18:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	bf0c      	ite	eq
 8006f2a:	2301      	moveq	r3, #1
 8006f2c:	2300      	movne	r3, #0
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	69fa      	ldr	r2, [r7, #28]
 8006f42:	0151      	lsls	r1, r2, #5
 8006f44:	6a3a      	ldr	r2, [r7, #32]
 8006f46:	440a      	add	r2, r1
 8006f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f50:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	7e7b      	ldrb	r3, [r7, #25]
 8006f62:	075b      	lsls	r3, r3, #29
 8006f64:	69f9      	ldr	r1, [r7, #28]
 8006f66:	0148      	lsls	r0, r1, #5
 8006f68:	6a39      	ldr	r1, [r7, #32]
 8006f6a:	4401      	add	r1, r0
 8006f6c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006f70:	4313      	orrs	r3, r2
 8006f72:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f8a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	78db      	ldrb	r3, [r3, #3]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d004      	beq.n	8006f9e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f9a:	613b      	str	r3, [r7, #16]
 8006f9c:	e003      	b.n	8006fa6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fa4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fac:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fba:	461a      	mov	r2, r3
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006fc0:	79fb      	ldrb	r3, [r7, #7]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	e04e      	b.n	8007068 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	78db      	ldrb	r3, [r3, #3]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d149      	bne.n	8007066 <USB_HC_StartXfer+0x276>
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d045      	beq.n	8007066 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	79db      	ldrb	r3, [r3, #7]
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	d830      	bhi.n	8007044 <USB_HC_StartXfer+0x254>
 8006fe2:	a201      	add	r2, pc, #4	; (adr r2, 8006fe8 <USB_HC_StartXfer+0x1f8>)
 8006fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe8:	08006ff9 	.word	0x08006ff9
 8006fec:	0800701d 	.word	0x0800701d
 8006ff0:	08006ff9 	.word	0x08006ff9
 8006ff4:	0800701d 	.word	0x0800701d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	3303      	adds	r3, #3
 8006ffe:	089b      	lsrs	r3, r3, #2
 8007000:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007002:	8afa      	ldrh	r2, [r7, #22]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007008:	b29b      	uxth	r3, r3
 800700a:	429a      	cmp	r2, r3
 800700c:	d91c      	bls.n	8007048 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	f043 0220 	orr.w	r2, r3, #32
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	619a      	str	r2, [r3, #24]
        }
        break;
 800701a:	e015      	b.n	8007048 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	3303      	adds	r3, #3
 8007022:	089b      	lsrs	r3, r3, #2
 8007024:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007026:	8afa      	ldrh	r2, [r7, #22]
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	b29b      	uxth	r3, r3
 8007032:	429a      	cmp	r2, r3
 8007034:	d90a      	bls.n	800704c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	619a      	str	r2, [r3, #24]
        }
        break;
 8007042:	e003      	b.n	800704c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007044:	bf00      	nop
 8007046:	e002      	b.n	800704e <USB_HC_StartXfer+0x25e>
        break;
 8007048:	bf00      	nop
 800704a:	e000      	b.n	800704e <USB_HC_StartXfer+0x25e>
        break;
 800704c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	68d9      	ldr	r1, [r3, #12]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	785a      	ldrb	r2, [r3, #1]
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	b29b      	uxth	r3, r3
 800705c:	2000      	movs	r0, #0
 800705e:	9000      	str	r0, [sp, #0]
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f7ff fb31 	bl	80066c8 <USB_WritePacket>
  }

  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3728      	adds	r7, #40	; 0x28
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	1ff80000 	.word	0x1ff80000

08007074 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	b29b      	uxth	r3, r3
}
 800708a:	4618      	mov	r0, r3
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007096:	b480      	push	{r7}
 8007098:	b089      	sub	sp, #36	; 0x24
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	460b      	mov	r3, r1
 80070a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80070a6:	78fb      	ldrb	r3, [r7, #3]
 80070a8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	0c9b      	lsrs	r3, r3, #18
 80070be:	f003 0303 	and.w	r3, r3, #3
 80070c2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	0fdb      	lsrs	r3, r3, #31
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f003 0320 	and.w	r3, r3, #32
 80070e2:	2b20      	cmp	r3, #32
 80070e4:	d104      	bne.n	80070f0 <USB_HC_Halt+0x5a>
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80070ec:	2300      	movs	r3, #0
 80070ee:	e0c8      	b.n	8007282 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d002      	beq.n	80070fc <USB_HC_Halt+0x66>
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d163      	bne.n	80071c4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	4413      	add	r3, r2
 8007104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	69ba      	ldr	r2, [r7, #24]
 800710c:	0151      	lsls	r1, r2, #5
 800710e:	69fa      	ldr	r2, [r7, #28]
 8007110:	440a      	add	r2, r1
 8007112:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007116:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800711a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f003 0320 	and.w	r3, r3, #32
 8007124:	2b00      	cmp	r3, #0
 8007126:	f040 80ab 	bne.w	8007280 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d133      	bne.n	800719e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	4413      	add	r3, r2
 800713e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	0151      	lsls	r1, r2, #5
 8007148:	69fa      	ldr	r2, [r7, #28]
 800714a:	440a      	add	r2, r1
 800714c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007150:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007154:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	015a      	lsls	r2, r3, #5
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	4413      	add	r3, r2
 800715e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	0151      	lsls	r1, r2, #5
 8007168:	69fa      	ldr	r2, [r7, #28]
 800716a:	440a      	add	r2, r1
 800716c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007170:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007174:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	3301      	adds	r3, #1
 800717a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007182:	d81d      	bhi.n	80071c0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	4413      	add	r3, r2
 800718c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800719a:	d0ec      	beq.n	8007176 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800719c:	e070      	b.n	8007280 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	0151      	lsls	r1, r2, #5
 80071b0:	69fa      	ldr	r2, [r7, #28]
 80071b2:	440a      	add	r2, r1
 80071b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071bc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071be:	e05f      	b.n	8007280 <USB_HC_Halt+0x1ea>
            break;
 80071c0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071c2:	e05d      	b.n	8007280 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	0151      	lsls	r1, r2, #5
 80071d6:	69fa      	ldr	r2, [r7, #28]
 80071d8:	440a      	add	r2, r1
 80071da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071e2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d133      	bne.n	800725c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	0151      	lsls	r1, r2, #5
 8007206:	69fa      	ldr	r2, [r7, #28]
 8007208:	440a      	add	r2, r1
 800720a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800720e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007212:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	4413      	add	r3, r2
 800721c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	0151      	lsls	r1, r2, #5
 8007226:	69fa      	ldr	r2, [r7, #28]
 8007228:	440a      	add	r2, r1
 800722a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800722e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007232:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	3301      	adds	r3, #1
 8007238:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007240:	d81d      	bhi.n	800727e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	015a      	lsls	r2, r3, #5
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	4413      	add	r3, r2
 800724a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007254:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007258:	d0ec      	beq.n	8007234 <USB_HC_Halt+0x19e>
 800725a:	e011      	b.n	8007280 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	4413      	add	r3, r2
 8007264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	0151      	lsls	r1, r2, #5
 800726e:	69fa      	ldr	r2, [r7, #28]
 8007270:	440a      	add	r2, r1
 8007272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007276:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800727a:	6013      	str	r3, [r2, #0]
 800727c:	e000      	b.n	8007280 <USB_HC_Halt+0x1ea>
          break;
 800727e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3724      	adds	r7, #36	; 0x24
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
	...

08007290 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007290:	b480      	push	{r7}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80072a0:	78fb      	ldrb	r3, [r7, #3]
 80072a2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80072a4:	2301      	movs	r3, #1
 80072a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	04da      	lsls	r2, r3, #19
 80072ac:	4b15      	ldr	r3, [pc, #84]	; (8007304 <USB_DoPing+0x74>)
 80072ae:	4013      	ands	r3, r2
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	0151      	lsls	r1, r2, #5
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	440a      	add	r2, r1
 80072b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072c0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072d8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072e0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ee:	461a      	mov	r2, r3
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	371c      	adds	r7, #28
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	1ff80000 	.word	0x1ff80000

08007308 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b088      	sub	sp, #32
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007310:	2300      	movs	r3, #0
 8007312:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007318:	2300      	movs	r3, #0
 800731a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f7ff f911 	bl	8006544 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007322:	2110      	movs	r1, #16
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7ff f96b 	bl	8006600 <USB_FlushTxFifo>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7ff f997 	bl	8006668 <USB_FlushRxFifo>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d001      	beq.n	8007344 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007344:	2300      	movs	r3, #0
 8007346:	61bb      	str	r3, [r7, #24]
 8007348:	e01f      	b.n	800738a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	4413      	add	r3, r2
 8007352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007360:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007368:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007370:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	4413      	add	r3, r2
 800737a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800737e:	461a      	mov	r2, r3
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	3301      	adds	r3, #1
 8007388:	61bb      	str	r3, [r7, #24]
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	2b0f      	cmp	r3, #15
 800738e:	d9dc      	bls.n	800734a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007390:	2300      	movs	r3, #0
 8007392:	61bb      	str	r3, [r7, #24]
 8007394:	e034      	b.n	8007400 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	4413      	add	r3, r2
 800739e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073ac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073bc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ca:	461a      	mov	r2, r3
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3301      	adds	r3, #1
 80073d4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073dc:	d80c      	bhi.n	80073f8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	015a      	lsls	r2, r3, #5
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073f4:	d0ec      	beq.n	80073d0 <USB_StopHost+0xc8>
 80073f6:	e000      	b.n	80073fa <USB_StopHost+0xf2>
        break;
 80073f8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	3301      	adds	r3, #1
 80073fe:	61bb      	str	r3, [r7, #24]
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	2b0f      	cmp	r3, #15
 8007404:	d9c7      	bls.n	8007396 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800740c:	461a      	mov	r2, r3
 800740e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007412:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800741a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff f880 	bl	8006522 <USB_EnableGlobalInt>

  return ret;
 8007422:	7ffb      	ldrb	r3, [r7, #31]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3720      	adds	r7, #32
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800742c:	b590      	push	{r4, r7, lr}
 800742e:	b089      	sub	sp, #36	; 0x24
 8007430:	af04      	add	r7, sp, #16
 8007432:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007434:	2301      	movs	r3, #1
 8007436:	2202      	movs	r2, #2
 8007438:	2102      	movs	r1, #2
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fc66 	bl	8007d0c <USBH_FindInterface>
 8007440:	4603      	mov	r3, r0
 8007442:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007444:	7bfb      	ldrb	r3, [r7, #15]
 8007446:	2bff      	cmp	r3, #255	; 0xff
 8007448:	d002      	beq.n	8007450 <USBH_CDC_InterfaceInit+0x24>
 800744a:	7bfb      	ldrb	r3, [r7, #15]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d901      	bls.n	8007454 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007450:	2302      	movs	r3, #2
 8007452:	e13d      	b.n	80076d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007454:	7bfb      	ldrb	r3, [r7, #15]
 8007456:	4619      	mov	r1, r3
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fc3b 	bl	8007cd4 <USBH_SelectInterface>
 800745e:	4603      	mov	r3, r0
 8007460:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007462:	7bbb      	ldrb	r3, [r7, #14]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d001      	beq.n	800746c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007468:	2302      	movs	r3, #2
 800746a:	e131      	b.n	80076d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007472:	2050      	movs	r0, #80	; 0x50
 8007474:	f002 fafa 	bl	8009a6c <malloc>
 8007478:	4603      	mov	r3, r0
 800747a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007482:	69db      	ldr	r3, [r3, #28]
 8007484:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d101      	bne.n	8007490 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800748c:	2302      	movs	r3, #2
 800748e:	e11f      	b.n	80076d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007490:	2250      	movs	r2, #80	; 0x50
 8007492:	2100      	movs	r1, #0
 8007494:	68b8      	ldr	r0, [r7, #8]
 8007496:	f002 faf9 	bl	8009a8c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800749a:	7bfb      	ldrb	r3, [r7, #15]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	211a      	movs	r1, #26
 80074a0:	fb01 f303 	mul.w	r3, r1, r3
 80074a4:	4413      	add	r3, r2
 80074a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	b25b      	sxtb	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	da15      	bge.n	80074de <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	211a      	movs	r1, #26
 80074b8:	fb01 f303 	mul.w	r3, r1, r3
 80074bc:	4413      	add	r3, r2
 80074be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074c2:	781a      	ldrb	r2, [r3, #0]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	211a      	movs	r1, #26
 80074ce:	fb01 f303 	mul.w	r3, r1, r3
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80074d8:	881a      	ldrh	r2, [r3, #0]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	785b      	ldrb	r3, [r3, #1]
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f001 ff2c 	bl	8009342 <USBH_AllocPipe>
 80074ea:	4603      	mov	r3, r0
 80074ec:	461a      	mov	r2, r3
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	7819      	ldrb	r1, [r3, #0]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	7858      	ldrb	r0, [r3, #1]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	8952      	ldrh	r2, [r2, #10]
 800750a:	9202      	str	r2, [sp, #8]
 800750c:	2203      	movs	r2, #3
 800750e:	9201      	str	r2, [sp, #4]
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	4623      	mov	r3, r4
 8007514:	4602      	mov	r2, r0
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f001 fee4 	bl	80092e4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	2200      	movs	r2, #0
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f002 f9f3 	bl	8009910 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800752a:	2300      	movs	r3, #0
 800752c:	2200      	movs	r2, #0
 800752e:	210a      	movs	r1, #10
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fbeb 	bl	8007d0c <USBH_FindInterface>
 8007536:	4603      	mov	r3, r0
 8007538:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800753a:	7bfb      	ldrb	r3, [r7, #15]
 800753c:	2bff      	cmp	r3, #255	; 0xff
 800753e:	d002      	beq.n	8007546 <USBH_CDC_InterfaceInit+0x11a>
 8007540:	7bfb      	ldrb	r3, [r7, #15]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d901      	bls.n	800754a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007546:	2302      	movs	r3, #2
 8007548:	e0c2      	b.n	80076d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800754a:	7bfb      	ldrb	r3, [r7, #15]
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	211a      	movs	r1, #26
 8007550:	fb01 f303 	mul.w	r3, r1, r3
 8007554:	4413      	add	r3, r2
 8007556:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	b25b      	sxtb	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	da16      	bge.n	8007590 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	211a      	movs	r1, #26
 8007568:	fb01 f303 	mul.w	r3, r1, r3
 800756c:	4413      	add	r3, r2
 800756e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007572:	781a      	ldrb	r2, [r3, #0]
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	211a      	movs	r1, #26
 800757e:	fb01 f303 	mul.w	r3, r1, r3
 8007582:	4413      	add	r3, r2
 8007584:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007588:	881a      	ldrh	r2, [r3, #0]
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	835a      	strh	r2, [r3, #26]
 800758e:	e015      	b.n	80075bc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007590:	7bfb      	ldrb	r3, [r7, #15]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	211a      	movs	r1, #26
 8007596:	fb01 f303 	mul.w	r3, r1, r3
 800759a:	4413      	add	r3, r2
 800759c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80075a0:	781a      	ldrb	r2, [r3, #0]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	211a      	movs	r1, #26
 80075ac:	fb01 f303 	mul.w	r3, r1, r3
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80075b6:	881a      	ldrh	r2, [r3, #0]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	211a      	movs	r1, #26
 80075c2:	fb01 f303 	mul.w	r3, r1, r3
 80075c6:	4413      	add	r3, r2
 80075c8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	b25b      	sxtb	r3, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	da16      	bge.n	8007602 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	211a      	movs	r1, #26
 80075da:	fb01 f303 	mul.w	r3, r1, r3
 80075de:	4413      	add	r3, r2
 80075e0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80075e4:	781a      	ldrb	r2, [r3, #0]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	211a      	movs	r1, #26
 80075f0:	fb01 f303 	mul.w	r3, r1, r3
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80075fa:	881a      	ldrh	r2, [r3, #0]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	835a      	strh	r2, [r3, #26]
 8007600:	e015      	b.n	800762e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007602:	7bfb      	ldrb	r3, [r7, #15]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	211a      	movs	r1, #26
 8007608:	fb01 f303 	mul.w	r3, r1, r3
 800760c:	4413      	add	r3, r2
 800760e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007612:	781a      	ldrb	r2, [r3, #0]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007618:	7bfb      	ldrb	r3, [r7, #15]
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	211a      	movs	r1, #26
 800761e:	fb01 f303 	mul.w	r3, r1, r3
 8007622:	4413      	add	r3, r2
 8007624:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007628:	881a      	ldrh	r2, [r3, #0]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	7b9b      	ldrb	r3, [r3, #14]
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 fe84 	bl	8009342 <USBH_AllocPipe>
 800763a:	4603      	mov	r3, r0
 800763c:	461a      	mov	r2, r3
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	7bdb      	ldrb	r3, [r3, #15]
 8007646:	4619      	mov	r1, r3
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f001 fe7a 	bl	8009342 <USBH_AllocPipe>
 800764e:	4603      	mov	r3, r0
 8007650:	461a      	mov	r2, r3
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	7b59      	ldrb	r1, [r3, #13]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	7b98      	ldrb	r0, [r3, #14]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	8b12      	ldrh	r2, [r2, #24]
 800766e:	9202      	str	r2, [sp, #8]
 8007670:	2202      	movs	r2, #2
 8007672:	9201      	str	r2, [sp, #4]
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	4623      	mov	r3, r4
 8007678:	4602      	mov	r2, r0
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f001 fe32 	bl	80092e4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	7b19      	ldrb	r1, [r3, #12]
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	7bd8      	ldrb	r0, [r3, #15]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	8b52      	ldrh	r2, [r2, #26]
 8007698:	9202      	str	r2, [sp, #8]
 800769a:	2202      	movs	r2, #2
 800769c:	9201      	str	r2, [sp, #4]
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	4623      	mov	r3, r4
 80076a2:	4602      	mov	r2, r0
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f001 fe1d 	bl	80092e4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	7b5b      	ldrb	r3, [r3, #13]
 80076b6:	2200      	movs	r2, #0
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f002 f928 	bl	8009910 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	7b1b      	ldrb	r3, [r3, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f002 f921 	bl	8009910 <USBH_LL_SetToggle>

  return USBH_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd90      	pop	{r4, r7, pc}

080076d8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076e6:	69db      	ldr	r3, [r3, #28]
 80076e8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00e      	beq.n	8007710 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 fe12 	bl	8009322 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f001 fe3d 	bl	8009384 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	7b1b      	ldrb	r3, [r3, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00e      	beq.n	8007736 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	7b1b      	ldrb	r3, [r3, #12]
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f001 fdff 	bl	8009322 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	7b1b      	ldrb	r3, [r3, #12]
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f001 fe2a 	bl	8009384 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	7b5b      	ldrb	r3, [r3, #13]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00e      	beq.n	800775c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	7b5b      	ldrb	r3, [r3, #13]
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f001 fdec 	bl	8009322 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	7b5b      	ldrb	r3, [r3, #13]
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f001 fe17 	bl	8009384 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	4618      	mov	r0, r3
 8007772:	f002 f983 	bl	8009a7c <free>
    phost->pActiveClass->pData = 0U;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800777c:	2200      	movs	r2, #0
 800777e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	3340      	adds	r3, #64	; 0x40
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f8b1 	bl	800790a <GetLineCoding>
 80077a8:	4603      	mov	r3, r0
 80077aa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80077ac:	7afb      	ldrb	r3, [r7, #11]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d105      	bne.n	80077be <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077b8:	2102      	movs	r1, #2
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80077be:	7afb      	ldrb	r3, [r7, #11]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80077d0:	2301      	movs	r3, #1
 80077d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80077e8:	2b04      	cmp	r3, #4
 80077ea:	d877      	bhi.n	80078dc <USBH_CDC_Process+0x114>
 80077ec:	a201      	add	r2, pc, #4	; (adr r2, 80077f4 <USBH_CDC_Process+0x2c>)
 80077ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f2:	bf00      	nop
 80077f4:	08007809 	.word	0x08007809
 80077f8:	0800780f 	.word	0x0800780f
 80077fc:	0800783f 	.word	0x0800783f
 8007800:	080078b3 	.word	0x080078b3
 8007804:	080078c1 	.word	0x080078c1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007808:	2300      	movs	r3, #0
 800780a:	73fb      	strb	r3, [r7, #15]
      break;
 800780c:	e06d      	b.n	80078ea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f897 	bl	8007948 <SetLineCoding>
 800781a:	4603      	mov	r3, r0
 800781c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800781e:	7bbb      	ldrb	r3, [r7, #14]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d104      	bne.n	800782e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2202      	movs	r2, #2
 8007828:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800782c:	e058      	b.n	80078e0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d055      	beq.n	80078e0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2204      	movs	r2, #4
 8007838:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800783c:	e050      	b.n	80078e0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	3340      	adds	r3, #64	; 0x40
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f860 	bl	800790a <GetLineCoding>
 800784a:	4603      	mov	r3, r0
 800784c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d126      	bne.n	80078a2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007866:	791b      	ldrb	r3, [r3, #4]
 8007868:	429a      	cmp	r2, r3
 800786a:	d13b      	bne.n	80078e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007876:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007878:	429a      	cmp	r2, r3
 800787a:	d133      	bne.n	80078e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007886:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007888:	429a      	cmp	r2, r3
 800788a:	d12b      	bne.n	80078e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007894:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007896:	429a      	cmp	r2, r3
 8007898:	d124      	bne.n	80078e4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f958 	bl	8007b50 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80078a0:	e020      	b.n	80078e4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80078a2:	7bbb      	ldrb	r3, [r7, #14]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d01d      	beq.n	80078e4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2204      	movs	r2, #4
 80078ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80078b0:	e018      	b.n	80078e4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f867 	bl	8007986 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f8da 	bl	8007a72 <CDC_ProcessReception>
      break;
 80078be:	e014      	b.n	80078ea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80078c0:	2100      	movs	r1, #0
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 ffef 	bl	80088a6 <USBH_ClrFeature>
 80078c8:	4603      	mov	r3, r0
 80078ca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10a      	bne.n	80078e8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80078da:	e005      	b.n	80078e8 <USBH_CDC_Process+0x120>

    default:
      break;
 80078dc:	bf00      	nop
 80078de:	e004      	b.n	80078ea <USBH_CDC_Process+0x122>
      break;
 80078e0:	bf00      	nop
 80078e2:	e002      	b.n	80078ea <USBH_CDC_Process+0x122>
      break;
 80078e4:	bf00      	nop
 80078e6:	e000      	b.n	80078ea <USBH_CDC_Process+0x122>
      break;
 80078e8:	bf00      	nop

  }

  return status;
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b082      	sub	sp, #8
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	22a1      	movs	r2, #161	; 0xa1
 8007918:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2221      	movs	r2, #33	; 0x21
 800791e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2207      	movs	r2, #7
 8007930:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2207      	movs	r2, #7
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f001 fa81 	bl	8008e40 <USBH_CtlReq>
 800793e:	4603      	mov	r3, r0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2221      	movs	r2, #33	; 0x21
 8007956:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2220      	movs	r2, #32
 800795c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2207      	movs	r2, #7
 800796e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2207      	movs	r2, #7
 8007974:	4619      	mov	r1, r3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f001 fa62 	bl	8008e40 <USBH_CtlReq>
 800797c:	4603      	mov	r3, r0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b086      	sub	sp, #24
 800798a:	af02      	add	r7, sp, #8
 800798c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007998:	2300      	movs	r3, #0
 800799a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d002      	beq.n	80079ac <CDC_ProcessTransmission+0x26>
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d023      	beq.n	80079f2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80079aa:	e05e      	b.n	8007a6a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	8b12      	ldrh	r2, [r2, #24]
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d90b      	bls.n	80079d0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	69d9      	ldr	r1, [r3, #28]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8b1a      	ldrh	r2, [r3, #24]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	7b5b      	ldrb	r3, [r3, #13]
 80079c4:	2001      	movs	r0, #1
 80079c6:	9000      	str	r0, [sp, #0]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f001 fc48 	bl	800925e <USBH_BulkSendData>
 80079ce:	e00b      	b.n	80079e8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80079d8:	b29a      	uxth	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	7b5b      	ldrb	r3, [r3, #13]
 80079de:	2001      	movs	r0, #1
 80079e0:	9000      	str	r0, [sp, #0]
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f001 fc3b 	bl	800925e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2202      	movs	r2, #2
 80079ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80079f0:	e03b      	b.n	8007a6a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	7b5b      	ldrb	r3, [r3, #13]
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 ff5f 	bl	80098bc <USBH_LL_GetURBState>
 80079fe:	4603      	mov	r3, r0
 8007a00:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007a02:	7afb      	ldrb	r3, [r7, #11]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d128      	bne.n	8007a5a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	8b12      	ldrh	r2, [r2, #24]
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d90e      	bls.n	8007a32 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	8b12      	ldrh	r2, [r2, #24]
 8007a1c:	1a9a      	subs	r2, r3, r2
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	8b12      	ldrh	r2, [r2, #24]
 8007a2a:	441a      	add	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	61da      	str	r2, [r3, #28]
 8007a30:	e002      	b.n	8007a38 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d004      	beq.n	8007a4a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a48:	e00e      	b.n	8007a68 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f868 	bl	8007b28 <USBH_CDC_TransmitCallback>
      break;
 8007a58:	e006      	b.n	8007a68 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007a5a:	7afb      	ldrb	r3, [r7, #11]
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d103      	bne.n	8007a68 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a68:	bf00      	nop
  }
}
 8007a6a:	bf00      	nop
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b086      	sub	sp, #24
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a80:	69db      	ldr	r3, [r3, #28]
 8007a82:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a84:	2300      	movs	r3, #0
 8007a86:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d002      	beq.n	8007a98 <CDC_ProcessReception+0x26>
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	d00e      	beq.n	8007ab4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007a96:	e043      	b.n	8007b20 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	6a19      	ldr	r1, [r3, #32]
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	8b5a      	ldrh	r2, [r3, #26]
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	7b1b      	ldrb	r3, [r3, #12]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f001 fbff 	bl	80092a8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2204      	movs	r2, #4
 8007aae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007ab2:	e035      	b.n	8007b20 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	7b1b      	ldrb	r3, [r3, #12]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f001 fefe 	bl	80098bc <USBH_LL_GetURBState>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007ac4:	7cfb      	ldrb	r3, [r7, #19]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d129      	bne.n	8007b1e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	7b1b      	ldrb	r3, [r3, #12]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f001 fe61 	bl	8009798 <USBH_LL_GetLastXferSize>
 8007ad6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d016      	beq.n	8007b10 <CDC_ProcessReception+0x9e>
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	8b5b      	ldrh	r3, [r3, #26]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d910      	bls.n	8007b10 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	1ad2      	subs	r2, r2, r3
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	6a1a      	ldr	r2, [r3, #32]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	441a      	add	r2, r3
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2203      	movs	r2, #3
 8007b0a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007b0e:	e006      	b.n	8007b1e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f80f 	bl	8007b3c <USBH_CDC_ReceiveCallback>
      break;
 8007b1e:	bf00      	nop
  }
}
 8007b20:	bf00      	nop
 8007b22:	3718      	adds	r7, #24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007b78:	2302      	movs	r3, #2
 8007b7a:	e029      	b.n	8007bd0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	79fa      	ldrb	r2, [r7, #7]
 8007b80:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 f81f 	bl	8007bd8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d003      	beq.n	8007bc8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f001 fd31 	bl	8009630 <USBH_LL_Init>

  return USBH_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007be4:	2300      	movs	r3, #0
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	e009      	b.n	8007bfe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	33e0      	adds	r3, #224	; 0xe0
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2b0f      	cmp	r3, #15
 8007c02:	d9f2      	bls.n	8007bea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007c04:	2300      	movs	r3, #0
 8007c06:	60fb      	str	r3, [r7, #12]
 8007c08:	e009      	b.n	8007c1e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c14:	2200      	movs	r2, #0
 8007c16:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	60fb      	str	r3, [r7, #12]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c24:	d3f1      	bcc.n	8007c0a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2240      	movs	r2, #64	; 0x40
 8007c4a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d016      	beq.n	8007cc2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10e      	bne.n	8007cbc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ca4:	1c59      	adds	r1, r3, #1
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	33de      	adds	r3, #222	; 0xde
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]
 8007cba:	e004      	b.n	8007cc6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	73fb      	strb	r3, [r7, #15]
 8007cc0:	e001      	b.n	8007cc6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007cea:	78fa      	ldrb	r2, [r7, #3]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d204      	bcs.n	8007cfa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	78fa      	ldrb	r2, [r7, #3]
 8007cf4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007cf8:	e001      	b.n	8007cfe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3714      	adds	r7, #20
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	4608      	mov	r0, r1
 8007d16:	4611      	mov	r1, r2
 8007d18:	461a      	mov	r2, r3
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	70fb      	strb	r3, [r7, #3]
 8007d1e:	460b      	mov	r3, r1
 8007d20:	70bb      	strb	r3, [r7, #2]
 8007d22:	4613      	mov	r3, r2
 8007d24:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d34:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d36:	e025      	b.n	8007d84 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
 8007d3a:	221a      	movs	r2, #26
 8007d3c:	fb02 f303 	mul.w	r3, r2, r3
 8007d40:	3308      	adds	r3, #8
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	4413      	add	r3, r2
 8007d46:	3302      	adds	r3, #2
 8007d48:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	795b      	ldrb	r3, [r3, #5]
 8007d4e:	78fa      	ldrb	r2, [r7, #3]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d002      	beq.n	8007d5a <USBH_FindInterface+0x4e>
 8007d54:	78fb      	ldrb	r3, [r7, #3]
 8007d56:	2bff      	cmp	r3, #255	; 0xff
 8007d58:	d111      	bne.n	8007d7e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d5e:	78ba      	ldrb	r2, [r7, #2]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d002      	beq.n	8007d6a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d64:	78bb      	ldrb	r3, [r7, #2]
 8007d66:	2bff      	cmp	r3, #255	; 0xff
 8007d68:	d109      	bne.n	8007d7e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d6e:	787a      	ldrb	r2, [r7, #1]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d002      	beq.n	8007d7a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d74:	787b      	ldrb	r3, [r7, #1]
 8007d76:	2bff      	cmp	r3, #255	; 0xff
 8007d78:	d101      	bne.n	8007d7e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007d7a:	7dfb      	ldrb	r3, [r7, #23]
 8007d7c:	e006      	b.n	8007d8c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007d7e:	7dfb      	ldrb	r3, [r7, #23]
 8007d80:	3301      	adds	r3, #1
 8007d82:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d84:	7dfb      	ldrb	r3, [r7, #23]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d9d6      	bls.n	8007d38 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007d8a:	23ff      	movs	r3, #255	; 0xff
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	371c      	adds	r7, #28
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f001 fc81 	bl	80096a8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007da6:	2101      	movs	r1, #1
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f001 fd9a 	bl	80098e2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b088      	sub	sp, #32
 8007dbc:	af04      	add	r7, sp, #16
 8007dbe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d102      	bne.n	8007dda <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2203      	movs	r2, #3
 8007dd8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b0b      	cmp	r3, #11
 8007de2:	f200 81be 	bhi.w	8008162 <USBH_Process+0x3aa>
 8007de6:	a201      	add	r2, pc, #4	; (adr r2, 8007dec <USBH_Process+0x34>)
 8007de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dec:	08007e1d 	.word	0x08007e1d
 8007df0:	08007e4f 	.word	0x08007e4f
 8007df4:	08007eb7 	.word	0x08007eb7
 8007df8:	080080fd 	.word	0x080080fd
 8007dfc:	08008163 	.word	0x08008163
 8007e00:	08007f5b 	.word	0x08007f5b
 8007e04:	080080a3 	.word	0x080080a3
 8007e08:	08007f91 	.word	0x08007f91
 8007e0c:	08007fb1 	.word	0x08007fb1
 8007e10:	08007fd1 	.word	0x08007fd1
 8007e14:	08008015 	.word	0x08008015
 8007e18:	080080e5 	.word	0x080080e5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f000 819e 	beq.w	8008166 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007e30:	20c8      	movs	r0, #200	; 0xc8
 8007e32:	f001 fd9d 	bl	8009970 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f001 fc93 	bl	8009762 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e4c:	e18b      	b.n	8008166 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d107      	bne.n	8007e68 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2202      	movs	r2, #2
 8007e64:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e66:	e18d      	b.n	8008184 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e72:	d914      	bls.n	8007e9e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	b2da      	uxtb	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	d903      	bls.n	8007e96 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	220d      	movs	r2, #13
 8007e92:	701a      	strb	r2, [r3, #0]
      break;
 8007e94:	e176      	b.n	8008184 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	701a      	strb	r2, [r3, #0]
      break;
 8007e9c:	e172      	b.n	8008184 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007ea4:	f103 020a 	add.w	r2, r3, #10
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007eae:	200a      	movs	r0, #10
 8007eb0:	f001 fd5e 	bl	8009970 <USBH_Delay>
      break;
 8007eb4:	e166      	b.n	8008184 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d005      	beq.n	8007ecc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ec6:	2104      	movs	r1, #4
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007ecc:	2064      	movs	r0, #100	; 0x64
 8007ece:	f001 fd4f 	bl	8009970 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f001 fc1e 	bl	8009714 <USBH_LL_GetSpeed>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	461a      	mov	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2205      	movs	r2, #5
 8007ee6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007ee8:	2100      	movs	r1, #0
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f001 fa29 	bl	8009342 <USBH_AllocPipe>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007ef8:	2180      	movs	r1, #128	; 0x80
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f001 fa21 	bl	8009342 <USBH_AllocPipe>
 8007f00:	4603      	mov	r3, r0
 8007f02:	461a      	mov	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	7919      	ldrb	r1, [r3, #4]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007f1c:	b292      	uxth	r2, r2
 8007f1e:	9202      	str	r2, [sp, #8]
 8007f20:	2200      	movs	r2, #0
 8007f22:	9201      	str	r2, [sp, #4]
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	4603      	mov	r3, r0
 8007f28:	2280      	movs	r2, #128	; 0x80
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f001 f9da 	bl	80092e4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	7959      	ldrb	r1, [r3, #5]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007f44:	b292      	uxth	r2, r2
 8007f46:	9202      	str	r2, [sp, #8]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	9201      	str	r2, [sp, #4]
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2200      	movs	r2, #0
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f001 f9c6 	bl	80092e4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f58:	e114      	b.n	8008184 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f918 	bl	8008190 <USBH_HandleEnum>
 8007f60:	4603      	mov	r3, r0
 8007f62:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007f64:	7bbb      	ldrb	r3, [r7, #14]
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f040 80fe 	bne.w	800816a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d103      	bne.n	8007f88 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2208      	movs	r2, #8
 8007f84:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007f86:	e0f0      	b.n	800816a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2207      	movs	r2, #7
 8007f8c:	701a      	strb	r2, [r3, #0]
      break;
 8007f8e:	e0ec      	b.n	800816a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f000 80e9 	beq.w	800816e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2208      	movs	r2, #8
 8007fac:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007fae:	e0de      	b.n	800816e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fc2c 	bl	8008818 <USBH_SetCfg>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f040 80d5 	bne.w	8008172 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2209      	movs	r2, #9
 8007fcc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007fce:	e0d0      	b.n	8008172 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007fd6:	f003 0320 	and.w	r3, r3, #32
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d016      	beq.n	800800c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007fde:	2101      	movs	r1, #1
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fc3c 	bl	800885e <USBH_SetFeature>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007fea:	7bbb      	ldrb	r3, [r7, #14]
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d103      	bne.n	8007ffa <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	220a      	movs	r2, #10
 8007ff6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ff8:	e0bd      	b.n	8008176 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	f040 80b9 	bne.w	8008176 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	220a      	movs	r2, #10
 8008008:	701a      	strb	r2, [r3, #0]
      break;
 800800a:	e0b4      	b.n	8008176 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	220a      	movs	r2, #10
 8008010:	701a      	strb	r2, [r3, #0]
      break;
 8008012:	e0b0      	b.n	8008176 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 80ad 	beq.w	800817a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008028:	2300      	movs	r3, #0
 800802a:	73fb      	strb	r3, [r7, #15]
 800802c:	e016      	b.n	800805c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800802e:	7bfa      	ldrb	r2, [r7, #15]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	32de      	adds	r2, #222	; 0xde
 8008034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008038:	791a      	ldrb	r2, [r3, #4]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008040:	429a      	cmp	r2, r3
 8008042:	d108      	bne.n	8008056 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008044:	7bfa      	ldrb	r2, [r7, #15]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	32de      	adds	r2, #222	; 0xde
 800804a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008054:	e005      	b.n	8008062 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008056:	7bfb      	ldrb	r3, [r7, #15]
 8008058:	3301      	adds	r3, #1
 800805a:	73fb      	strb	r3, [r7, #15]
 800805c:	7bfb      	ldrb	r3, [r7, #15]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d0e5      	beq.n	800802e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008068:	2b00      	cmp	r3, #0
 800806a:	d016      	beq.n	800809a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	4798      	blx	r3
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d109      	bne.n	8008092 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2206      	movs	r2, #6
 8008082:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800808a:	2103      	movs	r1, #3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008090:	e073      	b.n	800817a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	220d      	movs	r2, #13
 8008096:	701a      	strb	r2, [r3, #0]
      break;
 8008098:	e06f      	b.n	800817a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	220d      	movs	r2, #13
 800809e:	701a      	strb	r2, [r3, #0]
      break;
 80080a0:	e06b      	b.n	800817a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d017      	beq.n	80080dc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	4798      	blx	r3
 80080b8:	4603      	mov	r3, r0
 80080ba:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d103      	bne.n	80080cc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	220b      	movs	r2, #11
 80080c8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080ca:	e058      	b.n	800817e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d154      	bne.n	800817e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	220d      	movs	r2, #13
 80080d8:	701a      	strb	r2, [r3, #0]
      break;
 80080da:	e050      	b.n	800817e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	220d      	movs	r2, #13
 80080e0:	701a      	strb	r2, [r3, #0]
      break;
 80080e2:	e04c      	b.n	800817e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d049      	beq.n	8008182 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	4798      	blx	r3
      }
      break;
 80080fa:	e042      	b.n	8008182 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7ff fd67 	bl	8007bd8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008110:	2b00      	cmp	r3, #0
 8008112:	d009      	beq.n	8008128 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800812e:	2b00      	cmp	r3, #0
 8008130:	d005      	beq.n	800813e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008138:	2105      	movs	r1, #5
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b01      	cmp	r3, #1
 8008148:	d107      	bne.n	800815a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7ff fe20 	bl	8007d98 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008158:	e014      	b.n	8008184 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f001 faa4 	bl	80096a8 <USBH_LL_Start>
      break;
 8008160:	e010      	b.n	8008184 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008162:	bf00      	nop
 8008164:	e00e      	b.n	8008184 <USBH_Process+0x3cc>
      break;
 8008166:	bf00      	nop
 8008168:	e00c      	b.n	8008184 <USBH_Process+0x3cc>
      break;
 800816a:	bf00      	nop
 800816c:	e00a      	b.n	8008184 <USBH_Process+0x3cc>
    break;
 800816e:	bf00      	nop
 8008170:	e008      	b.n	8008184 <USBH_Process+0x3cc>
      break;
 8008172:	bf00      	nop
 8008174:	e006      	b.n	8008184 <USBH_Process+0x3cc>
      break;
 8008176:	bf00      	nop
 8008178:	e004      	b.n	8008184 <USBH_Process+0x3cc>
      break;
 800817a:	bf00      	nop
 800817c:	e002      	b.n	8008184 <USBH_Process+0x3cc>
      break;
 800817e:	bf00      	nop
 8008180:	e000      	b.n	8008184 <USBH_Process+0x3cc>
      break;
 8008182:	bf00      	nop
  }
  return USBH_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop

08008190 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b088      	sub	sp, #32
 8008194:	af04      	add	r7, sp, #16
 8008196:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008198:	2301      	movs	r3, #1
 800819a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800819c:	2301      	movs	r3, #1
 800819e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	785b      	ldrb	r3, [r3, #1]
 80081a4:	2b07      	cmp	r3, #7
 80081a6:	f200 81c1 	bhi.w	800852c <USBH_HandleEnum+0x39c>
 80081aa:	a201      	add	r2, pc, #4	; (adr r2, 80081b0 <USBH_HandleEnum+0x20>)
 80081ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b0:	080081d1 	.word	0x080081d1
 80081b4:	0800828f 	.word	0x0800828f
 80081b8:	080082f9 	.word	0x080082f9
 80081bc:	08008387 	.word	0x08008387
 80081c0:	080083f1 	.word	0x080083f1
 80081c4:	08008461 	.word	0x08008461
 80081c8:	080084a7 	.word	0x080084a7
 80081cc:	080084ed 	.word	0x080084ed
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80081d0:	2108      	movs	r1, #8
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fa50 	bl	8008678 <USBH_Get_DevDesc>
 80081d8:	4603      	mov	r3, r0
 80081da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d130      	bne.n	8008244 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	7919      	ldrb	r1, [r3, #4]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008206:	b292      	uxth	r2, r2
 8008208:	9202      	str	r2, [sp, #8]
 800820a:	2200      	movs	r2, #0
 800820c:	9201      	str	r2, [sp, #4]
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	4603      	mov	r3, r0
 8008212:	2280      	movs	r2, #128	; 0x80
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f001 f865 	bl	80092e4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	7959      	ldrb	r1, [r3, #5]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800822e:	b292      	uxth	r2, r2
 8008230:	9202      	str	r2, [sp, #8]
 8008232:	2200      	movs	r2, #0
 8008234:	9201      	str	r2, [sp, #4]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	4603      	mov	r3, r0
 800823a:	2200      	movs	r2, #0
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f001 f851 	bl	80092e4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008242:	e175      	b.n	8008530 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	2b03      	cmp	r3, #3
 8008248:	f040 8172 	bne.w	8008530 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008252:	3301      	adds	r3, #1
 8008254:	b2da      	uxtb	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008262:	2b03      	cmp	r3, #3
 8008264:	d903      	bls.n	800826e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	220d      	movs	r2, #13
 800826a:	701a      	strb	r2, [r3, #0]
      break;
 800826c:	e160      	b.n	8008530 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	795b      	ldrb	r3, [r3, #5]
 8008272:	4619      	mov	r1, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f001 f885 	bl	8009384 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	791b      	ldrb	r3, [r3, #4]
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f001 f87f 	bl	8009384 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	701a      	strb	r2, [r3, #0]
      break;
 800828c:	e150      	b.n	8008530 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800828e:	2112      	movs	r1, #18
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f9f1 	bl	8008678 <USBH_Get_DevDesc>
 8008296:	4603      	mov	r3, r0
 8008298:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800829a:	7bbb      	ldrb	r3, [r7, #14]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d103      	bne.n	80082a8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2202      	movs	r2, #2
 80082a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80082a6:	e145      	b.n	8008534 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082a8:	7bbb      	ldrb	r3, [r7, #14]
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	f040 8142 	bne.w	8008534 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082b6:	3301      	adds	r3, #1
 80082b8:	b2da      	uxtb	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d903      	bls.n	80082d2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	220d      	movs	r2, #13
 80082ce:	701a      	strb	r2, [r3, #0]
      break;
 80082d0:	e130      	b.n	8008534 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	795b      	ldrb	r3, [r3, #5]
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f001 f853 	bl	8009384 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	791b      	ldrb	r3, [r3, #4]
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f001 f84d 	bl	8009384 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	701a      	strb	r2, [r3, #0]
      break;
 80082f6:	e11d      	b.n	8008534 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80082f8:	2101      	movs	r1, #1
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fa68 	bl	80087d0 <USBH_SetAddress>
 8008300:	4603      	mov	r3, r0
 8008302:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008304:	7bbb      	ldrb	r3, [r7, #14]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d132      	bne.n	8008370 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800830a:	2002      	movs	r0, #2
 800830c:	f001 fb30 	bl	8009970 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2203      	movs	r2, #3
 800831c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	7919      	ldrb	r1, [r3, #4]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008332:	b292      	uxth	r2, r2
 8008334:	9202      	str	r2, [sp, #8]
 8008336:	2200      	movs	r2, #0
 8008338:	9201      	str	r2, [sp, #4]
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	4603      	mov	r3, r0
 800833e:	2280      	movs	r2, #128	; 0x80
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 ffcf 	bl	80092e4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	7959      	ldrb	r1, [r3, #5]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800835a:	b292      	uxth	r2, r2
 800835c:	9202      	str	r2, [sp, #8]
 800835e:	2200      	movs	r2, #0
 8008360:	9201      	str	r2, [sp, #4]
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	4603      	mov	r3, r0
 8008366:	2200      	movs	r2, #0
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 ffbb 	bl	80092e4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800836e:	e0e3      	b.n	8008538 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008370:	7bbb      	ldrb	r3, [r7, #14]
 8008372:	2b03      	cmp	r3, #3
 8008374:	f040 80e0 	bne.w	8008538 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	220d      	movs	r2, #13
 800837c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	705a      	strb	r2, [r3, #1]
      break;
 8008384:	e0d8      	b.n	8008538 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008386:	2109      	movs	r1, #9
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f99d 	bl	80086c8 <USBH_Get_CfgDesc>
 800838e:	4603      	mov	r3, r0
 8008390:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d103      	bne.n	80083a0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2204      	movs	r2, #4
 800839c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800839e:	e0cd      	b.n	800853c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083a0:	7bbb      	ldrb	r3, [r7, #14]
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	f040 80ca 	bne.w	800853c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083ae:	3301      	adds	r3, #1
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d903      	bls.n	80083ca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	220d      	movs	r2, #13
 80083c6:	701a      	strb	r2, [r3, #0]
      break;
 80083c8:	e0b8      	b.n	800853c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	795b      	ldrb	r3, [r3, #5]
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 ffd7 	bl	8009384 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	791b      	ldrb	r3, [r3, #4]
 80083da:	4619      	mov	r1, r3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 ffd1 	bl	8009384 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	701a      	strb	r2, [r3, #0]
      break;
 80083ee:	e0a5      	b.n	800853c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f965 	bl	80086c8 <USBH_Get_CfgDesc>
 80083fe:	4603      	mov	r3, r0
 8008400:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008402:	7bbb      	ldrb	r3, [r7, #14]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d103      	bne.n	8008410 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2205      	movs	r2, #5
 800840c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800840e:	e097      	b.n	8008540 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008410:	7bbb      	ldrb	r3, [r7, #14]
 8008412:	2b03      	cmp	r3, #3
 8008414:	f040 8094 	bne.w	8008540 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800841e:	3301      	adds	r3, #1
 8008420:	b2da      	uxtb	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800842e:	2b03      	cmp	r3, #3
 8008430:	d903      	bls.n	800843a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	220d      	movs	r2, #13
 8008436:	701a      	strb	r2, [r3, #0]
      break;
 8008438:	e082      	b.n	8008540 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	795b      	ldrb	r3, [r3, #5]
 800843e:	4619      	mov	r1, r3
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 ff9f 	bl	8009384 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	791b      	ldrb	r3, [r3, #4]
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 ff99 	bl	8009384 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	701a      	strb	r2, [r3, #0]
      break;
 800845e:	e06f      	b.n	8008540 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008466:	2b00      	cmp	r3, #0
 8008468:	d019      	beq.n	800849e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008476:	23ff      	movs	r3, #255	; 0xff
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f949 	bl	8008710 <USBH_Get_StringDesc>
 800847e:	4603      	mov	r3, r0
 8008480:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008482:	7bbb      	ldrb	r3, [r7, #14]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d103      	bne.n	8008490 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2206      	movs	r2, #6
 800848c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800848e:	e059      	b.n	8008544 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	2b03      	cmp	r3, #3
 8008494:	d156      	bne.n	8008544 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2206      	movs	r2, #6
 800849a:	705a      	strb	r2, [r3, #1]
      break;
 800849c:	e052      	b.n	8008544 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2206      	movs	r2, #6
 80084a2:	705a      	strb	r2, [r3, #1]
      break;
 80084a4:	e04e      	b.n	8008544 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d019      	beq.n	80084e4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80084bc:	23ff      	movs	r3, #255	; 0xff
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f926 	bl	8008710 <USBH_Get_StringDesc>
 80084c4:	4603      	mov	r3, r0
 80084c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d103      	bne.n	80084d6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2207      	movs	r2, #7
 80084d2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80084d4:	e038      	b.n	8008548 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084d6:	7bbb      	ldrb	r3, [r7, #14]
 80084d8:	2b03      	cmp	r3, #3
 80084da:	d135      	bne.n	8008548 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2207      	movs	r2, #7
 80084e0:	705a      	strb	r2, [r3, #1]
      break;
 80084e2:	e031      	b.n	8008548 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2207      	movs	r2, #7
 80084e8:	705a      	strb	r2, [r3, #1]
      break;
 80084ea:	e02d      	b.n	8008548 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d017      	beq.n	8008526 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008502:	23ff      	movs	r3, #255	; 0xff
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f903 	bl	8008710 <USBH_Get_StringDesc>
 800850a:	4603      	mov	r3, r0
 800850c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800850e:	7bbb      	ldrb	r3, [r7, #14]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d102      	bne.n	800851a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008518:	e018      	b.n	800854c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800851a:	7bbb      	ldrb	r3, [r7, #14]
 800851c:	2b03      	cmp	r3, #3
 800851e:	d115      	bne.n	800854c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008520:	2300      	movs	r3, #0
 8008522:	73fb      	strb	r3, [r7, #15]
      break;
 8008524:	e012      	b.n	800854c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	73fb      	strb	r3, [r7, #15]
      break;
 800852a:	e00f      	b.n	800854c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800852c:	bf00      	nop
 800852e:	e00e      	b.n	800854e <USBH_HandleEnum+0x3be>
      break;
 8008530:	bf00      	nop
 8008532:	e00c      	b.n	800854e <USBH_HandleEnum+0x3be>
      break;
 8008534:	bf00      	nop
 8008536:	e00a      	b.n	800854e <USBH_HandleEnum+0x3be>
      break;
 8008538:	bf00      	nop
 800853a:	e008      	b.n	800854e <USBH_HandleEnum+0x3be>
      break;
 800853c:	bf00      	nop
 800853e:	e006      	b.n	800854e <USBH_HandleEnum+0x3be>
      break;
 8008540:	bf00      	nop
 8008542:	e004      	b.n	800854e <USBH_HandleEnum+0x3be>
      break;
 8008544:	bf00      	nop
 8008546:	e002      	b.n	800854e <USBH_HandleEnum+0x3be>
      break;
 8008548:	bf00      	nop
 800854a:	e000      	b.n	800854e <USBH_HandleEnum+0x3be>
      break;
 800854c:	bf00      	nop
  }
  return Status;
 800854e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800856a:	bf00      	nop
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b082      	sub	sp, #8
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008584:	1c5a      	adds	r2, r3, #1
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 f804 	bl	800859a <USBH_HandleSof>
}
 8008592:	bf00      	nop
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b082      	sub	sp, #8
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b0b      	cmp	r3, #11
 80085aa:	d10a      	bne.n	80085c2 <USBH_HandleSof+0x28>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d005      	beq.n	80085c2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	4798      	blx	r3
  }
}
 80085c2:	bf00      	nop
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80085da:	bf00      	nop
}
 80085dc:	370c      	adds	r7, #12
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b083      	sub	sp, #12
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80085f6:	bf00      	nop
}
 80085f8:	370c      	adds	r7, #12
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008602:	b480      	push	{r7}
 8008604:	b083      	sub	sp, #12
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f001 f844 	bl	80096de <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	791b      	ldrb	r3, [r3, #4]
 800865a:	4619      	mov	r1, r3
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fe91 	bl	8009384 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	795b      	ldrb	r3, [r3, #5]
 8008666:	4619      	mov	r1, r3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fe8b 	bl	8009384 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af02      	add	r7, sp, #8
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	460b      	mov	r3, r1
 8008682:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800868a:	78fb      	ldrb	r3, [r7, #3]
 800868c:	b29b      	uxth	r3, r3
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	4613      	mov	r3, r2
 8008692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008696:	2100      	movs	r1, #0
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f864 	bl	8008766 <USBH_GetDescriptor>
 800869e:	4603      	mov	r3, r0
 80086a0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10a      	bne.n	80086be <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f203 3026 	addw	r0, r3, #806	; 0x326
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80086b4:	78fa      	ldrb	r2, [r7, #3]
 80086b6:	b292      	uxth	r2, r2
 80086b8:	4619      	mov	r1, r3
 80086ba:	f000 f918 	bl	80088ee <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80086be:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b086      	sub	sp, #24
 80086cc:	af02      	add	r7, sp, #8
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	460b      	mov	r3, r1
 80086d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	331c      	adds	r3, #28
 80086d8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80086da:	887b      	ldrh	r3, [r7, #2]
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086e4:	2100      	movs	r1, #0
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f83d 	bl	8008766 <USBH_GetDescriptor>
 80086ec:	4603      	mov	r3, r0
 80086ee:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d107      	bne.n	8008706 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80086f6:	887b      	ldrh	r3, [r7, #2]
 80086f8:	461a      	mov	r2, r3
 80086fa:	68b9      	ldr	r1, [r7, #8]
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f987 	bl	8008a10 <USBH_ParseCfgDesc>
 8008702:	4603      	mov	r3, r0
 8008704:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008706:	7bfb      	ldrb	r3, [r7, #15]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b088      	sub	sp, #32
 8008714:	af02      	add	r7, sp, #8
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	607a      	str	r2, [r7, #4]
 800871a:	461a      	mov	r2, r3
 800871c:	460b      	mov	r3, r1
 800871e:	72fb      	strb	r3, [r7, #11]
 8008720:	4613      	mov	r3, r2
 8008722:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008724:	7afb      	ldrb	r3, [r7, #11]
 8008726:	b29b      	uxth	r3, r3
 8008728:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800872c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008734:	893b      	ldrh	r3, [r7, #8]
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	460b      	mov	r3, r1
 800873a:	2100      	movs	r1, #0
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 f812 	bl	8008766 <USBH_GetDescriptor>
 8008742:	4603      	mov	r3, r0
 8008744:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008746:	7dfb      	ldrb	r3, [r7, #23]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d107      	bne.n	800875c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008752:	893a      	ldrh	r2, [r7, #8]
 8008754:	6879      	ldr	r1, [r7, #4]
 8008756:	4618      	mov	r0, r3
 8008758:	f000 fb24 	bl	8008da4 <USBH_ParseStringDesc>
  }

  return status;
 800875c:	7dfb      	ldrb	r3, [r7, #23]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3718      	adds	r7, #24
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	607b      	str	r3, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	72fb      	strb	r3, [r7, #11]
 8008774:	4613      	mov	r3, r2
 8008776:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	789b      	ldrb	r3, [r3, #2]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d11c      	bne.n	80087ba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008780:	7afb      	ldrb	r3, [r7, #11]
 8008782:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008786:	b2da      	uxtb	r2, r3
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2206      	movs	r2, #6
 8008790:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	893a      	ldrh	r2, [r7, #8]
 8008796:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008798:	893b      	ldrh	r3, [r7, #8]
 800879a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800879e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087a2:	d104      	bne.n	80087ae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f240 4209 	movw	r2, #1033	; 0x409
 80087aa:	829a      	strh	r2, [r3, #20]
 80087ac:	e002      	b.n	80087b4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	8b3a      	ldrh	r2, [r7, #24]
 80087b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80087ba:	8b3b      	ldrh	r3, [r7, #24]
 80087bc:	461a      	mov	r2, r3
 80087be:	6879      	ldr	r1, [r7, #4]
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 fb3d 	bl	8008e40 <USBH_CtlReq>
 80087c6:	4603      	mov	r3, r0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	789b      	ldrb	r3, [r3, #2]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d10f      	bne.n	8008804 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2205      	movs	r2, #5
 80087ee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80087f0:	78fb      	ldrb	r3, [r7, #3]
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008804:	2200      	movs	r2, #0
 8008806:	2100      	movs	r1, #0
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fb19 	bl	8008e40 <USBH_CtlReq>
 800880e:	4603      	mov	r3, r0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	460b      	mov	r3, r1
 8008822:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	789b      	ldrb	r3, [r3, #2]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d10e      	bne.n	800884a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2209      	movs	r2, #9
 8008836:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	887a      	ldrh	r2, [r7, #2]
 800883c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800884a:	2200      	movs	r2, #0
 800884c:	2100      	movs	r1, #0
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 faf6 	bl	8008e40 <USBH_CtlReq>
 8008854:	4603      	mov	r3, r0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b082      	sub	sp, #8
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	460b      	mov	r3, r1
 8008868:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	789b      	ldrb	r3, [r3, #2]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d10f      	bne.n	8008892 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2203      	movs	r2, #3
 800887c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800887e:	78fb      	ldrb	r3, [r7, #3]
 8008880:	b29a      	uxth	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008892:	2200      	movs	r2, #0
 8008894:	2100      	movs	r1, #0
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fad2 	bl	8008e40 <USBH_CtlReq>
 800889c:	4603      	mov	r3, r0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b082      	sub	sp, #8
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	460b      	mov	r3, r1
 80088b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	789b      	ldrb	r3, [r3, #2]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d10f      	bne.n	80088da <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2202      	movs	r2, #2
 80088be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80088cc:	78fb      	ldrb	r3, [r7, #3]
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80088da:	2200      	movs	r2, #0
 80088dc:	2100      	movs	r1, #0
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 faae 	bl	8008e40 <USBH_CtlReq>
 80088e4:	4603      	mov	r3, r0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b085      	sub	sp, #20
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	60f8      	str	r0, [r7, #12]
 80088f6:	60b9      	str	r1, [r7, #8]
 80088f8:	4613      	mov	r3, r2
 80088fa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	781a      	ldrb	r2, [r3, #0]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	785a      	ldrb	r2, [r3, #1]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	3302      	adds	r3, #2
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	b29a      	uxth	r2, r3
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	3303      	adds	r3, #3
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	b29b      	uxth	r3, r3
 800891c:	021b      	lsls	r3, r3, #8
 800891e:	b29b      	uxth	r3, r3
 8008920:	4313      	orrs	r3, r2
 8008922:	b29a      	uxth	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	791a      	ldrb	r2, [r3, #4]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	795a      	ldrb	r2, [r3, #5]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	799a      	ldrb	r2, [r3, #6]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	79da      	ldrb	r2, [r3, #7]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	79db      	ldrb	r3, [r3, #7]
 800894c:	2b20      	cmp	r3, #32
 800894e:	dc11      	bgt.n	8008974 <USBH_ParseDevDesc+0x86>
 8008950:	2b08      	cmp	r3, #8
 8008952:	db16      	blt.n	8008982 <USBH_ParseDevDesc+0x94>
 8008954:	3b08      	subs	r3, #8
 8008956:	2201      	movs	r2, #1
 8008958:	fa02 f303 	lsl.w	r3, r2, r3
 800895c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008964:	2b00      	cmp	r3, #0
 8008966:	bf14      	ite	ne
 8008968:	2301      	movne	r3, #1
 800896a:	2300      	moveq	r3, #0
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d102      	bne.n	8008978 <USBH_ParseDevDesc+0x8a>
 8008972:	e006      	b.n	8008982 <USBH_ParseDevDesc+0x94>
 8008974:	2b40      	cmp	r3, #64	; 0x40
 8008976:	d104      	bne.n	8008982 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	79da      	ldrb	r2, [r3, #7]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	71da      	strb	r2, [r3, #7]
      break;
 8008980:	e003      	b.n	800898a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2240      	movs	r2, #64	; 0x40
 8008986:	71da      	strb	r2, [r3, #7]
      break;
 8008988:	bf00      	nop
  }

  if (length > 8U)
 800898a:	88fb      	ldrh	r3, [r7, #6]
 800898c:	2b08      	cmp	r3, #8
 800898e:	d939      	bls.n	8008a04 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	3308      	adds	r3, #8
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	b29a      	uxth	r2, r3
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	3309      	adds	r3, #9
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	021b      	lsls	r3, r3, #8
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	4313      	orrs	r3, r2
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	330a      	adds	r3, #10
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	330b      	adds	r3, #11
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	021b      	lsls	r3, r3, #8
 80089be:	b29b      	uxth	r3, r3
 80089c0:	4313      	orrs	r3, r2
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	330c      	adds	r3, #12
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	330d      	adds	r3, #13
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	021b      	lsls	r3, r3, #8
 80089da:	b29b      	uxth	r3, r3
 80089dc:	4313      	orrs	r3, r2
 80089de:	b29a      	uxth	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	7b9a      	ldrb	r2, [r3, #14]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	7bda      	ldrb	r2, [r3, #15]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	7c1a      	ldrb	r2, [r3, #16]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	7c5a      	ldrb	r2, [r3, #17]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	745a      	strb	r2, [r3, #17]
  }
}
 8008a04:	bf00      	nop
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b08c      	sub	sp, #48	; 0x30
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008a24:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008a36:	2300      	movs	r3, #0
 8008a38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	781a      	ldrb	r2, [r3, #0]
 8008a44:	6a3b      	ldr	r3, [r7, #32]
 8008a46:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	785a      	ldrb	r2, [r3, #1]
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	3302      	adds	r3, #2
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	3303      	adds	r3, #3
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	021b      	lsls	r3, r3, #8
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	4313      	orrs	r3, r2
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a6c:	bf28      	it	cs
 8008a6e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	791a      	ldrb	r2, [r3, #4]
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	795a      	ldrb	r2, [r3, #5]
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	799a      	ldrb	r2, [r3, #6]
 8008a8c:	6a3b      	ldr	r3, [r7, #32]
 8008a8e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	79da      	ldrb	r2, [r3, #7]
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	7a1a      	ldrb	r2, [r3, #8]
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	2b09      	cmp	r3, #9
 8008aa6:	d002      	beq.n	8008aae <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008aa8:	6a3b      	ldr	r3, [r7, #32]
 8008aaa:	2209      	movs	r2, #9
 8008aac:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008aae:	88fb      	ldrh	r3, [r7, #6]
 8008ab0:	2b09      	cmp	r3, #9
 8008ab2:	f240 809d 	bls.w	8008bf0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008ab6:	2309      	movs	r3, #9
 8008ab8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008aba:	2300      	movs	r3, #0
 8008abc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008abe:	e081      	b.n	8008bc4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008ac0:	f107 0316 	add.w	r3, r7, #22
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ac8:	f000 f99f 	bl	8008e0a <USBH_GetNextDesc>
 8008acc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad0:	785b      	ldrb	r3, [r3, #1]
 8008ad2:	2b04      	cmp	r3, #4
 8008ad4:	d176      	bne.n	8008bc4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	2b09      	cmp	r3, #9
 8008adc:	d002      	beq.n	8008ae4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae0:	2209      	movs	r2, #9
 8008ae2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ae8:	221a      	movs	r2, #26
 8008aea:	fb02 f303 	mul.w	r3, r2, r3
 8008aee:	3308      	adds	r3, #8
 8008af0:	6a3a      	ldr	r2, [r7, #32]
 8008af2:	4413      	add	r3, r2
 8008af4:	3302      	adds	r3, #2
 8008af6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008afa:	69f8      	ldr	r0, [r7, #28]
 8008afc:	f000 f87e 	bl	8008bfc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008b00:	2300      	movs	r3, #0
 8008b02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008b06:	2300      	movs	r3, #0
 8008b08:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b0a:	e043      	b.n	8008b94 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b0c:	f107 0316 	add.w	r3, r7, #22
 8008b10:	4619      	mov	r1, r3
 8008b12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b14:	f000 f979 	bl	8008e0a <USBH_GetNextDesc>
 8008b18:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1c:	785b      	ldrb	r3, [r3, #1]
 8008b1e:	2b05      	cmp	r3, #5
 8008b20:	d138      	bne.n	8008b94 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	795b      	ldrb	r3, [r3, #5]
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d10f      	bne.n	8008b4a <USBH_ParseCfgDesc+0x13a>
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	799b      	ldrb	r3, [r3, #6]
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d10b      	bne.n	8008b4a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	79db      	ldrb	r3, [r3, #7]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10f      	bne.n	8008b5a <USBH_ParseCfgDesc+0x14a>
 8008b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	2b09      	cmp	r3, #9
 8008b40:	d00b      	beq.n	8008b5a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b44:	2209      	movs	r2, #9
 8008b46:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008b48:	e007      	b.n	8008b5a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	2b07      	cmp	r3, #7
 8008b50:	d004      	beq.n	8008b5c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b54:	2207      	movs	r2, #7
 8008b56:	701a      	strb	r2, [r3, #0]
 8008b58:	e000      	b.n	8008b5c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008b5a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b60:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b64:	3201      	adds	r2, #1
 8008b66:	00d2      	lsls	r2, r2, #3
 8008b68:	211a      	movs	r1, #26
 8008b6a:	fb01 f303 	mul.w	r3, r1, r3
 8008b6e:	4413      	add	r3, r2
 8008b70:	3308      	adds	r3, #8
 8008b72:	6a3a      	ldr	r2, [r7, #32]
 8008b74:	4413      	add	r3, r2
 8008b76:	3304      	adds	r3, #4
 8008b78:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b7c:	69b9      	ldr	r1, [r7, #24]
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 f86b 	bl	8008c5a <USBH_ParseEPDesc>
 8008b84:	4603      	mov	r3, r0
 8008b86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008b8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b8e:	3301      	adds	r3, #1
 8008b90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	791b      	ldrb	r3, [r3, #4]
 8008b98:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d204      	bcs.n	8008baa <USBH_ParseCfgDesc+0x19a>
 8008ba0:	6a3b      	ldr	r3, [r7, #32]
 8008ba2:	885a      	ldrh	r2, [r3, #2]
 8008ba4:	8afb      	ldrh	r3, [r7, #22]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d8b0      	bhi.n	8008b0c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	791b      	ldrb	r3, [r3, #4]
 8008bae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d201      	bcs.n	8008bba <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	e01c      	b.n	8008bf4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008bba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d805      	bhi.n	8008bd8 <USBH_ParseCfgDesc+0x1c8>
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	885a      	ldrh	r2, [r3, #2]
 8008bd0:	8afb      	ldrh	r3, [r7, #22]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	f63f af74 	bhi.w	8008ac0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008bd8:	6a3b      	ldr	r3, [r7, #32]
 8008bda:	791b      	ldrb	r3, [r3, #4]
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	bf28      	it	cs
 8008be0:	2302      	movcs	r3, #2
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d201      	bcs.n	8008bf0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e001      	b.n	8008bf4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008bf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3730      	adds	r7, #48	; 0x30
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	781a      	ldrb	r2, [r3, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	785a      	ldrb	r2, [r3, #1]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	789a      	ldrb	r2, [r3, #2]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	78da      	ldrb	r2, [r3, #3]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	791a      	ldrb	r2, [r3, #4]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	795a      	ldrb	r2, [r3, #5]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	799a      	ldrb	r2, [r3, #6]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	79da      	ldrb	r2, [r3, #7]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	7a1a      	ldrb	r2, [r3, #8]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	721a      	strb	r2, [r3, #8]
}
 8008c4e:	bf00      	nop
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b087      	sub	sp, #28
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	60f8      	str	r0, [r7, #12]
 8008c62:	60b9      	str	r1, [r7, #8]
 8008c64:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	781a      	ldrb	r2, [r3, #0]
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	785a      	ldrb	r2, [r3, #1]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	789a      	ldrb	r2, [r3, #2]
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	78da      	ldrb	r2, [r3, #3]
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	3305      	adds	r3, #5
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	021b      	lsls	r3, r3, #8
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	799a      	ldrb	r2, [r3, #6]
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	889b      	ldrh	r3, [r3, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d102      	bne.n	8008cbc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	75fb      	strb	r3, [r7, #23]
 8008cba:	e033      	b.n	8008d24 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	889b      	ldrh	r3, [r3, #4]
 8008cc0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008cc4:	f023 0307 	bic.w	r3, r3, #7
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	889b      	ldrh	r3, [r3, #4]
 8008cd2:	b21a      	sxth	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	3304      	adds	r3, #4
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	b299      	uxth	r1, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	3305      	adds	r3, #5
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	021b      	lsls	r3, r3, #8
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	430b      	orrs	r3, r1
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d110      	bne.n	8008d16 <USBH_ParseEPDesc+0xbc>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	b299      	uxth	r1, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	3305      	adds	r3, #5
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	021b      	lsls	r3, r3, #8
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	430b      	orrs	r3, r1
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	b21b      	sxth	r3, r3
 8008d0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d12:	b21b      	sxth	r3, r3
 8008d14:	e001      	b.n	8008d1a <USBH_ParseEPDesc+0xc0>
 8008d16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	b21b      	sxth	r3, r3
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d116      	bne.n	8008d5c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	78db      	ldrb	r3, [r3, #3]
 8008d32:	f003 0303 	and.w	r3, r3, #3
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d005      	beq.n	8008d46 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	78db      	ldrb	r3, [r3, #3]
 8008d3e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008d42:	2b03      	cmp	r3, #3
 8008d44:	d127      	bne.n	8008d96 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	799b      	ldrb	r3, [r3, #6]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <USBH_ParseEPDesc+0xfc>
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	799b      	ldrb	r3, [r3, #6]
 8008d52:	2b10      	cmp	r3, #16
 8008d54:	d91f      	bls.n	8008d96 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008d56:	2303      	movs	r3, #3
 8008d58:	75fb      	strb	r3, [r7, #23]
 8008d5a:	e01c      	b.n	8008d96 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	78db      	ldrb	r3, [r3, #3]
 8008d60:	f003 0303 	and.w	r3, r3, #3
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d10a      	bne.n	8008d7e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	799b      	ldrb	r3, [r3, #6]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d003      	beq.n	8008d78 <USBH_ParseEPDesc+0x11e>
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	799b      	ldrb	r3, [r3, #6]
 8008d74:	2b10      	cmp	r3, #16
 8008d76:	d90e      	bls.n	8008d96 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	75fb      	strb	r3, [r7, #23]
 8008d7c:	e00b      	b.n	8008d96 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	78db      	ldrb	r3, [r3, #3]
 8008d82:	f003 0303 	and.w	r3, r3, #3
 8008d86:	2b03      	cmp	r3, #3
 8008d88:	d105      	bne.n	8008d96 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	799b      	ldrb	r3, [r3, #6]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008d92:	2303      	movs	r3, #3
 8008d94:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	371c      	adds	r7, #28
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	4613      	mov	r3, r2
 8008db0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	3301      	adds	r3, #1
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	2b03      	cmp	r3, #3
 8008dba:	d120      	bne.n	8008dfe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	1e9a      	subs	r2, r3, #2
 8008dc2:	88fb      	ldrh	r3, [r7, #6]
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	bf28      	it	cs
 8008dc8:	4613      	movcs	r3, r2
 8008dca:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	3302      	adds	r3, #2
 8008dd0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	82fb      	strh	r3, [r7, #22]
 8008dd6:	e00b      	b.n	8008df0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008dd8:	8afb      	ldrh	r3, [r7, #22]
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	4413      	add	r3, r2
 8008dde:	781a      	ldrb	r2, [r3, #0]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	3301      	adds	r3, #1
 8008de8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008dea:	8afb      	ldrh	r3, [r7, #22]
 8008dec:	3302      	adds	r3, #2
 8008dee:	82fb      	strh	r3, [r7, #22]
 8008df0:	8afa      	ldrh	r2, [r7, #22]
 8008df2:	8abb      	ldrh	r3, [r7, #20]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d3ef      	bcc.n	8008dd8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	701a      	strb	r2, [r3, #0]
  }
}
 8008dfe:	bf00      	nop
 8008e00:	371c      	adds	r7, #28
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	b085      	sub	sp, #20
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	881a      	ldrh	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	4413      	add	r3, r2
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4413      	add	r3, r2
 8008e30:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e32:	68fb      	ldr	r3, [r7, #12]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3714      	adds	r7, #20
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	789b      	ldrb	r3, [r3, #2]
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d002      	beq.n	8008e60 <USBH_CtlReq+0x20>
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d00f      	beq.n	8008e7e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008e5e:	e027      	b.n	8008eb0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	88fa      	ldrh	r2, [r7, #6]
 8008e6a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2202      	movs	r2, #2
 8008e76:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e7c:	e018      	b.n	8008eb0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f000 f81c 	bl	8008ebc <USBH_HandleControl>
 8008e84:	4603      	mov	r3, r0
 8008e86:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008e88:	7dfb      	ldrb	r3, [r7, #23]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d002      	beq.n	8008e94 <USBH_CtlReq+0x54>
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
 8008e90:	2b03      	cmp	r3, #3
 8008e92:	d106      	bne.n	8008ea2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2201      	movs	r2, #1
 8008e98:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	761a      	strb	r2, [r3, #24]
      break;
 8008ea0:	e005      	b.n	8008eae <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d102      	bne.n	8008eae <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	709a      	strb	r2, [r3, #2]
      break;
 8008eae:	bf00      	nop
  }
  return status;
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3718      	adds	r7, #24
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
	...

08008ebc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af02      	add	r7, sp, #8
 8008ec2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	7e1b      	ldrb	r3, [r3, #24]
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	2b0a      	cmp	r3, #10
 8008ed4:	f200 8156 	bhi.w	8009184 <USBH_HandleControl+0x2c8>
 8008ed8:	a201      	add	r2, pc, #4	; (adr r2, 8008ee0 <USBH_HandleControl+0x24>)
 8008eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ede:	bf00      	nop
 8008ee0:	08008f0d 	.word	0x08008f0d
 8008ee4:	08008f27 	.word	0x08008f27
 8008ee8:	08008f91 	.word	0x08008f91
 8008eec:	08008fb7 	.word	0x08008fb7
 8008ef0:	08008fef 	.word	0x08008fef
 8008ef4:	08009019 	.word	0x08009019
 8008ef8:	0800906b 	.word	0x0800906b
 8008efc:	0800908d 	.word	0x0800908d
 8008f00:	080090c9 	.word	0x080090c9
 8008f04:	080090ef 	.word	0x080090ef
 8008f08:	0800912d 	.word	0x0800912d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f103 0110 	add.w	r1, r3, #16
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	795b      	ldrb	r3, [r3, #5]
 8008f16:	461a      	mov	r2, r3
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f943 	bl	80091a4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2202      	movs	r2, #2
 8008f22:	761a      	strb	r2, [r3, #24]
      break;
 8008f24:	e139      	b.n	800919a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	795b      	ldrb	r3, [r3, #5]
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fcc5 	bl	80098bc <USBH_LL_GetURBState>
 8008f32:	4603      	mov	r3, r0
 8008f34:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f36:	7bbb      	ldrb	r3, [r7, #14]
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d11e      	bne.n	8008f7a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	7c1b      	ldrb	r3, [r3, #16]
 8008f40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f44:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	8adb      	ldrh	r3, [r3, #22]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00a      	beq.n	8008f64 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008f4e:	7b7b      	ldrb	r3, [r7, #13]
 8008f50:	2b80      	cmp	r3, #128	; 0x80
 8008f52:	d103      	bne.n	8008f5c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2203      	movs	r2, #3
 8008f58:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f5a:	e115      	b.n	8009188 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2205      	movs	r2, #5
 8008f60:	761a      	strb	r2, [r3, #24]
      break;
 8008f62:	e111      	b.n	8009188 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008f64:	7b7b      	ldrb	r3, [r7, #13]
 8008f66:	2b80      	cmp	r3, #128	; 0x80
 8008f68:	d103      	bne.n	8008f72 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2209      	movs	r2, #9
 8008f6e:	761a      	strb	r2, [r3, #24]
      break;
 8008f70:	e10a      	b.n	8009188 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2207      	movs	r2, #7
 8008f76:	761a      	strb	r2, [r3, #24]
      break;
 8008f78:	e106      	b.n	8009188 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008f7a:	7bbb      	ldrb	r3, [r7, #14]
 8008f7c:	2b04      	cmp	r3, #4
 8008f7e:	d003      	beq.n	8008f88 <USBH_HandleControl+0xcc>
 8008f80:	7bbb      	ldrb	r3, [r7, #14]
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	f040 8100 	bne.w	8009188 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	220b      	movs	r2, #11
 8008f8c:	761a      	strb	r2, [r3, #24]
      break;
 8008f8e:	e0fb      	b.n	8009188 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6899      	ldr	r1, [r3, #8]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	899a      	ldrh	r2, [r3, #12]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	791b      	ldrb	r3, [r3, #4]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f93a 	bl	8009222 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2204      	movs	r2, #4
 8008fb2:	761a      	strb	r2, [r3, #24]
      break;
 8008fb4:	e0f1      	b.n	800919a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	791b      	ldrb	r3, [r3, #4]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 fc7d 	bl	80098bc <USBH_LL_GetURBState>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008fc6:	7bbb      	ldrb	r3, [r7, #14]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d102      	bne.n	8008fd2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2209      	movs	r2, #9
 8008fd0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	2b05      	cmp	r3, #5
 8008fd6:	d102      	bne.n	8008fde <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008fdc:	e0d6      	b.n	800918c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008fde:	7bbb      	ldrb	r3, [r7, #14]
 8008fe0:	2b04      	cmp	r3, #4
 8008fe2:	f040 80d3 	bne.w	800918c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	220b      	movs	r2, #11
 8008fea:	761a      	strb	r2, [r3, #24]
      break;
 8008fec:	e0ce      	b.n	800918c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6899      	ldr	r1, [r3, #8]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	899a      	ldrh	r2, [r3, #12]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	795b      	ldrb	r3, [r3, #5]
 8008ffa:	2001      	movs	r0, #1
 8008ffc:	9000      	str	r0, [sp, #0]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f8ea 	bl	80091d8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800900a:	b29a      	uxth	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2206      	movs	r2, #6
 8009014:	761a      	strb	r2, [r3, #24]
      break;
 8009016:	e0c0      	b.n	800919a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	795b      	ldrb	r3, [r3, #5]
 800901c:	4619      	mov	r1, r3
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fc4c 	bl	80098bc <USBH_LL_GetURBState>
 8009024:	4603      	mov	r3, r0
 8009026:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009028:	7bbb      	ldrb	r3, [r7, #14]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d103      	bne.n	8009036 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2207      	movs	r2, #7
 8009032:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009034:	e0ac      	b.n	8009190 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009036:	7bbb      	ldrb	r3, [r7, #14]
 8009038:	2b05      	cmp	r3, #5
 800903a:	d105      	bne.n	8009048 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	220c      	movs	r2, #12
 8009040:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009042:	2303      	movs	r3, #3
 8009044:	73fb      	strb	r3, [r7, #15]
      break;
 8009046:	e0a3      	b.n	8009190 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009048:	7bbb      	ldrb	r3, [r7, #14]
 800904a:	2b02      	cmp	r3, #2
 800904c:	d103      	bne.n	8009056 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2205      	movs	r2, #5
 8009052:	761a      	strb	r2, [r3, #24]
      break;
 8009054:	e09c      	b.n	8009190 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009056:	7bbb      	ldrb	r3, [r7, #14]
 8009058:	2b04      	cmp	r3, #4
 800905a:	f040 8099 	bne.w	8009190 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	220b      	movs	r2, #11
 8009062:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009064:	2302      	movs	r3, #2
 8009066:	73fb      	strb	r3, [r7, #15]
      break;
 8009068:	e092      	b.n	8009190 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	791b      	ldrb	r3, [r3, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	2100      	movs	r1, #0
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f8d5 	bl	8009222 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800907e:	b29a      	uxth	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2208      	movs	r2, #8
 8009088:	761a      	strb	r2, [r3, #24]

      break;
 800908a:	e086      	b.n	800919a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	791b      	ldrb	r3, [r3, #4]
 8009090:	4619      	mov	r1, r3
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fc12 	bl	80098bc <USBH_LL_GetURBState>
 8009098:	4603      	mov	r3, r0
 800909a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800909c:	7bbb      	ldrb	r3, [r7, #14]
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d105      	bne.n	80090ae <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	220d      	movs	r2, #13
 80090a6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80090a8:	2300      	movs	r3, #0
 80090aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80090ac:	e072      	b.n	8009194 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
 80090b0:	2b04      	cmp	r3, #4
 80090b2:	d103      	bne.n	80090bc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	220b      	movs	r2, #11
 80090b8:	761a      	strb	r2, [r3, #24]
      break;
 80090ba:	e06b      	b.n	8009194 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
 80090be:	2b05      	cmp	r3, #5
 80090c0:	d168      	bne.n	8009194 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80090c2:	2303      	movs	r3, #3
 80090c4:	73fb      	strb	r3, [r7, #15]
      break;
 80090c6:	e065      	b.n	8009194 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	795b      	ldrb	r3, [r3, #5]
 80090cc:	2201      	movs	r2, #1
 80090ce:	9200      	str	r2, [sp, #0]
 80090d0:	2200      	movs	r2, #0
 80090d2:	2100      	movs	r1, #0
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f87f 	bl	80091d8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	220a      	movs	r2, #10
 80090ea:	761a      	strb	r2, [r3, #24]
      break;
 80090ec:	e055      	b.n	800919a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	795b      	ldrb	r3, [r3, #5]
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fbe1 	bl	80098bc <USBH_LL_GetURBState>
 80090fa:	4603      	mov	r3, r0
 80090fc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80090fe:	7bbb      	ldrb	r3, [r7, #14]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d105      	bne.n	8009110 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	220d      	movs	r2, #13
 800910c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800910e:	e043      	b.n	8009198 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009110:	7bbb      	ldrb	r3, [r7, #14]
 8009112:	2b02      	cmp	r3, #2
 8009114:	d103      	bne.n	800911e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2209      	movs	r2, #9
 800911a:	761a      	strb	r2, [r3, #24]
      break;
 800911c:	e03c      	b.n	8009198 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800911e:	7bbb      	ldrb	r3, [r7, #14]
 8009120:	2b04      	cmp	r3, #4
 8009122:	d139      	bne.n	8009198 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	220b      	movs	r2, #11
 8009128:	761a      	strb	r2, [r3, #24]
      break;
 800912a:	e035      	b.n	8009198 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	7e5b      	ldrb	r3, [r3, #25]
 8009130:	3301      	adds	r3, #1
 8009132:	b2da      	uxtb	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	765a      	strb	r2, [r3, #25]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	7e5b      	ldrb	r3, [r3, #25]
 800913c:	2b02      	cmp	r3, #2
 800913e:	d806      	bhi.n	800914e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800914c:	e025      	b.n	800919a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009154:	2106      	movs	r1, #6
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	795b      	ldrb	r3, [r3, #5]
 8009164:	4619      	mov	r1, r3
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f90c 	bl	8009384 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	791b      	ldrb	r3, [r3, #4]
 8009170:	4619      	mov	r1, r3
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f906 	bl	8009384 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800917e:	2302      	movs	r3, #2
 8009180:	73fb      	strb	r3, [r7, #15]
      break;
 8009182:	e00a      	b.n	800919a <USBH_HandleControl+0x2de>

    default:
      break;
 8009184:	bf00      	nop
 8009186:	e008      	b.n	800919a <USBH_HandleControl+0x2de>
      break;
 8009188:	bf00      	nop
 800918a:	e006      	b.n	800919a <USBH_HandleControl+0x2de>
      break;
 800918c:	bf00      	nop
 800918e:	e004      	b.n	800919a <USBH_HandleControl+0x2de>
      break;
 8009190:	bf00      	nop
 8009192:	e002      	b.n	800919a <USBH_HandleControl+0x2de>
      break;
 8009194:	bf00      	nop
 8009196:	e000      	b.n	800919a <USBH_HandleControl+0x2de>
      break;
 8009198:	bf00      	nop
  }

  return status;
 800919a:	7bfb      	ldrb	r3, [r7, #15]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b088      	sub	sp, #32
 80091a8:	af04      	add	r7, sp, #16
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	4613      	mov	r3, r2
 80091b0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091b2:	79f9      	ldrb	r1, [r7, #7]
 80091b4:	2300      	movs	r3, #0
 80091b6:	9303      	str	r3, [sp, #12]
 80091b8:	2308      	movs	r3, #8
 80091ba:	9302      	str	r3, [sp, #8]
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	9301      	str	r3, [sp, #4]
 80091c0:	2300      	movs	r3, #0
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	2300      	movs	r3, #0
 80091c6:	2200      	movs	r2, #0
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 fb46 	bl	800985a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b088      	sub	sp, #32
 80091dc:	af04      	add	r7, sp, #16
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	4611      	mov	r1, r2
 80091e4:	461a      	mov	r2, r3
 80091e6:	460b      	mov	r3, r1
 80091e8:	80fb      	strh	r3, [r7, #6]
 80091ea:	4613      	mov	r3, r2
 80091ec:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091fc:	7979      	ldrb	r1, [r7, #5]
 80091fe:	7e3b      	ldrb	r3, [r7, #24]
 8009200:	9303      	str	r3, [sp, #12]
 8009202:	88fb      	ldrh	r3, [r7, #6]
 8009204:	9302      	str	r3, [sp, #8]
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	9301      	str	r3, [sp, #4]
 800920a:	2301      	movs	r3, #1
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	2300      	movs	r3, #0
 8009210:	2200      	movs	r2, #0
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 fb21 	bl	800985a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b088      	sub	sp, #32
 8009226:	af04      	add	r7, sp, #16
 8009228:	60f8      	str	r0, [r7, #12]
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	4611      	mov	r1, r2
 800922e:	461a      	mov	r2, r3
 8009230:	460b      	mov	r3, r1
 8009232:	80fb      	strh	r3, [r7, #6]
 8009234:	4613      	mov	r3, r2
 8009236:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009238:	7979      	ldrb	r1, [r7, #5]
 800923a:	2300      	movs	r3, #0
 800923c:	9303      	str	r3, [sp, #12]
 800923e:	88fb      	ldrh	r3, [r7, #6]
 8009240:	9302      	str	r3, [sp, #8]
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	9301      	str	r3, [sp, #4]
 8009246:	2301      	movs	r3, #1
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	2300      	movs	r3, #0
 800924c:	2201      	movs	r2, #1
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f000 fb03 	bl	800985a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009254:	2300      	movs	r3, #0

}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b088      	sub	sp, #32
 8009262:	af04      	add	r7, sp, #16
 8009264:	60f8      	str	r0, [r7, #12]
 8009266:	60b9      	str	r1, [r7, #8]
 8009268:	4611      	mov	r1, r2
 800926a:	461a      	mov	r2, r3
 800926c:	460b      	mov	r3, r1
 800926e:	80fb      	strh	r3, [r7, #6]
 8009270:	4613      	mov	r3, r2
 8009272:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800927a:	2b00      	cmp	r3, #0
 800927c:	d001      	beq.n	8009282 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800927e:	2300      	movs	r3, #0
 8009280:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009282:	7979      	ldrb	r1, [r7, #5]
 8009284:	7e3b      	ldrb	r3, [r7, #24]
 8009286:	9303      	str	r3, [sp, #12]
 8009288:	88fb      	ldrh	r3, [r7, #6]
 800928a:	9302      	str	r3, [sp, #8]
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	9301      	str	r3, [sp, #4]
 8009290:	2301      	movs	r3, #1
 8009292:	9300      	str	r3, [sp, #0]
 8009294:	2302      	movs	r3, #2
 8009296:	2200      	movs	r2, #0
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f000 fade 	bl	800985a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b088      	sub	sp, #32
 80092ac:	af04      	add	r7, sp, #16
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	4611      	mov	r1, r2
 80092b4:	461a      	mov	r2, r3
 80092b6:	460b      	mov	r3, r1
 80092b8:	80fb      	strh	r3, [r7, #6]
 80092ba:	4613      	mov	r3, r2
 80092bc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80092be:	7979      	ldrb	r1, [r7, #5]
 80092c0:	2300      	movs	r3, #0
 80092c2:	9303      	str	r3, [sp, #12]
 80092c4:	88fb      	ldrh	r3, [r7, #6]
 80092c6:	9302      	str	r3, [sp, #8]
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	9301      	str	r3, [sp, #4]
 80092cc:	2301      	movs	r3, #1
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	2302      	movs	r3, #2
 80092d2:	2201      	movs	r2, #1
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f000 fac0 	bl	800985a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af04      	add	r7, sp, #16
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	4608      	mov	r0, r1
 80092ee:	4611      	mov	r1, r2
 80092f0:	461a      	mov	r2, r3
 80092f2:	4603      	mov	r3, r0
 80092f4:	70fb      	strb	r3, [r7, #3]
 80092f6:	460b      	mov	r3, r1
 80092f8:	70bb      	strb	r3, [r7, #2]
 80092fa:	4613      	mov	r3, r2
 80092fc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80092fe:	7878      	ldrb	r0, [r7, #1]
 8009300:	78ba      	ldrb	r2, [r7, #2]
 8009302:	78f9      	ldrb	r1, [r7, #3]
 8009304:	8b3b      	ldrh	r3, [r7, #24]
 8009306:	9302      	str	r3, [sp, #8]
 8009308:	7d3b      	ldrb	r3, [r7, #20]
 800930a:	9301      	str	r3, [sp, #4]
 800930c:	7c3b      	ldrb	r3, [r7, #16]
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	4603      	mov	r3, r0
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fa53 	bl	80097be <USBH_LL_OpenPipe>

  return USBH_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b082      	sub	sp, #8
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	460b      	mov	r3, r1
 800932c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800932e:	78fb      	ldrb	r3, [r7, #3]
 8009330:	4619      	mov	r1, r3
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fa72 	bl	800981c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	460b      	mov	r3, r1
 800934c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f836 	bl	80093c0 <USBH_GetFreePipe>
 8009354:	4603      	mov	r3, r0
 8009356:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009358:	89fb      	ldrh	r3, [r7, #14]
 800935a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800935e:	4293      	cmp	r3, r2
 8009360:	d00a      	beq.n	8009378 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009362:	78fa      	ldrb	r2, [r7, #3]
 8009364:	89fb      	ldrh	r3, [r7, #14]
 8009366:	f003 030f 	and.w	r3, r3, #15
 800936a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800936e:	6879      	ldr	r1, [r7, #4]
 8009370:	33e0      	adds	r3, #224	; 0xe0
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	440b      	add	r3, r1
 8009376:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009378:	89fb      	ldrh	r3, [r7, #14]
 800937a:	b2db      	uxtb	r3, r3
}
 800937c:	4618      	mov	r0, r3
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	460b      	mov	r3, r1
 800938e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009390:	78fb      	ldrb	r3, [r7, #3]
 8009392:	2b0f      	cmp	r3, #15
 8009394:	d80d      	bhi.n	80093b2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009396:	78fb      	ldrb	r3, [r7, #3]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	33e0      	adds	r3, #224	; 0xe0
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	4413      	add	r3, r2
 80093a0:	685a      	ldr	r2, [r3, #4]
 80093a2:	78fb      	ldrb	r3, [r7, #3]
 80093a4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80093a8:	6879      	ldr	r1, [r7, #4]
 80093aa:	33e0      	adds	r3, #224	; 0xe0
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	440b      	add	r3, r1
 80093b0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80093c8:	2300      	movs	r3, #0
 80093ca:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80093cc:	2300      	movs	r3, #0
 80093ce:	73fb      	strb	r3, [r7, #15]
 80093d0:	e00f      	b.n	80093f2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80093d2:	7bfb      	ldrb	r3, [r7, #15]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	33e0      	adds	r3, #224	; 0xe0
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4413      	add	r3, r2
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d102      	bne.n	80093ec <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80093e6:	7bfb      	ldrb	r3, [r7, #15]
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	e007      	b.n	80093fc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
 80093ee:	3301      	adds	r3, #1
 80093f0:	73fb      	strb	r3, [r7, #15]
 80093f2:	7bfb      	ldrb	r3, [r7, #15]
 80093f4:	2b0f      	cmp	r3, #15
 80093f6:	d9ec      	bls.n	80093d2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80093f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3714      	adds	r7, #20
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800940c:	2201      	movs	r2, #1
 800940e:	490e      	ldr	r1, [pc, #56]	; (8009448 <MX_USB_HOST_Init+0x40>)
 8009410:	480e      	ldr	r0, [pc, #56]	; (800944c <MX_USB_HOST_Init+0x44>)
 8009412:	f7fe fba7 	bl	8007b64 <USBH_Init>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800941c:	f7f8 f93e 	bl	800169c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009420:	490b      	ldr	r1, [pc, #44]	; (8009450 <MX_USB_HOST_Init+0x48>)
 8009422:	480a      	ldr	r0, [pc, #40]	; (800944c <MX_USB_HOST_Init+0x44>)
 8009424:	f7fe fc2c 	bl	8007c80 <USBH_RegisterClass>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800942e:	f7f8 f935 	bl	800169c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009432:	4806      	ldr	r0, [pc, #24]	; (800944c <MX_USB_HOST_Init+0x44>)
 8009434:	f7fe fcb0 	bl	8007d98 <USBH_Start>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800943e:	f7f8 f92d 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009442:	bf00      	nop
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	08009469 	.word	0x08009469
 800944c:	20000274 	.word	0x20000274
 8009450:	20000014 	.word	0x20000014

08009454 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009458:	4802      	ldr	r0, [pc, #8]	; (8009464 <MX_USB_HOST_Process+0x10>)
 800945a:	f7fe fcad 	bl	8007db8 <USBH_Process>
}
 800945e:	bf00      	nop
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	20000274 	.word	0x20000274

08009468 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	460b      	mov	r3, r1
 8009472:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009474:	78fb      	ldrb	r3, [r7, #3]
 8009476:	3b01      	subs	r3, #1
 8009478:	2b04      	cmp	r3, #4
 800947a:	d819      	bhi.n	80094b0 <USBH_UserProcess+0x48>
 800947c:	a201      	add	r2, pc, #4	; (adr r2, 8009484 <USBH_UserProcess+0x1c>)
 800947e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009482:	bf00      	nop
 8009484:	080094b1 	.word	0x080094b1
 8009488:	080094a1 	.word	0x080094a1
 800948c:	080094b1 	.word	0x080094b1
 8009490:	080094a9 	.word	0x080094a9
 8009494:	08009499 	.word	0x08009499
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009498:	4b09      	ldr	r3, [pc, #36]	; (80094c0 <USBH_UserProcess+0x58>)
 800949a:	2203      	movs	r2, #3
 800949c:	701a      	strb	r2, [r3, #0]
  break;
 800949e:	e008      	b.n	80094b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80094a0:	4b07      	ldr	r3, [pc, #28]	; (80094c0 <USBH_UserProcess+0x58>)
 80094a2:	2202      	movs	r2, #2
 80094a4:	701a      	strb	r2, [r3, #0]
  break;
 80094a6:	e004      	b.n	80094b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80094a8:	4b05      	ldr	r3, [pc, #20]	; (80094c0 <USBH_UserProcess+0x58>)
 80094aa:	2201      	movs	r2, #1
 80094ac:	701a      	strb	r2, [r3, #0]
  break;
 80094ae:	e000      	b.n	80094b2 <USBH_UserProcess+0x4a>

  default:
  break;
 80094b0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80094b2:	bf00      	nop
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	2000064c 	.word	0x2000064c

080094c4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b08a      	sub	sp, #40	; 0x28
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094cc:	f107 0314 	add.w	r3, r7, #20
 80094d0:	2200      	movs	r2, #0
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	605a      	str	r2, [r3, #4]
 80094d6:	609a      	str	r2, [r3, #8]
 80094d8:	60da      	str	r2, [r3, #12]
 80094da:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094e4:	d147      	bne.n	8009576 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094e6:	2300      	movs	r3, #0
 80094e8:	613b      	str	r3, [r7, #16]
 80094ea:	4b25      	ldr	r3, [pc, #148]	; (8009580 <HAL_HCD_MspInit+0xbc>)
 80094ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ee:	4a24      	ldr	r2, [pc, #144]	; (8009580 <HAL_HCD_MspInit+0xbc>)
 80094f0:	f043 0301 	orr.w	r3, r3, #1
 80094f4:	6313      	str	r3, [r2, #48]	; 0x30
 80094f6:	4b22      	ldr	r3, [pc, #136]	; (8009580 <HAL_HCD_MspInit+0xbc>)
 80094f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	613b      	str	r3, [r7, #16]
 8009500:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009508:	2300      	movs	r3, #0
 800950a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800950c:	2300      	movs	r3, #0
 800950e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009510:	f107 0314 	add.w	r3, r7, #20
 8009514:	4619      	mov	r1, r3
 8009516:	481b      	ldr	r0, [pc, #108]	; (8009584 <HAL_HCD_MspInit+0xc0>)
 8009518:	f7f8 fcd6 	bl	8001ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800951c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009522:	2302      	movs	r3, #2
 8009524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009526:	2300      	movs	r3, #0
 8009528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800952a:	2300      	movs	r3, #0
 800952c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800952e:	230a      	movs	r3, #10
 8009530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009532:	f107 0314 	add.w	r3, r7, #20
 8009536:	4619      	mov	r1, r3
 8009538:	4812      	ldr	r0, [pc, #72]	; (8009584 <HAL_HCD_MspInit+0xc0>)
 800953a:	f7f8 fcc5 	bl	8001ec8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800953e:	4b10      	ldr	r3, [pc, #64]	; (8009580 <HAL_HCD_MspInit+0xbc>)
 8009540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009542:	4a0f      	ldr	r2, [pc, #60]	; (8009580 <HAL_HCD_MspInit+0xbc>)
 8009544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009548:	6353      	str	r3, [r2, #52]	; 0x34
 800954a:	2300      	movs	r3, #0
 800954c:	60fb      	str	r3, [r7, #12]
 800954e:	4b0c      	ldr	r3, [pc, #48]	; (8009580 <HAL_HCD_MspInit+0xbc>)
 8009550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009552:	4a0b      	ldr	r2, [pc, #44]	; (8009580 <HAL_HCD_MspInit+0xbc>)
 8009554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009558:	6453      	str	r3, [r2, #68]	; 0x44
 800955a:	4b09      	ldr	r3, [pc, #36]	; (8009580 <HAL_HCD_MspInit+0xbc>)
 800955c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800955e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009562:	60fb      	str	r3, [r7, #12]
 8009564:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009566:	2200      	movs	r2, #0
 8009568:	2100      	movs	r1, #0
 800956a:	2043      	movs	r0, #67	; 0x43
 800956c:	f7f8 fc75 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009570:	2043      	movs	r0, #67	; 0x43
 8009572:	f7f8 fc8e 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009576:	bf00      	nop
 8009578:	3728      	adds	r7, #40	; 0x28
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	40023800 	.word	0x40023800
 8009584:	40020000 	.word	0x40020000

08009588 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009596:	4618      	mov	r0, r3
 8009598:	f7fe ffed 	bl	8008576 <USBH_LL_IncTimer>
}
 800959c:	bf00      	nop
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7ff f825 	bl	8008602 <USBH_LL_Connect>
}
 80095b8:	bf00      	nop
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7ff f82e 	bl	8008630 <USBH_LL_Disconnect>
}
 80095d4:	bf00      	nop
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	70fb      	strb	r3, [r7, #3]
 80095e8:	4613      	mov	r3, r2
 80095ea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009606:	4618      	mov	r0, r3
 8009608:	f7fe ffdf 	bl	80085ca <USBH_LL_PortEnabled>
}
 800960c:	bf00      	nop
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009622:	4618      	mov	r0, r3
 8009624:	f7fe ffdf 	bl	80085e6 <USBH_LL_PortDisabled>
}
 8009628:	bf00      	nop
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800963e:	2b01      	cmp	r3, #1
 8009640:	d12a      	bne.n	8009698 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009642:	4a18      	ldr	r2, [pc, #96]	; (80096a4 <USBH_LL_Init+0x74>)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a15      	ldr	r2, [pc, #84]	; (80096a4 <USBH_LL_Init+0x74>)
 800964e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009652:	4b14      	ldr	r3, [pc, #80]	; (80096a4 <USBH_LL_Init+0x74>)
 8009654:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009658:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800965a:	4b12      	ldr	r3, [pc, #72]	; (80096a4 <USBH_LL_Init+0x74>)
 800965c:	2208      	movs	r2, #8
 800965e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009660:	4b10      	ldr	r3, [pc, #64]	; (80096a4 <USBH_LL_Init+0x74>)
 8009662:	2201      	movs	r2, #1
 8009664:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009666:	4b0f      	ldr	r3, [pc, #60]	; (80096a4 <USBH_LL_Init+0x74>)
 8009668:	2200      	movs	r2, #0
 800966a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800966c:	4b0d      	ldr	r3, [pc, #52]	; (80096a4 <USBH_LL_Init+0x74>)
 800966e:	2202      	movs	r2, #2
 8009670:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009672:	4b0c      	ldr	r3, [pc, #48]	; (80096a4 <USBH_LL_Init+0x74>)
 8009674:	2200      	movs	r2, #0
 8009676:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009678:	480a      	ldr	r0, [pc, #40]	; (80096a4 <USBH_LL_Init+0x74>)
 800967a:	f7f8 fe0b 	bl	8002294 <HAL_HCD_Init>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009684:	f7f8 f80a 	bl	800169c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009688:	4806      	ldr	r0, [pc, #24]	; (80096a4 <USBH_LL_Init+0x74>)
 800968a:	f7f9 f9ee 	bl	8002a6a <HAL_HCD_GetCurrentFrame>
 800968e:	4603      	mov	r3, r0
 8009690:	4619      	mov	r1, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7fe ff60 	bl	8008558 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	20000650 	.word	0x20000650

080096a8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b0:	2300      	movs	r3, #0
 80096b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80096be:	4618      	mov	r0, r3
 80096c0:	f7f9 f95d 	bl	800297e <HAL_HCD_Start>
 80096c4:	4603      	mov	r3, r0
 80096c6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80096c8:	7bfb      	ldrb	r3, [r7, #15]
 80096ca:	4618      	mov	r0, r3
 80096cc:	f000 f95c 	bl	8009988 <USBH_Get_USB_Status>
 80096d0:	4603      	mov	r3, r0
 80096d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b084      	sub	sp, #16
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7f9 f965 	bl	80029c4 <HAL_HCD_Stop>
 80096fa:	4603      	mov	r3, r0
 80096fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	4618      	mov	r0, r3
 8009702:	f000 f941 	bl	8009988 <USBH_Get_USB_Status>
 8009706:	4603      	mov	r3, r0
 8009708:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800970a:	7bbb      	ldrb	r3, [r7, #14]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800971c:	2301      	movs	r3, #1
 800971e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009726:	4618      	mov	r0, r3
 8009728:	f7f9 f9ad 	bl	8002a86 <HAL_HCD_GetCurrentSpeed>
 800972c:	4603      	mov	r3, r0
 800972e:	2b02      	cmp	r3, #2
 8009730:	d00c      	beq.n	800974c <USBH_LL_GetSpeed+0x38>
 8009732:	2b02      	cmp	r3, #2
 8009734:	d80d      	bhi.n	8009752 <USBH_LL_GetSpeed+0x3e>
 8009736:	2b00      	cmp	r3, #0
 8009738:	d002      	beq.n	8009740 <USBH_LL_GetSpeed+0x2c>
 800973a:	2b01      	cmp	r3, #1
 800973c:	d003      	beq.n	8009746 <USBH_LL_GetSpeed+0x32>
 800973e:	e008      	b.n	8009752 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009740:	2300      	movs	r3, #0
 8009742:	73fb      	strb	r3, [r7, #15]
    break;
 8009744:	e008      	b.n	8009758 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009746:	2301      	movs	r3, #1
 8009748:	73fb      	strb	r3, [r7, #15]
    break;
 800974a:	e005      	b.n	8009758 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800974c:	2302      	movs	r3, #2
 800974e:	73fb      	strb	r3, [r7, #15]
    break;
 8009750:	e002      	b.n	8009758 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009752:	2301      	movs	r3, #1
 8009754:	73fb      	strb	r3, [r7, #15]
    break;
 8009756:	bf00      	nop
  }
  return  speed;
 8009758:	7bfb      	ldrb	r3, [r7, #15]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b084      	sub	sp, #16
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800976a:	2300      	movs	r3, #0
 800976c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009778:	4618      	mov	r0, r3
 800977a:	f7f9 f940 	bl	80029fe <HAL_HCD_ResetPort>
 800977e:	4603      	mov	r3, r0
 8009780:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009782:	7bfb      	ldrb	r3, [r7, #15]
 8009784:	4618      	mov	r0, r3
 8009786:	f000 f8ff 	bl	8009988 <USBH_Get_USB_Status>
 800978a:	4603      	mov	r3, r0
 800978c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800978e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	460b      	mov	r3, r1
 80097a2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80097aa:	78fa      	ldrb	r2, [r7, #3]
 80097ac:	4611      	mov	r1, r2
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7f9 f947 	bl	8002a42 <HAL_HCD_HC_GetXferCount>
 80097b4:	4603      	mov	r3, r0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80097be:	b590      	push	{r4, r7, lr}
 80097c0:	b089      	sub	sp, #36	; 0x24
 80097c2:	af04      	add	r7, sp, #16
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	4608      	mov	r0, r1
 80097c8:	4611      	mov	r1, r2
 80097ca:	461a      	mov	r2, r3
 80097cc:	4603      	mov	r3, r0
 80097ce:	70fb      	strb	r3, [r7, #3]
 80097d0:	460b      	mov	r3, r1
 80097d2:	70bb      	strb	r3, [r7, #2]
 80097d4:	4613      	mov	r3, r2
 80097d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097d8:	2300      	movs	r3, #0
 80097da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80097e6:	787c      	ldrb	r4, [r7, #1]
 80097e8:	78ba      	ldrb	r2, [r7, #2]
 80097ea:	78f9      	ldrb	r1, [r7, #3]
 80097ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80097ee:	9302      	str	r3, [sp, #8]
 80097f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80097f4:	9301      	str	r3, [sp, #4]
 80097f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	4623      	mov	r3, r4
 80097fe:	f7f8 fdab 	bl	8002358 <HAL_HCD_HC_Init>
 8009802:	4603      	mov	r3, r0
 8009804:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009806:	7bfb      	ldrb	r3, [r7, #15]
 8009808:	4618      	mov	r0, r3
 800980a:	f000 f8bd 	bl	8009988 <USBH_Get_USB_Status>
 800980e:	4603      	mov	r3, r0
 8009810:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009812:	7bbb      	ldrb	r3, [r7, #14]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	bd90      	pop	{r4, r7, pc}

0800981c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	460b      	mov	r3, r1
 8009826:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009836:	78fa      	ldrb	r2, [r7, #3]
 8009838:	4611      	mov	r1, r2
 800983a:	4618      	mov	r0, r3
 800983c:	f7f8 fe1b 	bl	8002476 <HAL_HCD_HC_Halt>
 8009840:	4603      	mov	r3, r0
 8009842:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009844:	7bfb      	ldrb	r3, [r7, #15]
 8009846:	4618      	mov	r0, r3
 8009848:	f000 f89e 	bl	8009988 <USBH_Get_USB_Status>
 800984c:	4603      	mov	r3, r0
 800984e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009850:	7bbb      	ldrb	r3, [r7, #14]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800985a:	b590      	push	{r4, r7, lr}
 800985c:	b089      	sub	sp, #36	; 0x24
 800985e:	af04      	add	r7, sp, #16
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	4608      	mov	r0, r1
 8009864:	4611      	mov	r1, r2
 8009866:	461a      	mov	r2, r3
 8009868:	4603      	mov	r3, r0
 800986a:	70fb      	strb	r3, [r7, #3]
 800986c:	460b      	mov	r3, r1
 800986e:	70bb      	strb	r3, [r7, #2]
 8009870:	4613      	mov	r3, r2
 8009872:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009874:	2300      	movs	r3, #0
 8009876:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009882:	787c      	ldrb	r4, [r7, #1]
 8009884:	78ba      	ldrb	r2, [r7, #2]
 8009886:	78f9      	ldrb	r1, [r7, #3]
 8009888:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800988c:	9303      	str	r3, [sp, #12]
 800988e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009890:	9302      	str	r3, [sp, #8]
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	9301      	str	r3, [sp, #4]
 8009896:	f897 3020 	ldrb.w	r3, [r7, #32]
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	4623      	mov	r3, r4
 800989e:	f7f8 fe0d 	bl	80024bc <HAL_HCD_HC_SubmitRequest>
 80098a2:	4603      	mov	r3, r0
 80098a4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80098a6:	7bfb      	ldrb	r3, [r7, #15]
 80098a8:	4618      	mov	r0, r3
 80098aa:	f000 f86d 	bl	8009988 <USBH_Get_USB_Status>
 80098ae:	4603      	mov	r3, r0
 80098b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3714      	adds	r7, #20
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd90      	pop	{r4, r7, pc}

080098bc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	460b      	mov	r3, r1
 80098c6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80098ce:	78fa      	ldrb	r2, [r7, #3]
 80098d0:	4611      	mov	r1, r2
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7f9 f8a1 	bl	8002a1a <HAL_HCD_HC_GetURBState>
 80098d8:	4603      	mov	r3, r0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3708      	adds	r7, #8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b082      	sub	sp, #8
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	460b      	mov	r3, r1
 80098ec:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d103      	bne.n	8009900 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80098f8:	78fb      	ldrb	r3, [r7, #3]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 f870 	bl	80099e0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009900:	20c8      	movs	r0, #200	; 0xc8
 8009902:	f7f8 f9ab 	bl	8001c5c <HAL_Delay>
  return USBH_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	460b      	mov	r3, r1
 800991a:	70fb      	strb	r3, [r7, #3]
 800991c:	4613      	mov	r3, r2
 800991e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009926:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009928:	78fb      	ldrb	r3, [r7, #3]
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	212c      	movs	r1, #44	; 0x2c
 800992e:	fb01 f303 	mul.w	r3, r1, r3
 8009932:	4413      	add	r3, r2
 8009934:	333b      	adds	r3, #59	; 0x3b
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d009      	beq.n	8009950 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800993c:	78fb      	ldrb	r3, [r7, #3]
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	212c      	movs	r1, #44	; 0x2c
 8009942:	fb01 f303 	mul.w	r3, r1, r3
 8009946:	4413      	add	r3, r2
 8009948:	3354      	adds	r3, #84	; 0x54
 800994a:	78ba      	ldrb	r2, [r7, #2]
 800994c:	701a      	strb	r2, [r3, #0]
 800994e:	e008      	b.n	8009962 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009950:	78fb      	ldrb	r3, [r7, #3]
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	212c      	movs	r1, #44	; 0x2c
 8009956:	fb01 f303 	mul.w	r3, r1, r3
 800995a:	4413      	add	r3, r2
 800995c:	3355      	adds	r3, #85	; 0x55
 800995e:	78ba      	ldrb	r2, [r7, #2]
 8009960:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3714      	adds	r7, #20
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7f8 f96f 	bl	8001c5c <HAL_Delay>
}
 800997e:	bf00      	nop
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
	...

08009988 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	4603      	mov	r3, r0
 8009990:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009992:	2300      	movs	r3, #0
 8009994:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009996:	79fb      	ldrb	r3, [r7, #7]
 8009998:	2b03      	cmp	r3, #3
 800999a:	d817      	bhi.n	80099cc <USBH_Get_USB_Status+0x44>
 800999c:	a201      	add	r2, pc, #4	; (adr r2, 80099a4 <USBH_Get_USB_Status+0x1c>)
 800999e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a2:	bf00      	nop
 80099a4:	080099b5 	.word	0x080099b5
 80099a8:	080099bb 	.word	0x080099bb
 80099ac:	080099c1 	.word	0x080099c1
 80099b0:	080099c7 	.word	0x080099c7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80099b4:	2300      	movs	r3, #0
 80099b6:	73fb      	strb	r3, [r7, #15]
    break;
 80099b8:	e00b      	b.n	80099d2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80099ba:	2302      	movs	r3, #2
 80099bc:	73fb      	strb	r3, [r7, #15]
    break;
 80099be:	e008      	b.n	80099d2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80099c0:	2301      	movs	r3, #1
 80099c2:	73fb      	strb	r3, [r7, #15]
    break;
 80099c4:	e005      	b.n	80099d2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80099c6:	2302      	movs	r3, #2
 80099c8:	73fb      	strb	r3, [r7, #15]
    break;
 80099ca:	e002      	b.n	80099d2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80099cc:	2302      	movs	r3, #2
 80099ce:	73fb      	strb	r3, [r7, #15]
    break;
 80099d0:	bf00      	nop
  }
  return usb_status;
 80099d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3714      	adds	r7, #20
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	4603      	mov	r3, r0
 80099e8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80099ea:	79fb      	ldrb	r3, [r7, #7]
 80099ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80099ee:	79fb      	ldrb	r3, [r7, #7]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d102      	bne.n	80099fa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80099f4:	2300      	movs	r3, #0
 80099f6:	73fb      	strb	r3, [r7, #15]
 80099f8:	e001      	b.n	80099fe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80099fa:	2301      	movs	r3, #1
 80099fc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80099fe:	7bfb      	ldrb	r3, [r7, #15]
 8009a00:	461a      	mov	r2, r3
 8009a02:	2101      	movs	r1, #1
 8009a04:	4803      	ldr	r0, [pc, #12]	; (8009a14 <MX_DriverVbusFS+0x34>)
 8009a06:	f7f8 fc13 	bl	8002230 <HAL_GPIO_WritePin>
}
 8009a0a:	bf00      	nop
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	40020800 	.word	0x40020800

08009a18 <__errno>:
 8009a18:	4b01      	ldr	r3, [pc, #4]	; (8009a20 <__errno+0x8>)
 8009a1a:	6818      	ldr	r0, [r3, #0]
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	20000034 	.word	0x20000034

08009a24 <__libc_init_array>:
 8009a24:	b570      	push	{r4, r5, r6, lr}
 8009a26:	4d0d      	ldr	r5, [pc, #52]	; (8009a5c <__libc_init_array+0x38>)
 8009a28:	4c0d      	ldr	r4, [pc, #52]	; (8009a60 <__libc_init_array+0x3c>)
 8009a2a:	1b64      	subs	r4, r4, r5
 8009a2c:	10a4      	asrs	r4, r4, #2
 8009a2e:	2600      	movs	r6, #0
 8009a30:	42a6      	cmp	r6, r4
 8009a32:	d109      	bne.n	8009a48 <__libc_init_array+0x24>
 8009a34:	4d0b      	ldr	r5, [pc, #44]	; (8009a64 <__libc_init_array+0x40>)
 8009a36:	4c0c      	ldr	r4, [pc, #48]	; (8009a68 <__libc_init_array+0x44>)
 8009a38:	f000 f92e 	bl	8009c98 <_init>
 8009a3c:	1b64      	subs	r4, r4, r5
 8009a3e:	10a4      	asrs	r4, r4, #2
 8009a40:	2600      	movs	r6, #0
 8009a42:	42a6      	cmp	r6, r4
 8009a44:	d105      	bne.n	8009a52 <__libc_init_array+0x2e>
 8009a46:	bd70      	pop	{r4, r5, r6, pc}
 8009a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a4c:	4798      	blx	r3
 8009a4e:	3601      	adds	r6, #1
 8009a50:	e7ee      	b.n	8009a30 <__libc_init_array+0xc>
 8009a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a56:	4798      	blx	r3
 8009a58:	3601      	adds	r6, #1
 8009a5a:	e7f2      	b.n	8009a42 <__libc_init_array+0x1e>
 8009a5c:	08009cd4 	.word	0x08009cd4
 8009a60:	08009cd4 	.word	0x08009cd4
 8009a64:	08009cd4 	.word	0x08009cd4
 8009a68:	08009cd8 	.word	0x08009cd8

08009a6c <malloc>:
 8009a6c:	4b02      	ldr	r3, [pc, #8]	; (8009a78 <malloc+0xc>)
 8009a6e:	4601      	mov	r1, r0
 8009a70:	6818      	ldr	r0, [r3, #0]
 8009a72:	f000 b87f 	b.w	8009b74 <_malloc_r>
 8009a76:	bf00      	nop
 8009a78:	20000034 	.word	0x20000034

08009a7c <free>:
 8009a7c:	4b02      	ldr	r3, [pc, #8]	; (8009a88 <free+0xc>)
 8009a7e:	4601      	mov	r1, r0
 8009a80:	6818      	ldr	r0, [r3, #0]
 8009a82:	f000 b80b 	b.w	8009a9c <_free_r>
 8009a86:	bf00      	nop
 8009a88:	20000034 	.word	0x20000034

08009a8c <memset>:
 8009a8c:	4402      	add	r2, r0
 8009a8e:	4603      	mov	r3, r0
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d100      	bne.n	8009a96 <memset+0xa>
 8009a94:	4770      	bx	lr
 8009a96:	f803 1b01 	strb.w	r1, [r3], #1
 8009a9a:	e7f9      	b.n	8009a90 <memset+0x4>

08009a9c <_free_r>:
 8009a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a9e:	2900      	cmp	r1, #0
 8009aa0:	d044      	beq.n	8009b2c <_free_r+0x90>
 8009aa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aa6:	9001      	str	r0, [sp, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f1a1 0404 	sub.w	r4, r1, #4
 8009aae:	bfb8      	it	lt
 8009ab0:	18e4      	addlt	r4, r4, r3
 8009ab2:	f000 f8e3 	bl	8009c7c <__malloc_lock>
 8009ab6:	4a1e      	ldr	r2, [pc, #120]	; (8009b30 <_free_r+0x94>)
 8009ab8:	9801      	ldr	r0, [sp, #4]
 8009aba:	6813      	ldr	r3, [r2, #0]
 8009abc:	b933      	cbnz	r3, 8009acc <_free_r+0x30>
 8009abe:	6063      	str	r3, [r4, #4]
 8009ac0:	6014      	str	r4, [r2, #0]
 8009ac2:	b003      	add	sp, #12
 8009ac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ac8:	f000 b8de 	b.w	8009c88 <__malloc_unlock>
 8009acc:	42a3      	cmp	r3, r4
 8009ace:	d908      	bls.n	8009ae2 <_free_r+0x46>
 8009ad0:	6825      	ldr	r5, [r4, #0]
 8009ad2:	1961      	adds	r1, r4, r5
 8009ad4:	428b      	cmp	r3, r1
 8009ad6:	bf01      	itttt	eq
 8009ad8:	6819      	ldreq	r1, [r3, #0]
 8009ada:	685b      	ldreq	r3, [r3, #4]
 8009adc:	1949      	addeq	r1, r1, r5
 8009ade:	6021      	streq	r1, [r4, #0]
 8009ae0:	e7ed      	b.n	8009abe <_free_r+0x22>
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	b10b      	cbz	r3, 8009aec <_free_r+0x50>
 8009ae8:	42a3      	cmp	r3, r4
 8009aea:	d9fa      	bls.n	8009ae2 <_free_r+0x46>
 8009aec:	6811      	ldr	r1, [r2, #0]
 8009aee:	1855      	adds	r5, r2, r1
 8009af0:	42a5      	cmp	r5, r4
 8009af2:	d10b      	bne.n	8009b0c <_free_r+0x70>
 8009af4:	6824      	ldr	r4, [r4, #0]
 8009af6:	4421      	add	r1, r4
 8009af8:	1854      	adds	r4, r2, r1
 8009afa:	42a3      	cmp	r3, r4
 8009afc:	6011      	str	r1, [r2, #0]
 8009afe:	d1e0      	bne.n	8009ac2 <_free_r+0x26>
 8009b00:	681c      	ldr	r4, [r3, #0]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	6053      	str	r3, [r2, #4]
 8009b06:	4421      	add	r1, r4
 8009b08:	6011      	str	r1, [r2, #0]
 8009b0a:	e7da      	b.n	8009ac2 <_free_r+0x26>
 8009b0c:	d902      	bls.n	8009b14 <_free_r+0x78>
 8009b0e:	230c      	movs	r3, #12
 8009b10:	6003      	str	r3, [r0, #0]
 8009b12:	e7d6      	b.n	8009ac2 <_free_r+0x26>
 8009b14:	6825      	ldr	r5, [r4, #0]
 8009b16:	1961      	adds	r1, r4, r5
 8009b18:	428b      	cmp	r3, r1
 8009b1a:	bf04      	itt	eq
 8009b1c:	6819      	ldreq	r1, [r3, #0]
 8009b1e:	685b      	ldreq	r3, [r3, #4]
 8009b20:	6063      	str	r3, [r4, #4]
 8009b22:	bf04      	itt	eq
 8009b24:	1949      	addeq	r1, r1, r5
 8009b26:	6021      	streq	r1, [r4, #0]
 8009b28:	6054      	str	r4, [r2, #4]
 8009b2a:	e7ca      	b.n	8009ac2 <_free_r+0x26>
 8009b2c:	b003      	add	sp, #12
 8009b2e:	bd30      	pop	{r4, r5, pc}
 8009b30:	20000954 	.word	0x20000954

08009b34 <sbrk_aligned>:
 8009b34:	b570      	push	{r4, r5, r6, lr}
 8009b36:	4e0e      	ldr	r6, [pc, #56]	; (8009b70 <sbrk_aligned+0x3c>)
 8009b38:	460c      	mov	r4, r1
 8009b3a:	6831      	ldr	r1, [r6, #0]
 8009b3c:	4605      	mov	r5, r0
 8009b3e:	b911      	cbnz	r1, 8009b46 <sbrk_aligned+0x12>
 8009b40:	f000 f88c 	bl	8009c5c <_sbrk_r>
 8009b44:	6030      	str	r0, [r6, #0]
 8009b46:	4621      	mov	r1, r4
 8009b48:	4628      	mov	r0, r5
 8009b4a:	f000 f887 	bl	8009c5c <_sbrk_r>
 8009b4e:	1c43      	adds	r3, r0, #1
 8009b50:	d00a      	beq.n	8009b68 <sbrk_aligned+0x34>
 8009b52:	1cc4      	adds	r4, r0, #3
 8009b54:	f024 0403 	bic.w	r4, r4, #3
 8009b58:	42a0      	cmp	r0, r4
 8009b5a:	d007      	beq.n	8009b6c <sbrk_aligned+0x38>
 8009b5c:	1a21      	subs	r1, r4, r0
 8009b5e:	4628      	mov	r0, r5
 8009b60:	f000 f87c 	bl	8009c5c <_sbrk_r>
 8009b64:	3001      	adds	r0, #1
 8009b66:	d101      	bne.n	8009b6c <sbrk_aligned+0x38>
 8009b68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	bd70      	pop	{r4, r5, r6, pc}
 8009b70:	20000958 	.word	0x20000958

08009b74 <_malloc_r>:
 8009b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b78:	1ccd      	adds	r5, r1, #3
 8009b7a:	f025 0503 	bic.w	r5, r5, #3
 8009b7e:	3508      	adds	r5, #8
 8009b80:	2d0c      	cmp	r5, #12
 8009b82:	bf38      	it	cc
 8009b84:	250c      	movcc	r5, #12
 8009b86:	2d00      	cmp	r5, #0
 8009b88:	4607      	mov	r7, r0
 8009b8a:	db01      	blt.n	8009b90 <_malloc_r+0x1c>
 8009b8c:	42a9      	cmp	r1, r5
 8009b8e:	d905      	bls.n	8009b9c <_malloc_r+0x28>
 8009b90:	230c      	movs	r3, #12
 8009b92:	603b      	str	r3, [r7, #0]
 8009b94:	2600      	movs	r6, #0
 8009b96:	4630      	mov	r0, r6
 8009b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b9c:	4e2e      	ldr	r6, [pc, #184]	; (8009c58 <_malloc_r+0xe4>)
 8009b9e:	f000 f86d 	bl	8009c7c <__malloc_lock>
 8009ba2:	6833      	ldr	r3, [r6, #0]
 8009ba4:	461c      	mov	r4, r3
 8009ba6:	bb34      	cbnz	r4, 8009bf6 <_malloc_r+0x82>
 8009ba8:	4629      	mov	r1, r5
 8009baa:	4638      	mov	r0, r7
 8009bac:	f7ff ffc2 	bl	8009b34 <sbrk_aligned>
 8009bb0:	1c43      	adds	r3, r0, #1
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	d14d      	bne.n	8009c52 <_malloc_r+0xde>
 8009bb6:	6834      	ldr	r4, [r6, #0]
 8009bb8:	4626      	mov	r6, r4
 8009bba:	2e00      	cmp	r6, #0
 8009bbc:	d140      	bne.n	8009c40 <_malloc_r+0xcc>
 8009bbe:	6823      	ldr	r3, [r4, #0]
 8009bc0:	4631      	mov	r1, r6
 8009bc2:	4638      	mov	r0, r7
 8009bc4:	eb04 0803 	add.w	r8, r4, r3
 8009bc8:	f000 f848 	bl	8009c5c <_sbrk_r>
 8009bcc:	4580      	cmp	r8, r0
 8009bce:	d13a      	bne.n	8009c46 <_malloc_r+0xd2>
 8009bd0:	6821      	ldr	r1, [r4, #0]
 8009bd2:	3503      	adds	r5, #3
 8009bd4:	1a6d      	subs	r5, r5, r1
 8009bd6:	f025 0503 	bic.w	r5, r5, #3
 8009bda:	3508      	adds	r5, #8
 8009bdc:	2d0c      	cmp	r5, #12
 8009bde:	bf38      	it	cc
 8009be0:	250c      	movcc	r5, #12
 8009be2:	4629      	mov	r1, r5
 8009be4:	4638      	mov	r0, r7
 8009be6:	f7ff ffa5 	bl	8009b34 <sbrk_aligned>
 8009bea:	3001      	adds	r0, #1
 8009bec:	d02b      	beq.n	8009c46 <_malloc_r+0xd2>
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	442b      	add	r3, r5
 8009bf2:	6023      	str	r3, [r4, #0]
 8009bf4:	e00e      	b.n	8009c14 <_malloc_r+0xa0>
 8009bf6:	6822      	ldr	r2, [r4, #0]
 8009bf8:	1b52      	subs	r2, r2, r5
 8009bfa:	d41e      	bmi.n	8009c3a <_malloc_r+0xc6>
 8009bfc:	2a0b      	cmp	r2, #11
 8009bfe:	d916      	bls.n	8009c2e <_malloc_r+0xba>
 8009c00:	1961      	adds	r1, r4, r5
 8009c02:	42a3      	cmp	r3, r4
 8009c04:	6025      	str	r5, [r4, #0]
 8009c06:	bf18      	it	ne
 8009c08:	6059      	strne	r1, [r3, #4]
 8009c0a:	6863      	ldr	r3, [r4, #4]
 8009c0c:	bf08      	it	eq
 8009c0e:	6031      	streq	r1, [r6, #0]
 8009c10:	5162      	str	r2, [r4, r5]
 8009c12:	604b      	str	r3, [r1, #4]
 8009c14:	4638      	mov	r0, r7
 8009c16:	f104 060b 	add.w	r6, r4, #11
 8009c1a:	f000 f835 	bl	8009c88 <__malloc_unlock>
 8009c1e:	f026 0607 	bic.w	r6, r6, #7
 8009c22:	1d23      	adds	r3, r4, #4
 8009c24:	1af2      	subs	r2, r6, r3
 8009c26:	d0b6      	beq.n	8009b96 <_malloc_r+0x22>
 8009c28:	1b9b      	subs	r3, r3, r6
 8009c2a:	50a3      	str	r3, [r4, r2]
 8009c2c:	e7b3      	b.n	8009b96 <_malloc_r+0x22>
 8009c2e:	6862      	ldr	r2, [r4, #4]
 8009c30:	42a3      	cmp	r3, r4
 8009c32:	bf0c      	ite	eq
 8009c34:	6032      	streq	r2, [r6, #0]
 8009c36:	605a      	strne	r2, [r3, #4]
 8009c38:	e7ec      	b.n	8009c14 <_malloc_r+0xa0>
 8009c3a:	4623      	mov	r3, r4
 8009c3c:	6864      	ldr	r4, [r4, #4]
 8009c3e:	e7b2      	b.n	8009ba6 <_malloc_r+0x32>
 8009c40:	4634      	mov	r4, r6
 8009c42:	6876      	ldr	r6, [r6, #4]
 8009c44:	e7b9      	b.n	8009bba <_malloc_r+0x46>
 8009c46:	230c      	movs	r3, #12
 8009c48:	603b      	str	r3, [r7, #0]
 8009c4a:	4638      	mov	r0, r7
 8009c4c:	f000 f81c 	bl	8009c88 <__malloc_unlock>
 8009c50:	e7a1      	b.n	8009b96 <_malloc_r+0x22>
 8009c52:	6025      	str	r5, [r4, #0]
 8009c54:	e7de      	b.n	8009c14 <_malloc_r+0xa0>
 8009c56:	bf00      	nop
 8009c58:	20000954 	.word	0x20000954

08009c5c <_sbrk_r>:
 8009c5c:	b538      	push	{r3, r4, r5, lr}
 8009c5e:	4d06      	ldr	r5, [pc, #24]	; (8009c78 <_sbrk_r+0x1c>)
 8009c60:	2300      	movs	r3, #0
 8009c62:	4604      	mov	r4, r0
 8009c64:	4608      	mov	r0, r1
 8009c66:	602b      	str	r3, [r5, #0]
 8009c68:	f7f7 ff14 	bl	8001a94 <_sbrk>
 8009c6c:	1c43      	adds	r3, r0, #1
 8009c6e:	d102      	bne.n	8009c76 <_sbrk_r+0x1a>
 8009c70:	682b      	ldr	r3, [r5, #0]
 8009c72:	b103      	cbz	r3, 8009c76 <_sbrk_r+0x1a>
 8009c74:	6023      	str	r3, [r4, #0]
 8009c76:	bd38      	pop	{r3, r4, r5, pc}
 8009c78:	2000095c 	.word	0x2000095c

08009c7c <__malloc_lock>:
 8009c7c:	4801      	ldr	r0, [pc, #4]	; (8009c84 <__malloc_lock+0x8>)
 8009c7e:	f000 b809 	b.w	8009c94 <__retarget_lock_acquire_recursive>
 8009c82:	bf00      	nop
 8009c84:	20000960 	.word	0x20000960

08009c88 <__malloc_unlock>:
 8009c88:	4801      	ldr	r0, [pc, #4]	; (8009c90 <__malloc_unlock+0x8>)
 8009c8a:	f000 b804 	b.w	8009c96 <__retarget_lock_release_recursive>
 8009c8e:	bf00      	nop
 8009c90:	20000960 	.word	0x20000960

08009c94 <__retarget_lock_acquire_recursive>:
 8009c94:	4770      	bx	lr

08009c96 <__retarget_lock_release_recursive>:
 8009c96:	4770      	bx	lr

08009c98 <_init>:
 8009c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9a:	bf00      	nop
 8009c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c9e:	bc08      	pop	{r3}
 8009ca0:	469e      	mov	lr, r3
 8009ca2:	4770      	bx	lr

08009ca4 <_fini>:
 8009ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca6:	bf00      	nop
 8009ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009caa:	bc08      	pop	{r3}
 8009cac:	469e      	mov	lr, r3
 8009cae:	4770      	bx	lr
