
final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c768  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800c8f0  0800c8f0  0001c8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c90c  0800c90c  00020290  2**0
                  CONTENTS
  4 .ARM          00000008  0800c90c  0800c90c  0001c90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c914  0800c914  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c914  0800c914  0001c914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c918  0800c918  0001c918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800c91c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020290  2**0
                  CONTENTS
 10 .bss          000009ac  20000290  20000290  00020290  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c3c  20000c3c  00020290  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 13 .debug_info   000221ab  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000498b  00000000  00000000  0004246b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b18  00000000  00000000  00046df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001968  00000000  00000000  00048910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000269fb  00000000  00000000  0004a278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002340c  00000000  00000000  00070c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3008  00000000  00000000  0009407f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00177087  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007770  00000000  00000000  001770d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000290 	.word	0x20000290
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c8d8 	.word	0x0800c8d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000294 	.word	0x20000294
 80001c4:	0800c8d8 	.word	0x0800c8d8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b28:	f000 b974 	b.w	8000e14 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9d08      	ldr	r5, [sp, #32]
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	468e      	mov	lr, r1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d14d      	bne.n	8000bee <__udivmoddi4+0xaa>
 8000b52:	428a      	cmp	r2, r1
 8000b54:	4694      	mov	ip, r2
 8000b56:	d969      	bls.n	8000c2c <__udivmoddi4+0xe8>
 8000b58:	fab2 f282 	clz	r2, r2
 8000b5c:	b152      	cbz	r2, 8000b74 <__udivmoddi4+0x30>
 8000b5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b62:	f1c2 0120 	rsb	r1, r2, #32
 8000b66:	fa20 f101 	lsr.w	r1, r0, r1
 8000b6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b72:	4094      	lsls	r4, r2
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	0c21      	lsrs	r1, r4, #16
 8000b7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b7e:	fa1f f78c 	uxth.w	r7, ip
 8000b82:	fb08 e316 	mls	r3, r8, r6, lr
 8000b86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b8a:	fb06 f107 	mul.w	r1, r6, r7
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	d90a      	bls.n	8000ba8 <__udivmoddi4+0x64>
 8000b92:	eb1c 0303 	adds.w	r3, ip, r3
 8000b96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b9a:	f080 811f 	bcs.w	8000ddc <__udivmoddi4+0x298>
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	f240 811c 	bls.w	8000ddc <__udivmoddi4+0x298>
 8000ba4:	3e02      	subs	r6, #2
 8000ba6:	4463      	add	r3, ip
 8000ba8:	1a5b      	subs	r3, r3, r1
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb8:	fb00 f707 	mul.w	r7, r0, r7
 8000bbc:	42a7      	cmp	r7, r4
 8000bbe:	d90a      	bls.n	8000bd6 <__udivmoddi4+0x92>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bc8:	f080 810a 	bcs.w	8000de0 <__udivmoddi4+0x29c>
 8000bcc:	42a7      	cmp	r7, r4
 8000bce:	f240 8107 	bls.w	8000de0 <__udivmoddi4+0x29c>
 8000bd2:	4464      	add	r4, ip
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	1be4      	subs	r4, r4, r7
 8000bdc:	2600      	movs	r6, #0
 8000bde:	b11d      	cbz	r5, 8000be8 <__udivmoddi4+0xa4>
 8000be0:	40d4      	lsrs	r4, r2
 8000be2:	2300      	movs	r3, #0
 8000be4:	e9c5 4300 	strd	r4, r3, [r5]
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	d909      	bls.n	8000c06 <__udivmoddi4+0xc2>
 8000bf2:	2d00      	cmp	r5, #0
 8000bf4:	f000 80ef 	beq.w	8000dd6 <__udivmoddi4+0x292>
 8000bf8:	2600      	movs	r6, #0
 8000bfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000bfe:	4630      	mov	r0, r6
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	fab3 f683 	clz	r6, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d14a      	bne.n	8000ca4 <__udivmoddi4+0x160>
 8000c0e:	428b      	cmp	r3, r1
 8000c10:	d302      	bcc.n	8000c18 <__udivmoddi4+0xd4>
 8000c12:	4282      	cmp	r2, r0
 8000c14:	f200 80f9 	bhi.w	8000e0a <__udivmoddi4+0x2c6>
 8000c18:	1a84      	subs	r4, r0, r2
 8000c1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c1e:	2001      	movs	r0, #1
 8000c20:	469e      	mov	lr, r3
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d0e0      	beq.n	8000be8 <__udivmoddi4+0xa4>
 8000c26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c2a:	e7dd      	b.n	8000be8 <__udivmoddi4+0xa4>
 8000c2c:	b902      	cbnz	r2, 8000c30 <__udivmoddi4+0xec>
 8000c2e:	deff      	udf	#255	; 0xff
 8000c30:	fab2 f282 	clz	r2, r2
 8000c34:	2a00      	cmp	r2, #0
 8000c36:	f040 8092 	bne.w	8000d5e <__udivmoddi4+0x21a>
 8000c3a:	eba1 010c 	sub.w	r1, r1, ip
 8000c3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c42:	fa1f fe8c 	uxth.w	lr, ip
 8000c46:	2601      	movs	r6, #1
 8000c48:	0c20      	lsrs	r0, r4, #16
 8000c4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c56:	fb0e f003 	mul.w	r0, lr, r3
 8000c5a:	4288      	cmp	r0, r1
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x12c>
 8000c5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x12a>
 8000c68:	4288      	cmp	r0, r1
 8000c6a:	f200 80cb 	bhi.w	8000e04 <__udivmoddi4+0x2c0>
 8000c6e:	4643      	mov	r3, r8
 8000c70:	1a09      	subs	r1, r1, r0
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c78:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c80:	fb0e fe00 	mul.w	lr, lr, r0
 8000c84:	45a6      	cmp	lr, r4
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x156>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c90:	d202      	bcs.n	8000c98 <__udivmoddi4+0x154>
 8000c92:	45a6      	cmp	lr, r4
 8000c94:	f200 80bb 	bhi.w	8000e0e <__udivmoddi4+0x2ca>
 8000c98:	4608      	mov	r0, r1
 8000c9a:	eba4 040e 	sub.w	r4, r4, lr
 8000c9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ca2:	e79c      	b.n	8000bde <__udivmoddi4+0x9a>
 8000ca4:	f1c6 0720 	rsb	r7, r6, #32
 8000ca8:	40b3      	lsls	r3, r6
 8000caa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000cb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000cba:	431c      	orrs	r4, r3
 8000cbc:	40f9      	lsrs	r1, r7
 8000cbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000cc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cca:	0c20      	lsrs	r0, r4, #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000cd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000cdc:	4288      	cmp	r0, r1
 8000cde:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce2:	d90b      	bls.n	8000cfc <__udivmoddi4+0x1b8>
 8000ce4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cec:	f080 8088 	bcs.w	8000e00 <__udivmoddi4+0x2bc>
 8000cf0:	4288      	cmp	r0, r1
 8000cf2:	f240 8085 	bls.w	8000e00 <__udivmoddi4+0x2bc>
 8000cf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cfa:	4461      	add	r1, ip
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d04:	fb09 1110 	mls	r1, r9, r0, r1
 8000d08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d10:	458e      	cmp	lr, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x1e2>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d1c:	d26c      	bcs.n	8000df8 <__udivmoddi4+0x2b4>
 8000d1e:	458e      	cmp	lr, r1
 8000d20:	d96a      	bls.n	8000df8 <__udivmoddi4+0x2b4>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d2e:	eba1 010e 	sub.w	r1, r1, lr
 8000d32:	42a1      	cmp	r1, r4
 8000d34:	46c8      	mov	r8, r9
 8000d36:	46a6      	mov	lr, r4
 8000d38:	d356      	bcc.n	8000de8 <__udivmoddi4+0x2a4>
 8000d3a:	d053      	beq.n	8000de4 <__udivmoddi4+0x2a0>
 8000d3c:	b15d      	cbz	r5, 8000d56 <__udivmoddi4+0x212>
 8000d3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d42:	eb61 010e 	sbc.w	r1, r1, lr
 8000d46:	fa01 f707 	lsl.w	r7, r1, r7
 8000d4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d4e:	40f1      	lsrs	r1, r6
 8000d50:	431f      	orrs	r7, r3
 8000d52:	e9c5 7100 	strd	r7, r1, [r5]
 8000d56:	2600      	movs	r6, #0
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	40d8      	lsrs	r0, r3
 8000d64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d68:	fa21 f303 	lsr.w	r3, r1, r3
 8000d6c:	4091      	lsls	r1, r2
 8000d6e:	4301      	orrs	r1, r0
 8000d70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d74:	fa1f fe8c 	uxth.w	lr, ip
 8000d78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d80:	0c0b      	lsrs	r3, r1, #16
 8000d82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d86:	fb00 f60e 	mul.w	r6, r0, lr
 8000d8a:	429e      	cmp	r6, r3
 8000d8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x260>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d9a:	d22f      	bcs.n	8000dfc <__udivmoddi4+0x2b8>
 8000d9c:	429e      	cmp	r6, r3
 8000d9e:	d92d      	bls.n	8000dfc <__udivmoddi4+0x2b8>
 8000da0:	3802      	subs	r0, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	1b9b      	subs	r3, r3, r6
 8000da6:	b289      	uxth	r1, r1
 8000da8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dac:	fb07 3316 	mls	r3, r7, r6, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb06 f30e 	mul.w	r3, r6, lr
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x28a>
 8000dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000dc4:	d216      	bcs.n	8000df4 <__udivmoddi4+0x2b0>
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d914      	bls.n	8000df4 <__udivmoddi4+0x2b0>
 8000dca:	3e02      	subs	r6, #2
 8000dcc:	4461      	add	r1, ip
 8000dce:	1ac9      	subs	r1, r1, r3
 8000dd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dd4:	e738      	b.n	8000c48 <__udivmoddi4+0x104>
 8000dd6:	462e      	mov	r6, r5
 8000dd8:	4628      	mov	r0, r5
 8000dda:	e705      	b.n	8000be8 <__udivmoddi4+0xa4>
 8000ddc:	4606      	mov	r6, r0
 8000dde:	e6e3      	b.n	8000ba8 <__udivmoddi4+0x64>
 8000de0:	4618      	mov	r0, r3
 8000de2:	e6f8      	b.n	8000bd6 <__udivmoddi4+0x92>
 8000de4:	454b      	cmp	r3, r9
 8000de6:	d2a9      	bcs.n	8000d3c <__udivmoddi4+0x1f8>
 8000de8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000df0:	3801      	subs	r0, #1
 8000df2:	e7a3      	b.n	8000d3c <__udivmoddi4+0x1f8>
 8000df4:	4646      	mov	r6, r8
 8000df6:	e7ea      	b.n	8000dce <__udivmoddi4+0x28a>
 8000df8:	4620      	mov	r0, r4
 8000dfa:	e794      	b.n	8000d26 <__udivmoddi4+0x1e2>
 8000dfc:	4640      	mov	r0, r8
 8000dfe:	e7d1      	b.n	8000da4 <__udivmoddi4+0x260>
 8000e00:	46d0      	mov	r8, sl
 8000e02:	e77b      	b.n	8000cfc <__udivmoddi4+0x1b8>
 8000e04:	3b02      	subs	r3, #2
 8000e06:	4461      	add	r1, ip
 8000e08:	e732      	b.n	8000c70 <__udivmoddi4+0x12c>
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	e709      	b.n	8000c22 <__udivmoddi4+0xde>
 8000e0e:	4464      	add	r4, ip
 8000e10:	3802      	subs	r0, #2
 8000e12:	e742      	b.n	8000c9a <__udivmoddi4+0x156>

08000e14 <__aeabi_idiv0>:
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1c:	f001 ffb4 	bl	8002d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e20:	f000 f842 	bl	8000ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e24:	f000 fada 	bl	80013dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e28:	f000 f94c 	bl	80010c4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000e2c:	f000 f978 	bl	8001120 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000e30:	f000 f9a6 	bl	8001180 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000e34:	f00b f908 	bl	800c048 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000e38:	f000 f9d8 	bl	80011ec <MX_TIM2_Init>
  MX_TIM4_Init();
 8000e3c:	f000 fa56 	bl	80012ec <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000e40:	f000 faa2 	bl	8001388 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e44:	f000 f89a 	bl	8000f7c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000e48:	f000 f8ea 	bl	8001020 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */


  set_Temp_Adc(&hadc1);
 8000e4c:	4810      	ldr	r0, [pc, #64]	; (8000e90 <main+0x78>)
 8000e4e:	f000 fc43 	bl	80016d8 <set_Temp_Adc>
  set_Co_Adc(&hadc2);
 8000e52:	4810      	ldr	r0, [pc, #64]	; (8000e94 <main+0x7c>)
 8000e54:	f000 fc50 	bl	80016f8 <set_Co_Adc>
  set_Adc_Uart(&huart2);
 8000e58:	480f      	ldr	r0, [pc, #60]	; (8000e98 <main+0x80>)
 8000e5a:	f000 fc5d 	bl	8001718 <set_Adc_Uart>

  adc_Init();
 8000e5e:	f000 fc6b 	bl	8001738 <adc_Init>

  set_Pwm_TIM(&htim2);
 8000e62:	480e      	ldr	r0, [pc, #56]	; (8000e9c <main+0x84>)
 8000e64:	f001 f932 	bl	80020cc <set_Pwm_TIM>
  set_Pid_TIM(&htim4);
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <main+0x88>)
 8000e6a:	f001 f93f 	bl	80020ec <set_Pid_TIM>
  set_Pid_Uart(&huart2);
 8000e6e:	480a      	ldr	r0, [pc, #40]	; (8000e98 <main+0x80>)
 8000e70:	f001 f94c 	bl	800210c <set_Pid_Uart>

  pid_Init();
 8000e74:	f001 f95a 	bl	800212c <pid_Init>

  HAL_UART_Receive_IT(&huart2, rx_Data, 10);
 8000e78:	220a      	movs	r2, #10
 8000e7a:	490a      	ldr	r1, [pc, #40]	; (8000ea4 <main+0x8c>)
 8000e7c:	4806      	ldr	r0, [pc, #24]	; (8000e98 <main+0x80>)
 8000e7e:	f007 f976 	bl	800816e <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e82:	f00b f907 	bl	800c094 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_Delay(500);
 8000e86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e8a:	f001 ffef 	bl	8002e6c <HAL_Delay>
    MX_USB_HOST_Process();
 8000e8e:	e7f8      	b.n	8000e82 <main+0x6a>
 8000e90:	200002ac 	.word	0x200002ac
 8000e94:	200002f4 	.word	0x200002f4
 8000e98:	200004c0 	.word	0x200004c0
 8000e9c:	20000430 	.word	0x20000430
 8000ea0:	20000478 	.word	0x20000478
 8000ea4:	2000053c 	.word	0x2000053c

08000ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b094      	sub	sp, #80	; 0x50
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 0320 	add.w	r3, r7, #32
 8000eb2:	2230      	movs	r2, #48	; 0x30
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f00b fc08 	bl	800c6cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <SystemClock_Config+0xcc>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	4a27      	ldr	r2, [pc, #156]	; (8000f74 <SystemClock_Config+0xcc>)
 8000ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eda:	6413      	str	r3, [r2, #64]	; 0x40
 8000edc:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <SystemClock_Config+0xcc>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee8:	2300      	movs	r3, #0
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <SystemClock_Config+0xd0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a21      	ldr	r2, [pc, #132]	; (8000f78 <SystemClock_Config+0xd0>)
 8000ef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <SystemClock_Config+0xd0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f04:	2301      	movs	r3, #1
 8000f06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f1c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f26:	2307      	movs	r3, #7
 8000f28:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f005 f904 	bl	800613c <HAL_RCC_OscConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f3a:	f000 fbc7 	bl	80016cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3e:	230f      	movs	r3, #15
 8000f40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f42:	2302      	movs	r3, #2
 8000f44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000f50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	2105      	movs	r1, #5
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f005 fb65 	bl	800662c <HAL_RCC_ClockConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f68:	f000 fbb0 	bl	80016cc <Error_Handler>
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3750      	adds	r7, #80	; 0x50
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40007000 	.word	0x40007000

08000f7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f82:	463b      	mov	r3, r7
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <MX_ADC1_Init+0x98>)
 8000f90:	4a21      	ldr	r2, [pc, #132]	; (8001018 <MX_ADC1_Init+0x9c>)
 8000f92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <MX_ADC1_Init+0x98>)
 8000f96:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <MX_ADC1_Init+0x98>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <MX_ADC1_Init+0x98>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb6:	4b17      	ldr	r3, [pc, #92]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fbe:	4a17      	ldr	r2, [pc, #92]	; (800101c <MX_ADC1_Init+0xa0>)
 8000fc0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fde:	f001 ff69 	bl	8002eb4 <HAL_ADC_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fe8:	f000 fb70 	bl	80016cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fec:	2308      	movs	r3, #8
 8000fee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_ADC1_Init+0x98>)
 8000ffe:	f002 f907 	bl	8003210 <HAL_ADC_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001008:	f000 fb60 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200002ac 	.word	0x200002ac
 8001018:	40012000 	.word	0x40012000
 800101c:	0f000001 	.word	0x0f000001

08001020 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001026:	463b      	mov	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001032:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <MX_ADC2_Init+0x98>)
 8001034:	4a21      	ldr	r2, [pc, #132]	; (80010bc <MX_ADC2_Init+0x9c>)
 8001036:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <MX_ADC2_Init+0x98>)
 800103a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800103e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <MX_ADC2_Init+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <MX_ADC2_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <MX_ADC2_Init+0x98>)
 800104e:	2200      	movs	r2, #0
 8001050:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_ADC2_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <MX_ADC2_Init+0x98>)
 800105c:	2200      	movs	r2, #0
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001060:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <MX_ADC2_Init+0x98>)
 8001062:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <MX_ADC2_Init+0xa0>)
 8001064:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MX_ADC2_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_ADC2_Init+0x98>)
 800106e:	2201      	movs	r2, #1
 8001070:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_ADC2_Init+0x98>)
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_ADC2_Init+0x98>)
 800107c:	2201      	movs	r2, #1
 800107e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <MX_ADC2_Init+0x98>)
 8001082:	f001 ff17 	bl	8002eb4 <HAL_ADC_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800108c:	f000 fb1e 	bl	80016cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001090:	2309      	movs	r3, #9
 8001092:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001094:	2301      	movs	r3, #1
 8001096:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800109c:	463b      	mov	r3, r7
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_ADC2_Init+0x98>)
 80010a2:	f002 f8b5 	bl	8003210 <HAL_ADC_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80010ac:	f000 fb0e 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200002f4 	.word	0x200002f4
 80010bc:	40012100 	.word	0x40012100
 80010c0:	0f000001 	.word	0x0f000001

080010c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_I2C1_Init+0x50>)
 80010ca:	4a13      	ldr	r2, [pc, #76]	; (8001118 <MX_I2C1_Init+0x54>)
 80010cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_I2C1_Init+0x50>)
 80010d0:	4a12      	ldr	r2, [pc, #72]	; (800111c <MX_I2C1_Init+0x58>)
 80010d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_I2C1_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_I2C1_Init+0x50>)
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_I2C1_Init+0x50>)
 80010e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <MX_I2C1_Init+0x50>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_I2C1_Init+0x50>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <MX_I2C1_Init+0x50>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_I2C1_Init+0x50>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <MX_I2C1_Init+0x50>)
 8001102:	f004 fa37 	bl	8005574 <HAL_I2C_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800110c:	f000 fade 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000033c 	.word	0x2000033c
 8001118:	40005400 	.word	0x40005400
 800111c:	000186a0 	.word	0x000186a0

08001120 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <MX_I2S3_Init+0x54>)
 8001126:	4a14      	ldr	r2, [pc, #80]	; (8001178 <MX_I2S3_Init+0x58>)
 8001128:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <MX_I2S3_Init+0x54>)
 800112c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001130:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <MX_I2S3_Init+0x54>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_I2S3_Init+0x54>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <MX_I2S3_Init+0x54>)
 8001140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001144:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <MX_I2S3_Init+0x54>)
 8001148:	4a0c      	ldr	r2, [pc, #48]	; (800117c <MX_I2S3_Init+0x5c>)
 800114a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_I2S3_Init+0x54>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <MX_I2S3_Init+0x54>)
 8001154:	2200      	movs	r2, #0
 8001156:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_I2S3_Init+0x54>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_I2S3_Init+0x54>)
 8001160:	f004 fb4c 	bl	80057fc <HAL_I2S_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800116a:	f000 faaf 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000390 	.word	0x20000390
 8001178:	40003c00 	.word	0x40003c00
 800117c:	00017700 	.word	0x00017700

08001180 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_SPI1_Init+0x64>)
 8001186:	4a18      	ldr	r2, [pc, #96]	; (80011e8 <MX_SPI1_Init+0x68>)
 8001188:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <MX_SPI1_Init+0x64>)
 800118c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001190:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_SPI1_Init+0x64>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <MX_SPI1_Init+0x64>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_SPI1_Init+0x64>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_SPI1_Init+0x64>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_SPI1_Init+0x64>)
 80011ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_SPI1_Init+0x64>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <MX_SPI1_Init+0x64>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_SPI1_Init+0x64>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <MX_SPI1_Init+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_SPI1_Init+0x64>)
 80011cc:	220a      	movs	r2, #10
 80011ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	; (80011e4 <MX_SPI1_Init+0x64>)
 80011d2:	f005 fd8b 	bl	8006cec <HAL_SPI_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011dc:	f000 fa76 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200003d8 	.word	0x200003d8
 80011e8:	40013000 	.word	0x40013000

080011ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08e      	sub	sp, #56	; 0x38
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001200:	f107 0320 	add.w	r3, r7, #32
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
 8001218:	615a      	str	r2, [r3, #20]
 800121a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800121c:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <MX_TIM2_Init+0xfc>)
 800121e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001222:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84 - 1;
 8001224:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <MX_TIM2_Init+0xfc>)
 8001226:	2253      	movs	r2, #83	; 0x53
 8001228:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122a:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <MX_TIM2_Init+0xfc>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 8001230:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <MX_TIM2_Init+0xfc>)
 8001232:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001236:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001238:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <MX_TIM2_Init+0xfc>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800123e:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <MX_TIM2_Init+0xfc>)
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001244:	4828      	ldr	r0, [pc, #160]	; (80012e8 <MX_TIM2_Init+0xfc>)
 8001246:	f005 fdda 	bl	8006dfe <HAL_TIM_Base_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001250:	f000 fa3c 	bl	80016cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800125a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800125e:	4619      	mov	r1, r3
 8001260:	4821      	ldr	r0, [pc, #132]	; (80012e8 <MX_TIM2_Init+0xfc>)
 8001262:	f006 fa15 	bl	8007690 <HAL_TIM_ConfigClockSource>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800126c:	f000 fa2e 	bl	80016cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001270:	481d      	ldr	r0, [pc, #116]	; (80012e8 <MX_TIM2_Init+0xfc>)
 8001272:	f005 feb2 	bl	8006fda <HAL_TIM_PWM_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800127c:	f000 fa26 	bl	80016cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001288:	f107 0320 	add.w	r3, r7, #32
 800128c:	4619      	mov	r1, r3
 800128e:	4816      	ldr	r0, [pc, #88]	; (80012e8 <MX_TIM2_Init+0xfc>)
 8001290:	f006 fdfe 	bl	8007e90 <HAL_TIMEx_MasterConfigSynchronization>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800129a:	f000 fa17 	bl	80016cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800129e:	2360      	movs	r3, #96	; 0x60
 80012a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2200      	movs	r2, #0
 80012b2:	4619      	mov	r1, r3
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <MX_TIM2_Init+0xfc>)
 80012b6:	f006 f929 	bl	800750c <HAL_TIM_PWM_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80012c0:	f000 fa04 	bl	80016cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2204      	movs	r2, #4
 80012c8:	4619      	mov	r1, r3
 80012ca:	4807      	ldr	r0, [pc, #28]	; (80012e8 <MX_TIM2_Init+0xfc>)
 80012cc:	f006 f91e 	bl	800750c <HAL_TIM_PWM_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80012d6:	f000 f9f9 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012da:	4803      	ldr	r0, [pc, #12]	; (80012e8 <MX_TIM2_Init+0xfc>)
 80012dc:	f000 fdd2 	bl	8001e84 <HAL_TIM_MspPostInit>

}
 80012e0:	bf00      	nop
 80012e2:	3738      	adds	r7, #56	; 0x38
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000430 	.word	0x20000430

080012ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	463b      	mov	r3, r7
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001308:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <MX_TIM4_Init+0x94>)
 800130a:	4a1e      	ldr	r2, [pc, #120]	; (8001384 <MX_TIM4_Init+0x98>)
 800130c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = (84*100) - 1;
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <MX_TIM4_Init+0x94>)
 8001310:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001314:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <MX_TIM4_Init+0x94>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000 - 1;
 800131c:	4b18      	ldr	r3, [pc, #96]	; (8001380 <MX_TIM4_Init+0x94>)
 800131e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001322:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <MX_TIM4_Init+0x94>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <MX_TIM4_Init+0x94>)
 800132c:	2280      	movs	r2, #128	; 0x80
 800132e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001330:	4813      	ldr	r0, [pc, #76]	; (8001380 <MX_TIM4_Init+0x94>)
 8001332:	f005 fd64 	bl	8006dfe <HAL_TIM_Base_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800133c:	f000 f9c6 	bl	80016cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001344:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	4619      	mov	r1, r3
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <MX_TIM4_Init+0x94>)
 800134e:	f006 f99f 	bl	8007690 <HAL_TIM_ConfigClockSource>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001358:	f000 f9b8 	bl	80016cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001364:	463b      	mov	r3, r7
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_TIM4_Init+0x94>)
 800136a:	f006 fd91 	bl	8007e90 <HAL_TIMEx_MasterConfigSynchronization>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001374:	f000 f9aa 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000478 	.word	0x20000478
 8001384:	40000800 	.word	0x40000800

08001388 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_USART2_UART_Init+0x4c>)
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <MX_USART2_UART_Init+0x50>)
 8001390:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <MX_USART2_UART_Init+0x4c>)
 8001394:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001398:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_USART2_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013ae:	220c      	movs	r2, #12
 80013b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013c0:	f006 fdf6 	bl	8007fb0 <HAL_UART_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ca:	f000 f97f 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200004c0 	.word	0x200004c0
 80013d8:	40004400 	.word	0x40004400

080013dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08c      	sub	sp, #48	; 0x30
 80013e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	4b97      	ldr	r3, [pc, #604]	; (8001654 <MX_GPIO_Init+0x278>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a96      	ldr	r2, [pc, #600]	; (8001654 <MX_GPIO_Init+0x278>)
 80013fc:	f043 0310 	orr.w	r3, r3, #16
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b94      	ldr	r3, [pc, #592]	; (8001654 <MX_GPIO_Init+0x278>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	61bb      	str	r3, [r7, #24]
 800140c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	4b90      	ldr	r3, [pc, #576]	; (8001654 <MX_GPIO_Init+0x278>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a8f      	ldr	r2, [pc, #572]	; (8001654 <MX_GPIO_Init+0x278>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b8d      	ldr	r3, [pc, #564]	; (8001654 <MX_GPIO_Init+0x278>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b89      	ldr	r3, [pc, #548]	; (8001654 <MX_GPIO_Init+0x278>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a88      	ldr	r2, [pc, #544]	; (8001654 <MX_GPIO_Init+0x278>)
 8001434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b86      	ldr	r3, [pc, #536]	; (8001654 <MX_GPIO_Init+0x278>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b82      	ldr	r3, [pc, #520]	; (8001654 <MX_GPIO_Init+0x278>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a81      	ldr	r2, [pc, #516]	; (8001654 <MX_GPIO_Init+0x278>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b7f      	ldr	r3, [pc, #508]	; (8001654 <MX_GPIO_Init+0x278>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	4b7b      	ldr	r3, [pc, #492]	; (8001654 <MX_GPIO_Init+0x278>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a7a      	ldr	r2, [pc, #488]	; (8001654 <MX_GPIO_Init+0x278>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b78      	ldr	r3, [pc, #480]	; (8001654 <MX_GPIO_Init+0x278>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b74      	ldr	r3, [pc, #464]	; (8001654 <MX_GPIO_Init+0x278>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a73      	ldr	r2, [pc, #460]	; (8001654 <MX_GPIO_Init+0x278>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b71      	ldr	r3, [pc, #452]	; (8001654 <MX_GPIO_Init+0x278>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800149a:	2200      	movs	r2, #0
 800149c:	21f8      	movs	r1, #248	; 0xf8
 800149e:	486e      	ldr	r0, [pc, #440]	; (8001658 <MX_GPIO_Init+0x27c>)
 80014a0:	f002 fc2c 	bl	8003cfc <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	2101      	movs	r1, #1
 80014a8:	486c      	ldr	r0, [pc, #432]	; (800165c <MX_GPIO_Init+0x280>)
 80014aa:	f002 fc27 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f24e 0110 	movw	r1, #57360	; 0xe010
 80014b4:	486a      	ldr	r0, [pc, #424]	; (8001660 <MX_GPIO_Init+0x284>)
 80014b6:	f002 fc21 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014ba:	2308      	movs	r3, #8
 80014bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	4861      	ldr	r0, [pc, #388]	; (8001658 <MX_GPIO_Init+0x27c>)
 80014d2:	f002 fa5f 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE6 PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014d6:	23f0      	movs	r3, #240	; 0xf0
 80014d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014de:	2302      	movs	r3, #2
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	485a      	ldr	r0, [pc, #360]	; (8001658 <MX_GPIO_Init+0x27c>)
 80014ee:	f002 fa51 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80014f2:	2301      	movs	r3, #1
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	4619      	mov	r1, r3
 8001508:	4854      	ldr	r0, [pc, #336]	; (800165c <MX_GPIO_Init+0x280>)
 800150a:	f002 fa43 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800150e:	2308      	movs	r3, #8
 8001510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800151e:	2305      	movs	r3, #5
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	4619      	mov	r1, r3
 8001528:	484c      	ldr	r0, [pc, #304]	; (800165c <MX_GPIO_Init+0x280>)
 800152a:	f002 fa33 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800152e:	2301      	movs	r3, #1
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	4619      	mov	r1, r3
 8001540:	4848      	ldr	r0, [pc, #288]	; (8001664 <MX_GPIO_Init+0x288>)
 8001542:	f002 fa27 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001546:	2304      	movs	r3, #4
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4619      	mov	r1, r3
 8001558:	4843      	ldr	r0, [pc, #268]	; (8001668 <MX_GPIO_Init+0x28c>)
 800155a:	f002 fa1b 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800155e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001570:	2305      	movs	r3, #5
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	483b      	ldr	r0, [pc, #236]	; (8001668 <MX_GPIO_Init+0x28c>)
 800157c:	f002 fa0a 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001586:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800158a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800158c:	2302      	movs	r3, #2
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	4619      	mov	r1, r3
 8001596:	4834      	ldr	r0, [pc, #208]	; (8001668 <MX_GPIO_Init+0x28c>)
 8001598:	f002 f9fc 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800159c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015a6:	2302      	movs	r3, #2
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	482d      	ldr	r0, [pc, #180]	; (8001668 <MX_GPIO_Init+0x28c>)
 80015b2:	f002 f9ef 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015bc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80015c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015c2:	2302      	movs	r3, #2
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	4824      	ldr	r0, [pc, #144]	; (8001660 <MX_GPIO_Init+0x284>)
 80015ce:	f002 f9e1 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015dc:	2302      	movs	r3, #2
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4619      	mov	r1, r3
 80015e6:	481e      	ldr	r0, [pc, #120]	; (8001660 <MX_GPIO_Init+0x284>)
 80015e8:	f002 f9d4 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
 80015ec:	f24e 0310 	movw	r3, #57360	; 0xe010
 80015f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f2:	2301      	movs	r3, #1
 80015f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	4619      	mov	r1, r3
 8001604:	4816      	ldr	r0, [pc, #88]	; (8001660 <MX_GPIO_Init+0x284>)
 8001606:	f002 f9c5 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800160a:	2320      	movs	r3, #32
 800160c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	4619      	mov	r1, r3
 800161c:	4810      	ldr	r0, [pc, #64]	; (8001660 <MX_GPIO_Init+0x284>)
 800161e:	f002 f9b9 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001622:	2302      	movs	r3, #2
 8001624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001626:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800162a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	4619      	mov	r1, r3
 8001636:	4808      	ldr	r0, [pc, #32]	; (8001658 <MX_GPIO_Init+0x27c>)
 8001638:	f002 f9ac 	bl	8003994 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2028      	movs	r0, #40	; 0x28
 8001642:	f002 f8de 	bl	8003802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001646:	2028      	movs	r0, #40	; 0x28
 8001648:	f002 f8f7 	bl	800383a <HAL_NVIC_EnableIRQ>

}
 800164c:	bf00      	nop
 800164e:	3730      	adds	r7, #48	; 0x30
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40023800 	.word	0x40023800
 8001658:	40021000 	.word	0x40021000
 800165c:	40020800 	.word	0x40020800
 8001660:	40020c00 	.word	0x40020c00
 8001664:	40020000 	.word	0x40020000
 8001668:	40020400 	.word	0x40020400

0800166c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <HAL_UART_RxCpltCallback+0x58>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d11e      	bne.n	80016bc <HAL_UART_RxCpltCallback+0x50>

		if(rx_Data[0] == 255 && rx_Data[9] == 254){
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_UART_RxCpltCallback+0x5c>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2bff      	cmp	r3, #255	; 0xff
 8001684:	d10b      	bne.n	800169e <HAL_UART_RxCpltCallback+0x32>
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <HAL_UART_RxCpltCallback+0x5c>)
 8001688:	7a5b      	ldrb	r3, [r3, #9]
 800168a:	2bfe      	cmp	r3, #254	; 0xfe
 800168c:	d107      	bne.n	800169e <HAL_UART_RxCpltCallback+0x32>

		pid_Start(rx_Data[1],rx_Data[2]);
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <HAL_UART_RxCpltCallback+0x5c>)
 8001690:	785b      	ldrb	r3, [r3, #1]
 8001692:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <HAL_UART_RxCpltCallback+0x5c>)
 8001694:	7892      	ldrb	r2, [r2, #2]
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f000 fdaf 	bl	80021fc <pid_Start>

		}

		for(int i = 0; i < 10; i++){
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	e007      	b.n	80016b4 <HAL_UART_RxCpltCallback+0x48>
				rx_Data[i] = 0;
 80016a4:	4a08      	ldr	r2, [pc, #32]	; (80016c8 <HAL_UART_RxCpltCallback+0x5c>)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4413      	add	r3, r2
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 10; i++){
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3301      	adds	r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b09      	cmp	r3, #9
 80016b8:	ddf4      	ble.n	80016a4 <HAL_UART_RxCpltCallback+0x38>
			}
		//HAL_UART_Receive_IT(pid_Uart, rx_Data, 10);
	}

	return;
 80016ba:	bf00      	nop
 80016bc:	bf00      	nop
}
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40004400 	.word	0x40004400
 80016c8:	2000053c 	.word	0x2000053c

080016cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d0:	b672      	cpsid	i
}
 80016d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <Error_Handler+0x8>
	...

080016d8 <set_Temp_Adc>:
		{60, 3000},
		{70, 2210},
		{80, 1660}
};

void set_Temp_Adc(ADC_HandleTypeDef *adc){
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	temperature_Adc = adc;
 80016e0:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <set_Temp_Adc+0x1c>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]

	return;
 80016e6:	bf00      	nop
}
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000504 	.word	0x20000504

080016f8 <set_Co_Adc>:

void set_Co_Adc(ADC_HandleTypeDef *adc){
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	co_Adc = adc;
 8001700:	4a04      	ldr	r2, [pc, #16]	; (8001714 <set_Co_Adc+0x1c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]

	return;
 8001706:	bf00      	nop
}
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000508 	.word	0x20000508

08001718 <set_Adc_Uart>:

void set_Adc_Uart(UART_HandleTypeDef *uart){
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	adc_Uart = uart;
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <set_Adc_Uart+0x1c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]

	return;
 8001726:	bf00      	nop
}
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	2000050c 	.word	0x2000050c

08001738 <adc_Init>:

void adc_Init(){
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0

	for(int i = 0; i < 10; i++){
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	e007      	b.n	8001754 <adc_Init+0x1c>
		tx_Data[i] = 0;
 8001744:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <adc_Init+0x3c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 10; i++){
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3301      	adds	r3, #1
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b09      	cmp	r3, #9
 8001758:	ddf4      	ble.n	8001744 <adc_Init+0xc>
	}

	tx_Data[0] = 255;
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <adc_Init+0x3c>)
 800175c:	22ff      	movs	r2, #255	; 0xff
 800175e:	701a      	strb	r2, [r3, #0]
	tx_Data[9] = 254;
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <adc_Init+0x3c>)
 8001762:	22fe      	movs	r2, #254	; 0xfe
 8001764:	725a      	strb	r2, [r3, #9]

	return;
 8001766:	bf00      	nop
}
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000510 	.word	0x20000510

08001778 <adc_Capture>:

void adc_Capture(){
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
	float raw;

	HAL_ADC_Start(co_Adc);
 800177e:	4b34      	ldr	r3, [pc, #208]	; (8001850 <adc_Capture+0xd8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f001 fbda 	bl	8002f3c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(co_Adc, HAL_MAX_DELAY);
 8001788:	4b31      	ldr	r3, [pc, #196]	; (8001850 <adc_Capture+0xd8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001790:	4618      	mov	r0, r3
 8001792:	f001 fca5 	bl	80030e0 <HAL_ADC_PollForConversion>

	raw = HAL_ADC_GetValue(co_Adc);
 8001796:	4b2e      	ldr	r3, [pc, #184]	; (8001850 <adc_Capture+0xd8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f001 fd2b 	bl	80031f6 <HAL_ADC_GetValue>
 80017a0:	ee07 0a90 	vmov	s15, r0
 80017a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017a8:	edc7 7a01 	vstr	s15, [r7, #4]

	co_Concentration_Transfer(tx_Data, raw);
 80017ac:	ed97 0a01 	vldr	s0, [r7, #4]
 80017b0:	4828      	ldr	r0, [pc, #160]	; (8001854 <adc_Capture+0xdc>)
 80017b2:	f000 f855 	bl	8001860 <co_Concentration_Transfer>
	HAL_UART_Transmit(adc_Uart, tx_Data, 10, 0xffff);
 80017b6:	4b28      	ldr	r3, [pc, #160]	; (8001858 <adc_Capture+0xe0>)
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017be:	220a      	movs	r2, #10
 80017c0:	4924      	ldr	r1, [pc, #144]	; (8001854 <adc_Capture+0xdc>)
 80017c2:	f006 fc42 	bl	800804a <HAL_UART_Transmit>

	for(int i = 1; i < 9; i++){
 80017c6:	2301      	movs	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	e007      	b.n	80017dc <adc_Capture+0x64>
		tx_Data[i] = 0;
 80017cc:	4a21      	ldr	r2, [pc, #132]	; (8001854 <adc_Capture+0xdc>)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4413      	add	r3, r2
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < 9; i++){
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3301      	adds	r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b08      	cmp	r3, #8
 80017e0:	ddf4      	ble.n	80017cc <adc_Capture+0x54>
	}

	HAL_ADC_Start(temperature_Adc);
 80017e2:	4b1e      	ldr	r3, [pc, #120]	; (800185c <adc_Capture+0xe4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f001 fba8 	bl	8002f3c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(temperature_Adc, HAL_MAX_DELAY);
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <adc_Capture+0xe4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017f4:	4618      	mov	r0, r3
 80017f6:	f001 fc73 	bl	80030e0 <HAL_ADC_PollForConversion>

	raw = HAL_ADC_GetValue(temperature_Adc);
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <adc_Capture+0xe4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f001 fcf9 	bl	80031f6 <HAL_ADC_GetValue>
 8001804:	ee07 0a90 	vmov	s15, r0
 8001808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800180c:	edc7 7a01 	vstr	s15, [r7, #4]

	temp_Transfer(tx_Data, raw);
 8001810:	ed97 0a01 	vldr	s0, [r7, #4]
 8001814:	480f      	ldr	r0, [pc, #60]	; (8001854 <adc_Capture+0xdc>)
 8001816:	f000 f8a5 	bl	8001964 <temp_Transfer>
	HAL_UART_Transmit(adc_Uart, tx_Data, 10, 0xffff);
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <adc_Capture+0xe0>)
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001822:	220a      	movs	r2, #10
 8001824:	490b      	ldr	r1, [pc, #44]	; (8001854 <adc_Capture+0xdc>)
 8001826:	f006 fc10 	bl	800804a <HAL_UART_Transmit>

	for(int i = 1; i < 9; i++){
 800182a:	2301      	movs	r3, #1
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	e007      	b.n	8001840 <adc_Capture+0xc8>
		tx_Data[i] = 0;
 8001830:	4a08      	ldr	r2, [pc, #32]	; (8001854 <adc_Capture+0xdc>)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	4413      	add	r3, r2
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < 9; i++){
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	3301      	adds	r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	2b08      	cmp	r3, #8
 8001844:	ddf4      	ble.n	8001830 <adc_Capture+0xb8>
	}

	return;
 8001846:	bf00      	nop
}
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000508 	.word	0x20000508
 8001854:	20000510 	.word	0x20000510
 8001858:	2000050c 	.word	0x2000050c
 800185c:	20000504 	.word	0x20000504

08001860 <co_Concentration_Transfer>:

void co_Concentration_Transfer(uint8_t *msg, float raw){
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	ed87 0a00 	vstr	s0, [r7]
	float voltage = raw*voltage_Unit;
 800186c:	4b38      	ldr	r3, [pc, #224]	; (8001950 <co_Concentration_Transfer+0xf0>)
 800186e:	edd3 7a00 	vldr	s15, [r3]
 8001872:	ed97 7a00 	vldr	s14, [r7]
 8001876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800187a:	edc7 7a07 	vstr	s15, [r7, #28]

	float current = voltage/1000;
 800187e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001882:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001954 <co_Concentration_Transfer+0xf4>
 8001886:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800188a:	edc7 7a06 	vstr	s15, [r7, #24]

	float Rs = (5 - voltage)/current;
 800188e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001892:	edd7 7a07 	vldr	s15, [r7, #28]
 8001896:	ee77 6a67 	vsub.f32	s13, s14, s15
 800189a:	ed97 7a06 	vldr	s14, [r7, #24]
 800189e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018a2:	edc7 7a05 	vstr	s15, [r7, #20]

	co_Concentration = ((((Rs/5041.237) - 1.8)/(0.8 - 1.8))*(1000 - 200)) + 200;
 80018a6:	6978      	ldr	r0, [r7, #20]
 80018a8:	f7fe fdf2 	bl	8000490 <__aeabi_f2d>
 80018ac:	a324      	add	r3, pc, #144	; (adr r3, 8001940 <co_Concentration_Transfer+0xe0>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	f7fe ff6f 	bl	8000794 <__aeabi_ddiv>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	a322      	add	r3, pc, #136	; (adr r3, 8001948 <co_Concentration_Transfer+0xe8>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe fc84 	bl	80001d0 <__aeabi_dsub>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4614      	mov	r4, r2
 80018ce:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	4b20      	ldr	r3, [pc, #128]	; (8001958 <co_Concentration_Transfer+0xf8>)
 80018d8:	4620      	mov	r0, r4
 80018da:	4629      	mov	r1, r5
 80018dc:	f7fe fe30 	bl	8000540 <__aeabi_dmul>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <co_Concentration_Transfer+0xfc>)
 80018ee:	f7fe fc71 	bl	80001d4 <__adddf3>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f7ff f8bb 	bl	8000a74 <__aeabi_d2f>
 80018fe:	4603      	mov	r3, r0
 8001900:	4a17      	ldr	r2, [pc, #92]	; (8001960 <co_Concentration_Transfer+0x100>)
 8001902:	6013      	str	r3, [r2, #0]

	int ppm = (int)co_Concentration;
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <co_Concentration_Transfer+0x100>)
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800190e:	ee17 3a90 	vmov	r3, s15
 8001912:	613b      	str	r3, [r7, #16]

	uint16_t data = (uint16_t)ppm;
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	81fb      	strh	r3, [r7, #14]

	msg[1] = 10;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3301      	adds	r3, #1
 800191c:	220a      	movs	r2, #10
 800191e:	701a      	strb	r2, [r3, #0]
	msg[3] = (data & 0xff);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3303      	adds	r3, #3
 8001924:	89fa      	ldrh	r2, [r7, #14]
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	701a      	strb	r2, [r3, #0]
	msg[2] = ((data >> 8) & 0xff);
 800192a:	89fb      	ldrh	r3, [r7, #14]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	b29a      	uxth	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3302      	adds	r3, #2
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	701a      	strb	r2, [r3, #0]

	return;
 8001938:	bf00      	nop
}
 800193a:	3720      	adds	r7, #32
 800193c:	46bd      	mov	sp, r7
 800193e:	bdb0      	pop	{r4, r5, r7, pc}
 8001940:	ac083127 	.word	0xac083127
 8001944:	40b3b13c 	.word	0x40b3b13c
 8001948:	cccccccd 	.word	0xcccccccd
 800194c:	3ffccccc 	.word	0x3ffccccc
 8001950:	20000000 	.word	0x20000000
 8001954:	447a0000 	.word	0x447a0000
 8001958:	40890000 	.word	0x40890000
 800195c:	40690000 	.word	0x40690000
 8001960:	2000051c 	.word	0x2000051c

08001964 <temp_Transfer>:

void temp_Transfer(uint8_t *msg, float raw){
 8001964:	b480      	push	{r7}
 8001966:	b08d      	sub	sp, #52	; 0x34
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	ed87 0a00 	vstr	s0, [r7]
	float sub_Resistor_Voltage = raw*voltage_Unit;
 8001970:	4b4c      	ldr	r3, [pc, #304]	; (8001aa4 <temp_Transfer+0x140>)
 8001972:	edd3 7a00 	vldr	s15, [r3]
 8001976:	ed97 7a00 	vldr	s14, [r7]
 800197a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	float Rt = (4368/sub_Resistor_Voltage) - 910;
 8001982:	eddf 6a49 	vldr	s13, [pc, #292]	; 8001aa8 <temp_Transfer+0x144>
 8001986:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800198a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800198e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001aac <temp_Transfer+0x148>
 8001992:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001996:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float scanner[2][2];

	for(int i = 9; i > -1; i--){
 800199a:	2309      	movs	r3, #9
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800199e:	e03a      	b.n	8001a16 <temp_Transfer+0xb2>
		if(temp_Resistance[i][1] <= Rt){
 80019a0:	4a43      	ldr	r2, [pc, #268]	; (8001ab0 <temp_Transfer+0x14c>)
 80019a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	4413      	add	r3, r2
 80019a8:	3304      	adds	r3, #4
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ba:	db0d      	blt.n	80019d8 <temp_Transfer+0x74>
			scanner[0][0] = temp_Resistance[i][0];
 80019bc:	4a3c      	ldr	r2, [pc, #240]	; (8001ab0 <temp_Transfer+0x14c>)
 80019be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4413      	add	r3, r2
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	60fb      	str	r3, [r7, #12]
			scanner[0][1] = temp_Resistance[i][1];
 80019c8:	4a39      	ldr	r2, [pc, #228]	; (8001ab0 <temp_Transfer+0x14c>)
 80019ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4413      	add	r3, r2
 80019d0:	3304      	adds	r3, #4
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	e01b      	b.n	8001a10 <temp_Transfer+0xac>
		}

		else if(temp_Resistance[i][1] > Rt){
 80019d8:	4a35      	ldr	r2, [pc, #212]	; (8001ab0 <temp_Transfer+0x14c>)
 80019da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4413      	add	r3, r2
 80019e0:	3304      	adds	r3, #4
 80019e2:	edd3 7a00 	vldr	s15, [r3]
 80019e6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f2:	d50d      	bpl.n	8001a10 <temp_Transfer+0xac>
			scanner[1][0] = temp_Resistance[i][0];
 80019f4:	4a2e      	ldr	r2, [pc, #184]	; (8001ab0 <temp_Transfer+0x14c>)
 80019f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4413      	add	r3, r2
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	617b      	str	r3, [r7, #20]
			scanner[1][1] = temp_Resistance[i][1];
 8001a00:	4a2b      	ldr	r2, [pc, #172]	; (8001ab0 <temp_Transfer+0x14c>)
 8001a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	4413      	add	r3, r2
 8001a08:	3304      	adds	r3, #4
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	61bb      	str	r3, [r7, #24]
			break;
 8001a0e:	e005      	b.n	8001a1c <temp_Transfer+0xb8>
	for(int i = 9; i > -1; i--){
 8001a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a12:	3b01      	subs	r3, #1
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	dac1      	bge.n	80019a0 <temp_Transfer+0x3c>
		}
	}

	msg[1] = 1;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]

	if(scanner[0][1] == Rt){
 8001a24:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a28:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001a2c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a34:	d10c      	bne.n	8001a50 <temp_Transfer+0xec>
		int temp = (int)scanner[0][0];
 8001a36:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a3e:	ee17 3a90 	vmov	r3, s15
 8001a42:	61fb      	str	r3, [r7, #28]
		msg[2] = (uint8_t)temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3302      	adds	r3, #2
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	701a      	strb	r2, [r3, #0]
	else{
		int temp = (int)(((Rt - scanner[0][1])/(scanner[1][1] - scanner[0][1]))*(scanner[1][0] - scanner[0][0]) + scanner[0][0]);
		msg[2] = (uint8_t)temp;
	}

	return;
 8001a4e:	e024      	b.n	8001a9a <temp_Transfer+0x136>
		int temp = (int)(((Rt - scanner[0][1])/(scanner[1][1] - scanner[0][1]))*(scanner[1][0] - scanner[0][0]) + scanner[0][0]);
 8001a50:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a54:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001a58:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a5c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a60:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a6c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a70:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a88:	ee17 3a90 	vmov	r3, s15
 8001a8c:	623b      	str	r3, [r7, #32]
		msg[2] = (uint8_t)temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3302      	adds	r3, #2
 8001a92:	6a3a      	ldr	r2, [r7, #32]
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	701a      	strb	r2, [r3, #0]
	return;
 8001a98:	bf00      	nop
}
 8001a9a:	3734      	adds	r7, #52	; 0x34
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	45888000 	.word	0x45888000
 8001aac:	44638000 	.word	0x44638000
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <HAL_MspInit+0x4c>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_MspInit+0x4c>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	4a08      	ldr	r2, [pc, #32]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001af2:	2005      	movs	r0, #5
 8001af4:	f001 fe7a 	bl	80037ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40023800 	.word	0x40023800

08001b04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	; 0x30
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 031c 	add.w	r3, r7, #28
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a2e      	ldr	r2, [pc, #184]	; (8001bdc <HAL_ADC_MspInit+0xd8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d128      	bne.n	8001b78 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
 8001b2a:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <HAL_ADC_MspInit+0xdc>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	4a2c      	ldr	r2, [pc, #176]	; (8001be0 <HAL_ADC_MspInit+0xdc>)
 8001b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b34:	6453      	str	r3, [r2, #68]	; 0x44
 8001b36:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <HAL_ADC_MspInit+0xdc>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3e:	61bb      	str	r3, [r7, #24]
 8001b40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	4b26      	ldr	r3, [pc, #152]	; (8001be0 <HAL_ADC_MspInit+0xdc>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a25      	ldr	r2, [pc, #148]	; (8001be0 <HAL_ADC_MspInit+0xdc>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <HAL_ADC_MspInit+0xdc>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b62:	2303      	movs	r3, #3
 8001b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	481c      	ldr	r0, [pc, #112]	; (8001be4 <HAL_ADC_MspInit+0xe0>)
 8001b72:	f001 ff0f 	bl	8003994 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b76:	e02c      	b.n	8001bd2 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1a      	ldr	r2, [pc, #104]	; (8001be8 <HAL_ADC_MspInit+0xe4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d127      	bne.n	8001bd2 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <HAL_ADC_MspInit+0xdc>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	4a15      	ldr	r2, [pc, #84]	; (8001be0 <HAL_ADC_MspInit+0xdc>)
 8001b8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b90:	6453      	str	r3, [r2, #68]	; 0x44
 8001b92:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <HAL_ADC_MspInit+0xdc>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_ADC_MspInit+0xdc>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a0e      	ldr	r2, [pc, #56]	; (8001be0 <HAL_ADC_MspInit+0xdc>)
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <HAL_ADC_MspInit+0xdc>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc6:	f107 031c 	add.w	r3, r7, #28
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4805      	ldr	r0, [pc, #20]	; (8001be4 <HAL_ADC_MspInit+0xe0>)
 8001bce:	f001 fee1 	bl	8003994 <HAL_GPIO_Init>
}
 8001bd2:	bf00      	nop
 8001bd4:	3730      	adds	r7, #48	; 0x30
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40012000 	.word	0x40012000
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020400 	.word	0x40020400
 8001be8:	40012100 	.word	0x40012100

08001bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a19      	ldr	r2, [pc, #100]	; (8001c70 <HAL_I2C_MspInit+0x84>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d12c      	bne.n	8001c68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <HAL_I2C_MspInit+0x88>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <HAL_I2C_MspInit+0x88>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <HAL_I2C_MspInit+0x88>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001c2a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c30:	2312      	movs	r3, #18
 8001c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c34:	2301      	movs	r3, #1
 8001c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	4619      	mov	r1, r3
 8001c46:	480c      	ldr	r0, [pc, #48]	; (8001c78 <HAL_I2C_MspInit+0x8c>)
 8001c48:	f001 fea4 	bl	8003994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <HAL_I2C_MspInit+0x88>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <HAL_I2C_MspInit+0x88>)
 8001c56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_I2C_MspInit+0x88>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c68:	bf00      	nop
 8001c6a:	3728      	adds	r7, #40	; 0x28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40005400 	.word	0x40005400
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40020400 	.word	0x40020400

08001c7c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08e      	sub	sp, #56	; 0x38
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a31      	ldr	r2, [pc, #196]	; (8001d6c <HAL_I2S_MspInit+0xf0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d15a      	bne.n	8001d62 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001cac:	2301      	movs	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001cb0:	23c0      	movs	r3, #192	; 0xc0
 8001cb2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cb8:	f107 0314 	add.w	r3, r7, #20
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f004 fed5 	bl	8006a6c <HAL_RCCEx_PeriphCLKConfig>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001cc8:	f7ff fd00 	bl	80016cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <HAL_I2S_MspInit+0xf4>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	4a26      	ldr	r2, [pc, #152]	; (8001d70 <HAL_I2S_MspInit+0xf4>)
 8001cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cda:	6413      	str	r3, [r2, #64]	; 0x40
 8001cdc:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <HAL_I2S_MspInit+0xf4>)
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_I2S_MspInit+0xf4>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	4a1f      	ldr	r2, [pc, #124]	; (8001d70 <HAL_I2S_MspInit+0xf4>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_I2S_MspInit+0xf4>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d04:	2300      	movs	r3, #0
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_I2S_MspInit+0xf4>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	4a18      	ldr	r2, [pc, #96]	; (8001d70 <HAL_I2S_MspInit+0xf4>)
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	6313      	str	r3, [r2, #48]	; 0x30
 8001d14:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <HAL_I2S_MspInit+0xf4>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d20:	2310      	movs	r3, #16
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d30:	2306      	movs	r3, #6
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d38:	4619      	mov	r1, r3
 8001d3a:	480e      	ldr	r0, [pc, #56]	; (8001d74 <HAL_I2S_MspInit+0xf8>)
 8001d3c:	f001 fe2a 	bl	8003994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001d40:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d52:	2306      	movs	r3, #6
 8001d54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4806      	ldr	r0, [pc, #24]	; (8001d78 <HAL_I2S_MspInit+0xfc>)
 8001d5e:	f001 fe19 	bl	8003994 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d62:	bf00      	nop
 8001d64:	3738      	adds	r7, #56	; 0x38
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40003c00 	.word	0x40003c00
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020000 	.word	0x40020000
 8001d78:	40020800 	.word	0x40020800

08001d7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a19      	ldr	r2, [pc, #100]	; (8001e00 <HAL_SPI_MspInit+0x84>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d12b      	bne.n	8001df6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <HAL_SPI_MspInit+0x88>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <HAL_SPI_MspInit+0x88>)
 8001da8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dac:	6453      	str	r3, [r2, #68]	; 0x44
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <HAL_SPI_MspInit+0x88>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_SPI_MspInit+0x88>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a10      	ldr	r2, [pc, #64]	; (8001e04 <HAL_SPI_MspInit+0x88>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <HAL_SPI_MspInit+0x88>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001dd6:	23e0      	movs	r3, #224	; 0xe0
 8001dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001de6:	2305      	movs	r3, #5
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	; (8001e08 <HAL_SPI_MspInit+0x8c>)
 8001df2:	f001 fdcf 	bl	8003994 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001df6:	bf00      	nop
 8001df8:	3728      	adds	r7, #40	; 0x28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40013000 	.word	0x40013000
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40020000 	.word	0x40020000

08001e0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e1c:	d10e      	bne.n	8001e3c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_TIM_Base_MspInit+0x70>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	4a15      	ldr	r2, [pc, #84]	; (8001e7c <HAL_TIM_Base_MspInit+0x70>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2e:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <HAL_TIM_Base_MspInit+0x70>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e3a:	e01a      	b.n	8001e72 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0f      	ldr	r2, [pc, #60]	; (8001e80 <HAL_TIM_Base_MspInit+0x74>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d115      	bne.n	8001e72 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <HAL_TIM_Base_MspInit+0x70>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a0b      	ldr	r2, [pc, #44]	; (8001e7c <HAL_TIM_Base_MspInit+0x70>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_TIM_Base_MspInit+0x70>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2102      	movs	r1, #2
 8001e66:	201e      	movs	r0, #30
 8001e68:	f001 fccb 	bl	8003802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e6c:	201e      	movs	r0, #30
 8001e6e:	f001 fce4 	bl	800383a <HAL_NVIC_EnableIRQ>
}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40000800 	.word	0x40000800

08001e84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea4:	d11e      	bne.n	8001ee4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <HAL_TIM_MspPostInit+0x68>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a0f      	ldr	r2, [pc, #60]	; (8001eec <HAL_TIM_MspPostInit+0x68>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_TIM_MspPostInit+0x68>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001ec2:	f248 0302 	movw	r3, #32770	; 0x8002
 8001ec6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f107 030c 	add.w	r3, r7, #12
 8001edc:	4619      	mov	r1, r3
 8001ede:	4804      	ldr	r0, [pc, #16]	; (8001ef0 <HAL_TIM_MspPostInit+0x6c>)
 8001ee0:	f001 fd58 	bl	8003994 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ee4:	bf00      	nop
 8001ee6:	3720      	adds	r7, #32
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020000 	.word	0x40020000

08001ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a1d      	ldr	r2, [pc, #116]	; (8001f88 <HAL_UART_MspInit+0x94>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d133      	bne.n	8001f7e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <HAL_UART_MspInit+0x98>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	4a1b      	ldr	r2, [pc, #108]	; (8001f8c <HAL_UART_MspInit+0x98>)
 8001f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f24:	6413      	str	r3, [r2, #64]	; 0x40
 8001f26:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <HAL_UART_MspInit+0x98>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <HAL_UART_MspInit+0x98>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <HAL_UART_MspInit+0x98>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_UART_MspInit+0x98>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f4e:	230c      	movs	r3, #12
 8001f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f5e:	2307      	movs	r3, #7
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	4809      	ldr	r0, [pc, #36]	; (8001f90 <HAL_UART_MspInit+0x9c>)
 8001f6a:	f001 fd13 	bl	8003994 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	2026      	movs	r0, #38	; 0x26
 8001f74:	f001 fc45 	bl	8003802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f78:	2026      	movs	r0, #38	; 0x26
 8001f7a:	f001 fc5e 	bl	800383a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f7e:	bf00      	nop
 8001f80:	3728      	adds	r7, #40	; 0x28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40004400 	.word	0x40004400
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020000 	.word	0x40020000

08001f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <NMI_Handler+0x4>

08001f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <HardFault_Handler+0x4>

08001fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <MemManage_Handler+0x4>

08001fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <BusFault_Handler+0x4>

08001fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <UsageFault_Handler+0x4>

08001fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe0:	f000 ff24 	bl	8002e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <TIM4_IRQHandler+0x10>)
 8001fee:	f005 f985 	bl	80072fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000478 	.word	0x20000478

08001ffc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <USART2_IRQHandler+0x10>)
 8002002:	f006 f8e5 	bl	80081d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200004c0 	.word	0x200004c0

08002010 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002014:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002018:	f001 fe8a 	bl	8003d30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800201c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002020:	f001 fe86 	bl	8003d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}

08002028 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800202c:	4802      	ldr	r0, [pc, #8]	; (8002038 <OTG_FS_IRQHandler+0x10>)
 800202e:	f002 f901 	bl	8004234 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000928 	.word	0x20000928

0800203c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002044:	4a14      	ldr	r2, [pc, #80]	; (8002098 <_sbrk+0x5c>)
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <_sbrk+0x60>)
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <_sbrk+0x64>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d102      	bne.n	800205e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <_sbrk+0x64>)
 800205a:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <_sbrk+0x68>)
 800205c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	429a      	cmp	r2, r3
 800206a:	d207      	bcs.n	800207c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800206c:	f00a faf4 	bl	800c658 <__errno>
 8002070:	4603      	mov	r3, r0
 8002072:	220c      	movs	r2, #12
 8002074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800207a:	e009      	b.n	8002090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <_sbrk+0x64>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002082:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <_sbrk+0x64>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <_sbrk+0x64>)
 800208c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208e:	68fb      	ldr	r3, [r7, #12]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20020000 	.word	0x20020000
 800209c:	00000400 	.word	0x00000400
 80020a0:	20000520 	.word	0x20000520
 80020a4:	20000c40 	.word	0x20000c40

080020a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <SystemInit+0x20>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	4a05      	ldr	r2, [pc, #20]	; (80020c8 <SystemInit+0x20>)
 80020b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <set_Pwm_TIM>:
float velocity_Pid_Ki = 0;
float velocity_Pid_Kd = 0;

uint8_t rx_Data[10];

void set_Pwm_TIM(TIM_HandleTypeDef *htim){
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	//setting htim2 struct pointer
	pwm_TIM = htim;
 80020d4:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <set_Pwm_TIM+0x1c>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6013      	str	r3, [r2, #0]
	return;
 80020da:	bf00      	nop
}
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000524 	.word	0x20000524

080020ec <set_Pid_TIM>:

void set_Pid_TIM(TIM_HandleTypeDef *htim){
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	//setting htim4 struct pointer
	pid_TIM = htim;
 80020f4:	4a04      	ldr	r2, [pc, #16]	; (8002108 <set_Pid_TIM+0x1c>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6013      	str	r3, [r2, #0]
	return;
 80020fa:	bf00      	nop
}
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000528 	.word	0x20000528

0800210c <set_Pid_Uart>:

void set_Pid_Uart(UART_HandleTypeDef *huart){
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
	//setting uart2 struct pointer
	pid_Uart = huart;
 8002114:	4a04      	ldr	r2, [pc, #16]	; (8002128 <set_Pid_Uart+0x1c>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6013      	str	r3, [r2, #0]
	return;
 800211a:	bf00      	nop
}
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	2000052c 	.word	0x2000052c

0800212c <pid_Init>:

void pid_Init(){
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
	//clear error_Data
	for(int i = 0; i < 10; i++){
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	e012      	b.n	800215e <pid_Init+0x32>
			wheel_1.velocity_Error_Data[i] = 0;
 8002138:	4a2d      	ldr	r2, [pc, #180]	; (80021f0 <pid_Init+0xc4>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3310      	adds	r3, #16
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
			wheel_2.velocity_Error_Data[i] = 0;
 8002148:	4a2a      	ldr	r2, [pc, #168]	; (80021f4 <pid_Init+0xc8>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3310      	adds	r3, #16
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 10; i++){
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3301      	adds	r3, #1
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b09      	cmp	r3, #9
 8002162:	dde9      	ble.n	8002138 <pid_Init+0xc>
	}

	//clear wheel_1 counting data
	wheel_1.step = 0;
 8002164:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <pid_Init+0xc4>)
 8002166:	2200      	movs	r2, #0
 8002168:	621a      	str	r2, [r3, #32]
	wheel_1.round = 0;
 800216a:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <pid_Init+0xc4>)
 800216c:	2200      	movs	r2, #0
 800216e:	625a      	str	r2, [r3, #36]	; 0x24
	wheel_1.position = 0;
 8002170:	4b1f      	ldr	r3, [pc, #124]	; (80021f0 <pid_Init+0xc4>)
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	62da      	str	r2, [r3, #44]	; 0x2c
	wheel_1.last_Position = 0;
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <pid_Init+0xc4>)
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
	wheel_1.desire_Position = 0;
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <pid_Init+0xc4>)
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	629a      	str	r2, [r3, #40]	; 0x28
	wheel_1.velocity = 0;
 8002188:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <pid_Init+0xc4>)
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	63da      	str	r2, [r3, #60]	; 0x3c
	wheel_1.pwm = 0;
 8002190:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <pid_Init+0xc4>)
 8002192:	2200      	movs	r2, #0
 8002194:	669a      	str	r2, [r3, #104]	; 0x68

	//clear wheel_2 counting data
	wheel_2.step = 0;
 8002196:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <pid_Init+0xc8>)
 8002198:	2200      	movs	r2, #0
 800219a:	621a      	str	r2, [r3, #32]
	wheel_2.round = 0;
 800219c:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <pid_Init+0xc8>)
 800219e:	2200      	movs	r2, #0
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24
	wheel_2.position = 0;
 80021a2:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <pid_Init+0xc8>)
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	62da      	str	r2, [r3, #44]	; 0x2c
	wheel_2.last_Position = 0;
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <pid_Init+0xc8>)
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	631a      	str	r2, [r3, #48]	; 0x30
	wheel_2.desire_Position = 0;
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <pid_Init+0xc8>)
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	629a      	str	r2, [r3, #40]	; 0x28
	wheel_2.velocity = 0;
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <pid_Init+0xc8>)
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	63da      	str	r2, [r3, #60]	; 0x3c
	wheel_2.pwm = 0;
 80021c2:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <pid_Init+0xc8>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	669a      	str	r2, [r3, #104]	; 0x68

	for(int i = 0; i < 10; i++){
 80021c8:	2300      	movs	r3, #0
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	e007      	b.n	80021de <pid_Init+0xb2>
		rx_Data[i] = 0;
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <pid_Init+0xcc>)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 10; i++){
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	3301      	adds	r3, #1
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b09      	cmp	r3, #9
 80021e2:	ddf4      	ble.n	80021ce <pid_Init+0xa2>
	}

	return;
 80021e4:	bf00      	nop
}
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	20000050 	.word	0x20000050
 80021f4:	20000124 	.word	0x20000124
 80021f8:	2000053c 	.word	0x2000053c

080021fc <pid_Start>:

void pid_Start(uint8_t type, uint8_t value){
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	460a      	mov	r2, r1
 8002206:	71fb      	strb	r3, [r7, #7]
 8002208:	4613      	mov	r3, r2
 800220a:	71bb      	strb	r3, [r7, #6]
	if(type == 11){
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	2b0b      	cmp	r3, #11
 8002210:	d11a      	bne.n	8002248 <pid_Start+0x4c>
		wheel_1.desire_Position += value;
 8002212:	4b46      	ldr	r3, [pc, #280]	; (800232c <pid_Start+0x130>)
 8002214:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002218:	79bb      	ldrb	r3, [r7, #6]
 800221a:	ee07 3a90 	vmov	s15, r3
 800221e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002226:	4b41      	ldr	r3, [pc, #260]	; (800232c <pid_Start+0x130>)
 8002228:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		wheel_2.desire_Position += value;
 800222c:	4b40      	ldr	r3, [pc, #256]	; (8002330 <pid_Start+0x134>)
 800222e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002232:	79bb      	ldrb	r3, [r7, #6]
 8002234:	ee07 3a90 	vmov	s15, r3
 8002238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800223c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002240:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <pid_Start+0x134>)
 8002242:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8002246:	e058      	b.n	80022fa <pid_Start+0xfe>
	}
	else if(type == 12){
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	2b0c      	cmp	r3, #12
 800224c:	d11a      	bne.n	8002284 <pid_Start+0x88>
		wheel_1.desire_Position -= value;
 800224e:	4b37      	ldr	r3, [pc, #220]	; (800232c <pid_Start+0x130>)
 8002250:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002254:	79bb      	ldrb	r3, [r7, #6]
 8002256:	ee07 3a90 	vmov	s15, r3
 800225a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800225e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002262:	4b32      	ldr	r3, [pc, #200]	; (800232c <pid_Start+0x130>)
 8002264:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		wheel_2.desire_Position -= value;
 8002268:	4b31      	ldr	r3, [pc, #196]	; (8002330 <pid_Start+0x134>)
 800226a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800226e:	79bb      	ldrb	r3, [r7, #6]
 8002270:	ee07 3a90 	vmov	s15, r3
 8002274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800227c:	4b2c      	ldr	r3, [pc, #176]	; (8002330 <pid_Start+0x134>)
 800227e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8002282:	e03a      	b.n	80022fa <pid_Start+0xfe>
	}
	else if(type == 13){
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	2b0d      	cmp	r3, #13
 8002288:	d11a      	bne.n	80022c0 <pid_Start+0xc4>
		wheel_1.desire_Position -= value;
 800228a:	4b28      	ldr	r3, [pc, #160]	; (800232c <pid_Start+0x130>)
 800228c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002290:	79bb      	ldrb	r3, [r7, #6]
 8002292:	ee07 3a90 	vmov	s15, r3
 8002296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800229a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800229e:	4b23      	ldr	r3, [pc, #140]	; (800232c <pid_Start+0x130>)
 80022a0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		wheel_2.desire_Position += value;
 80022a4:	4b22      	ldr	r3, [pc, #136]	; (8002330 <pid_Start+0x134>)
 80022a6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80022aa:	79bb      	ldrb	r3, [r7, #6]
 80022ac:	ee07 3a90 	vmov	s15, r3
 80022b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b8:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <pid_Start+0x134>)
 80022ba:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 80022be:	e01c      	b.n	80022fa <pid_Start+0xfe>
	}
	else if(type == 14){
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	2b0e      	cmp	r3, #14
 80022c4:	d119      	bne.n	80022fa <pid_Start+0xfe>
		wheel_1.desire_Position += value;
 80022c6:	4b19      	ldr	r3, [pc, #100]	; (800232c <pid_Start+0x130>)
 80022c8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80022cc:	79bb      	ldrb	r3, [r7, #6]
 80022ce:	ee07 3a90 	vmov	s15, r3
 80022d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022da:	4b14      	ldr	r3, [pc, #80]	; (800232c <pid_Start+0x130>)
 80022dc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		wheel_2.desire_Position -= value;
 80022e0:	4b13      	ldr	r3, [pc, #76]	; (8002330 <pid_Start+0x134>)
 80022e2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80022e6:	79bb      	ldrb	r3, [r7, #6]
 80022e8:	ee07 3a90 	vmov	s15, r3
 80022ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <pid_Start+0x134>)
 80022f6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	}

	//clear pid stop count
	pid_Stop_Count = 0;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <pid_Start+0x138>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]

	//start pwm channel;
	HAL_TIM_PWM_Start(pwm_TIM, TIM_CHANNEL_1);
 8002300:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <pid_Start+0x13c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f004 fec0 	bl	800708c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm_TIM, TIM_CHANNEL_2);
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <pid_Start+0x13c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2104      	movs	r1, #4
 8002312:	4618      	mov	r0, r3
 8002314:	f004 feba 	bl	800708c <HAL_TIM_PWM_Start>

	//start pid controller
	HAL_TIM_Base_Start_IT(pid_TIM);
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <pid_Start+0x140>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f004 fdbd 	bl	8006e9c <HAL_TIM_Base_Start_IT>

	return;
 8002322:	bf00      	nop
}
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000050 	.word	0x20000050
 8002330:	20000124 	.word	0x20000124
 8002334:	20000530 	.word	0x20000530
 8002338:	20000524 	.word	0x20000524
 800233c:	20000528 	.word	0x20000528

08002340 <pid_Stop>:

void pid_Stop(){
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(wheel_1.out1_Gpio, wheel_1.out1_Pin, GPIO_PIN_RESET);
 8002344:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <pid_Stop+0x7c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a1c      	ldr	r2, [pc, #112]	; (80023bc <pid_Stop+0x7c>)
 800234a:	8891      	ldrh	r1, [r2, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	4618      	mov	r0, r3
 8002350:	f001 fcd4 	bl	8003cfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(wheel_1.out2_Gpio, wheel_1.out2_Pin, GPIO_PIN_RESET);
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <pid_Stop+0x7c>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4a18      	ldr	r2, [pc, #96]	; (80023bc <pid_Stop+0x7c>)
 800235a:	8991      	ldrh	r1, [r2, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	4618      	mov	r0, r3
 8002360:	f001 fccc 	bl	8003cfc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(wheel_2.out1_Gpio, wheel_2.out1_Pin, GPIO_PIN_RESET);
 8002364:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <pid_Stop+0x80>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a15      	ldr	r2, [pc, #84]	; (80023c0 <pid_Stop+0x80>)
 800236a:	8891      	ldrh	r1, [r2, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	4618      	mov	r0, r3
 8002370:	f001 fcc4 	bl	8003cfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(wheel_2.out2_Gpio, wheel_2.out2_Pin, GPIO_PIN_RESET);
 8002374:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <pid_Stop+0x80>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	4a11      	ldr	r2, [pc, #68]	; (80023c0 <pid_Stop+0x80>)
 800237a:	8991      	ldrh	r1, [r2, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f001 fcbc 	bl	8003cfc <HAL_GPIO_WritePin>

	//stop pwm channel;
	HAL_TIM_PWM_Stop(pwm_TIM, TIM_CHANNEL_1);
 8002384:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <pid_Stop+0x84>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f004 ff46 	bl	800721c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(pwm_TIM, TIM_CHANNEL_2);
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <pid_Stop+0x84>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2104      	movs	r1, #4
 8002396:	4618      	mov	r0, r3
 8002398:	f004 ff40 	bl	800721c <HAL_TIM_PWM_Stop>

	//stop pid controller
	HAL_TIM_Base_Stop_IT(pid_TIM);
 800239c:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <pid_Stop+0x88>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f004 fdeb 	bl	8006f7c <HAL_TIM_Base_Stop_IT>

	//adc capture and uart transmit
	adc_Capture();
 80023a6:	f7ff f9e7 	bl	8001778 <adc_Capture>

	//recieve next command
	HAL_UART_Receive_IT(pid_Uart, rx_Data, 10);
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <pid_Stop+0x8c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	220a      	movs	r2, #10
 80023b0:	4907      	ldr	r1, [pc, #28]	; (80023d0 <pid_Stop+0x90>)
 80023b2:	4618      	mov	r0, r3
 80023b4:	f005 fedb 	bl	800816e <HAL_UART_Receive_IT>

	return;
 80023b8:	bf00      	nop
}
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000050 	.word	0x20000050
 80023c0:	20000124 	.word	0x20000124
 80023c4:	20000524 	.word	0x20000524
 80023c8:	20000528 	.word	0x20000528
 80023cc:	2000052c 	.word	0x2000052c
 80023d0:	2000053c 	.word	0x2000053c
 80023d4:	00000000 	.word	0x00000000

080023d8 <position_Pid_Control>:

void position_Pid_Control(){
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
	float pos_Error;
	float desire_Velocity;

	//wheel_1 calculate
	pos_Error = wheel_1.desire_Position - wheel_1.position;
 80023de:	4b4e      	ldr	r3, [pc, #312]	; (8002518 <position_Pid_Control+0x140>)
 80023e0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80023e4:	4b4c      	ldr	r3, [pc, #304]	; (8002518 <position_Pid_Control+0x140>)
 80023e6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80023ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ee:	edc7 7a00 	vstr	s15, [r7]

	//set dead zone
	if(pos_Error < -0.1 || pos_Error > 0.1){
 80023f2:	6838      	ldr	r0, [r7, #0]
 80023f4:	f7fe f84c 	bl	8000490 <__aeabi_f2d>
 80023f8:	a343      	add	r3, pc, #268	; (adr r3, 8002508 <position_Pid_Control+0x130>)
 80023fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fe:	f7fe fb11 	bl	8000a24 <__aeabi_dcmplt>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10a      	bne.n	800241e <position_Pid_Control+0x46>
 8002408:	6838      	ldr	r0, [r7, #0]
 800240a:	f7fe f841 	bl	8000490 <__aeabi_f2d>
 800240e:	a340      	add	r3, pc, #256	; (adr r3, 8002510 <position_Pid_Control+0x138>)
 8002410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002414:	f7fe fb24 	bl	8000a60 <__aeabi_dcmpgt>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d023      	beq.n	8002466 <position_Pid_Control+0x8e>
		desire_Velocity = pos_Error*position_Pid_Kp;
 800241e:	4b3f      	ldr	r3, [pc, #252]	; (800251c <position_Pid_Control+0x144>)
 8002420:	edd3 7a00 	vldr	s15, [r3]
 8002424:	ed97 7a00 	vldr	s14, [r7]
 8002428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242c:	edc7 7a01 	vstr	s15, [r7, #4]

		//set speed limit
		if(desire_Velocity > 3){
 8002430:	edd7 7a01 	vldr	s15, [r7, #4]
 8002434:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800243c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002440:	dd02      	ble.n	8002448 <position_Pid_Control+0x70>
			desire_Velocity = 3;
 8002442:	4b37      	ldr	r3, [pc, #220]	; (8002520 <position_Pid_Control+0x148>)
 8002444:	607b      	str	r3, [r7, #4]
 8002446:	e00a      	b.n	800245e <position_Pid_Control+0x86>
		}
		else if(desire_Velocity < -3){
 8002448:	edd7 7a01 	vldr	s15, [r7, #4]
 800244c:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 8002450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002458:	d501      	bpl.n	800245e <position_Pid_Control+0x86>
			desire_Velocity = -3;
 800245a:	4b32      	ldr	r3, [pc, #200]	; (8002524 <position_Pid_Control+0x14c>)
 800245c:	607b      	str	r3, [r7, #4]
		}

		wheel_1.desire_Velocity = desire_Velocity;
 800245e:	4a2e      	ldr	r2, [pc, #184]	; (8002518 <position_Pid_Control+0x140>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6353      	str	r3, [r2, #52]	; 0x34
 8002464:	e003      	b.n	800246e <position_Pid_Control+0x96>
	}
	else{
		//at dead zone no velocity;
		wheel_1.desire_Velocity = 0;
 8002466:	4b2c      	ldr	r3, [pc, #176]	; (8002518 <position_Pid_Control+0x140>)
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	635a      	str	r2, [r3, #52]	; 0x34
	}

	//wheel_2 calculate
	pos_Error = wheel_2.desire_Position - wheel_2.position;
 800246e:	4b2e      	ldr	r3, [pc, #184]	; (8002528 <position_Pid_Control+0x150>)
 8002470:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002474:	4b2c      	ldr	r3, [pc, #176]	; (8002528 <position_Pid_Control+0x150>)
 8002476:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800247a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800247e:	edc7 7a00 	vstr	s15, [r7]

	//set dead zone
	if(pos_Error < -0.1 || pos_Error > 0.1){
 8002482:	6838      	ldr	r0, [r7, #0]
 8002484:	f7fe f804 	bl	8000490 <__aeabi_f2d>
 8002488:	a31f      	add	r3, pc, #124	; (adr r3, 8002508 <position_Pid_Control+0x130>)
 800248a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248e:	f7fe fac9 	bl	8000a24 <__aeabi_dcmplt>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10a      	bne.n	80024ae <position_Pid_Control+0xd6>
 8002498:	6838      	ldr	r0, [r7, #0]
 800249a:	f7fd fff9 	bl	8000490 <__aeabi_f2d>
 800249e:	a31c      	add	r3, pc, #112	; (adr r3, 8002510 <position_Pid_Control+0x138>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	f7fe fadc 	bl	8000a60 <__aeabi_dcmpgt>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d023      	beq.n	80024f6 <position_Pid_Control+0x11e>
		desire_Velocity = pos_Error*position_Pid_Kp;
 80024ae:	4b1b      	ldr	r3, [pc, #108]	; (800251c <position_Pid_Control+0x144>)
 80024b0:	edd3 7a00 	vldr	s15, [r3]
 80024b4:	ed97 7a00 	vldr	s14, [r7]
 80024b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024bc:	edc7 7a01 	vstr	s15, [r7, #4]

		//set speed limit
		if(desire_Velocity > 3){
 80024c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80024c4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80024c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d0:	dd02      	ble.n	80024d8 <position_Pid_Control+0x100>
			desire_Velocity = 3;
 80024d2:	4b13      	ldr	r3, [pc, #76]	; (8002520 <position_Pid_Control+0x148>)
 80024d4:	607b      	str	r3, [r7, #4]
 80024d6:	e00a      	b.n	80024ee <position_Pid_Control+0x116>
		}
		else if(desire_Velocity < -3){
 80024d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80024dc:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 80024e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e8:	d501      	bpl.n	80024ee <position_Pid_Control+0x116>
			desire_Velocity = -3;
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <position_Pid_Control+0x14c>)
 80024ec:	607b      	str	r3, [r7, #4]
		}

		wheel_2.desire_Velocity = desire_Velocity;
 80024ee:	4a0e      	ldr	r2, [pc, #56]	; (8002528 <position_Pid_Control+0x150>)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6353      	str	r3, [r2, #52]	; 0x34
 80024f4:	e003      	b.n	80024fe <position_Pid_Control+0x126>
	}
	else{
		//at dead zone no velocity;
		wheel_2.desire_Velocity = 0;
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <position_Pid_Control+0x150>)
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return;
 80024fe:	bf00      	nop
}
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	9999999a 	.word	0x9999999a
 800250c:	bfb99999 	.word	0xbfb99999
 8002510:	9999999a 	.word	0x9999999a
 8002514:	3fb99999 	.word	0x3fb99999
 8002518:	20000050 	.word	0x20000050
 800251c:	200001fc 	.word	0x200001fc
 8002520:	40400000 	.word	0x40400000
 8002524:	c0400000 	.word	0xc0400000
 8002528:	20000124 	.word	0x20000124

0800252c <velocity_Pid_Control>:

void velocity_Pid_Control(){
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
	velocity_Pid_Calculate(&wheel_1);
 8002530:	4806      	ldr	r0, [pc, #24]	; (800254c <velocity_Pid_Control+0x20>)
 8002532:	f000 f93d 	bl	80027b0 <velocity_Pid_Calculate>
	velocity_Pid_Calculate(&wheel_2);
 8002536:	4806      	ldr	r0, [pc, #24]	; (8002550 <velocity_Pid_Control+0x24>)
 8002538:	f000 f93a 	bl	80027b0 <velocity_Pid_Calculate>
	pwm_Pid_Matching(&wheel_1);
 800253c:	4803      	ldr	r0, [pc, #12]	; (800254c <velocity_Pid_Control+0x20>)
 800253e:	f000 f9d5 	bl	80028ec <pwm_Pid_Matching>
	pwm_Pid_Matching(&wheel_2);
 8002542:	4803      	ldr	r0, [pc, #12]	; (8002550 <velocity_Pid_Control+0x24>)
 8002544:	f000 f9d2 	bl	80028ec <pwm_Pid_Matching>

	return;
 8002548:	bf00      	nop
}
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000050 	.word	0x20000050
 8002550:	20000124 	.word	0x20000124

08002554 <motor_Output>:

void motor_Output(){
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
	if(pid_Stop_Count > 2){
 8002558:	4b58      	ldr	r3, [pc, #352]	; (80026bc <motor_Output+0x168>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b02      	cmp	r3, #2
 800255e:	dd02      	ble.n	8002566 <motor_Output+0x12>
		pid_Stop();
 8002560:	f7ff feee 	bl	8002340 <pid_Stop>
		return;
 8002564:	e0a9      	b.n	80026ba <motor_Output+0x166>
	}

	if(wheel_1.desire_Velocity == 0 && wheel_2.desire_Velocity == 0){
 8002566:	4b56      	ldr	r3, [pc, #344]	; (80026c0 <motor_Output+0x16c>)
 8002568:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800256c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002574:	d10d      	bne.n	8002592 <motor_Output+0x3e>
 8002576:	4b53      	ldr	r3, [pc, #332]	; (80026c4 <motor_Output+0x170>)
 8002578:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800257c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002584:	d105      	bne.n	8002592 <motor_Output+0x3e>
		pid_Stop_Count++;
 8002586:	4b4d      	ldr	r3, [pc, #308]	; (80026bc <motor_Output+0x168>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	3301      	adds	r3, #1
 800258c:	4a4b      	ldr	r2, [pc, #300]	; (80026bc <motor_Output+0x168>)
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	e002      	b.n	8002598 <motor_Output+0x44>
	}
	else{
		pid_Stop_Count = 0;
 8002592:	4b4a      	ldr	r3, [pc, #296]	; (80026bc <motor_Output+0x168>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
	}

	//output pwm
	pwm_TIM->Instance->CCR1 = wheel_1.pwm;
 8002598:	4b49      	ldr	r3, [pc, #292]	; (80026c0 <motor_Output+0x16c>)
 800259a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800259c:	4b4a      	ldr	r3, [pc, #296]	; (80026c8 <motor_Output+0x174>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	635a      	str	r2, [r3, #52]	; 0x34

	//forward
	if(wheel_1.setting_Velocity > 0){
 80025a4:	4b46      	ldr	r3, [pc, #280]	; (80026c0 <motor_Output+0x16c>)
 80025a6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80025aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b2:	dd10      	ble.n	80025d6 <motor_Output+0x82>
		HAL_GPIO_WritePin(wheel_1.out1_Gpio, wheel_1.out1_Pin, GPIO_PIN_SET);
 80025b4:	4b42      	ldr	r3, [pc, #264]	; (80026c0 <motor_Output+0x16c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a41      	ldr	r2, [pc, #260]	; (80026c0 <motor_Output+0x16c>)
 80025ba:	8891      	ldrh	r1, [r2, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	4618      	mov	r0, r3
 80025c0:	f001 fb9c 	bl	8003cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(wheel_1.out2_Gpio, wheel_1.out2_Pin, GPIO_PIN_RESET);
 80025c4:	4b3e      	ldr	r3, [pc, #248]	; (80026c0 <motor_Output+0x16c>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4a3d      	ldr	r2, [pc, #244]	; (80026c0 <motor_Output+0x16c>)
 80025ca:	8991      	ldrh	r1, [r2, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f001 fb94 	bl	8003cfc <HAL_GPIO_WritePin>
 80025d4:	e028      	b.n	8002628 <motor_Output+0xd4>
	}
	//backward
	else if(wheel_1.setting_Velocity < 0){
 80025d6:	4b3a      	ldr	r3, [pc, #232]	; (80026c0 <motor_Output+0x16c>)
 80025d8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80025dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e4:	d510      	bpl.n	8002608 <motor_Output+0xb4>
		HAL_GPIO_WritePin(wheel_1.out1_Gpio, wheel_1.out1_Pin, GPIO_PIN_RESET);
 80025e6:	4b36      	ldr	r3, [pc, #216]	; (80026c0 <motor_Output+0x16c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a35      	ldr	r2, [pc, #212]	; (80026c0 <motor_Output+0x16c>)
 80025ec:	8891      	ldrh	r1, [r2, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f001 fb83 	bl	8003cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(wheel_1.out2_Gpio, wheel_1.out2_Pin, GPIO_PIN_SET);
 80025f6:	4b32      	ldr	r3, [pc, #200]	; (80026c0 <motor_Output+0x16c>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	4a31      	ldr	r2, [pc, #196]	; (80026c0 <motor_Output+0x16c>)
 80025fc:	8991      	ldrh	r1, [r2, #12]
 80025fe:	2201      	movs	r2, #1
 8002600:	4618      	mov	r0, r3
 8002602:	f001 fb7b 	bl	8003cfc <HAL_GPIO_WritePin>
 8002606:	e00f      	b.n	8002628 <motor_Output+0xd4>
	}
	//stoop
	else{
		HAL_GPIO_WritePin(wheel_1.out1_Gpio, wheel_1.out1_Pin, GPIO_PIN_RESET);
 8002608:	4b2d      	ldr	r3, [pc, #180]	; (80026c0 <motor_Output+0x16c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a2c      	ldr	r2, [pc, #176]	; (80026c0 <motor_Output+0x16c>)
 800260e:	8891      	ldrh	r1, [r2, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	4618      	mov	r0, r3
 8002614:	f001 fb72 	bl	8003cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(wheel_1.out2_Gpio, wheel_1.out2_Pin, GPIO_PIN_RESET);
 8002618:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <motor_Output+0x16c>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4a28      	ldr	r2, [pc, #160]	; (80026c0 <motor_Output+0x16c>)
 800261e:	8991      	ldrh	r1, [r2, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	4618      	mov	r0, r3
 8002624:	f001 fb6a 	bl	8003cfc <HAL_GPIO_WritePin>
	}

	//output pwm
	pwm_TIM->Instance->CCR2 = wheel_2.pwm;
 8002628:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <motor_Output+0x170>)
 800262a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800262c:	4b26      	ldr	r3, [pc, #152]	; (80026c8 <motor_Output+0x174>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	639a      	str	r2, [r3, #56]	; 0x38

	//forward
	if(wheel_2.setting_Velocity > 0){
 8002634:	4b23      	ldr	r3, [pc, #140]	; (80026c4 <motor_Output+0x170>)
 8002636:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800263a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800263e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002642:	dd10      	ble.n	8002666 <motor_Output+0x112>
		HAL_GPIO_WritePin(wheel_2.out1_Gpio, wheel_2.out1_Pin, GPIO_PIN_SET);
 8002644:	4b1f      	ldr	r3, [pc, #124]	; (80026c4 <motor_Output+0x170>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a1e      	ldr	r2, [pc, #120]	; (80026c4 <motor_Output+0x170>)
 800264a:	8891      	ldrh	r1, [r2, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	4618      	mov	r0, r3
 8002650:	f001 fb54 	bl	8003cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(wheel_2.out2_Gpio, wheel_2.out2_Pin, GPIO_PIN_RESET);
 8002654:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <motor_Output+0x170>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	4a1a      	ldr	r2, [pc, #104]	; (80026c4 <motor_Output+0x170>)
 800265a:	8991      	ldrh	r1, [r2, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f001 fb4c 	bl	8003cfc <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(wheel_2.out1_Gpio, wheel_2.out1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(wheel_2.out2_Gpio, wheel_2.out2_Pin, GPIO_PIN_RESET);
	}

	return;
 8002664:	e028      	b.n	80026b8 <motor_Output+0x164>
	else if(wheel_2.setting_Velocity < 0){
 8002666:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <motor_Output+0x170>)
 8002668:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800266c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002674:	d510      	bpl.n	8002698 <motor_Output+0x144>
		HAL_GPIO_WritePin(wheel_2.out1_Gpio, wheel_2.out1_Pin, GPIO_PIN_RESET);
 8002676:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <motor_Output+0x170>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <motor_Output+0x170>)
 800267c:	8891      	ldrh	r1, [r2, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f001 fb3b 	bl	8003cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(wheel_2.out2_Gpio, wheel_2.out2_Pin, GPIO_PIN_SET);
 8002686:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <motor_Output+0x170>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	4a0e      	ldr	r2, [pc, #56]	; (80026c4 <motor_Output+0x170>)
 800268c:	8991      	ldrh	r1, [r2, #12]
 800268e:	2201      	movs	r2, #1
 8002690:	4618      	mov	r0, r3
 8002692:	f001 fb33 	bl	8003cfc <HAL_GPIO_WritePin>
	return;
 8002696:	e00f      	b.n	80026b8 <motor_Output+0x164>
		HAL_GPIO_WritePin(wheel_2.out1_Gpio, wheel_2.out1_Pin, GPIO_PIN_RESET);
 8002698:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <motor_Output+0x170>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a09      	ldr	r2, [pc, #36]	; (80026c4 <motor_Output+0x170>)
 800269e:	8891      	ldrh	r1, [r2, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f001 fb2a 	bl	8003cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(wheel_2.out2_Gpio, wheel_2.out2_Pin, GPIO_PIN_RESET);
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <motor_Output+0x170>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	4a05      	ldr	r2, [pc, #20]	; (80026c4 <motor_Output+0x170>)
 80026ae:	8991      	ldrh	r1, [r2, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f001 fb22 	bl	8003cfc <HAL_GPIO_WritePin>
	return;
 80026b8:	bf00      	nop
}
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000530 	.word	0x20000530
 80026c0:	20000050 	.word	0x20000050
 80026c4:	20000124 	.word	0x20000124
 80026c8:	20000524 	.word	0x20000524
 80026cc:	00000000 	.word	0x00000000

080026d0 <wheel_Information_Update>:

void wheel_Information_Update(Wheel_Data_TypeDef *wheel){
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	//update position
	wheel->position = wheel->round + ((float)wheel->step/step_Per_Round);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	ee07 3a90 	vmov	s15, r3
 80026e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	ee07 3a90 	vmov	s15, r3
 80026ec:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80026f0:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <wheel_Information_Update+0xd8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	ee07 3a90 	vmov	s15, r3
 80026f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026fc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	//update velocity
	wheel->velocity = (wheel->position - wheel->last_Position)/0.1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800271a:	ee17 0a90 	vmov	r0, s15
 800271e:	f7fd feb7 	bl	8000490 <__aeabi_f2d>
 8002722:	a31f      	add	r3, pc, #124	; (adr r3, 80027a0 <wheel_Information_Update+0xd0>)
 8002724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002728:	f7fe f834 	bl	8000794 <__aeabi_ddiv>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4610      	mov	r0, r2
 8002732:	4619      	mov	r1, r3
 8002734:	f7fe f99e 	bl	8000a74 <__aeabi_d2f>
 8002738:	4602      	mov	r2, r0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	63da      	str	r2, [r3, #60]	; 0x3c

	//update velocity error
	for(int i = 9; i > -1; i--){
 800273e:	2309      	movs	r3, #9
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	e022      	b.n	800278a <wheel_Information_Update+0xba>
		if(i == 0){
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10f      	bne.n	800276a <wheel_Information_Update+0x9a>
			wheel->velocity_Error_Data[i] = wheel->desire_Velocity - wheel->velocity;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	3310      	adds	r3, #16
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	edc3 7a00 	vstr	s15, [r3]
 8002768:	e00c      	b.n	8002784 <wheel_Information_Update+0xb4>
		}
		else{
			wheel->velocity_Error_Data[i] = wheel->velocity_Error_Data[i-1];
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	3b01      	subs	r3, #1
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	3310      	adds	r3, #16
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	3310      	adds	r3, #16
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	601a      	str	r2, [r3, #0]
	for(int i = 9; i > -1; i--){
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	3b01      	subs	r3, #1
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	dad9      	bge.n	8002744 <wheel_Information_Update+0x74>
		}
	}

	//update last position
	wheel->last_Position = wheel->position;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	631a      	str	r2, [r3, #48]	; 0x30

	return;
 8002798:	bf00      	nop
}
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	9999999a 	.word	0x9999999a
 80027a4:	3fb99999 	.word	0x3fb99999
 80027a8:	200001f8 	.word	0x200001f8
 80027ac:	00000000 	.word	0x00000000

080027b0 <velocity_Pid_Calculate>:

void velocity_Pid_Calculate(Wheel_Data_TypeDef *wheel){
 80027b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
	float velocity_Cal = wheel->desire_Velocity;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027be:	60fb      	str	r3, [r7, #12]

	if(velocity_Cal != 0){
 80027c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80027c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027cc:	d076      	beq.n	80028bc <velocity_Pid_Calculate+0x10c>

		velocity_Cal = velocity_Cal + wheel->velocity_Error_Data[0]*velocity_Pid_Kp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80027d4:	4b40      	ldr	r3, [pc, #256]	; (80028d8 <velocity_Pid_Calculate+0x128>)
 80027d6:	edd3 7a00 	vldr	s15, [r3]
 80027da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027de:	ed97 7a03 	vldr	s14, [r7, #12]
 80027e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e6:	edc7 7a03 	vstr	s15, [r7, #12]

		for(int i = 0; i < 10; i++){
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	e014      	b.n	800281a <velocity_Pid_Calculate+0x6a>
			velocity_Cal = velocity_Cal + wheel->velocity_Error_Data[i]*velocity_Pid_Ki;
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	3310      	adds	r3, #16
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	ed93 7a00 	vldr	s14, [r3]
 80027fe:	4b37      	ldr	r3, [pc, #220]	; (80028dc <velocity_Pid_Calculate+0x12c>)
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002808:	ed97 7a03 	vldr	s14, [r7, #12]
 800280c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002810:	edc7 7a03 	vstr	s15, [r7, #12]
		for(int i = 0; i < 10; i++){
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	3301      	adds	r3, #1
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b09      	cmp	r3, #9
 800281e:	dde7      	ble.n	80027f0 <velocity_Pid_Calculate+0x40>
		}

		velocity_Cal = velocity_Cal - ((wheel->velocity_Error_Data[0] - wheel->velocity_Error_Data[1])/0.1)*velocity_Pid_Kd;
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f7fd fe35 	bl	8000490 <__aeabi_f2d>
 8002826:	4604      	mov	r4, r0
 8002828:	460d      	mov	r5, r1
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800283a:	ee17 0a90 	vmov	r0, s15
 800283e:	f7fd fe27 	bl	8000490 <__aeabi_f2d>
 8002842:	a323      	add	r3, pc, #140	; (adr r3, 80028d0 <velocity_Pid_Calculate+0x120>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	f7fd ffa4 	bl	8000794 <__aeabi_ddiv>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4690      	mov	r8, r2
 8002852:	4699      	mov	r9, r3
 8002854:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <velocity_Pid_Calculate+0x130>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fe19 	bl	8000490 <__aeabi_f2d>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4640      	mov	r0, r8
 8002864:	4649      	mov	r1, r9
 8002866:	f7fd fe6b 	bl	8000540 <__aeabi_dmul>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4620      	mov	r0, r4
 8002870:	4629      	mov	r1, r5
 8002872:	f7fd fcad 	bl	80001d0 <__aeabi_dsub>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4610      	mov	r0, r2
 800287c:	4619      	mov	r1, r3
 800287e:	f7fe f8f9 	bl	8000a74 <__aeabi_d2f>
 8002882:	4603      	mov	r3, r0
 8002884:	60fb      	str	r3, [r7, #12]

		if(velocity_Cal > 5){
 8002886:	edd7 7a03 	vldr	s15, [r7, #12]
 800288a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800288e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002896:	dd02      	ble.n	800289e <velocity_Pid_Calculate+0xee>
			velocity_Cal = 5;
 8002898:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <velocity_Pid_Calculate+0x134>)
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	e00a      	b.n	80028b4 <velocity_Pid_Calculate+0x104>
		}
		else if(velocity_Cal < -5){
 800289e:	edd7 7a03 	vldr	s15, [r7, #12]
 80028a2:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80028a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ae:	d501      	bpl.n	80028b4 <velocity_Pid_Calculate+0x104>
			velocity_Cal = -5;
 80028b0:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <velocity_Pid_Calculate+0x138>)
 80028b2:	60fb      	str	r3, [r7, #12]
		}

		wheel->setting_Velocity = velocity_Cal;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else{
		wheel->setting_Velocity = 0;
	}

	return;
 80028ba:	e004      	b.n	80028c6 <velocity_Pid_Calculate+0x116>
		wheel->setting_Velocity = 0;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	639a      	str	r2, [r3, #56]	; 0x38
	return;
 80028c4:	bf00      	nop
}
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80028ce:	bf00      	nop
 80028d0:	9999999a 	.word	0x9999999a
 80028d4:	3fb99999 	.word	0x3fb99999
 80028d8:	20000200 	.word	0x20000200
 80028dc:	20000534 	.word	0x20000534
 80028e0:	20000538 	.word	0x20000538
 80028e4:	40a00000 	.word	0x40a00000
 80028e8:	c0a00000 	.word	0xc0a00000

080028ec <pwm_Pid_Matching>:

void pwm_Pid_Matching(Wheel_Data_TypeDef *wheel){
 80028ec:	b480      	push	{r7}
 80028ee:	b08b      	sub	sp, #44	; 0x2c
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	float scanner[2][2];
	float ratio;
	float setting_Velocity;

	//wheel matching
	setting_Velocity = wheel->setting_Velocity;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24

	if(setting_Velocity < 0){
 80028fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002906:	d505      	bpl.n	8002914 <pwm_Pid_Matching+0x28>
		setting_Velocity = (-1)*setting_Velocity;
 8002908:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800290c:	eef1 7a67 	vneg.f32	s15, s15
 8002910:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}
	//scanner scan
	for(int i = 0; i < 13; i++){
 8002914:	2300      	movs	r3, #0
 8002916:	623b      	str	r3, [r7, #32]
 8002918:	e03e      	b.n	8002998 <pwm_Pid_Matching+0xac>
		if(wheel->pwm_Data[i][1] <= setting_Velocity){
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	3370      	adds	r3, #112	; 0x70
 8002924:	edd3 7a00 	vldr	s15, [r3]
 8002928:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800292c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002934:	db0f      	blt.n	8002956 <pwm_Pid_Matching+0x6a>
			scanner[0][0] = wheel->pwm_Data[i][0];
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	330d      	adds	r3, #13
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4413      	add	r3, r2
 8002940:	3304      	adds	r3, #4
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60fb      	str	r3, [r7, #12]
			scanner[0][1] = wheel->pwm_Data[i][1];
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4413      	add	r3, r2
 800294e:	3370      	adds	r3, #112	; 0x70
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	e01d      	b.n	8002992 <pwm_Pid_Matching+0xa6>
		}
		else if(wheel->pwm_Data[i][1] > setting_Velocity){
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	3370      	adds	r3, #112	; 0x70
 8002960:	edd3 7a00 	vldr	s15, [r3]
 8002964:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002968:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800296c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002970:	d50f      	bpl.n	8002992 <pwm_Pid_Matching+0xa6>
			scanner[1][0] = wheel->pwm_Data[i][0];
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	330d      	adds	r3, #13
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	3304      	adds	r3, #4
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	617b      	str	r3, [r7, #20]
			scanner[1][1] = wheel->pwm_Data[i][1];
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	4413      	add	r3, r2
 800298a:	3370      	adds	r3, #112	; 0x70
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	61bb      	str	r3, [r7, #24]
			break;
 8002990:	e005      	b.n	800299e <pwm_Pid_Matching+0xb2>
	for(int i = 0; i < 13; i++){
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	3301      	adds	r3, #1
 8002996:	623b      	str	r3, [r7, #32]
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	2b0c      	cmp	r3, #12
 800299c:	ddbd      	ble.n	800291a <pwm_Pid_Matching+0x2e>
		}
	}

	//calculate wheel ratio;
	ratio = (setting_Velocity - scanner[0][1])/(scanner[1][1] - scanner[0][1]);
 800299e:	edd7 7a04 	vldr	s15, [r7, #16]
 80029a2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80029a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029aa:	ed97 7a06 	vldr	s14, [r7, #24]
 80029ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80029b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ba:	edc7 7a07 	vstr	s15, [r7, #28]

	//setting wheel_1 pwm
	if(ratio == 0){
 80029be:	edd7 7a07 	vldr	s15, [r7, #28]
 80029c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ca:	d108      	bne.n	80029de <pwm_Pid_Matching+0xf2>
		wheel->pwm = scanner[0][0];
 80029cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80029d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029d4:	ee17 2a90 	vmov	r2, s15
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	669a      	str	r2, [r3, #104]	; 0x68
	}
	else{
		wheel->pwm = (ratio*(scanner[1][0] - scanner[0][0])) + scanner[0][0];
	}

	return;
 80029dc:	e014      	b.n	8002a08 <pwm_Pid_Matching+0x11c>
		wheel->pwm = (ratio*(scanner[1][0] - scanner[0][0])) + scanner[0][0];
 80029de:	ed97 7a05 	vldr	s14, [r7, #20]
 80029e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80029e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80029ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80029f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029fe:	ee17 2a90 	vmov	r2, s15
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	669a      	str	r2, [r3, #104]	; 0x68
	return;
 8002a06:	bf00      	nop
}
 8002a08:	372c      	adds	r7, #44	; 0x2c
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_TIM_PeriodElapsedCallback>:

//define tim callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == pid_TIM->Instance){
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d10c      	bne.n	8002a44 <HAL_TIM_PeriodElapsedCallback+0x30>
		wheel_Information_Update(&wheel_1);
 8002a2a:	4809      	ldr	r0, [pc, #36]	; (8002a50 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002a2c:	f7ff fe50 	bl	80026d0 <wheel_Information_Update>
		wheel_Information_Update(&wheel_2);
 8002a30:	4808      	ldr	r0, [pc, #32]	; (8002a54 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002a32:	f7ff fe4d 	bl	80026d0 <wheel_Information_Update>
		position_Pid_Control();
 8002a36:	f7ff fccf 	bl	80023d8 <position_Pid_Control>
		velocity_Pid_Control();
 8002a3a:	f7ff fd77 	bl	800252c <velocity_Pid_Control>
		motor_Output();
 8002a3e:	f7ff fd89 	bl	8002554 <motor_Output>
	}

	return;
 8002a42:	bf00      	nop
 8002a44:	bf00      	nop
}
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20000528 	.word	0x20000528
 8002a50:	20000050 	.word	0x20000050
 8002a54:	20000124 	.word	0x20000124

08002a58 <HAL_GPIO_EXTI_Callback>:

//define exti callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	80fb      	strh	r3, [r7, #6]
	//check exti source
	if(GPIO_Pin == wheel_1.encoder_Ch1_Pin){
 8002a62:	4b8d      	ldr	r3, [pc, #564]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002a64:	8a9b      	ldrh	r3, [r3, #20]
 8002a66:	88fa      	ldrh	r2, [r7, #6]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	f040 80a3 	bne.w	8002bb4 <HAL_GPIO_EXTI_Callback+0x15c>
			//ch1 rising edge
			if(HAL_GPIO_ReadPin(wheel_1.encoder_Ch1_Gpio, wheel_1.encoder_Ch1_Pin)){
 8002a6e:	4b8a      	ldr	r3, [pc, #552]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	4a89      	ldr	r2, [pc, #548]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002a74:	8a92      	ldrh	r2, [r2, #20]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f001 f927 	bl	8003ccc <HAL_GPIO_ReadPin>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d016      	beq.n	8002ab2 <HAL_GPIO_EXTI_Callback+0x5a>
				//ch2 HIGH and ch1 rising edge
				if(HAL_GPIO_ReadPin(wheel_1.encoder_Ch2_Gpio, wheel_1.encoder_Ch2_Pin)){
 8002a84:	4b84      	ldr	r3, [pc, #528]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	4a83      	ldr	r2, [pc, #524]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002a8a:	8b92      	ldrh	r2, [r2, #28]
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f001 f91c 	bl	8003ccc <HAL_GPIO_ReadPin>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_GPIO_EXTI_Callback+0x4e>
					wheel_1.step--;
 8002a9a:	4b7f      	ldr	r3, [pc, #508]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	4a7d      	ldr	r2, [pc, #500]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002aa2:	6213      	str	r3, [r2, #32]
 8002aa4:	e01b      	b.n	8002ade <HAL_GPIO_EXTI_Callback+0x86>
				}
				//ch2 LOW and ch11 rising edge
				else{
					wheel_1.step++;
 8002aa6:	4b7c      	ldr	r3, [pc, #496]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	4a7a      	ldr	r2, [pc, #488]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002aae:	6213      	str	r3, [r2, #32]
 8002ab0:	e015      	b.n	8002ade <HAL_GPIO_EXTI_Callback+0x86>
				}
			}
			//ch1 falling edge
			else{
				//ch2 HIGH and ch1 falling edge
				if(HAL_GPIO_ReadPin(wheel_1.encoder_Ch2_Gpio, wheel_1.encoder_Ch2_Pin)){
 8002ab2:	4b79      	ldr	r3, [pc, #484]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	4a78      	ldr	r2, [pc, #480]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002ab8:	8b92      	ldrh	r2, [r2, #28]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f001 f905 	bl	8003ccc <HAL_GPIO_ReadPin>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_GPIO_EXTI_Callback+0x7c>
					wheel_1.step++;
 8002ac8:	4b73      	ldr	r3, [pc, #460]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	3301      	adds	r3, #1
 8002ace:	4a72      	ldr	r2, [pc, #456]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002ad0:	6213      	str	r3, [r2, #32]
 8002ad2:	e004      	b.n	8002ade <HAL_GPIO_EXTI_Callback+0x86>
				}
				//ch2 LOW and ch1 falling edge
				else{
					wheel_1.step--;
 8002ad4:	4b70      	ldr	r3, [pc, #448]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	4a6f      	ldr	r2, [pc, #444]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002adc:	6213      	str	r3, [r2, #32]
				}
			}
			//round step transfer

			//case 1 positive round
			if(wheel_1.round > 0){
 8002ade:	4b6e      	ldr	r3, [pc, #440]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	dd1d      	ble.n	8002b22 <HAL_GPIO_EXTI_Callback+0xca>
				if(wheel_1.step > step_Per_Round){
 8002ae6:	4b6c      	ldr	r3, [pc, #432]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002ae8:	6a1a      	ldr	r2, [r3, #32]
 8002aea:	4b6c      	ldr	r3, [pc, #432]	; (8002c9c <HAL_GPIO_EXTI_Callback+0x244>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	dd08      	ble.n	8002b04 <HAL_GPIO_EXTI_Callback+0xac>
					wheel_1.step = 0;
 8002af2:	4b69      	ldr	r3, [pc, #420]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	621a      	str	r2, [r3, #32]
					wheel_1.round++;
 8002af8:	4b67      	ldr	r3, [pc, #412]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	3301      	adds	r3, #1
 8002afe:	4a66      	ldr	r2, [pc, #408]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002b00:	6253      	str	r3, [r2, #36]	; 0x24
				else if(wheel_1.step < 0){
					wheel_1.step = step_Per_Round;
					wheel_1.round--;
				}

				return;
 8002b02:	e102      	b.n	8002d0a <HAL_GPIO_EXTI_Callback+0x2b2>
				else if(wheel_1.step < 0){
 8002b04:	4b64      	ldr	r3, [pc, #400]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f280 80fe 	bge.w	8002d0a <HAL_GPIO_EXTI_Callback+0x2b2>
					wheel_1.step = step_Per_Round;
 8002b0e:	4b63      	ldr	r3, [pc, #396]	; (8002c9c <HAL_GPIO_EXTI_Callback+0x244>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a61      	ldr	r2, [pc, #388]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002b14:	6213      	str	r3, [r2, #32]
					wheel_1.round--;
 8002b16:	4b60      	ldr	r3, [pc, #384]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	4a5e      	ldr	r2, [pc, #376]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002b1e:	6253      	str	r3, [r2, #36]	; 0x24
				return;
 8002b20:	e0f3      	b.n	8002d0a <HAL_GPIO_EXTI_Callback+0x2b2>
			}
			//case 2 zero round
			else if(wheel_1.round == 0){
 8002b22:	4b5d      	ldr	r3, [pc, #372]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d11f      	bne.n	8002b6a <HAL_GPIO_EXTI_Callback+0x112>
				if(wheel_1.step > step_Per_Round){
 8002b2a:	4b5b      	ldr	r3, [pc, #364]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002b2c:	6a1a      	ldr	r2, [r3, #32]
 8002b2e:	4b5b      	ldr	r3, [pc, #364]	; (8002c9c <HAL_GPIO_EXTI_Callback+0x244>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	dd08      	ble.n	8002b48 <HAL_GPIO_EXTI_Callback+0xf0>
					wheel_1.step = 0;
 8002b36:	4b58      	ldr	r3, [pc, #352]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	621a      	str	r2, [r3, #32]
					wheel_1.round++;
 8002b3c:	4b56      	ldr	r3, [pc, #344]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	3301      	adds	r3, #1
 8002b42:	4a55      	ldr	r2, [pc, #340]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002b44:	6253      	str	r3, [r2, #36]	; 0x24
				else if(wheel_1.step < -1*step_Per_Round){
					wheel_1.step = 0;
					wheel_1.round--;
				}

				return;
 8002b46:	e0e2      	b.n	8002d0e <HAL_GPIO_EXTI_Callback+0x2b6>
				else if(wheel_1.step < -1*step_Per_Round){
 8002b48:	4b53      	ldr	r3, [pc, #332]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002b4a:	6a1a      	ldr	r2, [r3, #32]
 8002b4c:	4b53      	ldr	r3, [pc, #332]	; (8002c9c <HAL_GPIO_EXTI_Callback+0x244>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	425b      	negs	r3, r3
 8002b52:	429a      	cmp	r2, r3
 8002b54:	f280 80db 	bge.w	8002d0e <HAL_GPIO_EXTI_Callback+0x2b6>
					wheel_1.step = 0;
 8002b58:	4b4f      	ldr	r3, [pc, #316]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	621a      	str	r2, [r3, #32]
					wheel_1.round--;
 8002b5e:	4b4e      	ldr	r3, [pc, #312]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	3b01      	subs	r3, #1
 8002b64:	4a4c      	ldr	r2, [pc, #304]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002b66:	6253      	str	r3, [r2, #36]	; 0x24
				return;
 8002b68:	e0d1      	b.n	8002d0e <HAL_GPIO_EXTI_Callback+0x2b6>
			}
			//case 3 negative round
			else if(wheel_1.round < 0){
 8002b6a:	4b4b      	ldr	r3, [pc, #300]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f280 80cf 	bge.w	8002d12 <HAL_GPIO_EXTI_Callback+0x2ba>
				if(wheel_1.step < -1*step_Per_Round){
 8002b74:	4b48      	ldr	r3, [pc, #288]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002b76:	6a1a      	ldr	r2, [r3, #32]
 8002b78:	4b48      	ldr	r3, [pc, #288]	; (8002c9c <HAL_GPIO_EXTI_Callback+0x244>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	425b      	negs	r3, r3
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	da08      	bge.n	8002b94 <HAL_GPIO_EXTI_Callback+0x13c>
					wheel_1.step = 0;
 8002b82:	4b45      	ldr	r3, [pc, #276]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	621a      	str	r2, [r3, #32]
					wheel_1.round--;
 8002b88:	4b43      	ldr	r3, [pc, #268]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	4a42      	ldr	r2, [pc, #264]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002b90:	6253      	str	r3, [r2, #36]	; 0x24
				else if(wheel_1.step > 0){
					wheel_1.step = -1*step_Per_Round;
					wheel_1.round++;
				}

				return;
 8002b92:	e0c0      	b.n	8002d16 <HAL_GPIO_EXTI_Callback+0x2be>
				else if(wheel_1.step > 0){
 8002b94:	4b40      	ldr	r3, [pc, #256]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f340 80bc 	ble.w	8002d16 <HAL_GPIO_EXTI_Callback+0x2be>
					wheel_1.step = -1*step_Per_Round;
 8002b9e:	4b3f      	ldr	r3, [pc, #252]	; (8002c9c <HAL_GPIO_EXTI_Callback+0x244>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	425b      	negs	r3, r3
 8002ba4:	4a3c      	ldr	r2, [pc, #240]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002ba6:	6213      	str	r3, [r2, #32]
					wheel_1.round++;
 8002ba8:	4b3b      	ldr	r3, [pc, #236]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	3301      	adds	r3, #1
 8002bae:	4a3a      	ldr	r2, [pc, #232]	; (8002c98 <HAL_GPIO_EXTI_Callback+0x240>)
 8002bb0:	6253      	str	r3, [r2, #36]	; 0x24
				return;
 8002bb2:	e0b0      	b.n	8002d16 <HAL_GPIO_EXTI_Callback+0x2be>
			}
		}
		//check exti source
		else if(GPIO_Pin == wheel_2.encoder_Ch1_Pin){
 8002bb4:	4b3a      	ldr	r3, [pc, #232]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002bb6:	8a9b      	ldrh	r3, [r3, #20]
 8002bb8:	88fa      	ldrh	r2, [r7, #6]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	f040 80a9 	bne.w	8002d12 <HAL_GPIO_EXTI_Callback+0x2ba>
			//ch1 rising edge
			if(HAL_GPIO_ReadPin(wheel_2.encoder_Ch1_Gpio, wheel_2.encoder_Ch1_Pin)){
 8002bc0:	4b37      	ldr	r3, [pc, #220]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	4a36      	ldr	r2, [pc, #216]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002bc6:	8a92      	ldrh	r2, [r2, #20]
 8002bc8:	4611      	mov	r1, r2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f001 f87e 	bl	8003ccc <HAL_GPIO_ReadPin>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d016      	beq.n	8002c04 <HAL_GPIO_EXTI_Callback+0x1ac>
				//ch2 HIGH and ch1 rising edge
				if(HAL_GPIO_ReadPin(wheel_2.encoder_Ch2_Gpio, wheel_2.encoder_Ch2_Pin)){
 8002bd6:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	4a31      	ldr	r2, [pc, #196]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002bdc:	8b92      	ldrh	r2, [r2, #28]
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f001 f873 	bl	8003ccc <HAL_GPIO_ReadPin>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_GPIO_EXTI_Callback+0x1a0>
					wheel_2.step--;
 8002bec:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	4a2b      	ldr	r2, [pc, #172]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002bf4:	6213      	str	r3, [r2, #32]
 8002bf6:	e01b      	b.n	8002c30 <HAL_GPIO_EXTI_Callback+0x1d8>
				}
				//ch2 LOW and ch1 rising edge
				else{
					wheel_2.step++;
 8002bf8:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	4a28      	ldr	r2, [pc, #160]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c00:	6213      	str	r3, [r2, #32]
 8002c02:	e015      	b.n	8002c30 <HAL_GPIO_EXTI_Callback+0x1d8>
				}
			}
			//ch1 falling edge
			else{
				//ch2 HIGH and ch1 falling edge
				if(HAL_GPIO_ReadPin(wheel_2.encoder_Ch2_Gpio, wheel_2.encoder_Ch2_Pin)){
 8002c04:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	4a25      	ldr	r2, [pc, #148]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c0a:	8b92      	ldrh	r2, [r2, #28]
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f001 f85c 	bl	8003ccc <HAL_GPIO_ReadPin>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_GPIO_EXTI_Callback+0x1ce>
					wheel_2.step++;
 8002c1a:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	4a1f      	ldr	r2, [pc, #124]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c22:	6213      	str	r3, [r2, #32]
 8002c24:	e004      	b.n	8002c30 <HAL_GPIO_EXTI_Callback+0x1d8>
				}
				//ch2 LOW and ch1 falling edge
				else{
					wheel_2.step--;
 8002c26:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c2e:	6213      	str	r3, [r2, #32]
				}
			}
			//round step transfer

			//case 1 positive round
			if(wheel_2.round > 0){
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	dd1c      	ble.n	8002c72 <HAL_GPIO_EXTI_Callback+0x21a>
				if(wheel_2.step > step_Per_Round){
 8002c38:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c3a:	6a1a      	ldr	r2, [r3, #32]
 8002c3c:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <HAL_GPIO_EXTI_Callback+0x244>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	dd08      	ble.n	8002c56 <HAL_GPIO_EXTI_Callback+0x1fe>
					wheel_2.step = 0;
 8002c44:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	621a      	str	r2, [r3, #32]
					wheel_2.round++;
 8002c4a:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	3301      	adds	r3, #1
 8002c50:	4a13      	ldr	r2, [pc, #76]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c52:	6253      	str	r3, [r2, #36]	; 0x24
				else if(wheel_2.step < 0){
					wheel_2.step = step_Per_Round;
					wheel_2.round--;
				}

				return;
 8002c54:	e061      	b.n	8002d1a <HAL_GPIO_EXTI_Callback+0x2c2>
				else if(wheel_2.step < 0){
 8002c56:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	da5d      	bge.n	8002d1a <HAL_GPIO_EXTI_Callback+0x2c2>
					wheel_2.step = step_Per_Round;
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <HAL_GPIO_EXTI_Callback+0x244>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a0f      	ldr	r2, [pc, #60]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c64:	6213      	str	r3, [r2, #32]
					wheel_2.round--;
 8002c66:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	4a0c      	ldr	r2, [pc, #48]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c6e:	6253      	str	r3, [r2, #36]	; 0x24
				return;
 8002c70:	e053      	b.n	8002d1a <HAL_GPIO_EXTI_Callback+0x2c2>
			}
			//case 2 zero round
			else if(wheel_2.round == 0){
 8002c72:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d124      	bne.n	8002cc4 <HAL_GPIO_EXTI_Callback+0x26c>
				if(wheel_2.step > step_Per_Round){
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c7c:	6a1a      	ldr	r2, [r3, #32]
 8002c7e:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <HAL_GPIO_EXTI_Callback+0x244>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	dd0e      	ble.n	8002ca4 <HAL_GPIO_EXTI_Callback+0x24c>
					wheel_2.step = 0;
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	621a      	str	r2, [r3, #32]
					wheel_2.round++;
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	3301      	adds	r3, #1
 8002c92:	4a03      	ldr	r2, [pc, #12]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c94:	6253      	str	r3, [r2, #36]	; 0x24
				else if(wheel_2.step < -1*step_Per_Round){
					wheel_2.step = 0;
					wheel_2.round--;
				}

				return;
 8002c96:	e042      	b.n	8002d1e <HAL_GPIO_EXTI_Callback+0x2c6>
 8002c98:	20000050 	.word	0x20000050
 8002c9c:	200001f8 	.word	0x200001f8
 8002ca0:	20000124 	.word	0x20000124
				else if(wheel_2.step < -1*step_Per_Round){
 8002ca4:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002ca6:	6a1a      	ldr	r2, [r3, #32]
 8002ca8:	4b21      	ldr	r3, [pc, #132]	; (8002d30 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	425b      	negs	r3, r3
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	da35      	bge.n	8002d1e <HAL_GPIO_EXTI_Callback+0x2c6>
					wheel_2.step = 0;
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	621a      	str	r2, [r3, #32]
					wheel_2.round--;
 8002cb8:	4b1c      	ldr	r3, [pc, #112]	; (8002d2c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	4a1b      	ldr	r2, [pc, #108]	; (8002d2c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002cc0:	6253      	str	r3, [r2, #36]	; 0x24
				return;
 8002cc2:	e02c      	b.n	8002d1e <HAL_GPIO_EXTI_Callback+0x2c6>
			}
			//case 3 negative round
			else if(wheel_2.round < 0){
 8002cc4:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	da22      	bge.n	8002d12 <HAL_GPIO_EXTI_Callback+0x2ba>
				if(wheel_2.step < -1*step_Per_Round){
 8002ccc:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002cce:	6a1a      	ldr	r2, [r3, #32]
 8002cd0:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	425b      	negs	r3, r3
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	da08      	bge.n	8002cec <HAL_GPIO_EXTI_Callback+0x294>
					wheel_2.step = 0;
 8002cda:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	621a      	str	r2, [r3, #32]
					wheel_2.round--;
 8002ce0:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	4a11      	ldr	r2, [pc, #68]	; (8002d2c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002ce8:	6253      	str	r3, [r2, #36]	; 0x24
				else if(wheel_2.step > 0){
					wheel_2.step = -1*step_Per_Round;
					wheel_2.round++;
				}

				return;
 8002cea:	e01a      	b.n	8002d22 <HAL_GPIO_EXTI_Callback+0x2ca>
				else if(wheel_2.step > 0){
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	dd16      	ble.n	8002d22 <HAL_GPIO_EXTI_Callback+0x2ca>
					wheel_2.step = -1*step_Per_Round;
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	425b      	negs	r3, r3
 8002cfa:	4a0c      	ldr	r2, [pc, #48]	; (8002d2c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002cfc:	6213      	str	r3, [r2, #32]
					wheel_2.round++;
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	3301      	adds	r3, #1
 8002d04:	4a09      	ldr	r2, [pc, #36]	; (8002d2c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002d06:	6253      	str	r3, [r2, #36]	; 0x24
				return;
 8002d08:	e00b      	b.n	8002d22 <HAL_GPIO_EXTI_Callback+0x2ca>
				return;
 8002d0a:	bf00      	nop
 8002d0c:	e00a      	b.n	8002d24 <HAL_GPIO_EXTI_Callback+0x2cc>
				return;
 8002d0e:	bf00      	nop
 8002d10:	e008      	b.n	8002d24 <HAL_GPIO_EXTI_Callback+0x2cc>
			}
		}

	return;
 8002d12:	bf00      	nop
 8002d14:	e006      	b.n	8002d24 <HAL_GPIO_EXTI_Callback+0x2cc>
				return;
 8002d16:	bf00      	nop
 8002d18:	e004      	b.n	8002d24 <HAL_GPIO_EXTI_Callback+0x2cc>
				return;
 8002d1a:	bf00      	nop
 8002d1c:	e002      	b.n	8002d24 <HAL_GPIO_EXTI_Callback+0x2cc>
				return;
 8002d1e:	bf00      	nop
 8002d20:	e000      	b.n	8002d24 <HAL_GPIO_EXTI_Callback+0x2cc>
				return;
 8002d22:	bf00      	nop
}
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000124 	.word	0x20000124
 8002d30:	200001f8 	.word	0x200001f8

08002d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d38:	480d      	ldr	r0, [pc, #52]	; (8002d70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d3a:	490e      	ldr	r1, [pc, #56]	; (8002d74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d3c:	4a0e      	ldr	r2, [pc, #56]	; (8002d78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d40:	e002      	b.n	8002d48 <LoopCopyDataInit>

08002d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d46:	3304      	adds	r3, #4

08002d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d4c:	d3f9      	bcc.n	8002d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d4e:	4a0b      	ldr	r2, [pc, #44]	; (8002d7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d50:	4c0b      	ldr	r4, [pc, #44]	; (8002d80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d54:	e001      	b.n	8002d5a <LoopFillZerobss>

08002d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d58:	3204      	adds	r2, #4

08002d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d5c:	d3fb      	bcc.n	8002d56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d5e:	f7ff f9a3 	bl	80020a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d62:	f009 fc7f 	bl	800c664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d66:	f7fe f857 	bl	8000e18 <main>
  bx  lr    
 8002d6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d74:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8002d78:	0800c91c 	.word	0x0800c91c
  ldr r2, =_sbss
 8002d7c:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8002d80:	20000c3c 	.word	0x20000c3c

08002d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d84:	e7fe      	b.n	8002d84 <ADC_IRQHandler>
	...

08002d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d8c:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <HAL_Init+0x40>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a0d      	ldr	r2, [pc, #52]	; (8002dc8 <HAL_Init+0x40>)
 8002d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_Init+0x40>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <HAL_Init+0x40>)
 8002d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002da4:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <HAL_Init+0x40>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a07      	ldr	r2, [pc, #28]	; (8002dc8 <HAL_Init+0x40>)
 8002daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002db0:	2003      	movs	r0, #3
 8002db2:	f000 fd1b 	bl	80037ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002db6:	2000      	movs	r0, #0
 8002db8:	f000 f808 	bl	8002dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dbc:	f7fe fe7a 	bl	8001ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40023c00 	.word	0x40023c00

08002dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dd4:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <HAL_InitTick+0x54>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <HAL_InitTick+0x58>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fd33 	bl	8003856 <HAL_SYSTICK_Config>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e00e      	b.n	8002e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b0f      	cmp	r3, #15
 8002dfe:	d80a      	bhi.n	8002e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e00:	2200      	movs	r2, #0
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e08:	f000 fcfb 	bl	8003802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e0c:	4a06      	ldr	r2, [pc, #24]	; (8002e28 <HAL_InitTick+0x5c>)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e000      	b.n	8002e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	2000004c 	.word	0x2000004c
 8002e24:	20000208 	.word	0x20000208
 8002e28:	20000204 	.word	0x20000204

08002e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_IncTick+0x20>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <HAL_IncTick+0x24>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <HAL_IncTick+0x24>)
 8002e3e:	6013      	str	r3, [r2, #0]
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000208 	.word	0x20000208
 8002e50:	20000548 	.word	0x20000548

08002e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return uwTick;
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <HAL_GetTick+0x14>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20000548 	.word	0x20000548

08002e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e74:	f7ff ffee 	bl	8002e54 <HAL_GetTick>
 8002e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e84:	d005      	beq.n	8002e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <HAL_Delay+0x44>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4413      	add	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e92:	bf00      	nop
 8002e94:	f7ff ffde 	bl	8002e54 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d8f7      	bhi.n	8002e94 <HAL_Delay+0x28>
  {
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000208 	.word	0x20000208

08002eb4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e033      	b.n	8002f32 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d109      	bne.n	8002ee6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fe fe16 	bl	8001b04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d118      	bne.n	8002f24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002efa:	f023 0302 	bic.w	r3, r3, #2
 8002efe:	f043 0202 	orr.w	r2, r3, #2
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 faa4 	bl	8003454 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f023 0303 	bic.w	r3, r3, #3
 8002f1a:	f043 0201 	orr.w	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40
 8002f22:	e001      	b.n	8002f28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_ADC_Start+0x1a>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e0b2      	b.n	80030bc <HAL_ADC_Start+0x180>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d018      	beq.n	8002f9e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f7c:	4b52      	ldr	r3, [pc, #328]	; (80030c8 <HAL_ADC_Start+0x18c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a52      	ldr	r2, [pc, #328]	; (80030cc <HAL_ADC_Start+0x190>)
 8002f82:	fba2 2303 	umull	r2, r3, r2, r3
 8002f86:	0c9a      	lsrs	r2, r3, #18
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f90:	e002      	b.n	8002f98 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	3b01      	subs	r3, #1
 8002f96:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f9      	bne.n	8002f92 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d17a      	bne.n	80030a2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002fb4:	f023 0301 	bic.w	r3, r3, #1
 8002fb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d007      	beq.n	8002fde <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fea:	d106      	bne.n	8002ffa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff0:	f023 0206 	bic.w	r2, r3, #6
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	645a      	str	r2, [r3, #68]	; 0x44
 8002ff8:	e002      	b.n	8003000 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003008:	4b31      	ldr	r3, [pc, #196]	; (80030d0 <HAL_ADC_Start+0x194>)
 800300a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003014:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 031f 	and.w	r3, r3, #31
 800301e:	2b00      	cmp	r3, #0
 8003020:	d12a      	bne.n	8003078 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a2b      	ldr	r2, [pc, #172]	; (80030d4 <HAL_ADC_Start+0x198>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d015      	beq.n	8003058 <HAL_ADC_Start+0x11c>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a29      	ldr	r2, [pc, #164]	; (80030d8 <HAL_ADC_Start+0x19c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d105      	bne.n	8003042 <HAL_ADC_Start+0x106>
 8003036:	4b26      	ldr	r3, [pc, #152]	; (80030d0 <HAL_ADC_Start+0x194>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 031f 	and.w	r3, r3, #31
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a25      	ldr	r2, [pc, #148]	; (80030dc <HAL_ADC_Start+0x1a0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d136      	bne.n	80030ba <HAL_ADC_Start+0x17e>
 800304c:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <HAL_ADC_Start+0x194>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	d130      	bne.n	80030ba <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d129      	bne.n	80030ba <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	e020      	b.n	80030ba <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a15      	ldr	r2, [pc, #84]	; (80030d4 <HAL_ADC_Start+0x198>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d11b      	bne.n	80030ba <HAL_ADC_Start+0x17e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d114      	bne.n	80030ba <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	e00b      	b.n	80030ba <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f043 0210 	orr.w	r2, r3, #16
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	f043 0201 	orr.w	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	2000004c 	.word	0x2000004c
 80030cc:	431bde83 	.word	0x431bde83
 80030d0:	40012300 	.word	0x40012300
 80030d4:	40012000 	.word	0x40012000
 80030d8:	40012100 	.word	0x40012100
 80030dc:	40012200 	.word	0x40012200

080030e0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fc:	d113      	bne.n	8003126 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800310c:	d10b      	bne.n	8003126 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f043 0220 	orr.w	r2, r3, #32
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e063      	b.n	80031ee <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003126:	f7ff fe95 	bl	8002e54 <HAL_GetTick>
 800312a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800312c:	e021      	b.n	8003172 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003134:	d01d      	beq.n	8003172 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d007      	beq.n	800314c <HAL_ADC_PollForConversion+0x6c>
 800313c:	f7ff fe8a 	bl	8002e54 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d212      	bcs.n	8003172 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b02      	cmp	r3, #2
 8003158:	d00b      	beq.n	8003172 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f043 0204 	orr.w	r2, r3, #4
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e03d      	b.n	80031ee <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b02      	cmp	r3, #2
 800317e:	d1d6      	bne.n	800312e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0212 	mvn.w	r2, #18
 8003188:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d123      	bne.n	80031ec <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d11f      	bne.n	80031ec <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d006      	beq.n	80031c8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d111      	bne.n	80031ec <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d105      	bne.n	80031ec <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f043 0201 	orr.w	r2, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_ADC_ConfigChannel+0x1c>
 8003228:	2302      	movs	r3, #2
 800322a:	e105      	b.n	8003438 <HAL_ADC_ConfigChannel+0x228>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b09      	cmp	r3, #9
 800323a:	d925      	bls.n	8003288 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68d9      	ldr	r1, [r3, #12]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	4613      	mov	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	4413      	add	r3, r2
 8003250:	3b1e      	subs	r3, #30
 8003252:	2207      	movs	r2, #7
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43da      	mvns	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	400a      	ands	r2, r1
 8003260:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68d9      	ldr	r1, [r3, #12]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	b29b      	uxth	r3, r3
 8003272:	4618      	mov	r0, r3
 8003274:	4603      	mov	r3, r0
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4403      	add	r3, r0
 800327a:	3b1e      	subs	r3, #30
 800327c:	409a      	lsls	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	e022      	b.n	80032ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6919      	ldr	r1, [r3, #16]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	b29b      	uxth	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	4613      	mov	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4413      	add	r3, r2
 800329c:	2207      	movs	r2, #7
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43da      	mvns	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	400a      	ands	r2, r1
 80032aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6919      	ldr	r1, [r3, #16]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	4618      	mov	r0, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	4403      	add	r3, r0
 80032c4:	409a      	lsls	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d824      	bhi.n	8003320 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	3b05      	subs	r3, #5
 80032e8:	221f      	movs	r2, #31
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43da      	mvns	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	400a      	ands	r2, r1
 80032f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	4618      	mov	r0, r3
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	3b05      	subs	r3, #5
 8003312:	fa00 f203 	lsl.w	r2, r0, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	635a      	str	r2, [r3, #52]	; 0x34
 800331e:	e04c      	b.n	80033ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b0c      	cmp	r3, #12
 8003326:	d824      	bhi.n	8003372 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	3b23      	subs	r3, #35	; 0x23
 800333a:	221f      	movs	r2, #31
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43da      	mvns	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	400a      	ands	r2, r1
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	b29b      	uxth	r3, r3
 8003356:	4618      	mov	r0, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	3b23      	subs	r3, #35	; 0x23
 8003364:	fa00 f203 	lsl.w	r2, r0, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
 8003370:	e023      	b.n	80033ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	3b41      	subs	r3, #65	; 0x41
 8003384:	221f      	movs	r2, #31
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43da      	mvns	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	400a      	ands	r2, r1
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	4618      	mov	r0, r3
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	3b41      	subs	r3, #65	; 0x41
 80033ae:	fa00 f203 	lsl.w	r2, r0, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033ba:	4b22      	ldr	r3, [pc, #136]	; (8003444 <HAL_ADC_ConfigChannel+0x234>)
 80033bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a21      	ldr	r2, [pc, #132]	; (8003448 <HAL_ADC_ConfigChannel+0x238>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d109      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x1cc>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b12      	cmp	r3, #18
 80033ce:	d105      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a19      	ldr	r2, [pc, #100]	; (8003448 <HAL_ADC_ConfigChannel+0x238>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d123      	bne.n	800342e <HAL_ADC_ConfigChannel+0x21e>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b10      	cmp	r3, #16
 80033ec:	d003      	beq.n	80033f6 <HAL_ADC_ConfigChannel+0x1e6>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b11      	cmp	r3, #17
 80033f4:	d11b      	bne.n	800342e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b10      	cmp	r3, #16
 8003408:	d111      	bne.n	800342e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800340a:	4b10      	ldr	r3, [pc, #64]	; (800344c <HAL_ADC_ConfigChannel+0x23c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a10      	ldr	r2, [pc, #64]	; (8003450 <HAL_ADC_ConfigChannel+0x240>)
 8003410:	fba2 2303 	umull	r2, r3, r2, r3
 8003414:	0c9a      	lsrs	r2, r3, #18
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003420:	e002      	b.n	8003428 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	3b01      	subs	r3, #1
 8003426:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f9      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	40012300 	.word	0x40012300
 8003448:	40012000 	.word	0x40012000
 800344c:	2000004c 	.word	0x2000004c
 8003450:	431bde83 	.word	0x431bde83

08003454 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800345c:	4b79      	ldr	r3, [pc, #484]	; (8003644 <ADC_Init+0x1f0>)
 800345e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	431a      	orrs	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003488:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	021a      	lsls	r2, r3, #8
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6859      	ldr	r1, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6899      	ldr	r1, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e6:	4a58      	ldr	r2, [pc, #352]	; (8003648 <ADC_Init+0x1f4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d022      	beq.n	8003532 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6899      	ldr	r1, [r3, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800351c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6899      	ldr	r1, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	e00f      	b.n	8003552 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003540:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003550:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0202 	bic.w	r2, r2, #2
 8003560:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6899      	ldr	r1, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	7e1b      	ldrb	r3, [r3, #24]
 800356c:	005a      	lsls	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d01b      	beq.n	80035b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800358e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800359e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6859      	ldr	r1, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	3b01      	subs	r3, #1
 80035ac:	035a      	lsls	r2, r3, #13
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	e007      	b.n	80035c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	051a      	lsls	r2, r3, #20
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6899      	ldr	r1, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800360a:	025a      	lsls	r2, r3, #9
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003622:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6899      	ldr	r1, [r3, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	029a      	lsls	r2, r3, #10
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	609a      	str	r2, [r3, #8]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	40012300 	.word	0x40012300
 8003648:	0f000001 	.word	0x0f000001

0800364c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <__NVIC_SetPriorityGrouping+0x44>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003668:	4013      	ands	r3, r2
 800366a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800367c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800367e:	4a04      	ldr	r2, [pc, #16]	; (8003690 <__NVIC_SetPriorityGrouping+0x44>)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	60d3      	str	r3, [r2, #12]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003698:	4b04      	ldr	r3, [pc, #16]	; (80036ac <__NVIC_GetPriorityGrouping+0x18>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	0a1b      	lsrs	r3, r3, #8
 800369e:	f003 0307 	and.w	r3, r3, #7
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	e000ed00 	.word	0xe000ed00

080036b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	db0b      	blt.n	80036da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	f003 021f 	and.w	r2, r3, #31
 80036c8:	4907      	ldr	r1, [pc, #28]	; (80036e8 <__NVIC_EnableIRQ+0x38>)
 80036ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	2001      	movs	r0, #1
 80036d2:	fa00 f202 	lsl.w	r2, r0, r2
 80036d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	e000e100 	.word	0xe000e100

080036ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	6039      	str	r1, [r7, #0]
 80036f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	db0a      	blt.n	8003716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	b2da      	uxtb	r2, r3
 8003704:	490c      	ldr	r1, [pc, #48]	; (8003738 <__NVIC_SetPriority+0x4c>)
 8003706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370a:	0112      	lsls	r2, r2, #4
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	440b      	add	r3, r1
 8003710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003714:	e00a      	b.n	800372c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4908      	ldr	r1, [pc, #32]	; (800373c <__NVIC_SetPriority+0x50>)
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	3b04      	subs	r3, #4
 8003724:	0112      	lsls	r2, r2, #4
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	440b      	add	r3, r1
 800372a:	761a      	strb	r2, [r3, #24]
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	e000e100 	.word	0xe000e100
 800373c:	e000ed00 	.word	0xe000ed00

08003740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003740:	b480      	push	{r7}
 8003742:	b089      	sub	sp, #36	; 0x24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f1c3 0307 	rsb	r3, r3, #7
 800375a:	2b04      	cmp	r3, #4
 800375c:	bf28      	it	cs
 800375e:	2304      	movcs	r3, #4
 8003760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	3304      	adds	r3, #4
 8003766:	2b06      	cmp	r3, #6
 8003768:	d902      	bls.n	8003770 <NVIC_EncodePriority+0x30>
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	3b03      	subs	r3, #3
 800376e:	e000      	b.n	8003772 <NVIC_EncodePriority+0x32>
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43da      	mvns	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	401a      	ands	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003788:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	fa01 f303 	lsl.w	r3, r1, r3
 8003792:	43d9      	mvns	r1, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003798:	4313      	orrs	r3, r2
         );
}
 800379a:	4618      	mov	r0, r3
 800379c:	3724      	adds	r7, #36	; 0x24
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037b8:	d301      	bcc.n	80037be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ba:	2301      	movs	r3, #1
 80037bc:	e00f      	b.n	80037de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037be:	4a0a      	ldr	r2, [pc, #40]	; (80037e8 <SysTick_Config+0x40>)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037c6:	210f      	movs	r1, #15
 80037c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037cc:	f7ff ff8e 	bl	80036ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037d0:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <SysTick_Config+0x40>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037d6:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <SysTick_Config+0x40>)
 80037d8:	2207      	movs	r2, #7
 80037da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	e000e010 	.word	0xe000e010

080037ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ff29 	bl	800364c <__NVIC_SetPriorityGrouping>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003802:	b580      	push	{r7, lr}
 8003804:	b086      	sub	sp, #24
 8003806:	af00      	add	r7, sp, #0
 8003808:	4603      	mov	r3, r0
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	607a      	str	r2, [r7, #4]
 800380e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003814:	f7ff ff3e 	bl	8003694 <__NVIC_GetPriorityGrouping>
 8003818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	6978      	ldr	r0, [r7, #20]
 8003820:	f7ff ff8e 	bl	8003740 <NVIC_EncodePriority>
 8003824:	4602      	mov	r2, r0
 8003826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800382a:	4611      	mov	r1, r2
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff ff5d 	bl	80036ec <__NVIC_SetPriority>
}
 8003832:	bf00      	nop
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	4603      	mov	r3, r0
 8003842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ff31 	bl	80036b0 <__NVIC_EnableIRQ>
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff ffa2 	bl	80037a8 <SysTick_Config>
 8003864:	4603      	mov	r3, r0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800387c:	f7ff faea 	bl	8002e54 <HAL_GetTick>
 8003880:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d008      	beq.n	80038a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2280      	movs	r2, #128	; 0x80
 8003892:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e052      	b.n	8003946 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0216 	bic.w	r2, r2, #22
 80038ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d103      	bne.n	80038d0 <HAL_DMA_Abort+0x62>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0208 	bic.w	r2, r2, #8
 80038de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0201 	bic.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038f0:	e013      	b.n	800391a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038f2:	f7ff faaf 	bl	8002e54 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b05      	cmp	r3, #5
 80038fe:	d90c      	bls.n	800391a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2220      	movs	r2, #32
 8003904:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2203      	movs	r2, #3
 800390a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e015      	b.n	8003946 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e4      	bne.n	80038f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392c:	223f      	movs	r2, #63	; 0x3f
 800392e:	409a      	lsls	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d004      	beq.n	800396c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2280      	movs	r2, #128	; 0x80
 8003966:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e00c      	b.n	8003986 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2205      	movs	r2, #5
 8003970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
	...

08003994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003994:	b480      	push	{r7}
 8003996:	b089      	sub	sp, #36	; 0x24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
 80039ae:	e16b      	b.n	8003c88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039b0:	2201      	movs	r2, #1
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4013      	ands	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	f040 815a 	bne.w	8003c82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d005      	beq.n	80039e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d130      	bne.n	8003a48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	2203      	movs	r2, #3
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43db      	mvns	r3, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4013      	ands	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 0201 	and.w	r2, r3, #1
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d017      	beq.n	8003a84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	2203      	movs	r2, #3
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	43db      	mvns	r3, r3
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d123      	bne.n	8003ad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	08da      	lsrs	r2, r3, #3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3208      	adds	r2, #8
 8003a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	220f      	movs	r2, #15
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	43db      	mvns	r3, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	08da      	lsrs	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3208      	adds	r2, #8
 8003ad2:	69b9      	ldr	r1, [r7, #24]
 8003ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 0203 	and.w	r2, r3, #3
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80b4 	beq.w	8003c82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	4b60      	ldr	r3, [pc, #384]	; (8003ca0 <HAL_GPIO_Init+0x30c>)
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	4a5f      	ldr	r2, [pc, #380]	; (8003ca0 <HAL_GPIO_Init+0x30c>)
 8003b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b28:	6453      	str	r3, [r2, #68]	; 0x44
 8003b2a:	4b5d      	ldr	r3, [pc, #372]	; (8003ca0 <HAL_GPIO_Init+0x30c>)
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b36:	4a5b      	ldr	r2, [pc, #364]	; (8003ca4 <HAL_GPIO_Init+0x310>)
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	089b      	lsrs	r3, r3, #2
 8003b3c:	3302      	adds	r3, #2
 8003b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	220f      	movs	r2, #15
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	43db      	mvns	r3, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4013      	ands	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a52      	ldr	r2, [pc, #328]	; (8003ca8 <HAL_GPIO_Init+0x314>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d02b      	beq.n	8003bba <HAL_GPIO_Init+0x226>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a51      	ldr	r2, [pc, #324]	; (8003cac <HAL_GPIO_Init+0x318>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d025      	beq.n	8003bb6 <HAL_GPIO_Init+0x222>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a50      	ldr	r2, [pc, #320]	; (8003cb0 <HAL_GPIO_Init+0x31c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d01f      	beq.n	8003bb2 <HAL_GPIO_Init+0x21e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a4f      	ldr	r2, [pc, #316]	; (8003cb4 <HAL_GPIO_Init+0x320>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d019      	beq.n	8003bae <HAL_GPIO_Init+0x21a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a4e      	ldr	r2, [pc, #312]	; (8003cb8 <HAL_GPIO_Init+0x324>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d013      	beq.n	8003baa <HAL_GPIO_Init+0x216>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a4d      	ldr	r2, [pc, #308]	; (8003cbc <HAL_GPIO_Init+0x328>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00d      	beq.n	8003ba6 <HAL_GPIO_Init+0x212>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a4c      	ldr	r2, [pc, #304]	; (8003cc0 <HAL_GPIO_Init+0x32c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d007      	beq.n	8003ba2 <HAL_GPIO_Init+0x20e>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a4b      	ldr	r2, [pc, #300]	; (8003cc4 <HAL_GPIO_Init+0x330>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d101      	bne.n	8003b9e <HAL_GPIO_Init+0x20a>
 8003b9a:	2307      	movs	r3, #7
 8003b9c:	e00e      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	e00c      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003ba2:	2306      	movs	r3, #6
 8003ba4:	e00a      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003ba6:	2305      	movs	r3, #5
 8003ba8:	e008      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003baa:	2304      	movs	r3, #4
 8003bac:	e006      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e004      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e002      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	f002 0203 	and.w	r2, r2, #3
 8003bc2:	0092      	lsls	r2, r2, #2
 8003bc4:	4093      	lsls	r3, r2
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bcc:	4935      	ldr	r1, [pc, #212]	; (8003ca4 <HAL_GPIO_Init+0x310>)
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	089b      	lsrs	r3, r3, #2
 8003bd2:	3302      	adds	r3, #2
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bda:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <HAL_GPIO_Init+0x334>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	43db      	mvns	r3, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4013      	ands	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bfe:	4a32      	ldr	r2, [pc, #200]	; (8003cc8 <HAL_GPIO_Init+0x334>)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c04:	4b30      	ldr	r3, [pc, #192]	; (8003cc8 <HAL_GPIO_Init+0x334>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c28:	4a27      	ldr	r2, [pc, #156]	; (8003cc8 <HAL_GPIO_Init+0x334>)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c2e:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <HAL_GPIO_Init+0x334>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c52:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <HAL_GPIO_Init+0x334>)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c58:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <HAL_GPIO_Init+0x334>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c7c:	4a12      	ldr	r2, [pc, #72]	; (8003cc8 <HAL_GPIO_Init+0x334>)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	3301      	adds	r3, #1
 8003c86:	61fb      	str	r3, [r7, #28]
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	2b0f      	cmp	r3, #15
 8003c8c:	f67f ae90 	bls.w	80039b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c90:	bf00      	nop
 8003c92:	bf00      	nop
 8003c94:	3724      	adds	r7, #36	; 0x24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40013800 	.word	0x40013800
 8003ca8:	40020000 	.word	0x40020000
 8003cac:	40020400 	.word	0x40020400
 8003cb0:	40020800 	.word	0x40020800
 8003cb4:	40020c00 	.word	0x40020c00
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40021400 	.word	0x40021400
 8003cc0:	40021800 	.word	0x40021800
 8003cc4:	40021c00 	.word	0x40021c00
 8003cc8:	40013c00 	.word	0x40013c00

08003ccc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	887b      	ldrh	r3, [r7, #2]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
 8003ce8:	e001      	b.n	8003cee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cea:	2300      	movs	r3, #0
 8003cec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	807b      	strh	r3, [r7, #2]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d0c:	787b      	ldrb	r3, [r7, #1]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d12:	887a      	ldrh	r2, [r7, #2]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d18:	e003      	b.n	8003d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d1a:	887b      	ldrh	r3, [r7, #2]
 8003d1c:	041a      	lsls	r2, r3, #16
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	619a      	str	r2, [r3, #24]
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d3a:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d3c:	695a      	ldr	r2, [r3, #20]
 8003d3e:	88fb      	ldrh	r3, [r7, #6]
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d006      	beq.n	8003d54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d46:	4a05      	ldr	r2, [pc, #20]	; (8003d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d48:	88fb      	ldrh	r3, [r7, #6]
 8003d4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fe fe82 	bl	8002a58 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d54:	bf00      	nop
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40013c00 	.word	0x40013c00

08003d60 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d62:	b08f      	sub	sp, #60	; 0x3c
 8003d64:	af0a      	add	r7, sp, #40	; 0x28
 8003d66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e054      	b.n	8003e1c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d106      	bne.n	8003d92 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f008 f9b9 	bl	800c104 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2203      	movs	r2, #3
 8003d96:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d102      	bne.n	8003dac <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f005 f9e7 	bl	8009184 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	687e      	ldr	r6, [r7, #4]
 8003dbe:	466d      	mov	r5, sp
 8003dc0:	f106 0410 	add.w	r4, r6, #16
 8003dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dcc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dd0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dd4:	1d33      	adds	r3, r6, #4
 8003dd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dd8:	6838      	ldr	r0, [r7, #0]
 8003dda:	f005 f961 	bl	80090a0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2101      	movs	r1, #1
 8003de4:	4618      	mov	r0, r3
 8003de6:	f005 f9de 	bl	80091a6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	687e      	ldr	r6, [r7, #4]
 8003df2:	466d      	mov	r5, sp
 8003df4:	f106 0410 	add.w	r4, r6, #16
 8003df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e04:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e08:	1d33      	adds	r3, r6, #4
 8003e0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e0c:	6838      	ldr	r0, [r7, #0]
 8003e0e:	f005 fb67 	bl	80094e0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e24 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003e24:	b590      	push	{r4, r7, lr}
 8003e26:	b089      	sub	sp, #36	; 0x24
 8003e28:	af04      	add	r7, sp, #16
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	4608      	mov	r0, r1
 8003e2e:	4611      	mov	r1, r2
 8003e30:	461a      	mov	r2, r3
 8003e32:	4603      	mov	r3, r0
 8003e34:	70fb      	strb	r3, [r7, #3]
 8003e36:	460b      	mov	r3, r1
 8003e38:	70bb      	strb	r3, [r7, #2]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_HCD_HC_Init+0x28>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e076      	b.n	8003f3a <HAL_HCD_HC_Init+0x116>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	212c      	movs	r1, #44	; 0x2c
 8003e5a:	fb01 f303 	mul.w	r3, r1, r3
 8003e5e:	4413      	add	r3, r2
 8003e60:	333d      	adds	r3, #61	; 0x3d
 8003e62:	2200      	movs	r2, #0
 8003e64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	212c      	movs	r1, #44	; 0x2c
 8003e6c:	fb01 f303 	mul.w	r3, r1, r3
 8003e70:	4413      	add	r3, r2
 8003e72:	3338      	adds	r3, #56	; 0x38
 8003e74:	787a      	ldrb	r2, [r7, #1]
 8003e76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	212c      	movs	r1, #44	; 0x2c
 8003e7e:	fb01 f303 	mul.w	r3, r1, r3
 8003e82:	4413      	add	r3, r2
 8003e84:	3340      	adds	r3, #64	; 0x40
 8003e86:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003e88:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	212c      	movs	r1, #44	; 0x2c
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	4413      	add	r3, r2
 8003e96:	3339      	adds	r3, #57	; 0x39
 8003e98:	78fa      	ldrb	r2, [r7, #3]
 8003e9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	212c      	movs	r1, #44	; 0x2c
 8003ea2:	fb01 f303 	mul.w	r3, r1, r3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	333f      	adds	r3, #63	; 0x3f
 8003eaa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003eae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	78ba      	ldrb	r2, [r7, #2]
 8003eb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003eb8:	b2d0      	uxtb	r0, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	212c      	movs	r1, #44	; 0x2c
 8003ebe:	fb01 f303 	mul.w	r3, r1, r3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	333a      	adds	r3, #58	; 0x3a
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003eca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	da09      	bge.n	8003ee6 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003ed2:	78fb      	ldrb	r3, [r7, #3]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	212c      	movs	r1, #44	; 0x2c
 8003ed8:	fb01 f303 	mul.w	r3, r1, r3
 8003edc:	4413      	add	r3, r2
 8003ede:	333b      	adds	r3, #59	; 0x3b
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	e008      	b.n	8003ef8 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003ee6:	78fb      	ldrb	r3, [r7, #3]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	212c      	movs	r1, #44	; 0x2c
 8003eec:	fb01 f303 	mul.w	r3, r1, r3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	333b      	adds	r3, #59	; 0x3b
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	212c      	movs	r1, #44	; 0x2c
 8003efe:	fb01 f303 	mul.w	r3, r1, r3
 8003f02:	4413      	add	r3, r2
 8003f04:	333c      	adds	r3, #60	; 0x3c
 8003f06:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003f0a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	787c      	ldrb	r4, [r7, #1]
 8003f12:	78ba      	ldrb	r2, [r7, #2]
 8003f14:	78f9      	ldrb	r1, [r7, #3]
 8003f16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f18:	9302      	str	r3, [sp, #8]
 8003f1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	4623      	mov	r3, r4
 8003f28:	f005 fc60 	bl	80097ec <USB_HC_Init>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd90      	pop	{r4, r7, pc}

08003f42 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_HCD_HC_Halt+0x1e>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e00f      	b.n	8003f80 <HAL_HCD_HC_Halt+0x3e>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	78fa      	ldrb	r2, [r7, #3]
 8003f6e:	4611      	mov	r1, r2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f005 feb0 	bl	8009cd6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	4608      	mov	r0, r1
 8003f92:	4611      	mov	r1, r2
 8003f94:	461a      	mov	r2, r3
 8003f96:	4603      	mov	r3, r0
 8003f98:	70fb      	strb	r3, [r7, #3]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	70bb      	strb	r3, [r7, #2]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003fa2:	78fb      	ldrb	r3, [r7, #3]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	212c      	movs	r1, #44	; 0x2c
 8003fa8:	fb01 f303 	mul.w	r3, r1, r3
 8003fac:	4413      	add	r3, r2
 8003fae:	333b      	adds	r3, #59	; 0x3b
 8003fb0:	78ba      	ldrb	r2, [r7, #2]
 8003fb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003fb4:	78fb      	ldrb	r3, [r7, #3]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	212c      	movs	r1, #44	; 0x2c
 8003fba:	fb01 f303 	mul.w	r3, r1, r3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	333f      	adds	r3, #63	; 0x3f
 8003fc2:	787a      	ldrb	r2, [r7, #1]
 8003fc4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003fc6:	7c3b      	ldrb	r3, [r7, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d112      	bne.n	8003ff2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	212c      	movs	r1, #44	; 0x2c
 8003fd2:	fb01 f303 	mul.w	r3, r1, r3
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3342      	adds	r3, #66	; 0x42
 8003fda:	2203      	movs	r2, #3
 8003fdc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003fde:	78fb      	ldrb	r3, [r7, #3]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	212c      	movs	r1, #44	; 0x2c
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	4413      	add	r3, r2
 8003fea:	333d      	adds	r3, #61	; 0x3d
 8003fec:	7f3a      	ldrb	r2, [r7, #28]
 8003fee:	701a      	strb	r2, [r3, #0]
 8003ff0:	e008      	b.n	8004004 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	212c      	movs	r1, #44	; 0x2c
 8003ff8:	fb01 f303 	mul.w	r3, r1, r3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	3342      	adds	r3, #66	; 0x42
 8004000:	2202      	movs	r2, #2
 8004002:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004004:	787b      	ldrb	r3, [r7, #1]
 8004006:	2b03      	cmp	r3, #3
 8004008:	f200 80c6 	bhi.w	8004198 <HAL_HCD_HC_SubmitRequest+0x210>
 800400c:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800400e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004012:	bf00      	nop
 8004014:	08004025 	.word	0x08004025
 8004018:	08004185 	.word	0x08004185
 800401c:	08004089 	.word	0x08004089
 8004020:	08004107 	.word	0x08004107
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004024:	7c3b      	ldrb	r3, [r7, #16]
 8004026:	2b01      	cmp	r3, #1
 8004028:	f040 80b8 	bne.w	800419c <HAL_HCD_HC_SubmitRequest+0x214>
 800402c:	78bb      	ldrb	r3, [r7, #2]
 800402e:	2b00      	cmp	r3, #0
 8004030:	f040 80b4 	bne.w	800419c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004034:	8b3b      	ldrh	r3, [r7, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d108      	bne.n	800404c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800403a:	78fb      	ldrb	r3, [r7, #3]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	212c      	movs	r1, #44	; 0x2c
 8004040:	fb01 f303 	mul.w	r3, r1, r3
 8004044:	4413      	add	r3, r2
 8004046:	3355      	adds	r3, #85	; 0x55
 8004048:	2201      	movs	r2, #1
 800404a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800404c:	78fb      	ldrb	r3, [r7, #3]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	212c      	movs	r1, #44	; 0x2c
 8004052:	fb01 f303 	mul.w	r3, r1, r3
 8004056:	4413      	add	r3, r2
 8004058:	3355      	adds	r3, #85	; 0x55
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d109      	bne.n	8004074 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	212c      	movs	r1, #44	; 0x2c
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	4413      	add	r3, r2
 800406c:	3342      	adds	r3, #66	; 0x42
 800406e:	2200      	movs	r2, #0
 8004070:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004072:	e093      	b.n	800419c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	212c      	movs	r1, #44	; 0x2c
 800407a:	fb01 f303 	mul.w	r3, r1, r3
 800407e:	4413      	add	r3, r2
 8004080:	3342      	adds	r3, #66	; 0x42
 8004082:	2202      	movs	r2, #2
 8004084:	701a      	strb	r2, [r3, #0]
      break;
 8004086:	e089      	b.n	800419c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004088:	78bb      	ldrb	r3, [r7, #2]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d11d      	bne.n	80040ca <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	212c      	movs	r1, #44	; 0x2c
 8004094:	fb01 f303 	mul.w	r3, r1, r3
 8004098:	4413      	add	r3, r2
 800409a:	3355      	adds	r3, #85	; 0x55
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d109      	bne.n	80040b6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	212c      	movs	r1, #44	; 0x2c
 80040a8:	fb01 f303 	mul.w	r3, r1, r3
 80040ac:	4413      	add	r3, r2
 80040ae:	3342      	adds	r3, #66	; 0x42
 80040b0:	2200      	movs	r2, #0
 80040b2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80040b4:	e073      	b.n	800419e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	212c      	movs	r1, #44	; 0x2c
 80040bc:	fb01 f303 	mul.w	r3, r1, r3
 80040c0:	4413      	add	r3, r2
 80040c2:	3342      	adds	r3, #66	; 0x42
 80040c4:	2202      	movs	r2, #2
 80040c6:	701a      	strb	r2, [r3, #0]
      break;
 80040c8:	e069      	b.n	800419e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80040ca:	78fb      	ldrb	r3, [r7, #3]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	212c      	movs	r1, #44	; 0x2c
 80040d0:	fb01 f303 	mul.w	r3, r1, r3
 80040d4:	4413      	add	r3, r2
 80040d6:	3354      	adds	r3, #84	; 0x54
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d109      	bne.n	80040f2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040de:	78fb      	ldrb	r3, [r7, #3]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	212c      	movs	r1, #44	; 0x2c
 80040e4:	fb01 f303 	mul.w	r3, r1, r3
 80040e8:	4413      	add	r3, r2
 80040ea:	3342      	adds	r3, #66	; 0x42
 80040ec:	2200      	movs	r2, #0
 80040ee:	701a      	strb	r2, [r3, #0]
      break;
 80040f0:	e055      	b.n	800419e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	212c      	movs	r1, #44	; 0x2c
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	4413      	add	r3, r2
 80040fe:	3342      	adds	r3, #66	; 0x42
 8004100:	2202      	movs	r2, #2
 8004102:	701a      	strb	r2, [r3, #0]
      break;
 8004104:	e04b      	b.n	800419e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004106:	78bb      	ldrb	r3, [r7, #2]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d11d      	bne.n	8004148 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	212c      	movs	r1, #44	; 0x2c
 8004112:	fb01 f303 	mul.w	r3, r1, r3
 8004116:	4413      	add	r3, r2
 8004118:	3355      	adds	r3, #85	; 0x55
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d109      	bne.n	8004134 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	212c      	movs	r1, #44	; 0x2c
 8004126:	fb01 f303 	mul.w	r3, r1, r3
 800412a:	4413      	add	r3, r2
 800412c:	3342      	adds	r3, #66	; 0x42
 800412e:	2200      	movs	r2, #0
 8004130:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004132:	e034      	b.n	800419e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	212c      	movs	r1, #44	; 0x2c
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	4413      	add	r3, r2
 8004140:	3342      	adds	r3, #66	; 0x42
 8004142:	2202      	movs	r2, #2
 8004144:	701a      	strb	r2, [r3, #0]
      break;
 8004146:	e02a      	b.n	800419e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	212c      	movs	r1, #44	; 0x2c
 800414e:	fb01 f303 	mul.w	r3, r1, r3
 8004152:	4413      	add	r3, r2
 8004154:	3354      	adds	r3, #84	; 0x54
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d109      	bne.n	8004170 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	212c      	movs	r1, #44	; 0x2c
 8004162:	fb01 f303 	mul.w	r3, r1, r3
 8004166:	4413      	add	r3, r2
 8004168:	3342      	adds	r3, #66	; 0x42
 800416a:	2200      	movs	r2, #0
 800416c:	701a      	strb	r2, [r3, #0]
      break;
 800416e:	e016      	b.n	800419e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	212c      	movs	r1, #44	; 0x2c
 8004176:	fb01 f303 	mul.w	r3, r1, r3
 800417a:	4413      	add	r3, r2
 800417c:	3342      	adds	r3, #66	; 0x42
 800417e:	2202      	movs	r2, #2
 8004180:	701a      	strb	r2, [r3, #0]
      break;
 8004182:	e00c      	b.n	800419e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	212c      	movs	r1, #44	; 0x2c
 800418a:	fb01 f303 	mul.w	r3, r1, r3
 800418e:	4413      	add	r3, r2
 8004190:	3342      	adds	r3, #66	; 0x42
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
      break;
 8004196:	e002      	b.n	800419e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004198:	bf00      	nop
 800419a:	e000      	b.n	800419e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800419c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	212c      	movs	r1, #44	; 0x2c
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	3344      	adds	r3, #68	; 0x44
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	8b3a      	ldrh	r2, [r7, #24]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	202c      	movs	r0, #44	; 0x2c
 80041b8:	fb00 f303 	mul.w	r3, r0, r3
 80041bc:	440b      	add	r3, r1
 80041be:	334c      	adds	r3, #76	; 0x4c
 80041c0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	212c      	movs	r1, #44	; 0x2c
 80041c8:	fb01 f303 	mul.w	r3, r1, r3
 80041cc:	4413      	add	r3, r2
 80041ce:	3360      	adds	r3, #96	; 0x60
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80041d4:	78fb      	ldrb	r3, [r7, #3]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	212c      	movs	r1, #44	; 0x2c
 80041da:	fb01 f303 	mul.w	r3, r1, r3
 80041de:	4413      	add	r3, r2
 80041e0:	3350      	adds	r3, #80	; 0x50
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	212c      	movs	r1, #44	; 0x2c
 80041ec:	fb01 f303 	mul.w	r3, r1, r3
 80041f0:	4413      	add	r3, r2
 80041f2:	3339      	adds	r3, #57	; 0x39
 80041f4:	78fa      	ldrb	r2, [r7, #3]
 80041f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	212c      	movs	r1, #44	; 0x2c
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	4413      	add	r3, r2
 8004204:	3361      	adds	r3, #97	; 0x61
 8004206:	2200      	movs	r2, #0
 8004208:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6818      	ldr	r0, [r3, #0]
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	222c      	movs	r2, #44	; 0x2c
 8004212:	fb02 f303 	mul.w	r3, r2, r3
 8004216:	3338      	adds	r3, #56	; 0x38
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	18d1      	adds	r1, r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	f005 fc04 	bl	8009a30 <USB_HC_StartXfer>
 8004228:	4603      	mov	r3, r0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop

08004234 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f005 f905 	bl	800945a <USB_GetMode>
 8004250:	4603      	mov	r3, r0
 8004252:	2b01      	cmp	r3, #1
 8004254:	f040 80f6 	bne.w	8004444 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f005 f8e9 	bl	8009434 <USB_ReadInterrupts>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 80ec 	beq.w	8004442 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f005 f8e0 	bl	8009434 <USB_ReadInterrupts>
 8004274:	4603      	mov	r3, r0
 8004276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800427a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800427e:	d104      	bne.n	800428a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004288:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f005 f8d0 	bl	8009434 <USB_ReadInterrupts>
 8004294:	4603      	mov	r3, r0
 8004296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800429a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800429e:	d104      	bne.n	80042aa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80042a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f005 f8c0 	bl	8009434 <USB_ReadInterrupts>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042be:	d104      	bne.n	80042ca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80042c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f005 f8b0 	bl	8009434 <USB_ReadInterrupts>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d103      	bne.n	80042e6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2202      	movs	r2, #2
 80042e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f005 f8a2 	bl	8009434 <USB_ReadInterrupts>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042fa:	d11c      	bne.n	8004336 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004304:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10f      	bne.n	8004336 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004316:	2110      	movs	r1, #16
 8004318:	6938      	ldr	r0, [r7, #16]
 800431a:	f004 ff91 	bl	8009240 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800431e:	6938      	ldr	r0, [r7, #16]
 8004320:	f004 ffc2 	bl	80092a8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2101      	movs	r1, #1
 800432a:	4618      	mov	r0, r3
 800432c:	f005 f998 	bl	8009660 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f007 ff65 	bl	800c200 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f005 f87a 	bl	8009434 <USB_ReadInterrupts>
 8004340:	4603      	mov	r3, r0
 8004342:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004346:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800434a:	d102      	bne.n	8004352 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f001 f89e 	bl	800548e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f005 f86c 	bl	8009434 <USB_ReadInterrupts>
 800435c:	4603      	mov	r3, r0
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b08      	cmp	r3, #8
 8004364:	d106      	bne.n	8004374 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f007 ff2e 	bl	800c1c8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2208      	movs	r2, #8
 8004372:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f005 f85b 	bl	8009434 <USB_ReadInterrupts>
 800437e:	4603      	mov	r3, r0
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b10      	cmp	r3, #16
 8004386:	d101      	bne.n	800438c <HAL_HCD_IRQHandler+0x158>
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <HAL_HCD_IRQHandler+0x15a>
 800438c:	2300      	movs	r3, #0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d012      	beq.n	80043b8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	699a      	ldr	r2, [r3, #24]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0210 	bic.w	r2, r2, #16
 80043a0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 ffa1 	bl	80052ea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0210 	orr.w	r2, r2, #16
 80043b6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f005 f839 	bl	8009434 <USB_ReadInterrupts>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043cc:	d13a      	bne.n	8004444 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f005 fc6e 	bl	8009cb4 <USB_HC_ReadInterrupt>
 80043d8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	e025      	b.n	800442c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	fa22 f303 	lsr.w	r3, r2, r3
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d018      	beq.n	8004426 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800440a:	d106      	bne.n	800441a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	b2db      	uxtb	r3, r3
 8004410:	4619      	mov	r1, r3
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f8ab 	bl	800456e <HCD_HC_IN_IRQHandler>
 8004418:	e005      	b.n	8004426 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	4619      	mov	r1, r3
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 fbf9 	bl	8004c18 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	3301      	adds	r3, #1
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	429a      	cmp	r2, r3
 8004434:	d3d4      	bcc.n	80043e0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800443e:	615a      	str	r2, [r3, #20]
 8004440:	e000      	b.n	8004444 <HAL_HCD_IRQHandler+0x210>
      return;
 8004442:	bf00      	nop
    }
  }
}
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b082      	sub	sp, #8
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_HCD_Start+0x16>
 800445c:	2302      	movs	r3, #2
 800445e:	e013      	b.n	8004488 <HAL_HCD_Start+0x3e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2101      	movs	r1, #1
 800446e:	4618      	mov	r0, r3
 8004470:	f005 f95a 	bl	8009728 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f004 fe72 	bl	8009162 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d101      	bne.n	80044a6 <HAL_HCD_Stop+0x16>
 80044a2:	2302      	movs	r3, #2
 80044a4:	e00d      	b.n	80044c2 <HAL_HCD_Stop+0x32>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f005 fd48 	bl	8009f48 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f005 f8fc 	bl	80096d4 <USB_ResetPort>
 80044dc:	4603      	mov	r3, r0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	460b      	mov	r3, r1
 80044f0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	212c      	movs	r1, #44	; 0x2c
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	4413      	add	r3, r2
 80044fe:	3360      	adds	r3, #96	; 0x60
 8004500:	781b      	ldrb	r3, [r3, #0]
}
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	460b      	mov	r3, r1
 8004518:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800451a:	78fb      	ldrb	r3, [r7, #3]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	212c      	movs	r1, #44	; 0x2c
 8004520:	fb01 f303 	mul.w	r3, r1, r3
 8004524:	4413      	add	r3, r2
 8004526:	3350      	adds	r3, #80	; 0x50
 8004528:	681b      	ldr	r3, [r3, #0]
}
 800452a:	4618      	mov	r0, r3
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b082      	sub	sp, #8
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f005 f940 	bl	80097c8 <USB_GetCurrentFrame>
 8004548:	4603      	mov	r3, r0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b082      	sub	sp, #8
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f005 f91b 	bl	800979a <USB_GetHostSpeed>
 8004564:	4603      	mov	r3, r0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b086      	sub	sp, #24
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	460b      	mov	r3, r1
 8004578:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	4413      	add	r3, r2
 8004590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b04      	cmp	r3, #4
 800459c:	d11a      	bne.n	80045d4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045aa:	461a      	mov	r2, r3
 80045ac:	2304      	movs	r3, #4
 80045ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	212c      	movs	r1, #44	; 0x2c
 80045b6:	fb01 f303 	mul.w	r3, r1, r3
 80045ba:	4413      	add	r3, r2
 80045bc:	3361      	adds	r3, #97	; 0x61
 80045be:	2206      	movs	r2, #6
 80045c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	4611      	mov	r1, r2
 80045cc:	4618      	mov	r0, r3
 80045ce:	f005 fb82 	bl	8009cd6 <USB_HC_Halt>
 80045d2:	e0af      	b.n	8004734 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ea:	d11b      	bne.n	8004624 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f8:	461a      	mov	r2, r3
 80045fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	212c      	movs	r1, #44	; 0x2c
 8004606:	fb01 f303 	mul.w	r3, r1, r3
 800460a:	4413      	add	r3, r2
 800460c:	3361      	adds	r3, #97	; 0x61
 800460e:	2207      	movs	r2, #7
 8004610:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	4611      	mov	r1, r2
 800461c:	4618      	mov	r0, r3
 800461e:	f005 fb5a 	bl	8009cd6 <USB_HC_Halt>
 8004622:	e087      	b.n	8004734 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	4413      	add	r3, r2
 800462c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b20      	cmp	r3, #32
 8004638:	d109      	bne.n	800464e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	4413      	add	r3, r2
 8004642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004646:	461a      	mov	r2, r3
 8004648:	2320      	movs	r3, #32
 800464a:	6093      	str	r3, [r2, #8]
 800464c:	e072      	b.n	8004734 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	4413      	add	r3, r2
 8004656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b08      	cmp	r3, #8
 8004662:	d11a      	bne.n	800469a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	4413      	add	r3, r2
 800466c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004670:	461a      	mov	r2, r3
 8004672:	2308      	movs	r3, #8
 8004674:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	212c      	movs	r1, #44	; 0x2c
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	4413      	add	r3, r2
 8004682:	3361      	adds	r3, #97	; 0x61
 8004684:	2205      	movs	r2, #5
 8004686:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	4611      	mov	r1, r2
 8004692:	4618      	mov	r0, r3
 8004694:	f005 fb1f 	bl	8009cd6 <USB_HC_Halt>
 8004698:	e04c      	b.n	8004734 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b0:	d11b      	bne.n	80046ea <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046be:	461a      	mov	r2, r3
 80046c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	212c      	movs	r1, #44	; 0x2c
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	4413      	add	r3, r2
 80046d2:	3361      	adds	r3, #97	; 0x61
 80046d4:	2208      	movs	r2, #8
 80046d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	4611      	mov	r1, r2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f005 faf7 	bl	8009cd6 <USB_HC_Halt>
 80046e8:	e024      	b.n	8004734 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fc:	2b80      	cmp	r3, #128	; 0x80
 80046fe:	d119      	bne.n	8004734 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	4413      	add	r3, r2
 8004708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470c:	461a      	mov	r2, r3
 800470e:	2380      	movs	r3, #128	; 0x80
 8004710:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	212c      	movs	r1, #44	; 0x2c
 8004718:	fb01 f303 	mul.w	r3, r1, r3
 800471c:	4413      	add	r3, r2
 800471e:	3361      	adds	r3, #97	; 0x61
 8004720:	2206      	movs	r2, #6
 8004722:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	4611      	mov	r1, r2
 800472e:	4618      	mov	r0, r3
 8004730:	f005 fad1 	bl	8009cd6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	4413      	add	r3, r2
 800473c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800474a:	d112      	bne.n	8004772 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	4611      	mov	r1, r2
 8004756:	4618      	mov	r0, r3
 8004758:	f005 fabd 	bl	8009cd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4413      	add	r3, r2
 8004764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004768:	461a      	mov	r2, r3
 800476a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800476e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004770:	e24e      	b.n	8004c10 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4413      	add	r3, r2
 800477a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b01      	cmp	r3, #1
 8004786:	f040 80df 	bne.w	8004948 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d019      	beq.n	80047c6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	212c      	movs	r1, #44	; 0x2c
 8004798:	fb01 f303 	mul.w	r3, r1, r3
 800479c:	4413      	add	r3, r2
 800479e:	3348      	adds	r3, #72	; 0x48
 80047a0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	0159      	lsls	r1, r3, #5
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	440b      	add	r3, r1
 80047aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80047b4:	1ad2      	subs	r2, r2, r3
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	202c      	movs	r0, #44	; 0x2c
 80047bc:	fb00 f303 	mul.w	r3, r0, r3
 80047c0:	440b      	add	r3, r1
 80047c2:	3350      	adds	r3, #80	; 0x50
 80047c4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	212c      	movs	r1, #44	; 0x2c
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	4413      	add	r3, r2
 80047d2:	3361      	adds	r3, #97	; 0x61
 80047d4:	2201      	movs	r2, #1
 80047d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	212c      	movs	r1, #44	; 0x2c
 80047de:	fb01 f303 	mul.w	r3, r1, r3
 80047e2:	4413      	add	r3, r2
 80047e4:	335c      	adds	r3, #92	; 0x5c
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f6:	461a      	mov	r2, r3
 80047f8:	2301      	movs	r3, #1
 80047fa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	212c      	movs	r1, #44	; 0x2c
 8004802:	fb01 f303 	mul.w	r3, r1, r3
 8004806:	4413      	add	r3, r2
 8004808:	333f      	adds	r3, #63	; 0x3f
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d009      	beq.n	8004824 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	212c      	movs	r1, #44	; 0x2c
 8004816:	fb01 f303 	mul.w	r3, r1, r3
 800481a:	4413      	add	r3, r2
 800481c:	333f      	adds	r3, #63	; 0x3f
 800481e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004820:	2b02      	cmp	r3, #2
 8004822:	d111      	bne.n	8004848 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	4611      	mov	r1, r2
 800482e:	4618      	mov	r0, r3
 8004830:	f005 fa51 	bl	8009cd6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4413      	add	r3, r2
 800483c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004840:	461a      	mov	r2, r3
 8004842:	2310      	movs	r3, #16
 8004844:	6093      	str	r3, [r2, #8]
 8004846:	e03a      	b.n	80048be <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	212c      	movs	r1, #44	; 0x2c
 800484e:	fb01 f303 	mul.w	r3, r1, r3
 8004852:	4413      	add	r3, r2
 8004854:	333f      	adds	r3, #63	; 0x3f
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b03      	cmp	r3, #3
 800485a:	d009      	beq.n	8004870 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	212c      	movs	r1, #44	; 0x2c
 8004862:	fb01 f303 	mul.w	r3, r1, r3
 8004866:	4413      	add	r3, r2
 8004868:	333f      	adds	r3, #63	; 0x3f
 800486a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800486c:	2b01      	cmp	r3, #1
 800486e:	d126      	bne.n	80048be <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	4413      	add	r3, r2
 8004878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	0151      	lsls	r1, r2, #5
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	440a      	add	r2, r1
 8004886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800488a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800488e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	212c      	movs	r1, #44	; 0x2c
 8004896:	fb01 f303 	mul.w	r3, r1, r3
 800489a:	4413      	add	r3, r2
 800489c:	3360      	adds	r3, #96	; 0x60
 800489e:	2201      	movs	r2, #1
 80048a0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	b2d9      	uxtb	r1, r3
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	202c      	movs	r0, #44	; 0x2c
 80048ac:	fb00 f303 	mul.w	r3, r0, r3
 80048b0:	4413      	add	r3, r2
 80048b2:	3360      	adds	r3, #96	; 0x60
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f007 fcaf 	bl	800c21c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d12b      	bne.n	800491e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	212c      	movs	r1, #44	; 0x2c
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	4413      	add	r3, r2
 80048d2:	3348      	adds	r3, #72	; 0x48
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	202c      	movs	r0, #44	; 0x2c
 80048dc:	fb00 f202 	mul.w	r2, r0, r2
 80048e0:	440a      	add	r2, r1
 80048e2:	3240      	adds	r2, #64	; 0x40
 80048e4:	8812      	ldrh	r2, [r2, #0]
 80048e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 818e 	beq.w	8004c10 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	212c      	movs	r1, #44	; 0x2c
 80048fa:	fb01 f303 	mul.w	r3, r1, r3
 80048fe:	4413      	add	r3, r2
 8004900:	3354      	adds	r3, #84	; 0x54
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	f083 0301 	eor.w	r3, r3, #1
 8004908:	b2d8      	uxtb	r0, r3
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	212c      	movs	r1, #44	; 0x2c
 8004910:	fb01 f303 	mul.w	r3, r1, r3
 8004914:	4413      	add	r3, r2
 8004916:	3354      	adds	r3, #84	; 0x54
 8004918:	4602      	mov	r2, r0
 800491a:	701a      	strb	r2, [r3, #0]
}
 800491c:	e178      	b.n	8004c10 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	212c      	movs	r1, #44	; 0x2c
 8004924:	fb01 f303 	mul.w	r3, r1, r3
 8004928:	4413      	add	r3, r2
 800492a:	3354      	adds	r3, #84	; 0x54
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	f083 0301 	eor.w	r3, r3, #1
 8004932:	b2d8      	uxtb	r0, r3
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	212c      	movs	r1, #44	; 0x2c
 800493a:	fb01 f303 	mul.w	r3, r1, r3
 800493e:	4413      	add	r3, r2
 8004940:	3354      	adds	r3, #84	; 0x54
 8004942:	4602      	mov	r2, r0
 8004944:	701a      	strb	r2, [r3, #0]
}
 8004946:	e163      	b.n	8004c10 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4413      	add	r3, r2
 8004950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b02      	cmp	r3, #2
 800495c:	f040 80f6 	bne.w	8004b4c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	212c      	movs	r1, #44	; 0x2c
 8004966:	fb01 f303 	mul.w	r3, r1, r3
 800496a:	4413      	add	r3, r2
 800496c:	3361      	adds	r3, #97	; 0x61
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d109      	bne.n	8004988 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	212c      	movs	r1, #44	; 0x2c
 800497a:	fb01 f303 	mul.w	r3, r1, r3
 800497e:	4413      	add	r3, r2
 8004980:	3360      	adds	r3, #96	; 0x60
 8004982:	2201      	movs	r2, #1
 8004984:	701a      	strb	r2, [r3, #0]
 8004986:	e0c9      	b.n	8004b1c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	212c      	movs	r1, #44	; 0x2c
 800498e:	fb01 f303 	mul.w	r3, r1, r3
 8004992:	4413      	add	r3, r2
 8004994:	3361      	adds	r3, #97	; 0x61
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b05      	cmp	r3, #5
 800499a:	d109      	bne.n	80049b0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	212c      	movs	r1, #44	; 0x2c
 80049a2:	fb01 f303 	mul.w	r3, r1, r3
 80049a6:	4413      	add	r3, r2
 80049a8:	3360      	adds	r3, #96	; 0x60
 80049aa:	2205      	movs	r2, #5
 80049ac:	701a      	strb	r2, [r3, #0]
 80049ae:	e0b5      	b.n	8004b1c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	212c      	movs	r1, #44	; 0x2c
 80049b6:	fb01 f303 	mul.w	r3, r1, r3
 80049ba:	4413      	add	r3, r2
 80049bc:	3361      	adds	r3, #97	; 0x61
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b06      	cmp	r3, #6
 80049c2:	d009      	beq.n	80049d8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	212c      	movs	r1, #44	; 0x2c
 80049ca:	fb01 f303 	mul.w	r3, r1, r3
 80049ce:	4413      	add	r3, r2
 80049d0:	3361      	adds	r3, #97	; 0x61
 80049d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d150      	bne.n	8004a7a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	212c      	movs	r1, #44	; 0x2c
 80049de:	fb01 f303 	mul.w	r3, r1, r3
 80049e2:	4413      	add	r3, r2
 80049e4:	335c      	adds	r3, #92	; 0x5c
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	202c      	movs	r0, #44	; 0x2c
 80049f0:	fb00 f303 	mul.w	r3, r0, r3
 80049f4:	440b      	add	r3, r1
 80049f6:	335c      	adds	r3, #92	; 0x5c
 80049f8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	212c      	movs	r1, #44	; 0x2c
 8004a00:	fb01 f303 	mul.w	r3, r1, r3
 8004a04:	4413      	add	r3, r2
 8004a06:	335c      	adds	r3, #92	; 0x5c
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d912      	bls.n	8004a34 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	212c      	movs	r1, #44	; 0x2c
 8004a14:	fb01 f303 	mul.w	r3, r1, r3
 8004a18:	4413      	add	r3, r2
 8004a1a:	335c      	adds	r3, #92	; 0x5c
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	212c      	movs	r1, #44	; 0x2c
 8004a26:	fb01 f303 	mul.w	r3, r1, r3
 8004a2a:	4413      	add	r3, r2
 8004a2c:	3360      	adds	r3, #96	; 0x60
 8004a2e:	2204      	movs	r2, #4
 8004a30:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a32:	e073      	b.n	8004b1c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	212c      	movs	r1, #44	; 0x2c
 8004a3a:	fb01 f303 	mul.w	r3, r1, r3
 8004a3e:	4413      	add	r3, r2
 8004a40:	3360      	adds	r3, #96	; 0x60
 8004a42:	2202      	movs	r2, #2
 8004a44:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a5c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a64:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a72:	461a      	mov	r2, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a78:	e050      	b.n	8004b1c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	212c      	movs	r1, #44	; 0x2c
 8004a80:	fb01 f303 	mul.w	r3, r1, r3
 8004a84:	4413      	add	r3, r2
 8004a86:	3361      	adds	r3, #97	; 0x61
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b03      	cmp	r3, #3
 8004a8c:	d122      	bne.n	8004ad4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	212c      	movs	r1, #44	; 0x2c
 8004a94:	fb01 f303 	mul.w	r3, r1, r3
 8004a98:	4413      	add	r3, r2
 8004a9a:	3360      	adds	r3, #96	; 0x60
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ab6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004abe:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004acc:	461a      	mov	r2, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	e023      	b.n	8004b1c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	212c      	movs	r1, #44	; 0x2c
 8004ada:	fb01 f303 	mul.w	r3, r1, r3
 8004ade:	4413      	add	r3, r2
 8004ae0:	3361      	adds	r3, #97	; 0x61
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b07      	cmp	r3, #7
 8004ae6:	d119      	bne.n	8004b1c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	212c      	movs	r1, #44	; 0x2c
 8004aee:	fb01 f303 	mul.w	r3, r1, r3
 8004af2:	4413      	add	r3, r2
 8004af4:	335c      	adds	r3, #92	; 0x5c
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	202c      	movs	r0, #44	; 0x2c
 8004b00:	fb00 f303 	mul.w	r3, r0, r3
 8004b04:	440b      	add	r3, r1
 8004b06:	335c      	adds	r3, #92	; 0x5c
 8004b08:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	212c      	movs	r1, #44	; 0x2c
 8004b10:	fb01 f303 	mul.w	r3, r1, r3
 8004b14:	4413      	add	r3, r2
 8004b16:	3360      	adds	r3, #96	; 0x60
 8004b18:	2204      	movs	r2, #4
 8004b1a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b28:	461a      	mov	r2, r3
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	b2d9      	uxtb	r1, r3
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	202c      	movs	r0, #44	; 0x2c
 8004b38:	fb00 f303 	mul.w	r3, r0, r3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3360      	adds	r3, #96	; 0x60
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f007 fb69 	bl	800c21c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004b4a:	e061      	b.n	8004c10 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	2b10      	cmp	r3, #16
 8004b60:	d156      	bne.n	8004c10 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	212c      	movs	r1, #44	; 0x2c
 8004b68:	fb01 f303 	mul.w	r3, r1, r3
 8004b6c:	4413      	add	r3, r2
 8004b6e:	333f      	adds	r3, #63	; 0x3f
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	d111      	bne.n	8004b9a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	212c      	movs	r1, #44	; 0x2c
 8004b7c:	fb01 f303 	mul.w	r3, r1, r3
 8004b80:	4413      	add	r3, r2
 8004b82:	335c      	adds	r3, #92	; 0x5c
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	4611      	mov	r1, r2
 8004b92:	4618      	mov	r0, r3
 8004b94:	f005 f89f 	bl	8009cd6 <USB_HC_Halt>
 8004b98:	e031      	b.n	8004bfe <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	212c      	movs	r1, #44	; 0x2c
 8004ba0:	fb01 f303 	mul.w	r3, r1, r3
 8004ba4:	4413      	add	r3, r2
 8004ba6:	333f      	adds	r3, #63	; 0x3f
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d009      	beq.n	8004bc2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	212c      	movs	r1, #44	; 0x2c
 8004bb4:	fb01 f303 	mul.w	r3, r1, r3
 8004bb8:	4413      	add	r3, r2
 8004bba:	333f      	adds	r3, #63	; 0x3f
 8004bbc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d11d      	bne.n	8004bfe <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	212c      	movs	r1, #44	; 0x2c
 8004bc8:	fb01 f303 	mul.w	r3, r1, r3
 8004bcc:	4413      	add	r3, r2
 8004bce:	335c      	adds	r3, #92	; 0x5c
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d110      	bne.n	8004bfe <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	212c      	movs	r1, #44	; 0x2c
 8004be2:	fb01 f303 	mul.w	r3, r1, r3
 8004be6:	4413      	add	r3, r2
 8004be8:	3361      	adds	r3, #97	; 0x61
 8004bea:	2203      	movs	r2, #3
 8004bec:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f005 f86c 	bl	8009cd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	6093      	str	r3, [r2, #8]
}
 8004c10:	bf00      	nop
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004c2e:	78fb      	ldrb	r3, [r7, #3]
 8004c30:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d11a      	bne.n	8004c7e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c54:	461a      	mov	r2, r3
 8004c56:	2304      	movs	r3, #4
 8004c58:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	212c      	movs	r1, #44	; 0x2c
 8004c60:	fb01 f303 	mul.w	r3, r1, r3
 8004c64:	4413      	add	r3, r2
 8004c66:	3361      	adds	r3, #97	; 0x61
 8004c68:	2206      	movs	r2, #6
 8004c6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	4611      	mov	r1, r2
 8004c76:	4618      	mov	r0, r3
 8004c78:	f005 f82d 	bl	8009cd6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004c7c:	e331      	b.n	80052e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 0320 	and.w	r3, r3, #32
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d12e      	bne.n	8004cf2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	2320      	movs	r3, #32
 8004ca4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	212c      	movs	r1, #44	; 0x2c
 8004cac:	fb01 f303 	mul.w	r3, r1, r3
 8004cb0:	4413      	add	r3, r2
 8004cb2:	333d      	adds	r3, #61	; 0x3d
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	f040 8313 	bne.w	80052e2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	212c      	movs	r1, #44	; 0x2c
 8004cc2:	fb01 f303 	mul.w	r3, r1, r3
 8004cc6:	4413      	add	r3, r2
 8004cc8:	333d      	adds	r3, #61	; 0x3d
 8004cca:	2200      	movs	r2, #0
 8004ccc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	212c      	movs	r1, #44	; 0x2c
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	4413      	add	r3, r2
 8004cda:	3360      	adds	r3, #96	; 0x60
 8004cdc:	2202      	movs	r2, #2
 8004cde:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	4611      	mov	r1, r2
 8004cea:	4618      	mov	r0, r3
 8004cec:	f004 fff3 	bl	8009cd6 <USB_HC_Halt>
}
 8004cf0:	e2f7      	b.n	80052e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d08:	d112      	bne.n	8004d30 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d16:	461a      	mov	r2, r3
 8004d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d1c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	4611      	mov	r1, r2
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f004 ffd4 	bl	8009cd6 <USB_HC_Halt>
}
 8004d2e:	e2d8      	b.n	80052e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d140      	bne.n	8004dc8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	212c      	movs	r1, #44	; 0x2c
 8004d4c:	fb01 f303 	mul.w	r3, r1, r3
 8004d50:	4413      	add	r3, r2
 8004d52:	335c      	adds	r3, #92	; 0x5c
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	2b40      	cmp	r3, #64	; 0x40
 8004d6c:	d111      	bne.n	8004d92 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	212c      	movs	r1, #44	; 0x2c
 8004d74:	fb01 f303 	mul.w	r3, r1, r3
 8004d78:	4413      	add	r3, r2
 8004d7a:	333d      	adds	r3, #61	; 0x3d
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	2340      	movs	r3, #64	; 0x40
 8004d90:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9e:	461a      	mov	r2, r3
 8004da0:	2301      	movs	r3, #1
 8004da2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	212c      	movs	r1, #44	; 0x2c
 8004daa:	fb01 f303 	mul.w	r3, r1, r3
 8004dae:	4413      	add	r3, r2
 8004db0:	3361      	adds	r3, #97	; 0x61
 8004db2:	2201      	movs	r2, #1
 8004db4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	4611      	mov	r1, r2
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f004 ff88 	bl	8009cd6 <USB_HC_Halt>
}
 8004dc6:	e28c      	b.n	80052e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dda:	2b40      	cmp	r3, #64	; 0x40
 8004ddc:	d12c      	bne.n	8004e38 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	212c      	movs	r1, #44	; 0x2c
 8004de4:	fb01 f303 	mul.w	r3, r1, r3
 8004de8:	4413      	add	r3, r2
 8004dea:	3361      	adds	r3, #97	; 0x61
 8004dec:	2204      	movs	r2, #4
 8004dee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	212c      	movs	r1, #44	; 0x2c
 8004df6:	fb01 f303 	mul.w	r3, r1, r3
 8004dfa:	4413      	add	r3, r2
 8004dfc:	333d      	adds	r3, #61	; 0x3d
 8004dfe:	2201      	movs	r2, #1
 8004e00:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	212c      	movs	r1, #44	; 0x2c
 8004e08:	fb01 f303 	mul.w	r3, r1, r3
 8004e0c:	4413      	add	r3, r2
 8004e0e:	335c      	adds	r3, #92	; 0x5c
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f004 ff59 	bl	8009cd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e30:	461a      	mov	r2, r3
 8004e32:	2340      	movs	r3, #64	; 0x40
 8004e34:	6093      	str	r3, [r2, #8]
}
 8004e36:	e254      	b.n	80052e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d11a      	bne.n	8004e84 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	2308      	movs	r3, #8
 8004e5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	212c      	movs	r1, #44	; 0x2c
 8004e66:	fb01 f303 	mul.w	r3, r1, r3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	3361      	adds	r3, #97	; 0x61
 8004e6e:	2205      	movs	r2, #5
 8004e70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	4611      	mov	r1, r2
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f004 ff2a 	bl	8009cd6 <USB_HC_Halt>
}
 8004e82:	e22e      	b.n	80052e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 0310 	and.w	r3, r3, #16
 8004e96:	2b10      	cmp	r3, #16
 8004e98:	d140      	bne.n	8004f1c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	212c      	movs	r1, #44	; 0x2c
 8004ea0:	fb01 f303 	mul.w	r3, r1, r3
 8004ea4:	4413      	add	r3, r2
 8004ea6:	335c      	adds	r3, #92	; 0x5c
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	212c      	movs	r1, #44	; 0x2c
 8004eb2:	fb01 f303 	mul.w	r3, r1, r3
 8004eb6:	4413      	add	r3, r2
 8004eb8:	3361      	adds	r3, #97	; 0x61
 8004eba:	2203      	movs	r2, #3
 8004ebc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	212c      	movs	r1, #44	; 0x2c
 8004ec4:	fb01 f303 	mul.w	r3, r1, r3
 8004ec8:	4413      	add	r3, r2
 8004eca:	333d      	adds	r3, #61	; 0x3d
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d112      	bne.n	8004ef8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	212c      	movs	r1, #44	; 0x2c
 8004ed8:	fb01 f303 	mul.w	r3, r1, r3
 8004edc:	4413      	add	r3, r2
 8004ede:	333c      	adds	r3, #60	; 0x3c
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d108      	bne.n	8004ef8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	212c      	movs	r1, #44	; 0x2c
 8004eec:	fb01 f303 	mul.w	r3, r1, r3
 8004ef0:	4413      	add	r3, r2
 8004ef2:	333d      	adds	r3, #61	; 0x3d
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	4611      	mov	r1, r2
 8004f02:	4618      	mov	r0, r3
 8004f04:	f004 fee7 	bl	8009cd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f14:	461a      	mov	r2, r3
 8004f16:	2310      	movs	r3, #16
 8004f18:	6093      	str	r3, [r2, #8]
}
 8004f1a:	e1e2      	b.n	80052e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2e:	2b80      	cmp	r3, #128	; 0x80
 8004f30:	d164      	bne.n	8004ffc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d111      	bne.n	8004f5e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	212c      	movs	r1, #44	; 0x2c
 8004f40:	fb01 f303 	mul.w	r3, r1, r3
 8004f44:	4413      	add	r3, r2
 8004f46:	3361      	adds	r3, #97	; 0x61
 8004f48:	2206      	movs	r2, #6
 8004f4a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	4611      	mov	r1, r2
 8004f56:	4618      	mov	r0, r3
 8004f58:	f004 febd 	bl	8009cd6 <USB_HC_Halt>
 8004f5c:	e044      	b.n	8004fe8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	212c      	movs	r1, #44	; 0x2c
 8004f64:	fb01 f303 	mul.w	r3, r1, r3
 8004f68:	4413      	add	r3, r2
 8004f6a:	335c      	adds	r3, #92	; 0x5c
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	202c      	movs	r0, #44	; 0x2c
 8004f76:	fb00 f303 	mul.w	r3, r0, r3
 8004f7a:	440b      	add	r3, r1
 8004f7c:	335c      	adds	r3, #92	; 0x5c
 8004f7e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	212c      	movs	r1, #44	; 0x2c
 8004f86:	fb01 f303 	mul.w	r3, r1, r3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	335c      	adds	r3, #92	; 0x5c
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d920      	bls.n	8004fd6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	212c      	movs	r1, #44	; 0x2c
 8004f9a:	fb01 f303 	mul.w	r3, r1, r3
 8004f9e:	4413      	add	r3, r2
 8004fa0:	335c      	adds	r3, #92	; 0x5c
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	212c      	movs	r1, #44	; 0x2c
 8004fac:	fb01 f303 	mul.w	r3, r1, r3
 8004fb0:	4413      	add	r3, r2
 8004fb2:	3360      	adds	r3, #96	; 0x60
 8004fb4:	2204      	movs	r2, #4
 8004fb6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	b2d9      	uxtb	r1, r3
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	202c      	movs	r0, #44	; 0x2c
 8004fc2:	fb00 f303 	mul.w	r3, r0, r3
 8004fc6:	4413      	add	r3, r2
 8004fc8:	3360      	adds	r3, #96	; 0x60
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f007 f924 	bl	800c21c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004fd4:	e008      	b.n	8004fe8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	212c      	movs	r1, #44	; 0x2c
 8004fdc:	fb01 f303 	mul.w	r3, r1, r3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	3360      	adds	r3, #96	; 0x60
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	2380      	movs	r3, #128	; 0x80
 8004ff8:	6093      	str	r3, [r2, #8]
}
 8004ffa:	e172      	b.n	80052e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	4413      	add	r3, r2
 8005004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800500e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005012:	d11b      	bne.n	800504c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	212c      	movs	r1, #44	; 0x2c
 800501a:	fb01 f303 	mul.w	r3, r1, r3
 800501e:	4413      	add	r3, r2
 8005020:	3361      	adds	r3, #97	; 0x61
 8005022:	2208      	movs	r2, #8
 8005024:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	4611      	mov	r1, r2
 8005030:	4618      	mov	r0, r3
 8005032:	f004 fe50 	bl	8009cd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	4413      	add	r3, r2
 800503e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005042:	461a      	mov	r2, r3
 8005044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005048:	6093      	str	r3, [r2, #8]
}
 800504a:	e14a      	b.n	80052e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	4413      	add	r3, r2
 8005054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b02      	cmp	r3, #2
 8005060:	f040 813f 	bne.w	80052e2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	212c      	movs	r1, #44	; 0x2c
 800506a:	fb01 f303 	mul.w	r3, r1, r3
 800506e:	4413      	add	r3, r2
 8005070:	3361      	adds	r3, #97	; 0x61
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d17d      	bne.n	8005174 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	212c      	movs	r1, #44	; 0x2c
 800507e:	fb01 f303 	mul.w	r3, r1, r3
 8005082:	4413      	add	r3, r2
 8005084:	3360      	adds	r3, #96	; 0x60
 8005086:	2201      	movs	r2, #1
 8005088:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	212c      	movs	r1, #44	; 0x2c
 8005090:	fb01 f303 	mul.w	r3, r1, r3
 8005094:	4413      	add	r3, r2
 8005096:	333f      	adds	r3, #63	; 0x3f
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d00a      	beq.n	80050b4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	212c      	movs	r1, #44	; 0x2c
 80050a4:	fb01 f303 	mul.w	r3, r1, r3
 80050a8:	4413      	add	r3, r2
 80050aa:	333f      	adds	r3, #63	; 0x3f
 80050ac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	f040 8100 	bne.w	80052b4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d113      	bne.n	80050e4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	212c      	movs	r1, #44	; 0x2c
 80050c2:	fb01 f303 	mul.w	r3, r1, r3
 80050c6:	4413      	add	r3, r2
 80050c8:	3355      	adds	r3, #85	; 0x55
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	f083 0301 	eor.w	r3, r3, #1
 80050d0:	b2d8      	uxtb	r0, r3
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	212c      	movs	r1, #44	; 0x2c
 80050d8:	fb01 f303 	mul.w	r3, r1, r3
 80050dc:	4413      	add	r3, r2
 80050de:	3355      	adds	r3, #85	; 0x55
 80050e0:	4602      	mov	r2, r0
 80050e2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	f040 80e3 	bne.w	80052b4 <HCD_HC_OUT_IRQHandler+0x69c>
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	212c      	movs	r1, #44	; 0x2c
 80050f4:	fb01 f303 	mul.w	r3, r1, r3
 80050f8:	4413      	add	r3, r2
 80050fa:	334c      	adds	r3, #76	; 0x4c
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 80d8 	beq.w	80052b4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	212c      	movs	r1, #44	; 0x2c
 800510a:	fb01 f303 	mul.w	r3, r1, r3
 800510e:	4413      	add	r3, r2
 8005110:	334c      	adds	r3, #76	; 0x4c
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	202c      	movs	r0, #44	; 0x2c
 800511a:	fb00 f202 	mul.w	r2, r0, r2
 800511e:	440a      	add	r2, r1
 8005120:	3240      	adds	r2, #64	; 0x40
 8005122:	8812      	ldrh	r2, [r2, #0]
 8005124:	4413      	add	r3, r2
 8005126:	3b01      	subs	r3, #1
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	202c      	movs	r0, #44	; 0x2c
 800512e:	fb00 f202 	mul.w	r2, r0, r2
 8005132:	440a      	add	r2, r1
 8005134:	3240      	adds	r2, #64	; 0x40
 8005136:	8812      	ldrh	r2, [r2, #0]
 8005138:	fbb3 f3f2 	udiv	r3, r3, r2
 800513c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 80b5 	beq.w	80052b4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	212c      	movs	r1, #44	; 0x2c
 8005150:	fb01 f303 	mul.w	r3, r1, r3
 8005154:	4413      	add	r3, r2
 8005156:	3355      	adds	r3, #85	; 0x55
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	f083 0301 	eor.w	r3, r3, #1
 800515e:	b2d8      	uxtb	r0, r3
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	212c      	movs	r1, #44	; 0x2c
 8005166:	fb01 f303 	mul.w	r3, r1, r3
 800516a:	4413      	add	r3, r2
 800516c:	3355      	adds	r3, #85	; 0x55
 800516e:	4602      	mov	r2, r0
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	e09f      	b.n	80052b4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	212c      	movs	r1, #44	; 0x2c
 800517a:	fb01 f303 	mul.w	r3, r1, r3
 800517e:	4413      	add	r3, r2
 8005180:	3361      	adds	r3, #97	; 0x61
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b03      	cmp	r3, #3
 8005186:	d109      	bne.n	800519c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	212c      	movs	r1, #44	; 0x2c
 800518e:	fb01 f303 	mul.w	r3, r1, r3
 8005192:	4413      	add	r3, r2
 8005194:	3360      	adds	r3, #96	; 0x60
 8005196:	2202      	movs	r2, #2
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	e08b      	b.n	80052b4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	212c      	movs	r1, #44	; 0x2c
 80051a2:	fb01 f303 	mul.w	r3, r1, r3
 80051a6:	4413      	add	r3, r2
 80051a8:	3361      	adds	r3, #97	; 0x61
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d109      	bne.n	80051c4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	212c      	movs	r1, #44	; 0x2c
 80051b6:	fb01 f303 	mul.w	r3, r1, r3
 80051ba:	4413      	add	r3, r2
 80051bc:	3360      	adds	r3, #96	; 0x60
 80051be:	2202      	movs	r2, #2
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	e077      	b.n	80052b4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	212c      	movs	r1, #44	; 0x2c
 80051ca:	fb01 f303 	mul.w	r3, r1, r3
 80051ce:	4413      	add	r3, r2
 80051d0:	3361      	adds	r3, #97	; 0x61
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b05      	cmp	r3, #5
 80051d6:	d109      	bne.n	80051ec <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	212c      	movs	r1, #44	; 0x2c
 80051de:	fb01 f303 	mul.w	r3, r1, r3
 80051e2:	4413      	add	r3, r2
 80051e4:	3360      	adds	r3, #96	; 0x60
 80051e6:	2205      	movs	r2, #5
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	e063      	b.n	80052b4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	212c      	movs	r1, #44	; 0x2c
 80051f2:	fb01 f303 	mul.w	r3, r1, r3
 80051f6:	4413      	add	r3, r2
 80051f8:	3361      	adds	r3, #97	; 0x61
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	2b06      	cmp	r3, #6
 80051fe:	d009      	beq.n	8005214 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	212c      	movs	r1, #44	; 0x2c
 8005206:	fb01 f303 	mul.w	r3, r1, r3
 800520a:	4413      	add	r3, r2
 800520c:	3361      	adds	r3, #97	; 0x61
 800520e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005210:	2b08      	cmp	r3, #8
 8005212:	d14f      	bne.n	80052b4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	212c      	movs	r1, #44	; 0x2c
 800521a:	fb01 f303 	mul.w	r3, r1, r3
 800521e:	4413      	add	r3, r2
 8005220:	335c      	adds	r3, #92	; 0x5c
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	202c      	movs	r0, #44	; 0x2c
 800522c:	fb00 f303 	mul.w	r3, r0, r3
 8005230:	440b      	add	r3, r1
 8005232:	335c      	adds	r3, #92	; 0x5c
 8005234:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	212c      	movs	r1, #44	; 0x2c
 800523c:	fb01 f303 	mul.w	r3, r1, r3
 8005240:	4413      	add	r3, r2
 8005242:	335c      	adds	r3, #92	; 0x5c
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d912      	bls.n	8005270 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	212c      	movs	r1, #44	; 0x2c
 8005250:	fb01 f303 	mul.w	r3, r1, r3
 8005254:	4413      	add	r3, r2
 8005256:	335c      	adds	r3, #92	; 0x5c
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	212c      	movs	r1, #44	; 0x2c
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	4413      	add	r3, r2
 8005268:	3360      	adds	r3, #96	; 0x60
 800526a:	2204      	movs	r2, #4
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	e021      	b.n	80052b4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	212c      	movs	r1, #44	; 0x2c
 8005276:	fb01 f303 	mul.w	r3, r1, r3
 800527a:	4413      	add	r3, r2
 800527c:	3360      	adds	r3, #96	; 0x60
 800527e:	2202      	movs	r2, #2
 8005280:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	4413      	add	r3, r2
 800528a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005298:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052a0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ae:	461a      	mov	r2, r3
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c0:	461a      	mov	r2, r3
 80052c2:	2302      	movs	r3, #2
 80052c4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	b2d9      	uxtb	r1, r3
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	202c      	movs	r0, #44	; 0x2c
 80052d0:	fb00 f303 	mul.w	r3, r0, r3
 80052d4:	4413      	add	r3, r2
 80052d6:	3360      	adds	r3, #96	; 0x60
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	461a      	mov	r2, r3
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f006 ff9d 	bl	800c21c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80052e2:	bf00      	nop
 80052e4:	3720      	adds	r7, #32
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b08a      	sub	sp, #40	; 0x28
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	0c5b      	lsrs	r3, r3, #17
 8005310:	f003 030f 	and.w	r3, r3, #15
 8005314:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	091b      	lsrs	r3, r3, #4
 800531a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800531e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2b02      	cmp	r3, #2
 8005324:	d004      	beq.n	8005330 <HCD_RXQLVL_IRQHandler+0x46>
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b05      	cmp	r3, #5
 800532a:	f000 80a9 	beq.w	8005480 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800532e:	e0aa      	b.n	8005486 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 80a6 	beq.w	8005484 <HCD_RXQLVL_IRQHandler+0x19a>
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	212c      	movs	r1, #44	; 0x2c
 800533e:	fb01 f303 	mul.w	r3, r1, r3
 8005342:	4413      	add	r3, r2
 8005344:	3344      	adds	r3, #68	; 0x44
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 809b 	beq.w	8005484 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	212c      	movs	r1, #44	; 0x2c
 8005354:	fb01 f303 	mul.w	r3, r1, r3
 8005358:	4413      	add	r3, r2
 800535a:	3350      	adds	r3, #80	; 0x50
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	441a      	add	r2, r3
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	202c      	movs	r0, #44	; 0x2c
 8005368:	fb00 f303 	mul.w	r3, r0, r3
 800536c:	440b      	add	r3, r1
 800536e:	334c      	adds	r3, #76	; 0x4c
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d87a      	bhi.n	800546c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	212c      	movs	r1, #44	; 0x2c
 8005380:	fb01 f303 	mul.w	r3, r1, r3
 8005384:	4413      	add	r3, r2
 8005386:	3344      	adds	r3, #68	; 0x44
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	b292      	uxth	r2, r2
 800538e:	4619      	mov	r1, r3
 8005390:	f003 fff8 	bl	8009384 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	212c      	movs	r1, #44	; 0x2c
 800539a:	fb01 f303 	mul.w	r3, r1, r3
 800539e:	4413      	add	r3, r2
 80053a0:	3344      	adds	r3, #68	; 0x44
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	441a      	add	r2, r3
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	202c      	movs	r0, #44	; 0x2c
 80053ae:	fb00 f303 	mul.w	r3, r0, r3
 80053b2:	440b      	add	r3, r1
 80053b4:	3344      	adds	r3, #68	; 0x44
 80053b6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	212c      	movs	r1, #44	; 0x2c
 80053be:	fb01 f303 	mul.w	r3, r1, r3
 80053c2:	4413      	add	r3, r2
 80053c4:	3350      	adds	r3, #80	; 0x50
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	441a      	add	r2, r3
 80053cc:	6879      	ldr	r1, [r7, #4]
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	202c      	movs	r0, #44	; 0x2c
 80053d2:	fb00 f303 	mul.w	r3, r0, r3
 80053d6:	440b      	add	r3, r1
 80053d8:	3350      	adds	r3, #80	; 0x50
 80053da:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	0cdb      	lsrs	r3, r3, #19
 80053ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053f0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	212c      	movs	r1, #44	; 0x2c
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	4413      	add	r3, r2
 80053fe:	3340      	adds	r3, #64	; 0x40
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	461a      	mov	r2, r3
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	4293      	cmp	r3, r2
 8005408:	d13c      	bne.n	8005484 <HCD_RXQLVL_IRQHandler+0x19a>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d039      	beq.n	8005484 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	4413      	add	r3, r2
 8005418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005426:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800542e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	4413      	add	r3, r2
 8005438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543c:	461a      	mov	r2, r3
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	212c      	movs	r1, #44	; 0x2c
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	4413      	add	r3, r2
 800544e:	3354      	adds	r3, #84	; 0x54
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	f083 0301 	eor.w	r3, r3, #1
 8005456:	b2d8      	uxtb	r0, r3
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	212c      	movs	r1, #44	; 0x2c
 800545e:	fb01 f303 	mul.w	r3, r1, r3
 8005462:	4413      	add	r3, r2
 8005464:	3354      	adds	r3, #84	; 0x54
 8005466:	4602      	mov	r2, r0
 8005468:	701a      	strb	r2, [r3, #0]
      break;
 800546a:	e00b      	b.n	8005484 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	212c      	movs	r1, #44	; 0x2c
 8005472:	fb01 f303 	mul.w	r3, r1, r3
 8005476:	4413      	add	r3, r2
 8005478:	3360      	adds	r3, #96	; 0x60
 800547a:	2204      	movs	r2, #4
 800547c:	701a      	strb	r2, [r3, #0]
      break;
 800547e:	e001      	b.n	8005484 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005480:	bf00      	nop
 8005482:	e000      	b.n	8005486 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005484:	bf00      	nop
  }
}
 8005486:	bf00      	nop
 8005488:	3728      	adds	r7, #40	; 0x28
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b086      	sub	sp, #24
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80054ba:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d10b      	bne.n	80054de <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d102      	bne.n	80054d6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f006 fe87 	bl	800c1e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f043 0302 	orr.w	r3, r3, #2
 80054dc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f003 0308 	and.w	r3, r3, #8
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d132      	bne.n	800554e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f043 0308 	orr.w	r3, r3, #8
 80054ee:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f003 0304 	and.w	r3, r3, #4
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d126      	bne.n	8005548 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d113      	bne.n	800552a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005508:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800550c:	d106      	bne.n	800551c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2102      	movs	r1, #2
 8005514:	4618      	mov	r0, r3
 8005516:	f004 f8a3 	bl	8009660 <USB_InitFSLSPClkSel>
 800551a:	e011      	b.n	8005540 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2101      	movs	r1, #1
 8005522:	4618      	mov	r0, r3
 8005524:	f004 f89c 	bl	8009660 <USB_InitFSLSPClkSel>
 8005528:	e00a      	b.n	8005540 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d106      	bne.n	8005540 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005538:	461a      	mov	r2, r3
 800553a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800553e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f006 fe79 	bl	800c238 <HAL_HCD_PortEnabled_Callback>
 8005546:	e002      	b.n	800554e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f006 fe83 	bl	800c254 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b20      	cmp	r3, #32
 8005556:	d103      	bne.n	8005560 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f043 0320 	orr.w	r3, r3, #32
 800555e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005566:	461a      	mov	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	6013      	str	r3, [r2, #0]
}
 800556c:	bf00      	nop
 800556e:	3718      	adds	r7, #24
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e12b      	b.n	80057de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d106      	bne.n	80055a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7fc fb26 	bl	8001bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2224      	movs	r2, #36	; 0x24
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0201 	bic.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80055d8:	f001 fa20 	bl	8006a1c <HAL_RCC_GetPCLK1Freq>
 80055dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	4a81      	ldr	r2, [pc, #516]	; (80057e8 <HAL_I2C_Init+0x274>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d807      	bhi.n	80055f8 <HAL_I2C_Init+0x84>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4a80      	ldr	r2, [pc, #512]	; (80057ec <HAL_I2C_Init+0x278>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	bf94      	ite	ls
 80055f0:	2301      	movls	r3, #1
 80055f2:	2300      	movhi	r3, #0
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	e006      	b.n	8005606 <HAL_I2C_Init+0x92>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4a7d      	ldr	r2, [pc, #500]	; (80057f0 <HAL_I2C_Init+0x27c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	bf94      	ite	ls
 8005600:	2301      	movls	r3, #1
 8005602:	2300      	movhi	r3, #0
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e0e7      	b.n	80057de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	4a78      	ldr	r2, [pc, #480]	; (80057f4 <HAL_I2C_Init+0x280>)
 8005612:	fba2 2303 	umull	r2, r3, r2, r3
 8005616:	0c9b      	lsrs	r3, r3, #18
 8005618:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	430a      	orrs	r2, r1
 800562c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	4a6a      	ldr	r2, [pc, #424]	; (80057e8 <HAL_I2C_Init+0x274>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d802      	bhi.n	8005648 <HAL_I2C_Init+0xd4>
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	3301      	adds	r3, #1
 8005646:	e009      	b.n	800565c <HAL_I2C_Init+0xe8>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800564e:	fb02 f303 	mul.w	r3, r2, r3
 8005652:	4a69      	ldr	r2, [pc, #420]	; (80057f8 <HAL_I2C_Init+0x284>)
 8005654:	fba2 2303 	umull	r2, r3, r2, r3
 8005658:	099b      	lsrs	r3, r3, #6
 800565a:	3301      	adds	r3, #1
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6812      	ldr	r2, [r2, #0]
 8005660:	430b      	orrs	r3, r1
 8005662:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800566e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	495c      	ldr	r1, [pc, #368]	; (80057e8 <HAL_I2C_Init+0x274>)
 8005678:	428b      	cmp	r3, r1
 800567a:	d819      	bhi.n	80056b0 <HAL_I2C_Init+0x13c>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	1e59      	subs	r1, r3, #1
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	fbb1 f3f3 	udiv	r3, r1, r3
 800568a:	1c59      	adds	r1, r3, #1
 800568c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005690:	400b      	ands	r3, r1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <HAL_I2C_Init+0x138>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	1e59      	subs	r1, r3, #1
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80056a4:	3301      	adds	r3, #1
 80056a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056aa:	e051      	b.n	8005750 <HAL_I2C_Init+0x1dc>
 80056ac:	2304      	movs	r3, #4
 80056ae:	e04f      	b.n	8005750 <HAL_I2C_Init+0x1dc>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d111      	bne.n	80056dc <HAL_I2C_Init+0x168>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	1e58      	subs	r0, r3, #1
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6859      	ldr	r1, [r3, #4]
 80056c0:	460b      	mov	r3, r1
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	440b      	add	r3, r1
 80056c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80056ca:	3301      	adds	r3, #1
 80056cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	bf0c      	ite	eq
 80056d4:	2301      	moveq	r3, #1
 80056d6:	2300      	movne	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	e012      	b.n	8005702 <HAL_I2C_Init+0x18e>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	1e58      	subs	r0, r3, #1
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6859      	ldr	r1, [r3, #4]
 80056e4:	460b      	mov	r3, r1
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	440b      	add	r3, r1
 80056ea:	0099      	lsls	r1, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80056f2:	3301      	adds	r3, #1
 80056f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	bf0c      	ite	eq
 80056fc:	2301      	moveq	r3, #1
 80056fe:	2300      	movne	r3, #0
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <HAL_I2C_Init+0x196>
 8005706:	2301      	movs	r3, #1
 8005708:	e022      	b.n	8005750 <HAL_I2C_Init+0x1dc>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10e      	bne.n	8005730 <HAL_I2C_Init+0x1bc>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	1e58      	subs	r0, r3, #1
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6859      	ldr	r1, [r3, #4]
 800571a:	460b      	mov	r3, r1
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	440b      	add	r3, r1
 8005720:	fbb0 f3f3 	udiv	r3, r0, r3
 8005724:	3301      	adds	r3, #1
 8005726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800572a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800572e:	e00f      	b.n	8005750 <HAL_I2C_Init+0x1dc>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	1e58      	subs	r0, r3, #1
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6859      	ldr	r1, [r3, #4]
 8005738:	460b      	mov	r3, r1
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	440b      	add	r3, r1
 800573e:	0099      	lsls	r1, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	fbb0 f3f3 	udiv	r3, r0, r3
 8005746:	3301      	adds	r3, #1
 8005748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800574c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	6809      	ldr	r1, [r1, #0]
 8005754:	4313      	orrs	r3, r2
 8005756:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	69da      	ldr	r2, [r3, #28]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800577e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6911      	ldr	r1, [r2, #16]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	68d2      	ldr	r2, [r2, #12]
 800578a:	4311      	orrs	r1, r2
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6812      	ldr	r2, [r2, #0]
 8005790:	430b      	orrs	r3, r1
 8005792:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695a      	ldr	r2, [r3, #20]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	000186a0 	.word	0x000186a0
 80057ec:	001e847f 	.word	0x001e847f
 80057f0:	003d08ff 	.word	0x003d08ff
 80057f4:	431bde83 	.word	0x431bde83
 80057f8:	10624dd3 	.word	0x10624dd3

080057fc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b088      	sub	sp, #32
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e128      	b.n	8005a60 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d109      	bne.n	800582e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a90      	ldr	r2, [pc, #576]	; (8005a68 <HAL_I2S_Init+0x26c>)
 8005826:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7fc fa27 	bl	8001c7c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2202      	movs	r2, #2
 8005832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6812      	ldr	r2, [r2, #0]
 8005840:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005844:	f023 030f 	bic.w	r3, r3, #15
 8005848:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2202      	movs	r2, #2
 8005850:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	2b02      	cmp	r3, #2
 8005858:	d060      	beq.n	800591c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d102      	bne.n	8005868 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005862:	2310      	movs	r3, #16
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	e001      	b.n	800586c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005868:	2320      	movs	r3, #32
 800586a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	2b20      	cmp	r3, #32
 8005872:	d802      	bhi.n	800587a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800587a:	2001      	movs	r0, #1
 800587c:	f001 f9d8 	bl	8006c30 <HAL_RCCEx_GetPeriphCLKFreq>
 8005880:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800588a:	d125      	bne.n	80058d8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d010      	beq.n	80058b6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	fbb2 f2f3 	udiv	r2, r2, r3
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	461a      	mov	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b0:	3305      	adds	r3, #5
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	e01f      	b.n	80058f6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	461a      	mov	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d2:	3305      	adds	r3, #5
 80058d4:	613b      	str	r3, [r7, #16]
 80058d6:	e00e      	b.n	80058f6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80058e0:	4613      	mov	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	461a      	mov	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f2:	3305      	adds	r3, #5
 80058f4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	4a5c      	ldr	r2, [pc, #368]	; (8005a6c <HAL_I2S_Init+0x270>)
 80058fa:	fba2 2303 	umull	r2, r3, r2, r3
 80058fe:	08db      	lsrs	r3, r3, #3
 8005900:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	085b      	lsrs	r3, r3, #1
 8005912:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	021b      	lsls	r3, r3, #8
 8005918:	61bb      	str	r3, [r7, #24]
 800591a:	e003      	b.n	8005924 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800591c:	2302      	movs	r3, #2
 800591e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d902      	bls.n	8005930 <HAL_I2S_Init+0x134>
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	2bff      	cmp	r3, #255	; 0xff
 800592e:	d907      	bls.n	8005940 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005934:	f043 0210 	orr.w	r2, r3, #16
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e08f      	b.n	8005a60 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	ea42 0103 	orr.w	r1, r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	430a      	orrs	r2, r1
 8005952:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800595e:	f023 030f 	bic.w	r3, r3, #15
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6851      	ldr	r1, [r2, #4]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	6892      	ldr	r2, [r2, #8]
 800596a:	4311      	orrs	r1, r2
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	68d2      	ldr	r2, [r2, #12]
 8005970:	4311      	orrs	r1, r2
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6992      	ldr	r2, [r2, #24]
 8005976:	430a      	orrs	r2, r1
 8005978:	431a      	orrs	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005982:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d161      	bne.n	8005a50 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a38      	ldr	r2, [pc, #224]	; (8005a70 <HAL_I2S_Init+0x274>)
 8005990:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a37      	ldr	r2, [pc, #220]	; (8005a74 <HAL_I2S_Init+0x278>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d101      	bne.n	80059a0 <HAL_I2S_Init+0x1a4>
 800599c:	4b36      	ldr	r3, [pc, #216]	; (8005a78 <HAL_I2S_Init+0x27c>)
 800599e:	e001      	b.n	80059a4 <HAL_I2S_Init+0x1a8>
 80059a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	6812      	ldr	r2, [r2, #0]
 80059aa:	4932      	ldr	r1, [pc, #200]	; (8005a74 <HAL_I2S_Init+0x278>)
 80059ac:	428a      	cmp	r2, r1
 80059ae:	d101      	bne.n	80059b4 <HAL_I2S_Init+0x1b8>
 80059b0:	4a31      	ldr	r2, [pc, #196]	; (8005a78 <HAL_I2S_Init+0x27c>)
 80059b2:	e001      	b.n	80059b8 <HAL_I2S_Init+0x1bc>
 80059b4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80059b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80059bc:	f023 030f 	bic.w	r3, r3, #15
 80059c0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a2b      	ldr	r2, [pc, #172]	; (8005a74 <HAL_I2S_Init+0x278>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d101      	bne.n	80059d0 <HAL_I2S_Init+0x1d4>
 80059cc:	4b2a      	ldr	r3, [pc, #168]	; (8005a78 <HAL_I2S_Init+0x27c>)
 80059ce:	e001      	b.n	80059d4 <HAL_I2S_Init+0x1d8>
 80059d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059d4:	2202      	movs	r2, #2
 80059d6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a25      	ldr	r2, [pc, #148]	; (8005a74 <HAL_I2S_Init+0x278>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d101      	bne.n	80059e6 <HAL_I2S_Init+0x1ea>
 80059e2:	4b25      	ldr	r3, [pc, #148]	; (8005a78 <HAL_I2S_Init+0x27c>)
 80059e4:	e001      	b.n	80059ea <HAL_I2S_Init+0x1ee>
 80059e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059f6:	d003      	beq.n	8005a00 <HAL_I2S_Init+0x204>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d103      	bne.n	8005a08 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a04:	613b      	str	r3, [r7, #16]
 8005a06:	e001      	b.n	8005a0c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a16:	4313      	orrs	r3, r2
 8005a18:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a20:	4313      	orrs	r3, r2
 8005a22:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	897b      	ldrh	r3, [r7, #10]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a38:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a0d      	ldr	r2, [pc, #52]	; (8005a74 <HAL_I2S_Init+0x278>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d101      	bne.n	8005a48 <HAL_I2S_Init+0x24c>
 8005a44:	4b0c      	ldr	r3, [pc, #48]	; (8005a78 <HAL_I2S_Init+0x27c>)
 8005a46:	e001      	b.n	8005a4c <HAL_I2S_Init+0x250>
 8005a48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a4c:	897a      	ldrh	r2, [r7, #10]
 8005a4e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3720      	adds	r7, #32
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	08005b73 	.word	0x08005b73
 8005a6c:	cccccccd 	.word	0xcccccccd
 8005a70:	08005c89 	.word	0x08005c89
 8005a74:	40003800 	.word	0x40003800
 8005a78:	40003400 	.word	0x40003400

08005a7c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	881a      	ldrh	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	1c9a      	adds	r2, r3, #2
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10e      	bne.n	8005b0c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005afc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff ffb8 	bl	8005a7c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005b0c:	bf00      	nop
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	b292      	uxth	r2, r2
 8005b28:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	1c9a      	adds	r2, r3, #2
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10e      	bne.n	8005b6a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b5a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff ff93 	bl	8005a90 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005b6a:	bf00      	nop
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b086      	sub	sp, #24
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d13a      	bne.n	8005c04 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d109      	bne.n	8005bac <I2S_IRQHandler+0x3a>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba2:	2b40      	cmp	r3, #64	; 0x40
 8005ba4:	d102      	bne.n	8005bac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7ff ffb4 	bl	8005b14 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb2:	2b40      	cmp	r3, #64	; 0x40
 8005bb4:	d126      	bne.n	8005c04 <I2S_IRQHandler+0x92>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f003 0320 	and.w	r3, r3, #32
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d11f      	bne.n	8005c04 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005bd2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	613b      	str	r3, [r7, #16]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	613b      	str	r3, [r7, #16]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	613b      	str	r3, [r7, #16]
 8005be8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf6:	f043 0202 	orr.w	r2, r3, #2
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7ff ff50 	bl	8005aa4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d136      	bne.n	8005c7e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d109      	bne.n	8005c2e <I2S_IRQHandler+0xbc>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c24:	2b80      	cmp	r3, #128	; 0x80
 8005c26:	d102      	bne.n	8005c2e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff ff45 	bl	8005ab8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f003 0308 	and.w	r3, r3, #8
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d122      	bne.n	8005c7e <I2S_IRQHandler+0x10c>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b20      	cmp	r3, #32
 8005c44:	d11b      	bne.n	8005c7e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c54:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c70:	f043 0204 	orr.w	r2, r3, #4
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7ff ff13 	bl	8005aa4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c7e:	bf00      	nop
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a92      	ldr	r2, [pc, #584]	; (8005ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d101      	bne.n	8005ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005ca2:	4b92      	ldr	r3, [pc, #584]	; (8005eec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ca4:	e001      	b.n	8005caa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005ca6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a8b      	ldr	r2, [pc, #556]	; (8005ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d101      	bne.n	8005cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005cc0:	4b8a      	ldr	r3, [pc, #552]	; (8005eec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005cc2:	e001      	b.n	8005cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005cc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cd4:	d004      	beq.n	8005ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f040 8099 	bne.w	8005e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d107      	bne.n	8005cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f925 	bl	8005f44 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d107      	bne.n	8005d14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d002      	beq.n	8005d14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f9c8 	bl	80060a4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1a:	2b40      	cmp	r3, #64	; 0x40
 8005d1c:	d13a      	bne.n	8005d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f003 0320 	and.w	r3, r3, #32
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d035      	beq.n	8005d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a6e      	ldr	r2, [pc, #440]	; (8005ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d101      	bne.n	8005d36 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005d32:	4b6e      	ldr	r3, [pc, #440]	; (8005eec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d34:	e001      	b.n	8005d3a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005d36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4969      	ldr	r1, [pc, #420]	; (8005ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d42:	428b      	cmp	r3, r1
 8005d44:	d101      	bne.n	8005d4a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005d46:	4b69      	ldr	r3, [pc, #420]	; (8005eec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d48:	e001      	b.n	8005d4e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005d4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d52:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005d64:	2300      	movs	r3, #0
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d86:	f043 0202 	orr.w	r2, r3, #2
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff fe88 	bl	8005aa4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	f003 0308 	and.w	r3, r3, #8
 8005d9a:	2b08      	cmp	r3, #8
 8005d9c:	f040 80c3 	bne.w	8005f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f003 0320 	and.w	r3, r3, #32
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 80bd 	beq.w	8005f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005dba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a49      	ldr	r2, [pc, #292]	; (8005ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d101      	bne.n	8005dca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005dc6:	4b49      	ldr	r3, [pc, #292]	; (8005eec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005dc8:	e001      	b.n	8005dce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005dca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4944      	ldr	r1, [pc, #272]	; (8005ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005dd6:	428b      	cmp	r3, r1
 8005dd8:	d101      	bne.n	8005dde <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005dda:	4b44      	ldr	r3, [pc, #272]	; (8005eec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ddc:	e001      	b.n	8005de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005dde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005de2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005de6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005de8:	2300      	movs	r3, #0
 8005dea:	60bb      	str	r3, [r7, #8]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	60bb      	str	r3, [r7, #8]
 8005df4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e02:	f043 0204 	orr.w	r2, r3, #4
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7ff fe4a 	bl	8005aa4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e10:	e089      	b.n	8005f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d107      	bne.n	8005e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f8be 	bl	8005fa8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d107      	bne.n	8005e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d002      	beq.n	8005e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f8fd 	bl	8006040 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4c:	2b40      	cmp	r3, #64	; 0x40
 8005e4e:	d12f      	bne.n	8005eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d02a      	beq.n	8005eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e68:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a1e      	ldr	r2, [pc, #120]	; (8005ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d101      	bne.n	8005e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005e74:	4b1d      	ldr	r3, [pc, #116]	; (8005eec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e76:	e001      	b.n	8005e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005e78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4919      	ldr	r1, [pc, #100]	; (8005ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e84:	428b      	cmp	r3, r1
 8005e86:	d101      	bne.n	8005e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005e88:	4b18      	ldr	r3, [pc, #96]	; (8005eec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e8a:	e001      	b.n	8005e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005e8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e94:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea2:	f043 0202 	orr.w	r2, r3, #2
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7ff fdfa 	bl	8005aa4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b08      	cmp	r3, #8
 8005eb8:	d136      	bne.n	8005f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f003 0320 	and.w	r3, r3, #32
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d031      	beq.n	8005f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a07      	ldr	r2, [pc, #28]	; (8005ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d101      	bne.n	8005ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005ece:	4b07      	ldr	r3, [pc, #28]	; (8005eec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ed0:	e001      	b.n	8005ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005ed2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4902      	ldr	r1, [pc, #8]	; (8005ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ede:	428b      	cmp	r3, r1
 8005ee0:	d106      	bne.n	8005ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005ee2:	4b02      	ldr	r3, [pc, #8]	; (8005eec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ee4:	e006      	b.n	8005ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005ee6:	bf00      	nop
 8005ee8:	40003800 	.word	0x40003800
 8005eec:	40003400 	.word	0x40003400
 8005ef0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ef4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ef8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f08:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f16:	f043 0204 	orr.w	r2, r3, #4
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7ff fdc0 	bl	8005aa4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f24:	e000      	b.n	8005f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f26:	bf00      	nop
}
 8005f28:	bf00      	nop
 8005f2a:	3720      	adds	r7, #32
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	1c99      	adds	r1, r3, #2
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6251      	str	r1, [r2, #36]	; 0x24
 8005f56:	881a      	ldrh	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d113      	bne.n	8005f9e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f84:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d106      	bne.n	8005f9e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff ffc9 	bl	8005f30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f9e:	bf00      	nop
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	1c99      	adds	r1, r3, #2
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6251      	str	r1, [r2, #36]	; 0x24
 8005fba:	8819      	ldrh	r1, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1d      	ldr	r2, [pc, #116]	; (8006038 <I2SEx_TxISR_I2SExt+0x90>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d101      	bne.n	8005fca <I2SEx_TxISR_I2SExt+0x22>
 8005fc6:	4b1d      	ldr	r3, [pc, #116]	; (800603c <I2SEx_TxISR_I2SExt+0x94>)
 8005fc8:	e001      	b.n	8005fce <I2SEx_TxISR_I2SExt+0x26>
 8005fca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fce:	460a      	mov	r2, r1
 8005fd0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d121      	bne.n	800602e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a12      	ldr	r2, [pc, #72]	; (8006038 <I2SEx_TxISR_I2SExt+0x90>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d101      	bne.n	8005ff8 <I2SEx_TxISR_I2SExt+0x50>
 8005ff4:	4b11      	ldr	r3, [pc, #68]	; (800603c <I2SEx_TxISR_I2SExt+0x94>)
 8005ff6:	e001      	b.n	8005ffc <I2SEx_TxISR_I2SExt+0x54>
 8005ff8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	490d      	ldr	r1, [pc, #52]	; (8006038 <I2SEx_TxISR_I2SExt+0x90>)
 8006004:	428b      	cmp	r3, r1
 8006006:	d101      	bne.n	800600c <I2SEx_TxISR_I2SExt+0x64>
 8006008:	4b0c      	ldr	r3, [pc, #48]	; (800603c <I2SEx_TxISR_I2SExt+0x94>)
 800600a:	e001      	b.n	8006010 <I2SEx_TxISR_I2SExt+0x68>
 800600c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006010:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006014:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800601a:	b29b      	uxth	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d106      	bne.n	800602e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7ff ff81 	bl	8005f30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	40003800 	.word	0x40003800
 800603c:	40003400 	.word	0x40003400

08006040 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68d8      	ldr	r0, [r3, #12]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006052:	1c99      	adds	r1, r3, #2
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006058:	b282      	uxth	r2, r0
 800605a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006060:	b29b      	uxth	r3, r3
 8006062:	3b01      	subs	r3, #1
 8006064:	b29a      	uxth	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800606e:	b29b      	uxth	r3, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	d113      	bne.n	800609c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006082:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006088:	b29b      	uxth	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7ff ff4a 	bl	8005f30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800609c:	bf00      	nop
 800609e:	3708      	adds	r7, #8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a20      	ldr	r2, [pc, #128]	; (8006134 <I2SEx_RxISR_I2SExt+0x90>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d101      	bne.n	80060ba <I2SEx_RxISR_I2SExt+0x16>
 80060b6:	4b20      	ldr	r3, [pc, #128]	; (8006138 <I2SEx_RxISR_I2SExt+0x94>)
 80060b8:	e001      	b.n	80060be <I2SEx_RxISR_I2SExt+0x1a>
 80060ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060be:	68d8      	ldr	r0, [r3, #12]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	1c99      	adds	r1, r3, #2
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80060ca:	b282      	uxth	r2, r0
 80060cc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	3b01      	subs	r3, #1
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d121      	bne.n	800612a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a12      	ldr	r2, [pc, #72]	; (8006134 <I2SEx_RxISR_I2SExt+0x90>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d101      	bne.n	80060f4 <I2SEx_RxISR_I2SExt+0x50>
 80060f0:	4b11      	ldr	r3, [pc, #68]	; (8006138 <I2SEx_RxISR_I2SExt+0x94>)
 80060f2:	e001      	b.n	80060f8 <I2SEx_RxISR_I2SExt+0x54>
 80060f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	490d      	ldr	r1, [pc, #52]	; (8006134 <I2SEx_RxISR_I2SExt+0x90>)
 8006100:	428b      	cmp	r3, r1
 8006102:	d101      	bne.n	8006108 <I2SEx_RxISR_I2SExt+0x64>
 8006104:	4b0c      	ldr	r3, [pc, #48]	; (8006138 <I2SEx_RxISR_I2SExt+0x94>)
 8006106:	e001      	b.n	800610c <I2SEx_RxISR_I2SExt+0x68>
 8006108:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800610c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006110:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006116:	b29b      	uxth	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d106      	bne.n	800612a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7ff ff03 	bl	8005f30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800612a:	bf00      	nop
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	40003800 	.word	0x40003800
 8006138:	40003400 	.word	0x40003400

0800613c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e267      	b.n	800661e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d075      	beq.n	8006246 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800615a:	4b88      	ldr	r3, [pc, #544]	; (800637c <HAL_RCC_OscConfig+0x240>)
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f003 030c 	and.w	r3, r3, #12
 8006162:	2b04      	cmp	r3, #4
 8006164:	d00c      	beq.n	8006180 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006166:	4b85      	ldr	r3, [pc, #532]	; (800637c <HAL_RCC_OscConfig+0x240>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800616e:	2b08      	cmp	r3, #8
 8006170:	d112      	bne.n	8006198 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006172:	4b82      	ldr	r3, [pc, #520]	; (800637c <HAL_RCC_OscConfig+0x240>)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800617a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800617e:	d10b      	bne.n	8006198 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006180:	4b7e      	ldr	r3, [pc, #504]	; (800637c <HAL_RCC_OscConfig+0x240>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d05b      	beq.n	8006244 <HAL_RCC_OscConfig+0x108>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d157      	bne.n	8006244 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e242      	b.n	800661e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061a0:	d106      	bne.n	80061b0 <HAL_RCC_OscConfig+0x74>
 80061a2:	4b76      	ldr	r3, [pc, #472]	; (800637c <HAL_RCC_OscConfig+0x240>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a75      	ldr	r2, [pc, #468]	; (800637c <HAL_RCC_OscConfig+0x240>)
 80061a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	e01d      	b.n	80061ec <HAL_RCC_OscConfig+0xb0>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061b8:	d10c      	bne.n	80061d4 <HAL_RCC_OscConfig+0x98>
 80061ba:	4b70      	ldr	r3, [pc, #448]	; (800637c <HAL_RCC_OscConfig+0x240>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a6f      	ldr	r2, [pc, #444]	; (800637c <HAL_RCC_OscConfig+0x240>)
 80061c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061c4:	6013      	str	r3, [r2, #0]
 80061c6:	4b6d      	ldr	r3, [pc, #436]	; (800637c <HAL_RCC_OscConfig+0x240>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a6c      	ldr	r2, [pc, #432]	; (800637c <HAL_RCC_OscConfig+0x240>)
 80061cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d0:	6013      	str	r3, [r2, #0]
 80061d2:	e00b      	b.n	80061ec <HAL_RCC_OscConfig+0xb0>
 80061d4:	4b69      	ldr	r3, [pc, #420]	; (800637c <HAL_RCC_OscConfig+0x240>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a68      	ldr	r2, [pc, #416]	; (800637c <HAL_RCC_OscConfig+0x240>)
 80061da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	4b66      	ldr	r3, [pc, #408]	; (800637c <HAL_RCC_OscConfig+0x240>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a65      	ldr	r2, [pc, #404]	; (800637c <HAL_RCC_OscConfig+0x240>)
 80061e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d013      	beq.n	800621c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f4:	f7fc fe2e 	bl	8002e54 <HAL_GetTick>
 80061f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061fa:	e008      	b.n	800620e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061fc:	f7fc fe2a 	bl	8002e54 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b64      	cmp	r3, #100	; 0x64
 8006208:	d901      	bls.n	800620e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e207      	b.n	800661e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800620e:	4b5b      	ldr	r3, [pc, #364]	; (800637c <HAL_RCC_OscConfig+0x240>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0f0      	beq.n	80061fc <HAL_RCC_OscConfig+0xc0>
 800621a:	e014      	b.n	8006246 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800621c:	f7fc fe1a 	bl	8002e54 <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006224:	f7fc fe16 	bl	8002e54 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b64      	cmp	r3, #100	; 0x64
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e1f3      	b.n	800661e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006236:	4b51      	ldr	r3, [pc, #324]	; (800637c <HAL_RCC_OscConfig+0x240>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1f0      	bne.n	8006224 <HAL_RCC_OscConfig+0xe8>
 8006242:	e000      	b.n	8006246 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d063      	beq.n	800631a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006252:	4b4a      	ldr	r3, [pc, #296]	; (800637c <HAL_RCC_OscConfig+0x240>)
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f003 030c 	and.w	r3, r3, #12
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00b      	beq.n	8006276 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800625e:	4b47      	ldr	r3, [pc, #284]	; (800637c <HAL_RCC_OscConfig+0x240>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006266:	2b08      	cmp	r3, #8
 8006268:	d11c      	bne.n	80062a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800626a:	4b44      	ldr	r3, [pc, #272]	; (800637c <HAL_RCC_OscConfig+0x240>)
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d116      	bne.n	80062a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006276:	4b41      	ldr	r3, [pc, #260]	; (800637c <HAL_RCC_OscConfig+0x240>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d005      	beq.n	800628e <HAL_RCC_OscConfig+0x152>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d001      	beq.n	800628e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e1c7      	b.n	800661e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800628e:	4b3b      	ldr	r3, [pc, #236]	; (800637c <HAL_RCC_OscConfig+0x240>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	4937      	ldr	r1, [pc, #220]	; (800637c <HAL_RCC_OscConfig+0x240>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062a2:	e03a      	b.n	800631a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d020      	beq.n	80062ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062ac:	4b34      	ldr	r3, [pc, #208]	; (8006380 <HAL_RCC_OscConfig+0x244>)
 80062ae:	2201      	movs	r2, #1
 80062b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b2:	f7fc fdcf 	bl	8002e54 <HAL_GetTick>
 80062b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062b8:	e008      	b.n	80062cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062ba:	f7fc fdcb 	bl	8002e54 <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d901      	bls.n	80062cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e1a8      	b.n	800661e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062cc:	4b2b      	ldr	r3, [pc, #172]	; (800637c <HAL_RCC_OscConfig+0x240>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0f0      	beq.n	80062ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d8:	4b28      	ldr	r3, [pc, #160]	; (800637c <HAL_RCC_OscConfig+0x240>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	00db      	lsls	r3, r3, #3
 80062e6:	4925      	ldr	r1, [pc, #148]	; (800637c <HAL_RCC_OscConfig+0x240>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	600b      	str	r3, [r1, #0]
 80062ec:	e015      	b.n	800631a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062ee:	4b24      	ldr	r3, [pc, #144]	; (8006380 <HAL_RCC_OscConfig+0x244>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f4:	f7fc fdae 	bl	8002e54 <HAL_GetTick>
 80062f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062fa:	e008      	b.n	800630e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062fc:	f7fc fdaa 	bl	8002e54 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b02      	cmp	r3, #2
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e187      	b.n	800661e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800630e:	4b1b      	ldr	r3, [pc, #108]	; (800637c <HAL_RCC_OscConfig+0x240>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1f0      	bne.n	80062fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0308 	and.w	r3, r3, #8
 8006322:	2b00      	cmp	r3, #0
 8006324:	d036      	beq.n	8006394 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d016      	beq.n	800635c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800632e:	4b15      	ldr	r3, [pc, #84]	; (8006384 <HAL_RCC_OscConfig+0x248>)
 8006330:	2201      	movs	r2, #1
 8006332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006334:	f7fc fd8e 	bl	8002e54 <HAL_GetTick>
 8006338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800633a:	e008      	b.n	800634e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800633c:	f7fc fd8a 	bl	8002e54 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e167      	b.n	800661e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800634e:	4b0b      	ldr	r3, [pc, #44]	; (800637c <HAL_RCC_OscConfig+0x240>)
 8006350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0f0      	beq.n	800633c <HAL_RCC_OscConfig+0x200>
 800635a:	e01b      	b.n	8006394 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800635c:	4b09      	ldr	r3, [pc, #36]	; (8006384 <HAL_RCC_OscConfig+0x248>)
 800635e:	2200      	movs	r2, #0
 8006360:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006362:	f7fc fd77 	bl	8002e54 <HAL_GetTick>
 8006366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006368:	e00e      	b.n	8006388 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800636a:	f7fc fd73 	bl	8002e54 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	2b02      	cmp	r3, #2
 8006376:	d907      	bls.n	8006388 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e150      	b.n	800661e <HAL_RCC_OscConfig+0x4e2>
 800637c:	40023800 	.word	0x40023800
 8006380:	42470000 	.word	0x42470000
 8006384:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006388:	4b88      	ldr	r3, [pc, #544]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 800638a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1ea      	bne.n	800636a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 8097 	beq.w	80064d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063a2:	2300      	movs	r3, #0
 80063a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063a6:	4b81      	ldr	r3, [pc, #516]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10f      	bne.n	80063d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063b2:	2300      	movs	r3, #0
 80063b4:	60bb      	str	r3, [r7, #8]
 80063b6:	4b7d      	ldr	r3, [pc, #500]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	4a7c      	ldr	r2, [pc, #496]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 80063bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063c0:	6413      	str	r3, [r2, #64]	; 0x40
 80063c2:	4b7a      	ldr	r3, [pc, #488]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 80063c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ca:	60bb      	str	r3, [r7, #8]
 80063cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063ce:	2301      	movs	r3, #1
 80063d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063d2:	4b77      	ldr	r3, [pc, #476]	; (80065b0 <HAL_RCC_OscConfig+0x474>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d118      	bne.n	8006410 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063de:	4b74      	ldr	r3, [pc, #464]	; (80065b0 <HAL_RCC_OscConfig+0x474>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a73      	ldr	r2, [pc, #460]	; (80065b0 <HAL_RCC_OscConfig+0x474>)
 80063e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063ea:	f7fc fd33 	bl	8002e54 <HAL_GetTick>
 80063ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063f0:	e008      	b.n	8006404 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063f2:	f7fc fd2f 	bl	8002e54 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d901      	bls.n	8006404 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e10c      	b.n	800661e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006404:	4b6a      	ldr	r3, [pc, #424]	; (80065b0 <HAL_RCC_OscConfig+0x474>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800640c:	2b00      	cmp	r3, #0
 800640e:	d0f0      	beq.n	80063f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d106      	bne.n	8006426 <HAL_RCC_OscConfig+0x2ea>
 8006418:	4b64      	ldr	r3, [pc, #400]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 800641a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641c:	4a63      	ldr	r2, [pc, #396]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 800641e:	f043 0301 	orr.w	r3, r3, #1
 8006422:	6713      	str	r3, [r2, #112]	; 0x70
 8006424:	e01c      	b.n	8006460 <HAL_RCC_OscConfig+0x324>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	2b05      	cmp	r3, #5
 800642c:	d10c      	bne.n	8006448 <HAL_RCC_OscConfig+0x30c>
 800642e:	4b5f      	ldr	r3, [pc, #380]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 8006430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006432:	4a5e      	ldr	r2, [pc, #376]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 8006434:	f043 0304 	orr.w	r3, r3, #4
 8006438:	6713      	str	r3, [r2, #112]	; 0x70
 800643a:	4b5c      	ldr	r3, [pc, #368]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 800643c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643e:	4a5b      	ldr	r2, [pc, #364]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 8006440:	f043 0301 	orr.w	r3, r3, #1
 8006444:	6713      	str	r3, [r2, #112]	; 0x70
 8006446:	e00b      	b.n	8006460 <HAL_RCC_OscConfig+0x324>
 8006448:	4b58      	ldr	r3, [pc, #352]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 800644a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644c:	4a57      	ldr	r2, [pc, #348]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 800644e:	f023 0301 	bic.w	r3, r3, #1
 8006452:	6713      	str	r3, [r2, #112]	; 0x70
 8006454:	4b55      	ldr	r3, [pc, #340]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 8006456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006458:	4a54      	ldr	r2, [pc, #336]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 800645a:	f023 0304 	bic.w	r3, r3, #4
 800645e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d015      	beq.n	8006494 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006468:	f7fc fcf4 	bl	8002e54 <HAL_GetTick>
 800646c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800646e:	e00a      	b.n	8006486 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006470:	f7fc fcf0 	bl	8002e54 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	f241 3288 	movw	r2, #5000	; 0x1388
 800647e:	4293      	cmp	r3, r2
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e0cb      	b.n	800661e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006486:	4b49      	ldr	r3, [pc, #292]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 8006488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0ee      	beq.n	8006470 <HAL_RCC_OscConfig+0x334>
 8006492:	e014      	b.n	80064be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006494:	f7fc fcde 	bl	8002e54 <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800649a:	e00a      	b.n	80064b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800649c:	f7fc fcda 	bl	8002e54 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e0b5      	b.n	800661e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064b2:	4b3e      	ldr	r3, [pc, #248]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 80064b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1ee      	bne.n	800649c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d105      	bne.n	80064d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064c4:	4b39      	ldr	r3, [pc, #228]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 80064c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c8:	4a38      	ldr	r2, [pc, #224]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 80064ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 80a1 	beq.w	800661c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064da:	4b34      	ldr	r3, [pc, #208]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f003 030c 	and.w	r3, r3, #12
 80064e2:	2b08      	cmp	r3, #8
 80064e4:	d05c      	beq.n	80065a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d141      	bne.n	8006572 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064ee:	4b31      	ldr	r3, [pc, #196]	; (80065b4 <HAL_RCC_OscConfig+0x478>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f4:	f7fc fcae 	bl	8002e54 <HAL_GetTick>
 80064f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064fc:	f7fc fcaa 	bl	8002e54 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e087      	b.n	800661e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800650e:	4b27      	ldr	r3, [pc, #156]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1f0      	bne.n	80064fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	69da      	ldr	r2, [r3, #28]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	019b      	lsls	r3, r3, #6
 800652a:	431a      	orrs	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006530:	085b      	lsrs	r3, r3, #1
 8006532:	3b01      	subs	r3, #1
 8006534:	041b      	lsls	r3, r3, #16
 8006536:	431a      	orrs	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	061b      	lsls	r3, r3, #24
 800653e:	491b      	ldr	r1, [pc, #108]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 8006540:	4313      	orrs	r3, r2
 8006542:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006544:	4b1b      	ldr	r3, [pc, #108]	; (80065b4 <HAL_RCC_OscConfig+0x478>)
 8006546:	2201      	movs	r2, #1
 8006548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800654a:	f7fc fc83 	bl	8002e54 <HAL_GetTick>
 800654e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006550:	e008      	b.n	8006564 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006552:	f7fc fc7f 	bl	8002e54 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d901      	bls.n	8006564 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e05c      	b.n	800661e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006564:	4b11      	ldr	r3, [pc, #68]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0f0      	beq.n	8006552 <HAL_RCC_OscConfig+0x416>
 8006570:	e054      	b.n	800661c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006572:	4b10      	ldr	r3, [pc, #64]	; (80065b4 <HAL_RCC_OscConfig+0x478>)
 8006574:	2200      	movs	r2, #0
 8006576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006578:	f7fc fc6c 	bl	8002e54 <HAL_GetTick>
 800657c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800657e:	e008      	b.n	8006592 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006580:	f7fc fc68 	bl	8002e54 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e045      	b.n	800661e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006592:	4b06      	ldr	r3, [pc, #24]	; (80065ac <HAL_RCC_OscConfig+0x470>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1f0      	bne.n	8006580 <HAL_RCC_OscConfig+0x444>
 800659e:	e03d      	b.n	800661c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d107      	bne.n	80065b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e038      	b.n	800661e <HAL_RCC_OscConfig+0x4e2>
 80065ac:	40023800 	.word	0x40023800
 80065b0:	40007000 	.word	0x40007000
 80065b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065b8:	4b1b      	ldr	r3, [pc, #108]	; (8006628 <HAL_RCC_OscConfig+0x4ec>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d028      	beq.n	8006618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d121      	bne.n	8006618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065de:	429a      	cmp	r2, r3
 80065e0:	d11a      	bne.n	8006618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80065e8:	4013      	ands	r3, r2
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80065ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d111      	bne.n	8006618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fe:	085b      	lsrs	r3, r3, #1
 8006600:	3b01      	subs	r3, #1
 8006602:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006604:	429a      	cmp	r2, r3
 8006606:	d107      	bne.n	8006618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006612:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006614:	429a      	cmp	r2, r3
 8006616:	d001      	beq.n	800661c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e000      	b.n	800661e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	40023800 	.word	0x40023800

0800662c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e0cc      	b.n	80067da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006640:	4b68      	ldr	r3, [pc, #416]	; (80067e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0307 	and.w	r3, r3, #7
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d90c      	bls.n	8006668 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800664e:	4b65      	ldr	r3, [pc, #404]	; (80067e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006650:	683a      	ldr	r2, [r7, #0]
 8006652:	b2d2      	uxtb	r2, r2
 8006654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006656:	4b63      	ldr	r3, [pc, #396]	; (80067e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0307 	and.w	r3, r3, #7
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	429a      	cmp	r2, r3
 8006662:	d001      	beq.n	8006668 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e0b8      	b.n	80067da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b00      	cmp	r3, #0
 8006672:	d020      	beq.n	80066b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b00      	cmp	r3, #0
 800667e:	d005      	beq.n	800668c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006680:	4b59      	ldr	r3, [pc, #356]	; (80067e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	4a58      	ldr	r2, [pc, #352]	; (80067e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006686:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800668a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0308 	and.w	r3, r3, #8
 8006694:	2b00      	cmp	r3, #0
 8006696:	d005      	beq.n	80066a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006698:	4b53      	ldr	r3, [pc, #332]	; (80067e8 <HAL_RCC_ClockConfig+0x1bc>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	4a52      	ldr	r2, [pc, #328]	; (80067e8 <HAL_RCC_ClockConfig+0x1bc>)
 800669e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066a4:	4b50      	ldr	r3, [pc, #320]	; (80067e8 <HAL_RCC_ClockConfig+0x1bc>)
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	494d      	ldr	r1, [pc, #308]	; (80067e8 <HAL_RCC_ClockConfig+0x1bc>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d044      	beq.n	800674c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d107      	bne.n	80066da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ca:	4b47      	ldr	r3, [pc, #284]	; (80067e8 <HAL_RCC_ClockConfig+0x1bc>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d119      	bne.n	800670a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e07f      	b.n	80067da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d003      	beq.n	80066ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d107      	bne.n	80066fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066ea:	4b3f      	ldr	r3, [pc, #252]	; (80067e8 <HAL_RCC_ClockConfig+0x1bc>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d109      	bne.n	800670a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e06f      	b.n	80067da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066fa:	4b3b      	ldr	r3, [pc, #236]	; (80067e8 <HAL_RCC_ClockConfig+0x1bc>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e067      	b.n	80067da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800670a:	4b37      	ldr	r3, [pc, #220]	; (80067e8 <HAL_RCC_ClockConfig+0x1bc>)
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f023 0203 	bic.w	r2, r3, #3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	4934      	ldr	r1, [pc, #208]	; (80067e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006718:	4313      	orrs	r3, r2
 800671a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800671c:	f7fc fb9a 	bl	8002e54 <HAL_GetTick>
 8006720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006722:	e00a      	b.n	800673a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006724:	f7fc fb96 	bl	8002e54 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006732:	4293      	cmp	r3, r2
 8006734:	d901      	bls.n	800673a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e04f      	b.n	80067da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800673a:	4b2b      	ldr	r3, [pc, #172]	; (80067e8 <HAL_RCC_ClockConfig+0x1bc>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 020c 	and.w	r2, r3, #12
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	429a      	cmp	r2, r3
 800674a:	d1eb      	bne.n	8006724 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800674c:	4b25      	ldr	r3, [pc, #148]	; (80067e4 <HAL_RCC_ClockConfig+0x1b8>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d20c      	bcs.n	8006774 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800675a:	4b22      	ldr	r3, [pc, #136]	; (80067e4 <HAL_RCC_ClockConfig+0x1b8>)
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006762:	4b20      	ldr	r3, [pc, #128]	; (80067e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	429a      	cmp	r2, r3
 800676e:	d001      	beq.n	8006774 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e032      	b.n	80067da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	d008      	beq.n	8006792 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006780:	4b19      	ldr	r3, [pc, #100]	; (80067e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	4916      	ldr	r1, [pc, #88]	; (80067e8 <HAL_RCC_ClockConfig+0x1bc>)
 800678e:	4313      	orrs	r3, r2
 8006790:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0308 	and.w	r3, r3, #8
 800679a:	2b00      	cmp	r3, #0
 800679c:	d009      	beq.n	80067b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800679e:	4b12      	ldr	r3, [pc, #72]	; (80067e8 <HAL_RCC_ClockConfig+0x1bc>)
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	00db      	lsls	r3, r3, #3
 80067ac:	490e      	ldr	r1, [pc, #56]	; (80067e8 <HAL_RCC_ClockConfig+0x1bc>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067b2:	f000 f821 	bl	80067f8 <HAL_RCC_GetSysClockFreq>
 80067b6:	4602      	mov	r2, r0
 80067b8:	4b0b      	ldr	r3, [pc, #44]	; (80067e8 <HAL_RCC_ClockConfig+0x1bc>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	091b      	lsrs	r3, r3, #4
 80067be:	f003 030f 	and.w	r3, r3, #15
 80067c2:	490a      	ldr	r1, [pc, #40]	; (80067ec <HAL_RCC_ClockConfig+0x1c0>)
 80067c4:	5ccb      	ldrb	r3, [r1, r3]
 80067c6:	fa22 f303 	lsr.w	r3, r2, r3
 80067ca:	4a09      	ldr	r2, [pc, #36]	; (80067f0 <HAL_RCC_ClockConfig+0x1c4>)
 80067cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80067ce:	4b09      	ldr	r3, [pc, #36]	; (80067f4 <HAL_RCC_ClockConfig+0x1c8>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fc fafa 	bl	8002dcc <HAL_InitTick>

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	40023c00 	.word	0x40023c00
 80067e8:	40023800 	.word	0x40023800
 80067ec:	0800c8f4 	.word	0x0800c8f4
 80067f0:	2000004c 	.word	0x2000004c
 80067f4:	20000204 	.word	0x20000204

080067f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067fc:	b094      	sub	sp, #80	; 0x50
 80067fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	647b      	str	r3, [r7, #68]	; 0x44
 8006804:	2300      	movs	r3, #0
 8006806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006808:	2300      	movs	r3, #0
 800680a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006810:	4b79      	ldr	r3, [pc, #484]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f003 030c 	and.w	r3, r3, #12
 8006818:	2b08      	cmp	r3, #8
 800681a:	d00d      	beq.n	8006838 <HAL_RCC_GetSysClockFreq+0x40>
 800681c:	2b08      	cmp	r3, #8
 800681e:	f200 80e1 	bhi.w	80069e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006822:	2b00      	cmp	r3, #0
 8006824:	d002      	beq.n	800682c <HAL_RCC_GetSysClockFreq+0x34>
 8006826:	2b04      	cmp	r3, #4
 8006828:	d003      	beq.n	8006832 <HAL_RCC_GetSysClockFreq+0x3a>
 800682a:	e0db      	b.n	80069e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800682c:	4b73      	ldr	r3, [pc, #460]	; (80069fc <HAL_RCC_GetSysClockFreq+0x204>)
 800682e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006830:	e0db      	b.n	80069ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006832:	4b73      	ldr	r3, [pc, #460]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x208>)
 8006834:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006836:	e0d8      	b.n	80069ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006838:	4b6f      	ldr	r3, [pc, #444]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006840:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006842:	4b6d      	ldr	r3, [pc, #436]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d063      	beq.n	8006916 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800684e:	4b6a      	ldr	r3, [pc, #424]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	099b      	lsrs	r3, r3, #6
 8006854:	2200      	movs	r2, #0
 8006856:	63bb      	str	r3, [r7, #56]	; 0x38
 8006858:	63fa      	str	r2, [r7, #60]	; 0x3c
 800685a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006860:	633b      	str	r3, [r7, #48]	; 0x30
 8006862:	2300      	movs	r3, #0
 8006864:	637b      	str	r3, [r7, #52]	; 0x34
 8006866:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800686a:	4622      	mov	r2, r4
 800686c:	462b      	mov	r3, r5
 800686e:	f04f 0000 	mov.w	r0, #0
 8006872:	f04f 0100 	mov.w	r1, #0
 8006876:	0159      	lsls	r1, r3, #5
 8006878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800687c:	0150      	lsls	r0, r2, #5
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4621      	mov	r1, r4
 8006884:	1a51      	subs	r1, r2, r1
 8006886:	6139      	str	r1, [r7, #16]
 8006888:	4629      	mov	r1, r5
 800688a:	eb63 0301 	sbc.w	r3, r3, r1
 800688e:	617b      	str	r3, [r7, #20]
 8006890:	f04f 0200 	mov.w	r2, #0
 8006894:	f04f 0300 	mov.w	r3, #0
 8006898:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800689c:	4659      	mov	r1, fp
 800689e:	018b      	lsls	r3, r1, #6
 80068a0:	4651      	mov	r1, sl
 80068a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068a6:	4651      	mov	r1, sl
 80068a8:	018a      	lsls	r2, r1, #6
 80068aa:	4651      	mov	r1, sl
 80068ac:	ebb2 0801 	subs.w	r8, r2, r1
 80068b0:	4659      	mov	r1, fp
 80068b2:	eb63 0901 	sbc.w	r9, r3, r1
 80068b6:	f04f 0200 	mov.w	r2, #0
 80068ba:	f04f 0300 	mov.w	r3, #0
 80068be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068ca:	4690      	mov	r8, r2
 80068cc:	4699      	mov	r9, r3
 80068ce:	4623      	mov	r3, r4
 80068d0:	eb18 0303 	adds.w	r3, r8, r3
 80068d4:	60bb      	str	r3, [r7, #8]
 80068d6:	462b      	mov	r3, r5
 80068d8:	eb49 0303 	adc.w	r3, r9, r3
 80068dc:	60fb      	str	r3, [r7, #12]
 80068de:	f04f 0200 	mov.w	r2, #0
 80068e2:	f04f 0300 	mov.w	r3, #0
 80068e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80068ea:	4629      	mov	r1, r5
 80068ec:	024b      	lsls	r3, r1, #9
 80068ee:	4621      	mov	r1, r4
 80068f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80068f4:	4621      	mov	r1, r4
 80068f6:	024a      	lsls	r2, r1, #9
 80068f8:	4610      	mov	r0, r2
 80068fa:	4619      	mov	r1, r3
 80068fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068fe:	2200      	movs	r2, #0
 8006900:	62bb      	str	r3, [r7, #40]	; 0x28
 8006902:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006904:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006908:	f7fa f904 	bl	8000b14 <__aeabi_uldivmod>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4613      	mov	r3, r2
 8006912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006914:	e058      	b.n	80069c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006916:	4b38      	ldr	r3, [pc, #224]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	099b      	lsrs	r3, r3, #6
 800691c:	2200      	movs	r2, #0
 800691e:	4618      	mov	r0, r3
 8006920:	4611      	mov	r1, r2
 8006922:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006926:	623b      	str	r3, [r7, #32]
 8006928:	2300      	movs	r3, #0
 800692a:	627b      	str	r3, [r7, #36]	; 0x24
 800692c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006930:	4642      	mov	r2, r8
 8006932:	464b      	mov	r3, r9
 8006934:	f04f 0000 	mov.w	r0, #0
 8006938:	f04f 0100 	mov.w	r1, #0
 800693c:	0159      	lsls	r1, r3, #5
 800693e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006942:	0150      	lsls	r0, r2, #5
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4641      	mov	r1, r8
 800694a:	ebb2 0a01 	subs.w	sl, r2, r1
 800694e:	4649      	mov	r1, r9
 8006950:	eb63 0b01 	sbc.w	fp, r3, r1
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	f04f 0300 	mov.w	r3, #0
 800695c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006960:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006964:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006968:	ebb2 040a 	subs.w	r4, r2, sl
 800696c:	eb63 050b 	sbc.w	r5, r3, fp
 8006970:	f04f 0200 	mov.w	r2, #0
 8006974:	f04f 0300 	mov.w	r3, #0
 8006978:	00eb      	lsls	r3, r5, #3
 800697a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800697e:	00e2      	lsls	r2, r4, #3
 8006980:	4614      	mov	r4, r2
 8006982:	461d      	mov	r5, r3
 8006984:	4643      	mov	r3, r8
 8006986:	18e3      	adds	r3, r4, r3
 8006988:	603b      	str	r3, [r7, #0]
 800698a:	464b      	mov	r3, r9
 800698c:	eb45 0303 	adc.w	r3, r5, r3
 8006990:	607b      	str	r3, [r7, #4]
 8006992:	f04f 0200 	mov.w	r2, #0
 8006996:	f04f 0300 	mov.w	r3, #0
 800699a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800699e:	4629      	mov	r1, r5
 80069a0:	028b      	lsls	r3, r1, #10
 80069a2:	4621      	mov	r1, r4
 80069a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069a8:	4621      	mov	r1, r4
 80069aa:	028a      	lsls	r2, r1, #10
 80069ac:	4610      	mov	r0, r2
 80069ae:	4619      	mov	r1, r3
 80069b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069b2:	2200      	movs	r2, #0
 80069b4:	61bb      	str	r3, [r7, #24]
 80069b6:	61fa      	str	r2, [r7, #28]
 80069b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069bc:	f7fa f8aa 	bl	8000b14 <__aeabi_uldivmod>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	4613      	mov	r3, r2
 80069c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80069c8:	4b0b      	ldr	r3, [pc, #44]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	0c1b      	lsrs	r3, r3, #16
 80069ce:	f003 0303 	and.w	r3, r3, #3
 80069d2:	3301      	adds	r3, #1
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80069d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80069e2:	e002      	b.n	80069ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069e4:	4b05      	ldr	r3, [pc, #20]	; (80069fc <HAL_RCC_GetSysClockFreq+0x204>)
 80069e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80069e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3750      	adds	r7, #80	; 0x50
 80069f0:	46bd      	mov	sp, r7
 80069f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069f6:	bf00      	nop
 80069f8:	40023800 	.word	0x40023800
 80069fc:	00f42400 	.word	0x00f42400
 8006a00:	007a1200 	.word	0x007a1200

08006a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a04:	b480      	push	{r7}
 8006a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a08:	4b03      	ldr	r3, [pc, #12]	; (8006a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	2000004c 	.word	0x2000004c

08006a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a20:	f7ff fff0 	bl	8006a04 <HAL_RCC_GetHCLKFreq>
 8006a24:	4602      	mov	r2, r0
 8006a26:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	0a9b      	lsrs	r3, r3, #10
 8006a2c:	f003 0307 	and.w	r3, r3, #7
 8006a30:	4903      	ldr	r1, [pc, #12]	; (8006a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a32:	5ccb      	ldrb	r3, [r1, r3]
 8006a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	40023800 	.word	0x40023800
 8006a40:	0800c904 	.word	0x0800c904

08006a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a48:	f7ff ffdc 	bl	8006a04 <HAL_RCC_GetHCLKFreq>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	4b05      	ldr	r3, [pc, #20]	; (8006a64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	0b5b      	lsrs	r3, r3, #13
 8006a54:	f003 0307 	and.w	r3, r3, #7
 8006a58:	4903      	ldr	r1, [pc, #12]	; (8006a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a5a:	5ccb      	ldrb	r3, [r1, r3]
 8006a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	40023800 	.word	0x40023800
 8006a68:	0800c904 	.word	0x0800c904

08006a6c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d105      	bne.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d035      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a94:	4b62      	ldr	r3, [pc, #392]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a9a:	f7fc f9db 	bl	8002e54 <HAL_GetTick>
 8006a9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006aa0:	e008      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006aa2:	f7fc f9d7 	bl	8002e54 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d901      	bls.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e0b0      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ab4:	4b5b      	ldr	r3, [pc, #364]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1f0      	bne.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	019a      	lsls	r2, r3, #6
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	071b      	lsls	r3, r3, #28
 8006acc:	4955      	ldr	r1, [pc, #340]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ad4:	4b52      	ldr	r3, [pc, #328]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ada:	f7fc f9bb 	bl	8002e54 <HAL_GetTick>
 8006ade:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ae0:	e008      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ae2:	f7fc f9b7 	bl	8002e54 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d901      	bls.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e090      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006af4:	4b4b      	ldr	r3, [pc, #300]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d0f0      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 8083 	beq.w	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60fb      	str	r3, [r7, #12]
 8006b12:	4b44      	ldr	r3, [pc, #272]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	4a43      	ldr	r2, [pc, #268]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b1e:	4b41      	ldr	r3, [pc, #260]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b26:	60fb      	str	r3, [r7, #12]
 8006b28:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b2a:	4b3f      	ldr	r3, [pc, #252]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a3e      	ldr	r2, [pc, #248]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b36:	f7fc f98d 	bl	8002e54 <HAL_GetTick>
 8006b3a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b3c:	e008      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006b3e:	f7fc f989 	bl	8002e54 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e062      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b50:	4b35      	ldr	r3, [pc, #212]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0f0      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b5c:	4b31      	ldr	r3, [pc, #196]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b64:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d02f      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d028      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b7a:	4b2a      	ldr	r3, [pc, #168]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b82:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b84:	4b29      	ldr	r3, [pc, #164]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006b86:	2201      	movs	r2, #1
 8006b88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b8a:	4b28      	ldr	r3, [pc, #160]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006b90:	4a24      	ldr	r2, [pc, #144]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b96:	4b23      	ldr	r3, [pc, #140]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d114      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006ba2:	f7fc f957 	bl	8002e54 <HAL_GetTick>
 8006ba6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ba8:	e00a      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006baa:	f7fc f953 	bl	8002e54 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d901      	bls.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e02a      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bc0:	4b18      	ldr	r3, [pc, #96]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0ee      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bd8:	d10d      	bne.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006bda:	4b12      	ldr	r3, [pc, #72]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bee:	490d      	ldr	r1, [pc, #52]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	608b      	str	r3, [r1, #8]
 8006bf4:	e005      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006bf6:	4b0b      	ldr	r3, [pc, #44]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	4a0a      	ldr	r2, [pc, #40]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bfc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c00:	6093      	str	r3, [r2, #8]
 8006c02:	4b08      	ldr	r3, [pc, #32]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c0e:	4905      	ldr	r1, [pc, #20]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	42470068 	.word	0x42470068
 8006c24:	40023800 	.word	0x40023800
 8006c28:	40007000 	.word	0x40007000
 8006c2c:	42470e40 	.word	0x42470e40

08006c30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b087      	sub	sp, #28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d13e      	bne.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006c4e:	4b23      	ldr	r3, [pc, #140]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d005      	beq.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d12f      	bne.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c64:	4b1e      	ldr	r3, [pc, #120]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c66:	617b      	str	r3, [r7, #20]
          break;
 8006c68:	e02f      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006c6a:	4b1c      	ldr	r3, [pc, #112]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c76:	d108      	bne.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c78:	4b18      	ldr	r3, [pc, #96]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c80:	4a18      	ldr	r2, [pc, #96]	; (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c86:	613b      	str	r3, [r7, #16]
 8006c88:	e007      	b.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c8a:	4b14      	ldr	r3, [pc, #80]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c92:	4a15      	ldr	r2, [pc, #84]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c98:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006c9a:	4b10      	ldr	r3, [pc, #64]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ca0:	099b      	lsrs	r3, r3, #6
 8006ca2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	fb02 f303 	mul.w	r3, r2, r3
 8006cac:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006cae:	4b0b      	ldr	r3, [pc, #44]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cb4:	0f1b      	lsrs	r3, r3, #28
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc0:	617b      	str	r3, [r7, #20]
          break;
 8006cc2:	e002      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	617b      	str	r3, [r7, #20]
          break;
 8006cc8:	bf00      	nop
        }
      }
      break;
 8006cca:	bf00      	nop
    }
  }
  return frequency;
 8006ccc:	697b      	ldr	r3, [r7, #20]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	371c      	adds	r7, #28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	40023800 	.word	0x40023800
 8006ce0:	00bb8000 	.word	0x00bb8000
 8006ce4:	007a1200 	.word	0x007a1200
 8006ce8:	00f42400 	.word	0x00f42400

08006cec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e07b      	b.n	8006df6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d108      	bne.n	8006d18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d0e:	d009      	beq.n	8006d24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	61da      	str	r2, [r3, #28]
 8006d16:	e005      	b.n	8006d24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d106      	bne.n	8006d44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fb f81c 	bl	8001d7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d76:	431a      	orrs	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	431a      	orrs	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d94:	431a      	orrs	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da8:	ea42 0103 	orr.w	r1, r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	0c1b      	lsrs	r3, r3, #16
 8006dc2:	f003 0104 	and.w	r1, r3, #4
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	f003 0210 	and.w	r2, r3, #16
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69da      	ldr	r2, [r3, #28]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006de4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b082      	sub	sp, #8
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e041      	b.n	8006e94 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d106      	bne.n	8006e2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7fa fff1 	bl	8001e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2202      	movs	r2, #2
 8006e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	3304      	adds	r3, #4
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	f000 fd17 	bl	8007870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d001      	beq.n	8006eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e04e      	b.n	8006f52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68da      	ldr	r2, [r3, #12]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f042 0201 	orr.w	r2, r2, #1
 8006eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a23      	ldr	r2, [pc, #140]	; (8006f60 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d022      	beq.n	8006f1c <HAL_TIM_Base_Start_IT+0x80>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ede:	d01d      	beq.n	8006f1c <HAL_TIM_Base_Start_IT+0x80>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a1f      	ldr	r2, [pc, #124]	; (8006f64 <HAL_TIM_Base_Start_IT+0xc8>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d018      	beq.n	8006f1c <HAL_TIM_Base_Start_IT+0x80>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a1e      	ldr	r2, [pc, #120]	; (8006f68 <HAL_TIM_Base_Start_IT+0xcc>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d013      	beq.n	8006f1c <HAL_TIM_Base_Start_IT+0x80>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a1c      	ldr	r2, [pc, #112]	; (8006f6c <HAL_TIM_Base_Start_IT+0xd0>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d00e      	beq.n	8006f1c <HAL_TIM_Base_Start_IT+0x80>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a1b      	ldr	r2, [pc, #108]	; (8006f70 <HAL_TIM_Base_Start_IT+0xd4>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d009      	beq.n	8006f1c <HAL_TIM_Base_Start_IT+0x80>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a19      	ldr	r2, [pc, #100]	; (8006f74 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d004      	beq.n	8006f1c <HAL_TIM_Base_Start_IT+0x80>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a18      	ldr	r2, [pc, #96]	; (8006f78 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d111      	bne.n	8006f40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b06      	cmp	r3, #6
 8006f2c:	d010      	beq.n	8006f50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f042 0201 	orr.w	r2, r2, #1
 8006f3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f3e:	e007      	b.n	8006f50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f042 0201 	orr.w	r2, r2, #1
 8006f4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	40010000 	.word	0x40010000
 8006f64:	40000400 	.word	0x40000400
 8006f68:	40000800 	.word	0x40000800
 8006f6c:	40000c00 	.word	0x40000c00
 8006f70:	40010400 	.word	0x40010400
 8006f74:	40014000 	.word	0x40014000
 8006f78:	40001800 	.word	0x40001800

08006f7c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 0201 	bic.w	r2, r2, #1
 8006f92:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6a1a      	ldr	r2, [r3, #32]
 8006f9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10f      	bne.n	8006fc4 <HAL_TIM_Base_Stop_IT+0x48>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6a1a      	ldr	r2, [r3, #32]
 8006faa:	f240 4344 	movw	r3, #1092	; 0x444
 8006fae:	4013      	ands	r3, r2
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d107      	bne.n	8006fc4 <HAL_TIM_Base_Stop_IT+0x48>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f022 0201 	bic.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b082      	sub	sp, #8
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e041      	b.n	8007070 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d106      	bne.n	8007006 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f839 	bl	8007078 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2202      	movs	r2, #2
 800700a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3304      	adds	r3, #4
 8007016:	4619      	mov	r1, r3
 8007018:	4610      	mov	r0, r2
 800701a:	f000 fc29 	bl	8007870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d109      	bne.n	80070b0 <HAL_TIM_PWM_Start+0x24>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	bf14      	ite	ne
 80070a8:	2301      	movne	r3, #1
 80070aa:	2300      	moveq	r3, #0
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	e022      	b.n	80070f6 <HAL_TIM_PWM_Start+0x6a>
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	d109      	bne.n	80070ca <HAL_TIM_PWM_Start+0x3e>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b01      	cmp	r3, #1
 80070c0:	bf14      	ite	ne
 80070c2:	2301      	movne	r3, #1
 80070c4:	2300      	moveq	r3, #0
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	e015      	b.n	80070f6 <HAL_TIM_PWM_Start+0x6a>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	d109      	bne.n	80070e4 <HAL_TIM_PWM_Start+0x58>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b01      	cmp	r3, #1
 80070da:	bf14      	ite	ne
 80070dc:	2301      	movne	r3, #1
 80070de:	2300      	moveq	r3, #0
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	e008      	b.n	80070f6 <HAL_TIM_PWM_Start+0x6a>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	bf14      	ite	ne
 80070f0:	2301      	movne	r3, #1
 80070f2:	2300      	moveq	r3, #0
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e07c      	b.n	80071f8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d104      	bne.n	800710e <HAL_TIM_PWM_Start+0x82>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2202      	movs	r2, #2
 8007108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800710c:	e013      	b.n	8007136 <HAL_TIM_PWM_Start+0xaa>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b04      	cmp	r3, #4
 8007112:	d104      	bne.n	800711e <HAL_TIM_PWM_Start+0x92>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2202      	movs	r2, #2
 8007118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800711c:	e00b      	b.n	8007136 <HAL_TIM_PWM_Start+0xaa>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b08      	cmp	r3, #8
 8007122:	d104      	bne.n	800712e <HAL_TIM_PWM_Start+0xa2>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800712c:	e003      	b.n	8007136 <HAL_TIM_PWM_Start+0xaa>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2202      	movs	r2, #2
 8007132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2201      	movs	r2, #1
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	4618      	mov	r0, r3
 8007140:	f000 fe80 	bl	8007e44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a2d      	ldr	r2, [pc, #180]	; (8007200 <HAL_TIM_PWM_Start+0x174>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d004      	beq.n	8007158 <HAL_TIM_PWM_Start+0xcc>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a2c      	ldr	r2, [pc, #176]	; (8007204 <HAL_TIM_PWM_Start+0x178>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d101      	bne.n	800715c <HAL_TIM_PWM_Start+0xd0>
 8007158:	2301      	movs	r3, #1
 800715a:	e000      	b.n	800715e <HAL_TIM_PWM_Start+0xd2>
 800715c:	2300      	movs	r3, #0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d007      	beq.n	8007172 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007170:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a22      	ldr	r2, [pc, #136]	; (8007200 <HAL_TIM_PWM_Start+0x174>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d022      	beq.n	80071c2 <HAL_TIM_PWM_Start+0x136>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007184:	d01d      	beq.n	80071c2 <HAL_TIM_PWM_Start+0x136>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a1f      	ldr	r2, [pc, #124]	; (8007208 <HAL_TIM_PWM_Start+0x17c>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d018      	beq.n	80071c2 <HAL_TIM_PWM_Start+0x136>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a1d      	ldr	r2, [pc, #116]	; (800720c <HAL_TIM_PWM_Start+0x180>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d013      	beq.n	80071c2 <HAL_TIM_PWM_Start+0x136>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a1c      	ldr	r2, [pc, #112]	; (8007210 <HAL_TIM_PWM_Start+0x184>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d00e      	beq.n	80071c2 <HAL_TIM_PWM_Start+0x136>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a16      	ldr	r2, [pc, #88]	; (8007204 <HAL_TIM_PWM_Start+0x178>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d009      	beq.n	80071c2 <HAL_TIM_PWM_Start+0x136>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a18      	ldr	r2, [pc, #96]	; (8007214 <HAL_TIM_PWM_Start+0x188>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d004      	beq.n	80071c2 <HAL_TIM_PWM_Start+0x136>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a16      	ldr	r2, [pc, #88]	; (8007218 <HAL_TIM_PWM_Start+0x18c>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d111      	bne.n	80071e6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f003 0307 	and.w	r3, r3, #7
 80071cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b06      	cmp	r3, #6
 80071d2:	d010      	beq.n	80071f6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f042 0201 	orr.w	r2, r2, #1
 80071e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071e4:	e007      	b.n	80071f6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f042 0201 	orr.w	r2, r2, #1
 80071f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	40010000 	.word	0x40010000
 8007204:	40010400 	.word	0x40010400
 8007208:	40000400 	.word	0x40000400
 800720c:	40000800 	.word	0x40000800
 8007210:	40000c00 	.word	0x40000c00
 8007214:	40014000 	.word	0x40014000
 8007218:	40001800 	.word	0x40001800

0800721c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2200      	movs	r2, #0
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	4618      	mov	r0, r3
 8007230:	f000 fe08 	bl	8007e44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a2e      	ldr	r2, [pc, #184]	; (80072f4 <HAL_TIM_PWM_Stop+0xd8>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d004      	beq.n	8007248 <HAL_TIM_PWM_Stop+0x2c>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a2d      	ldr	r2, [pc, #180]	; (80072f8 <HAL_TIM_PWM_Stop+0xdc>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d101      	bne.n	800724c <HAL_TIM_PWM_Stop+0x30>
 8007248:	2301      	movs	r3, #1
 800724a:	e000      	b.n	800724e <HAL_TIM_PWM_Stop+0x32>
 800724c:	2300      	movs	r3, #0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d017      	beq.n	8007282 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6a1a      	ldr	r2, [r3, #32]
 8007258:	f241 1311 	movw	r3, #4369	; 0x1111
 800725c:	4013      	ands	r3, r2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10f      	bne.n	8007282 <HAL_TIM_PWM_Stop+0x66>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6a1a      	ldr	r2, [r3, #32]
 8007268:	f240 4344 	movw	r3, #1092	; 0x444
 800726c:	4013      	ands	r3, r2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d107      	bne.n	8007282 <HAL_TIM_PWM_Stop+0x66>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007280:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6a1a      	ldr	r2, [r3, #32]
 8007288:	f241 1311 	movw	r3, #4369	; 0x1111
 800728c:	4013      	ands	r3, r2
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10f      	bne.n	80072b2 <HAL_TIM_PWM_Stop+0x96>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6a1a      	ldr	r2, [r3, #32]
 8007298:	f240 4344 	movw	r3, #1092	; 0x444
 800729c:	4013      	ands	r3, r2
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d107      	bne.n	80072b2 <HAL_TIM_PWM_Stop+0x96>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0201 	bic.w	r2, r2, #1
 80072b0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d104      	bne.n	80072c2 <HAL_TIM_PWM_Stop+0xa6>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072c0:	e013      	b.n	80072ea <HAL_TIM_PWM_Stop+0xce>
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	d104      	bne.n	80072d2 <HAL_TIM_PWM_Stop+0xb6>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072d0:	e00b      	b.n	80072ea <HAL_TIM_PWM_Stop+0xce>
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b08      	cmp	r3, #8
 80072d6:	d104      	bne.n	80072e2 <HAL_TIM_PWM_Stop+0xc6>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072e0:	e003      	b.n	80072ea <HAL_TIM_PWM_Stop+0xce>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	40010000 	.word	0x40010000
 80072f8:	40010400 	.word	0x40010400

080072fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b02      	cmp	r3, #2
 8007310:	d122      	bne.n	8007358 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b02      	cmp	r3, #2
 800731e:	d11b      	bne.n	8007358 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f06f 0202 	mvn.w	r2, #2
 8007328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	f003 0303 	and.w	r3, r3, #3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fa77 	bl	8007832 <HAL_TIM_IC_CaptureCallback>
 8007344:	e005      	b.n	8007352 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fa69 	bl	800781e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fa7a 	bl	8007846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	f003 0304 	and.w	r3, r3, #4
 8007362:	2b04      	cmp	r3, #4
 8007364:	d122      	bne.n	80073ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	f003 0304 	and.w	r3, r3, #4
 8007370:	2b04      	cmp	r3, #4
 8007372:	d11b      	bne.n	80073ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f06f 0204 	mvn.w	r2, #4
 800737c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2202      	movs	r2, #2
 8007382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fa4d 	bl	8007832 <HAL_TIM_IC_CaptureCallback>
 8007398:	e005      	b.n	80073a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fa3f 	bl	800781e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fa50 	bl	8007846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	f003 0308 	and.w	r3, r3, #8
 80073b6:	2b08      	cmp	r3, #8
 80073b8:	d122      	bne.n	8007400 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f003 0308 	and.w	r3, r3, #8
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d11b      	bne.n	8007400 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f06f 0208 	mvn.w	r2, #8
 80073d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2204      	movs	r2, #4
 80073d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	f003 0303 	and.w	r3, r3, #3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d003      	beq.n	80073ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fa23 	bl	8007832 <HAL_TIM_IC_CaptureCallback>
 80073ec:	e005      	b.n	80073fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fa15 	bl	800781e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fa26 	bl	8007846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	f003 0310 	and.w	r3, r3, #16
 800740a:	2b10      	cmp	r3, #16
 800740c:	d122      	bne.n	8007454 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	f003 0310 	and.w	r3, r3, #16
 8007418:	2b10      	cmp	r3, #16
 800741a:	d11b      	bne.n	8007454 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f06f 0210 	mvn.w	r2, #16
 8007424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2208      	movs	r2, #8
 800742a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f9f9 	bl	8007832 <HAL_TIM_IC_CaptureCallback>
 8007440:	e005      	b.n	800744e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f9eb 	bl	800781e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f9fc 	bl	8007846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b01      	cmp	r3, #1
 8007460:	d10e      	bne.n	8007480 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b01      	cmp	r3, #1
 800746e:	d107      	bne.n	8007480 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f06f 0201 	mvn.w	r2, #1
 8007478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7fb faca 	bl	8002a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748a:	2b80      	cmp	r3, #128	; 0x80
 800748c:	d10e      	bne.n	80074ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007498:	2b80      	cmp	r3, #128	; 0x80
 800749a:	d107      	bne.n	80074ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fd78 	bl	8007f9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b6:	2b40      	cmp	r3, #64	; 0x40
 80074b8:	d10e      	bne.n	80074d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c4:	2b40      	cmp	r3, #64	; 0x40
 80074c6:	d107      	bne.n	80074d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f9c1 	bl	800785a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	f003 0320 	and.w	r3, r3, #32
 80074e2:	2b20      	cmp	r3, #32
 80074e4:	d10e      	bne.n	8007504 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f003 0320 	and.w	r3, r3, #32
 80074f0:	2b20      	cmp	r3, #32
 80074f2:	d107      	bne.n	8007504 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f06f 0220 	mvn.w	r2, #32
 80074fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fd42 	bl	8007f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007504:	bf00      	nop
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007518:	2300      	movs	r3, #0
 800751a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007522:	2b01      	cmp	r3, #1
 8007524:	d101      	bne.n	800752a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007526:	2302      	movs	r3, #2
 8007528:	e0ae      	b.n	8007688 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b0c      	cmp	r3, #12
 8007536:	f200 809f 	bhi.w	8007678 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800753a:	a201      	add	r2, pc, #4	; (adr r2, 8007540 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800753c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007540:	08007575 	.word	0x08007575
 8007544:	08007679 	.word	0x08007679
 8007548:	08007679 	.word	0x08007679
 800754c:	08007679 	.word	0x08007679
 8007550:	080075b5 	.word	0x080075b5
 8007554:	08007679 	.word	0x08007679
 8007558:	08007679 	.word	0x08007679
 800755c:	08007679 	.word	0x08007679
 8007560:	080075f7 	.word	0x080075f7
 8007564:	08007679 	.word	0x08007679
 8007568:	08007679 	.word	0x08007679
 800756c:	08007679 	.word	0x08007679
 8007570:	08007637 	.word	0x08007637
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68b9      	ldr	r1, [r7, #8]
 800757a:	4618      	mov	r0, r3
 800757c:	f000 fa18 	bl	80079b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	699a      	ldr	r2, [r3, #24]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f042 0208 	orr.w	r2, r2, #8
 800758e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	699a      	ldr	r2, [r3, #24]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f022 0204 	bic.w	r2, r2, #4
 800759e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6999      	ldr	r1, [r3, #24]
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	691a      	ldr	r2, [r3, #16]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	619a      	str	r2, [r3, #24]
      break;
 80075b2:	e064      	b.n	800767e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68b9      	ldr	r1, [r7, #8]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 fa68 	bl	8007a90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	699a      	ldr	r2, [r3, #24]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	699a      	ldr	r2, [r3, #24]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6999      	ldr	r1, [r3, #24]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	021a      	lsls	r2, r3, #8
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	430a      	orrs	r2, r1
 80075f2:	619a      	str	r2, [r3, #24]
      break;
 80075f4:	e043      	b.n	800767e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68b9      	ldr	r1, [r7, #8]
 80075fc:	4618      	mov	r0, r3
 80075fe:	f000 fabd 	bl	8007b7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	69da      	ldr	r2, [r3, #28]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f042 0208 	orr.w	r2, r2, #8
 8007610:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	69da      	ldr	r2, [r3, #28]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f022 0204 	bic.w	r2, r2, #4
 8007620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	69d9      	ldr	r1, [r3, #28]
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	691a      	ldr	r2, [r3, #16]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	61da      	str	r2, [r3, #28]
      break;
 8007634:	e023      	b.n	800767e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68b9      	ldr	r1, [r7, #8]
 800763c:	4618      	mov	r0, r3
 800763e:	f000 fb11 	bl	8007c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	69da      	ldr	r2, [r3, #28]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	69da      	ldr	r2, [r3, #28]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	69d9      	ldr	r1, [r3, #28]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	021a      	lsls	r2, r3, #8
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	61da      	str	r2, [r3, #28]
      break;
 8007676:	e002      	b.n	800767e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	75fb      	strb	r3, [r7, #23]
      break;
 800767c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007686:	7dfb      	ldrb	r3, [r7, #23]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3718      	adds	r7, #24
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d101      	bne.n	80076ac <HAL_TIM_ConfigClockSource+0x1c>
 80076a8:	2302      	movs	r3, #2
 80076aa:	e0b4      	b.n	8007816 <HAL_TIM_ConfigClockSource+0x186>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80076ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076e4:	d03e      	beq.n	8007764 <HAL_TIM_ConfigClockSource+0xd4>
 80076e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076ea:	f200 8087 	bhi.w	80077fc <HAL_TIM_ConfigClockSource+0x16c>
 80076ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f2:	f000 8086 	beq.w	8007802 <HAL_TIM_ConfigClockSource+0x172>
 80076f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076fa:	d87f      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x16c>
 80076fc:	2b70      	cmp	r3, #112	; 0x70
 80076fe:	d01a      	beq.n	8007736 <HAL_TIM_ConfigClockSource+0xa6>
 8007700:	2b70      	cmp	r3, #112	; 0x70
 8007702:	d87b      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x16c>
 8007704:	2b60      	cmp	r3, #96	; 0x60
 8007706:	d050      	beq.n	80077aa <HAL_TIM_ConfigClockSource+0x11a>
 8007708:	2b60      	cmp	r3, #96	; 0x60
 800770a:	d877      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x16c>
 800770c:	2b50      	cmp	r3, #80	; 0x50
 800770e:	d03c      	beq.n	800778a <HAL_TIM_ConfigClockSource+0xfa>
 8007710:	2b50      	cmp	r3, #80	; 0x50
 8007712:	d873      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x16c>
 8007714:	2b40      	cmp	r3, #64	; 0x40
 8007716:	d058      	beq.n	80077ca <HAL_TIM_ConfigClockSource+0x13a>
 8007718:	2b40      	cmp	r3, #64	; 0x40
 800771a:	d86f      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x16c>
 800771c:	2b30      	cmp	r3, #48	; 0x30
 800771e:	d064      	beq.n	80077ea <HAL_TIM_ConfigClockSource+0x15a>
 8007720:	2b30      	cmp	r3, #48	; 0x30
 8007722:	d86b      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x16c>
 8007724:	2b20      	cmp	r3, #32
 8007726:	d060      	beq.n	80077ea <HAL_TIM_ConfigClockSource+0x15a>
 8007728:	2b20      	cmp	r3, #32
 800772a:	d867      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x16c>
 800772c:	2b00      	cmp	r3, #0
 800772e:	d05c      	beq.n	80077ea <HAL_TIM_ConfigClockSource+0x15a>
 8007730:	2b10      	cmp	r3, #16
 8007732:	d05a      	beq.n	80077ea <HAL_TIM_ConfigClockSource+0x15a>
 8007734:	e062      	b.n	80077fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	6899      	ldr	r1, [r3, #8]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f000 fb5d 	bl	8007e04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007758:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	609a      	str	r2, [r3, #8]
      break;
 8007762:	e04f      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	6899      	ldr	r1, [r3, #8]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	f000 fb46 	bl	8007e04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689a      	ldr	r2, [r3, #8]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007786:	609a      	str	r2, [r3, #8]
      break;
 8007788:	e03c      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6818      	ldr	r0, [r3, #0]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	6859      	ldr	r1, [r3, #4]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	461a      	mov	r2, r3
 8007798:	f000 faba 	bl	8007d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2150      	movs	r1, #80	; 0x50
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 fb13 	bl	8007dce <TIM_ITRx_SetConfig>
      break;
 80077a8:	e02c      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6818      	ldr	r0, [r3, #0]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	6859      	ldr	r1, [r3, #4]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	461a      	mov	r2, r3
 80077b8:	f000 fad9 	bl	8007d6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2160      	movs	r1, #96	; 0x60
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 fb03 	bl	8007dce <TIM_ITRx_SetConfig>
      break;
 80077c8:	e01c      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6818      	ldr	r0, [r3, #0]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	6859      	ldr	r1, [r3, #4]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	461a      	mov	r2, r3
 80077d8:	f000 fa9a 	bl	8007d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2140      	movs	r1, #64	; 0x40
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 faf3 	bl	8007dce <TIM_ITRx_SetConfig>
      break;
 80077e8:	e00c      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4619      	mov	r1, r3
 80077f4:	4610      	mov	r0, r2
 80077f6:	f000 faea 	bl	8007dce <TIM_ITRx_SetConfig>
      break;
 80077fa:	e003      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007800:	e000      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007802:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007814:	7bfb      	ldrb	r3, [r7, #15]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007826:	bf00      	nop
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007832:	b480      	push	{r7}
 8007834:	b083      	sub	sp, #12
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800783a:	bf00      	nop
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007846:	b480      	push	{r7}
 8007848:	b083      	sub	sp, #12
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800784e:	bf00      	nop
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800785a:	b480      	push	{r7}
 800785c:	b083      	sub	sp, #12
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007862:	bf00      	nop
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
	...

08007870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a40      	ldr	r2, [pc, #256]	; (8007984 <TIM_Base_SetConfig+0x114>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d013      	beq.n	80078b0 <TIM_Base_SetConfig+0x40>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800788e:	d00f      	beq.n	80078b0 <TIM_Base_SetConfig+0x40>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a3d      	ldr	r2, [pc, #244]	; (8007988 <TIM_Base_SetConfig+0x118>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d00b      	beq.n	80078b0 <TIM_Base_SetConfig+0x40>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a3c      	ldr	r2, [pc, #240]	; (800798c <TIM_Base_SetConfig+0x11c>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d007      	beq.n	80078b0 <TIM_Base_SetConfig+0x40>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a3b      	ldr	r2, [pc, #236]	; (8007990 <TIM_Base_SetConfig+0x120>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d003      	beq.n	80078b0 <TIM_Base_SetConfig+0x40>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a3a      	ldr	r2, [pc, #232]	; (8007994 <TIM_Base_SetConfig+0x124>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d108      	bne.n	80078c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	4313      	orrs	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a2f      	ldr	r2, [pc, #188]	; (8007984 <TIM_Base_SetConfig+0x114>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d02b      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d0:	d027      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a2c      	ldr	r2, [pc, #176]	; (8007988 <TIM_Base_SetConfig+0x118>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d023      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a2b      	ldr	r2, [pc, #172]	; (800798c <TIM_Base_SetConfig+0x11c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d01f      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a2a      	ldr	r2, [pc, #168]	; (8007990 <TIM_Base_SetConfig+0x120>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d01b      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a29      	ldr	r2, [pc, #164]	; (8007994 <TIM_Base_SetConfig+0x124>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d017      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a28      	ldr	r2, [pc, #160]	; (8007998 <TIM_Base_SetConfig+0x128>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d013      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a27      	ldr	r2, [pc, #156]	; (800799c <TIM_Base_SetConfig+0x12c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d00f      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a26      	ldr	r2, [pc, #152]	; (80079a0 <TIM_Base_SetConfig+0x130>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00b      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a25      	ldr	r2, [pc, #148]	; (80079a4 <TIM_Base_SetConfig+0x134>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d007      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a24      	ldr	r2, [pc, #144]	; (80079a8 <TIM_Base_SetConfig+0x138>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d003      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a23      	ldr	r2, [pc, #140]	; (80079ac <TIM_Base_SetConfig+0x13c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d108      	bne.n	8007934 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	4313      	orrs	r3, r2
 8007932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	4313      	orrs	r3, r2
 8007940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a0a      	ldr	r2, [pc, #40]	; (8007984 <TIM_Base_SetConfig+0x114>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d003      	beq.n	8007968 <TIM_Base_SetConfig+0xf8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a0c      	ldr	r2, [pc, #48]	; (8007994 <TIM_Base_SetConfig+0x124>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d103      	bne.n	8007970 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	691a      	ldr	r2, [r3, #16]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	615a      	str	r2, [r3, #20]
}
 8007976:	bf00      	nop
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	40010000 	.word	0x40010000
 8007988:	40000400 	.word	0x40000400
 800798c:	40000800 	.word	0x40000800
 8007990:	40000c00 	.word	0x40000c00
 8007994:	40010400 	.word	0x40010400
 8007998:	40014000 	.word	0x40014000
 800799c:	40014400 	.word	0x40014400
 80079a0:	40014800 	.word	0x40014800
 80079a4:	40001800 	.word	0x40001800
 80079a8:	40001c00 	.word	0x40001c00
 80079ac:	40002000 	.word	0x40002000

080079b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	f023 0201 	bic.w	r2, r3, #1
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f023 0303 	bic.w	r3, r3, #3
 80079e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f023 0302 	bic.w	r3, r3, #2
 80079f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a20      	ldr	r2, [pc, #128]	; (8007a88 <TIM_OC1_SetConfig+0xd8>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d003      	beq.n	8007a14 <TIM_OC1_SetConfig+0x64>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a1f      	ldr	r2, [pc, #124]	; (8007a8c <TIM_OC1_SetConfig+0xdc>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d10c      	bne.n	8007a2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f023 0308 	bic.w	r3, r3, #8
 8007a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f023 0304 	bic.w	r3, r3, #4
 8007a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a15      	ldr	r2, [pc, #84]	; (8007a88 <TIM_OC1_SetConfig+0xd8>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d003      	beq.n	8007a3e <TIM_OC1_SetConfig+0x8e>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a14      	ldr	r2, [pc, #80]	; (8007a8c <TIM_OC1_SetConfig+0xdc>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d111      	bne.n	8007a62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	621a      	str	r2, [r3, #32]
}
 8007a7c:	bf00      	nop
 8007a7e:	371c      	adds	r7, #28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	40010000 	.word	0x40010000
 8007a8c:	40010400 	.word	0x40010400

08007a90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b087      	sub	sp, #28
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	f023 0210 	bic.w	r2, r3, #16
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	021b      	lsls	r3, r3, #8
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f023 0320 	bic.w	r3, r3, #32
 8007ada:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	011b      	lsls	r3, r3, #4
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a22      	ldr	r2, [pc, #136]	; (8007b74 <TIM_OC2_SetConfig+0xe4>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d003      	beq.n	8007af8 <TIM_OC2_SetConfig+0x68>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a21      	ldr	r2, [pc, #132]	; (8007b78 <TIM_OC2_SetConfig+0xe8>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d10d      	bne.n	8007b14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	011b      	lsls	r3, r3, #4
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a17      	ldr	r2, [pc, #92]	; (8007b74 <TIM_OC2_SetConfig+0xe4>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d003      	beq.n	8007b24 <TIM_OC2_SetConfig+0x94>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a16      	ldr	r2, [pc, #88]	; (8007b78 <TIM_OC2_SetConfig+0xe8>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d113      	bne.n	8007b4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	695b      	ldr	r3, [r3, #20]
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	621a      	str	r2, [r3, #32]
}
 8007b66:	bf00      	nop
 8007b68:	371c      	adds	r7, #28
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	40010000 	.word	0x40010000
 8007b78:	40010400 	.word	0x40010400

08007b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f023 0303 	bic.w	r3, r3, #3
 8007bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	021b      	lsls	r3, r3, #8
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a21      	ldr	r2, [pc, #132]	; (8007c5c <TIM_OC3_SetConfig+0xe0>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d003      	beq.n	8007be2 <TIM_OC3_SetConfig+0x66>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a20      	ldr	r2, [pc, #128]	; (8007c60 <TIM_OC3_SetConfig+0xe4>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d10d      	bne.n	8007bfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007be8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	021b      	lsls	r3, r3, #8
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a16      	ldr	r2, [pc, #88]	; (8007c5c <TIM_OC3_SetConfig+0xe0>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d003      	beq.n	8007c0e <TIM_OC3_SetConfig+0x92>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a15      	ldr	r2, [pc, #84]	; (8007c60 <TIM_OC3_SetConfig+0xe4>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d113      	bne.n	8007c36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	695b      	ldr	r3, [r3, #20]
 8007c22:	011b      	lsls	r3, r3, #4
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	011b      	lsls	r3, r3, #4
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	621a      	str	r2, [r3, #32]
}
 8007c50:	bf00      	nop
 8007c52:	371c      	adds	r7, #28
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	40010000 	.word	0x40010000
 8007c60:	40010400 	.word	0x40010400

08007c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	021b      	lsls	r3, r3, #8
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	031b      	lsls	r3, r3, #12
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a12      	ldr	r2, [pc, #72]	; (8007d08 <TIM_OC4_SetConfig+0xa4>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d003      	beq.n	8007ccc <TIM_OC4_SetConfig+0x68>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a11      	ldr	r2, [pc, #68]	; (8007d0c <TIM_OC4_SetConfig+0xa8>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d109      	bne.n	8007ce0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	019b      	lsls	r3, r3, #6
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	621a      	str	r2, [r3, #32]
}
 8007cfa:	bf00      	nop
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	40010000 	.word	0x40010000
 8007d0c:	40010400 	.word	0x40010400

08007d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b087      	sub	sp, #28
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	f023 0201 	bic.w	r2, r3, #1
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	011b      	lsls	r3, r3, #4
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f023 030a 	bic.w	r3, r3, #10
 8007d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	621a      	str	r2, [r3, #32]
}
 8007d62:	bf00      	nop
 8007d64:	371c      	adds	r7, #28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b087      	sub	sp, #28
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	60b9      	str	r1, [r7, #8]
 8007d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	f023 0210 	bic.w	r2, r3, #16
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6a1b      	ldr	r3, [r3, #32]
 8007d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	031b      	lsls	r3, r3, #12
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007daa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	011b      	lsls	r3, r3, #4
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	621a      	str	r2, [r3, #32]
}
 8007dc2:	bf00      	nop
 8007dc4:	371c      	adds	r7, #28
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b085      	sub	sp, #20
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	f043 0307 	orr.w	r3, r3, #7
 8007df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	609a      	str	r2, [r3, #8]
}
 8007df8:	bf00      	nop
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	021a      	lsls	r2, r3, #8
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	431a      	orrs	r2, r3
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	609a      	str	r2, [r3, #8]
}
 8007e38:	bf00      	nop
 8007e3a:	371c      	adds	r7, #28
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f003 031f 	and.w	r3, r3, #31
 8007e56:	2201      	movs	r2, #1
 8007e58:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6a1a      	ldr	r2, [r3, #32]
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	43db      	mvns	r3, r3
 8007e66:	401a      	ands	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6a1a      	ldr	r2, [r3, #32]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f003 031f 	and.w	r3, r3, #31
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	fa01 f303 	lsl.w	r3, r1, r3
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	621a      	str	r2, [r3, #32]
}
 8007e82:	bf00      	nop
 8007e84:	371c      	adds	r7, #28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
	...

08007e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d101      	bne.n	8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	e05a      	b.n	8007f5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ece:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a21      	ldr	r2, [pc, #132]	; (8007f6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d022      	beq.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ef4:	d01d      	beq.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a1d      	ldr	r2, [pc, #116]	; (8007f70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d018      	beq.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a1b      	ldr	r2, [pc, #108]	; (8007f74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d013      	beq.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a1a      	ldr	r2, [pc, #104]	; (8007f78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d00e      	beq.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a18      	ldr	r2, [pc, #96]	; (8007f7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d009      	beq.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a17      	ldr	r2, [pc, #92]	; (8007f80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d004      	beq.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a15      	ldr	r2, [pc, #84]	; (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d10c      	bne.n	8007f4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	40010000 	.word	0x40010000
 8007f70:	40000400 	.word	0x40000400
 8007f74:	40000800 	.word	0x40000800
 8007f78:	40000c00 	.word	0x40000c00
 8007f7c:	40010400 	.word	0x40010400
 8007f80:	40014000 	.word	0x40014000
 8007f84:	40001800 	.word	0x40001800

08007f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e03f      	b.n	8008042 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d106      	bne.n	8007fdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f7f9 ff8c 	bl	8001ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2224      	movs	r2, #36	; 0x24
 8007fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68da      	ldr	r2, [r3, #12]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ff2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fddf 	bl	8008bb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	691a      	ldr	r2, [r3, #16]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008008:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	695a      	ldr	r2, [r3, #20]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008018:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68da      	ldr	r2, [r3, #12]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008028:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2220      	movs	r2, #32
 8008034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2220      	movs	r2, #32
 800803c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b08a      	sub	sp, #40	; 0x28
 800804e:	af02      	add	r7, sp, #8
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	603b      	str	r3, [r7, #0]
 8008056:	4613      	mov	r3, r2
 8008058:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800805a:	2300      	movs	r3, #0
 800805c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b20      	cmp	r3, #32
 8008068:	d17c      	bne.n	8008164 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <HAL_UART_Transmit+0x2c>
 8008070:	88fb      	ldrh	r3, [r7, #6]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e075      	b.n	8008166 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008080:	2b01      	cmp	r3, #1
 8008082:	d101      	bne.n	8008088 <HAL_UART_Transmit+0x3e>
 8008084:	2302      	movs	r3, #2
 8008086:	e06e      	b.n	8008166 <HAL_UART_Transmit+0x11c>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2221      	movs	r2, #33	; 0x21
 800809a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800809e:	f7fa fed9 	bl	8002e54 <HAL_GetTick>
 80080a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	88fa      	ldrh	r2, [r7, #6]
 80080a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	88fa      	ldrh	r2, [r7, #6]
 80080ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080b8:	d108      	bne.n	80080cc <HAL_UART_Transmit+0x82>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d104      	bne.n	80080cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80080c2:	2300      	movs	r3, #0
 80080c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	61bb      	str	r3, [r7, #24]
 80080ca:	e003      	b.n	80080d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080d0:	2300      	movs	r3, #0
 80080d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80080dc:	e02a      	b.n	8008134 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	2200      	movs	r2, #0
 80080e6:	2180      	movs	r1, #128	; 0x80
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f000 fb1f 	bl	800872c <UART_WaitOnFlagUntilTimeout>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d001      	beq.n	80080f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e036      	b.n	8008166 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10b      	bne.n	8008116 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800810c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	3302      	adds	r3, #2
 8008112:	61bb      	str	r3, [r7, #24]
 8008114:	e007      	b.n	8008126 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	781a      	ldrb	r2, [r3, #0]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	3301      	adds	r3, #1
 8008124:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800812a:	b29b      	uxth	r3, r3
 800812c:	3b01      	subs	r3, #1
 800812e:	b29a      	uxth	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008138:	b29b      	uxth	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1cf      	bne.n	80080de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	2200      	movs	r2, #0
 8008146:	2140      	movs	r1, #64	; 0x40
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f000 faef 	bl	800872c <UART_WaitOnFlagUntilTimeout>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d001      	beq.n	8008158 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e006      	b.n	8008166 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2220      	movs	r2, #32
 800815c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	e000      	b.n	8008166 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008164:	2302      	movs	r3, #2
  }
}
 8008166:	4618      	mov	r0, r3
 8008168:	3720      	adds	r7, #32
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	60b9      	str	r1, [r7, #8]
 8008178:	4613      	mov	r3, r2
 800817a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b20      	cmp	r3, #32
 8008186:	d11d      	bne.n	80081c4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d002      	beq.n	8008194 <HAL_UART_Receive_IT+0x26>
 800818e:	88fb      	ldrh	r3, [r7, #6]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d101      	bne.n	8008198 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e016      	b.n	80081c6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d101      	bne.n	80081a6 <HAL_UART_Receive_IT+0x38>
 80081a2:	2302      	movs	r3, #2
 80081a4:	e00f      	b.n	80081c6 <HAL_UART_Receive_IT+0x58>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80081b4:	88fb      	ldrh	r3, [r7, #6]
 80081b6:	461a      	mov	r2, r3
 80081b8:	68b9      	ldr	r1, [r7, #8]
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f000 fb24 	bl	8008808 <UART_Start_Receive_IT>
 80081c0:	4603      	mov	r3, r0
 80081c2:	e000      	b.n	80081c6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80081c4:	2302      	movs	r3, #2
  }
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
	...

080081d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b0ba      	sub	sp, #232	; 0xe8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80081f6:	2300      	movs	r3, #0
 80081f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80081fc:	2300      	movs	r3, #0
 80081fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008206:	f003 030f 	and.w	r3, r3, #15
 800820a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800820e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10f      	bne.n	8008236 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800821a:	f003 0320 	and.w	r3, r3, #32
 800821e:	2b00      	cmp	r3, #0
 8008220:	d009      	beq.n	8008236 <HAL_UART_IRQHandler+0x66>
 8008222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008226:	f003 0320 	and.w	r3, r3, #32
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fc07 	bl	8008a42 <UART_Receive_IT>
      return;
 8008234:	e256      	b.n	80086e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800823a:	2b00      	cmp	r3, #0
 800823c:	f000 80de 	beq.w	80083fc <HAL_UART_IRQHandler+0x22c>
 8008240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	2b00      	cmp	r3, #0
 800824a:	d106      	bne.n	800825a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800824c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008250:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008254:	2b00      	cmp	r3, #0
 8008256:	f000 80d1 	beq.w	80083fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800825a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800825e:	f003 0301 	and.w	r3, r3, #1
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00b      	beq.n	800827e <HAL_UART_IRQHandler+0xae>
 8008266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800826a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800826e:	2b00      	cmp	r3, #0
 8008270:	d005      	beq.n	800827e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008276:	f043 0201 	orr.w	r2, r3, #1
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800827e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008282:	f003 0304 	and.w	r3, r3, #4
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00b      	beq.n	80082a2 <HAL_UART_IRQHandler+0xd2>
 800828a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	2b00      	cmp	r3, #0
 8008294:	d005      	beq.n	80082a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829a:	f043 0202 	orr.w	r2, r3, #2
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a6:	f003 0302 	and.w	r3, r3, #2
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00b      	beq.n	80082c6 <HAL_UART_IRQHandler+0xf6>
 80082ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d005      	beq.n	80082c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	f043 0204 	orr.w	r2, r3, #4
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80082c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ca:	f003 0308 	and.w	r3, r3, #8
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d011      	beq.n	80082f6 <HAL_UART_IRQHandler+0x126>
 80082d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082d6:	f003 0320 	and.w	r3, r3, #32
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d105      	bne.n	80082ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80082de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d005      	beq.n	80082f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ee:	f043 0208 	orr.w	r2, r3, #8
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f000 81ed 	beq.w	80086da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008304:	f003 0320 	and.w	r3, r3, #32
 8008308:	2b00      	cmp	r3, #0
 800830a:	d008      	beq.n	800831e <HAL_UART_IRQHandler+0x14e>
 800830c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008310:	f003 0320 	and.w	r3, r3, #32
 8008314:	2b00      	cmp	r3, #0
 8008316:	d002      	beq.n	800831e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fb92 	bl	8008a42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	695b      	ldr	r3, [r3, #20]
 8008324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008328:	2b40      	cmp	r3, #64	; 0x40
 800832a:	bf0c      	ite	eq
 800832c:	2301      	moveq	r3, #1
 800832e:	2300      	movne	r3, #0
 8008330:	b2db      	uxtb	r3, r3
 8008332:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	f003 0308 	and.w	r3, r3, #8
 800833e:	2b00      	cmp	r3, #0
 8008340:	d103      	bne.n	800834a <HAL_UART_IRQHandler+0x17a>
 8008342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008346:	2b00      	cmp	r3, #0
 8008348:	d04f      	beq.n	80083ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fa9a 	bl	8008884 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800835a:	2b40      	cmp	r3, #64	; 0x40
 800835c:	d141      	bne.n	80083e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3314      	adds	r3, #20
 8008364:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008368:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800836c:	e853 3f00 	ldrex	r3, [r3]
 8008370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008374:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800837c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3314      	adds	r3, #20
 8008386:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800838a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800838e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008392:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008396:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800839a:	e841 2300 	strex	r3, r2, [r1]
 800839e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80083a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1d9      	bne.n	800835e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d013      	beq.n	80083da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b6:	4a7d      	ldr	r2, [pc, #500]	; (80085ac <HAL_UART_IRQHandler+0x3dc>)
 80083b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fb fac5 	bl	800394e <HAL_DMA_Abort_IT>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d016      	beq.n	80083f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80083d4:	4610      	mov	r0, r2
 80083d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083d8:	e00e      	b.n	80083f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f990 	bl	8008700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e0:	e00a      	b.n	80083f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f98c 	bl	8008700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e8:	e006      	b.n	80083f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f988 	bl	8008700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80083f6:	e170      	b.n	80086da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f8:	bf00      	nop
    return;
 80083fa:	e16e      	b.n	80086da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008400:	2b01      	cmp	r3, #1
 8008402:	f040 814a 	bne.w	800869a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800840a:	f003 0310 	and.w	r3, r3, #16
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 8143 	beq.w	800869a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008418:	f003 0310 	and.w	r3, r3, #16
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 813c 	beq.w	800869a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008422:	2300      	movs	r3, #0
 8008424:	60bb      	str	r3, [r7, #8]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	60bb      	str	r3, [r7, #8]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	60bb      	str	r3, [r7, #8]
 8008436:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008442:	2b40      	cmp	r3, #64	; 0x40
 8008444:	f040 80b4 	bne.w	80085b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008454:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008458:	2b00      	cmp	r3, #0
 800845a:	f000 8140 	beq.w	80086de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008466:	429a      	cmp	r2, r3
 8008468:	f080 8139 	bcs.w	80086de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008472:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008478:	69db      	ldr	r3, [r3, #28]
 800847a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800847e:	f000 8088 	beq.w	8008592 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	330c      	adds	r3, #12
 8008488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008490:	e853 3f00 	ldrex	r3, [r3]
 8008494:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008498:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800849c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	330c      	adds	r3, #12
 80084aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80084ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80084ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1d9      	bne.n	8008482 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3314      	adds	r3, #20
 80084d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084d8:	e853 3f00 	ldrex	r3, [r3]
 80084dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084e0:	f023 0301 	bic.w	r3, r3, #1
 80084e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3314      	adds	r3, #20
 80084ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80084f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80084fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084fe:	e841 2300 	strex	r3, r2, [r1]
 8008502:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1e1      	bne.n	80084ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3314      	adds	r3, #20
 8008510:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008514:	e853 3f00 	ldrex	r3, [r3]
 8008518:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800851a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800851c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008520:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3314      	adds	r3, #20
 800852a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800852e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008530:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008534:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008536:	e841 2300 	strex	r3, r2, [r1]
 800853a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800853c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1e3      	bne.n	800850a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2220      	movs	r2, #32
 8008546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	330c      	adds	r3, #12
 8008556:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800855a:	e853 3f00 	ldrex	r3, [r3]
 800855e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008562:	f023 0310 	bic.w	r3, r3, #16
 8008566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	330c      	adds	r3, #12
 8008570:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008574:	65ba      	str	r2, [r7, #88]	; 0x58
 8008576:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008578:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800857a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800857c:	e841 2300 	strex	r3, r2, [r1]
 8008580:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e3      	bne.n	8008550 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858c:	4618      	mov	r0, r3
 800858e:	f7fb f96e 	bl	800386e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800859a:	b29b      	uxth	r3, r3
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	b29b      	uxth	r3, r3
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f8b6 	bl	8008714 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085a8:	e099      	b.n	80086de <HAL_UART_IRQHandler+0x50e>
 80085aa:	bf00      	nop
 80085ac:	0800894b 	.word	0x0800894b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 808b 	beq.w	80086e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80085cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f000 8086 	beq.w	80086e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	330c      	adds	r3, #12
 80085dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e0:	e853 3f00 	ldrex	r3, [r3]
 80085e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	330c      	adds	r3, #12
 80085f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80085fa:	647a      	str	r2, [r7, #68]	; 0x44
 80085fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008600:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008602:	e841 2300 	strex	r3, r2, [r1]
 8008606:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1e3      	bne.n	80085d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	3314      	adds	r3, #20
 8008614:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008618:	e853 3f00 	ldrex	r3, [r3]
 800861c:	623b      	str	r3, [r7, #32]
   return(result);
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	f023 0301 	bic.w	r3, r3, #1
 8008624:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3314      	adds	r3, #20
 800862e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008632:	633a      	str	r2, [r7, #48]	; 0x30
 8008634:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800863a:	e841 2300 	strex	r3, r2, [r1]
 800863e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1e3      	bne.n	800860e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2220      	movs	r2, #32
 800864a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	330c      	adds	r3, #12
 800865a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	e853 3f00 	ldrex	r3, [r3]
 8008662:	60fb      	str	r3, [r7, #12]
   return(result);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f023 0310 	bic.w	r3, r3, #16
 800866a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	330c      	adds	r3, #12
 8008674:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008678:	61fa      	str	r2, [r7, #28]
 800867a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867c:	69b9      	ldr	r1, [r7, #24]
 800867e:	69fa      	ldr	r2, [r7, #28]
 8008680:	e841 2300 	strex	r3, r2, [r1]
 8008684:	617b      	str	r3, [r7, #20]
   return(result);
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1e3      	bne.n	8008654 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800868c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f83e 	bl	8008714 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008698:	e023      	b.n	80086e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800869a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800869e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d009      	beq.n	80086ba <HAL_UART_IRQHandler+0x4ea>
 80086a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f95d 	bl	8008972 <UART_Transmit_IT>
    return;
 80086b8:	e014      	b.n	80086e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80086ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00e      	beq.n	80086e4 <HAL_UART_IRQHandler+0x514>
 80086c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d008      	beq.n	80086e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f99d 	bl	8008a12 <UART_EndTransmit_IT>
    return;
 80086d8:	e004      	b.n	80086e4 <HAL_UART_IRQHandler+0x514>
    return;
 80086da:	bf00      	nop
 80086dc:	e002      	b.n	80086e4 <HAL_UART_IRQHandler+0x514>
      return;
 80086de:	bf00      	nop
 80086e0:	e000      	b.n	80086e4 <HAL_UART_IRQHandler+0x514>
      return;
 80086e2:	bf00      	nop
  }
}
 80086e4:	37e8      	adds	r7, #232	; 0xe8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop

080086ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b090      	sub	sp, #64	; 0x40
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	603b      	str	r3, [r7, #0]
 8008738:	4613      	mov	r3, r2
 800873a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800873c:	e050      	b.n	80087e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800873e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008744:	d04c      	beq.n	80087e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008748:	2b00      	cmp	r3, #0
 800874a:	d007      	beq.n	800875c <UART_WaitOnFlagUntilTimeout+0x30>
 800874c:	f7fa fb82 	bl	8002e54 <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008758:	429a      	cmp	r2, r3
 800875a:	d241      	bcs.n	80087e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	330c      	adds	r3, #12
 8008762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008766:	e853 3f00 	ldrex	r3, [r3]
 800876a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	330c      	adds	r3, #12
 800877a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800877c:	637a      	str	r2, [r7, #52]	; 0x34
 800877e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008780:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008784:	e841 2300 	strex	r3, r2, [r1]
 8008788:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800878a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1e5      	bne.n	800875c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	3314      	adds	r3, #20
 8008796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	e853 3f00 	ldrex	r3, [r3]
 800879e:	613b      	str	r3, [r7, #16]
   return(result);
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	f023 0301 	bic.w	r3, r3, #1
 80087a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3314      	adds	r3, #20
 80087ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087b0:	623a      	str	r2, [r7, #32]
 80087b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b4:	69f9      	ldr	r1, [r7, #28]
 80087b6:	6a3a      	ldr	r2, [r7, #32]
 80087b8:	e841 2300 	strex	r3, r2, [r1]
 80087bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1e5      	bne.n	8008790 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2220      	movs	r2, #32
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2220      	movs	r2, #32
 80087d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e00f      	b.n	8008800 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	4013      	ands	r3, r2
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	bf0c      	ite	eq
 80087f0:	2301      	moveq	r3, #1
 80087f2:	2300      	movne	r3, #0
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	461a      	mov	r2, r3
 80087f8:	79fb      	ldrb	r3, [r7, #7]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d09f      	beq.n	800873e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3740      	adds	r7, #64	; 0x40
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	4613      	mov	r3, r2
 8008814:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	88fa      	ldrh	r2, [r7, #6]
 8008820:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	88fa      	ldrh	r2, [r7, #6]
 8008826:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2222      	movs	r2, #34	; 0x22
 8008832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d007      	beq.n	8008856 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68da      	ldr	r2, [r3, #12]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008854:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	695a      	ldr	r2, [r3, #20]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f042 0201 	orr.w	r2, r2, #1
 8008864:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68da      	ldr	r2, [r3, #12]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f042 0220 	orr.w	r2, r2, #32
 8008874:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008884:	b480      	push	{r7}
 8008886:	b095      	sub	sp, #84	; 0x54
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	330c      	adds	r3, #12
 8008892:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008896:	e853 3f00 	ldrex	r3, [r3]
 800889a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800889c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	330c      	adds	r3, #12
 80088aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088ac:	643a      	str	r2, [r7, #64]	; 0x40
 80088ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088b4:	e841 2300 	strex	r3, r2, [r1]
 80088b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1e5      	bne.n	800888c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3314      	adds	r3, #20
 80088c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	e853 3f00 	ldrex	r3, [r3]
 80088ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	f023 0301 	bic.w	r3, r3, #1
 80088d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3314      	adds	r3, #20
 80088de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088e8:	e841 2300 	strex	r3, r2, [r1]
 80088ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e5      	bne.n	80088c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d119      	bne.n	8008930 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	330c      	adds	r3, #12
 8008902:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	e853 3f00 	ldrex	r3, [r3]
 800890a:	60bb      	str	r3, [r7, #8]
   return(result);
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	f023 0310 	bic.w	r3, r3, #16
 8008912:	647b      	str	r3, [r7, #68]	; 0x44
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	330c      	adds	r3, #12
 800891a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800891c:	61ba      	str	r2, [r7, #24]
 800891e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008920:	6979      	ldr	r1, [r7, #20]
 8008922:	69ba      	ldr	r2, [r7, #24]
 8008924:	e841 2300 	strex	r3, r2, [r1]
 8008928:	613b      	str	r3, [r7, #16]
   return(result);
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1e5      	bne.n	80088fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2220      	movs	r2, #32
 8008934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800893e:	bf00      	nop
 8008940:	3754      	adds	r7, #84	; 0x54
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008956:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f7ff fecb 	bl	8008700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800896a:	bf00      	nop
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008972:	b480      	push	{r7}
 8008974:	b085      	sub	sp, #20
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b21      	cmp	r3, #33	; 0x21
 8008984:	d13e      	bne.n	8008a04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800898e:	d114      	bne.n	80089ba <UART_Transmit_IT+0x48>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d110      	bne.n	80089ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a1b      	ldr	r3, [r3, #32]
 800899c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	881b      	ldrh	r3, [r3, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	1c9a      	adds	r2, r3, #2
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	621a      	str	r2, [r3, #32]
 80089b8:	e008      	b.n	80089cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	1c59      	adds	r1, r3, #1
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	6211      	str	r1, [r2, #32]
 80089c4:	781a      	ldrb	r2, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	3b01      	subs	r3, #1
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	4619      	mov	r1, r3
 80089da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10f      	bne.n	8008a00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68da      	ldr	r2, [r3, #12]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68da      	ldr	r2, [r3, #12]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	e000      	b.n	8008a06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a04:	2302      	movs	r3, #2
  }
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b082      	sub	sp, #8
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	68da      	ldr	r2, [r3, #12]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2220      	movs	r2, #32
 8008a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7ff fe5a 	bl	80086ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b08c      	sub	sp, #48	; 0x30
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b22      	cmp	r3, #34	; 0x22
 8008a54:	f040 80ab 	bne.w	8008bae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a60:	d117      	bne.n	8008a92 <UART_Receive_IT+0x50>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d113      	bne.n	8008a92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a80:	b29a      	uxth	r2, r3
 8008a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8a:	1c9a      	adds	r2, r3, #2
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	629a      	str	r2, [r3, #40]	; 0x28
 8008a90:	e026      	b.n	8008ae0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aa4:	d007      	beq.n	8008ab6 <UART_Receive_IT+0x74>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10a      	bne.n	8008ac4 <UART_Receive_IT+0x82>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d106      	bne.n	8008ac4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	b2da      	uxtb	r2, r3
 8008abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac0:	701a      	strb	r2, [r3, #0]
 8008ac2:	e008      	b.n	8008ad6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ad0:	b2da      	uxtb	r2, r3
 8008ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	4619      	mov	r1, r3
 8008aee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d15a      	bne.n	8008baa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68da      	ldr	r2, [r3, #12]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f022 0220 	bic.w	r2, r2, #32
 8008b02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68da      	ldr	r2, [r3, #12]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	695a      	ldr	r2, [r3, #20]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f022 0201 	bic.w	r2, r2, #1
 8008b22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2220      	movs	r2, #32
 8008b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d135      	bne.n	8008ba0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	330c      	adds	r3, #12
 8008b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	e853 3f00 	ldrex	r3, [r3]
 8008b48:	613b      	str	r3, [r7, #16]
   return(result);
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	f023 0310 	bic.w	r3, r3, #16
 8008b50:	627b      	str	r3, [r7, #36]	; 0x24
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	330c      	adds	r3, #12
 8008b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b5a:	623a      	str	r2, [r7, #32]
 8008b5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5e:	69f9      	ldr	r1, [r7, #28]
 8008b60:	6a3a      	ldr	r2, [r7, #32]
 8008b62:	e841 2300 	strex	r3, r2, [r1]
 8008b66:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1e5      	bne.n	8008b3a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0310 	and.w	r3, r3, #16
 8008b78:	2b10      	cmp	r3, #16
 8008b7a:	d10a      	bne.n	8008b92 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	60fb      	str	r3, [r7, #12]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	60fb      	str	r3, [r7, #12]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	60fb      	str	r3, [r7, #12]
 8008b90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7ff fdbb 	bl	8008714 <HAL_UARTEx_RxEventCallback>
 8008b9e:	e002      	b.n	8008ba6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7f8 fd63 	bl	800166c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	e002      	b.n	8008bb0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	e000      	b.n	8008bb0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008bae:	2302      	movs	r3, #2
  }
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3730      	adds	r7, #48	; 0x30
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bbc:	b0c0      	sub	sp, #256	; 0x100
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd4:	68d9      	ldr	r1, [r3, #12]
 8008bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	ea40 0301 	orr.w	r3, r0, r1
 8008be0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008be6:	689a      	ldr	r2, [r3, #8]
 8008be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	431a      	orrs	r2, r3
 8008bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bf4:	695b      	ldr	r3, [r3, #20]
 8008bf6:	431a      	orrs	r2, r3
 8008bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bfc:	69db      	ldr	r3, [r3, #28]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c10:	f021 010c 	bic.w	r1, r1, #12
 8008c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c1e:	430b      	orrs	r3, r1
 8008c20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	695b      	ldr	r3, [r3, #20]
 8008c2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c32:	6999      	ldr	r1, [r3, #24]
 8008c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	ea40 0301 	orr.w	r3, r0, r1
 8008c3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	4b8f      	ldr	r3, [pc, #572]	; (8008e84 <UART_SetConfig+0x2cc>)
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d005      	beq.n	8008c58 <UART_SetConfig+0xa0>
 8008c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	4b8d      	ldr	r3, [pc, #564]	; (8008e88 <UART_SetConfig+0x2d0>)
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d104      	bne.n	8008c62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c58:	f7fd fef4 	bl	8006a44 <HAL_RCC_GetPCLK2Freq>
 8008c5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008c60:	e003      	b.n	8008c6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c62:	f7fd fedb 	bl	8006a1c <HAL_RCC_GetPCLK1Freq>
 8008c66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c6e:	69db      	ldr	r3, [r3, #28]
 8008c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c74:	f040 810c 	bne.w	8008e90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008c86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	462b      	mov	r3, r5
 8008c8e:	1891      	adds	r1, r2, r2
 8008c90:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c92:	415b      	adcs	r3, r3
 8008c94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	eb12 0801 	adds.w	r8, r2, r1
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	eb43 0901 	adc.w	r9, r3, r1
 8008ca6:	f04f 0200 	mov.w	r2, #0
 8008caa:	f04f 0300 	mov.w	r3, #0
 8008cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cba:	4690      	mov	r8, r2
 8008cbc:	4699      	mov	r9, r3
 8008cbe:	4623      	mov	r3, r4
 8008cc0:	eb18 0303 	adds.w	r3, r8, r3
 8008cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008cc8:	462b      	mov	r3, r5
 8008cca:	eb49 0303 	adc.w	r3, r9, r3
 8008cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008cde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008ce2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	18db      	adds	r3, r3, r3
 8008cea:	653b      	str	r3, [r7, #80]	; 0x50
 8008cec:	4613      	mov	r3, r2
 8008cee:	eb42 0303 	adc.w	r3, r2, r3
 8008cf2:	657b      	str	r3, [r7, #84]	; 0x54
 8008cf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008cf8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008cfc:	f7f7 ff0a 	bl	8000b14 <__aeabi_uldivmod>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4b61      	ldr	r3, [pc, #388]	; (8008e8c <UART_SetConfig+0x2d4>)
 8008d06:	fba3 2302 	umull	r2, r3, r3, r2
 8008d0a:	095b      	lsrs	r3, r3, #5
 8008d0c:	011c      	lsls	r4, r3, #4
 8008d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d12:	2200      	movs	r2, #0
 8008d14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008d1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008d20:	4642      	mov	r2, r8
 8008d22:	464b      	mov	r3, r9
 8008d24:	1891      	adds	r1, r2, r2
 8008d26:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d28:	415b      	adcs	r3, r3
 8008d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008d30:	4641      	mov	r1, r8
 8008d32:	eb12 0a01 	adds.w	sl, r2, r1
 8008d36:	4649      	mov	r1, r9
 8008d38:	eb43 0b01 	adc.w	fp, r3, r1
 8008d3c:	f04f 0200 	mov.w	r2, #0
 8008d40:	f04f 0300 	mov.w	r3, #0
 8008d44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d50:	4692      	mov	sl, r2
 8008d52:	469b      	mov	fp, r3
 8008d54:	4643      	mov	r3, r8
 8008d56:	eb1a 0303 	adds.w	r3, sl, r3
 8008d5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d5e:	464b      	mov	r3, r9
 8008d60:	eb4b 0303 	adc.w	r3, fp, r3
 8008d64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008d78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	18db      	adds	r3, r3, r3
 8008d80:	643b      	str	r3, [r7, #64]	; 0x40
 8008d82:	4613      	mov	r3, r2
 8008d84:	eb42 0303 	adc.w	r3, r2, r3
 8008d88:	647b      	str	r3, [r7, #68]	; 0x44
 8008d8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008d8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008d92:	f7f7 febf 	bl	8000b14 <__aeabi_uldivmod>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	4b3b      	ldr	r3, [pc, #236]	; (8008e8c <UART_SetConfig+0x2d4>)
 8008d9e:	fba3 2301 	umull	r2, r3, r3, r1
 8008da2:	095b      	lsrs	r3, r3, #5
 8008da4:	2264      	movs	r2, #100	; 0x64
 8008da6:	fb02 f303 	mul.w	r3, r2, r3
 8008daa:	1acb      	subs	r3, r1, r3
 8008dac:	00db      	lsls	r3, r3, #3
 8008dae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008db2:	4b36      	ldr	r3, [pc, #216]	; (8008e8c <UART_SetConfig+0x2d4>)
 8008db4:	fba3 2302 	umull	r2, r3, r3, r2
 8008db8:	095b      	lsrs	r3, r3, #5
 8008dba:	005b      	lsls	r3, r3, #1
 8008dbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008dc0:	441c      	add	r4, r3
 8008dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008dcc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008dd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008dd4:	4642      	mov	r2, r8
 8008dd6:	464b      	mov	r3, r9
 8008dd8:	1891      	adds	r1, r2, r2
 8008dda:	63b9      	str	r1, [r7, #56]	; 0x38
 8008ddc:	415b      	adcs	r3, r3
 8008dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008de0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008de4:	4641      	mov	r1, r8
 8008de6:	1851      	adds	r1, r2, r1
 8008de8:	6339      	str	r1, [r7, #48]	; 0x30
 8008dea:	4649      	mov	r1, r9
 8008dec:	414b      	adcs	r3, r1
 8008dee:	637b      	str	r3, [r7, #52]	; 0x34
 8008df0:	f04f 0200 	mov.w	r2, #0
 8008df4:	f04f 0300 	mov.w	r3, #0
 8008df8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008dfc:	4659      	mov	r1, fp
 8008dfe:	00cb      	lsls	r3, r1, #3
 8008e00:	4651      	mov	r1, sl
 8008e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e06:	4651      	mov	r1, sl
 8008e08:	00ca      	lsls	r2, r1, #3
 8008e0a:	4610      	mov	r0, r2
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	4603      	mov	r3, r0
 8008e10:	4642      	mov	r2, r8
 8008e12:	189b      	adds	r3, r3, r2
 8008e14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e18:	464b      	mov	r3, r9
 8008e1a:	460a      	mov	r2, r1
 8008e1c:	eb42 0303 	adc.w	r3, r2, r3
 8008e20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008e38:	460b      	mov	r3, r1
 8008e3a:	18db      	adds	r3, r3, r3
 8008e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e3e:	4613      	mov	r3, r2
 8008e40:	eb42 0303 	adc.w	r3, r2, r3
 8008e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008e4e:	f7f7 fe61 	bl	8000b14 <__aeabi_uldivmod>
 8008e52:	4602      	mov	r2, r0
 8008e54:	460b      	mov	r3, r1
 8008e56:	4b0d      	ldr	r3, [pc, #52]	; (8008e8c <UART_SetConfig+0x2d4>)
 8008e58:	fba3 1302 	umull	r1, r3, r3, r2
 8008e5c:	095b      	lsrs	r3, r3, #5
 8008e5e:	2164      	movs	r1, #100	; 0x64
 8008e60:	fb01 f303 	mul.w	r3, r1, r3
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	3332      	adds	r3, #50	; 0x32
 8008e6a:	4a08      	ldr	r2, [pc, #32]	; (8008e8c <UART_SetConfig+0x2d4>)
 8008e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e70:	095b      	lsrs	r3, r3, #5
 8008e72:	f003 0207 	and.w	r2, r3, #7
 8008e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4422      	add	r2, r4
 8008e7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e80:	e105      	b.n	800908e <UART_SetConfig+0x4d6>
 8008e82:	bf00      	nop
 8008e84:	40011000 	.word	0x40011000
 8008e88:	40011400 	.word	0x40011400
 8008e8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e94:	2200      	movs	r2, #0
 8008e96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008ea2:	4642      	mov	r2, r8
 8008ea4:	464b      	mov	r3, r9
 8008ea6:	1891      	adds	r1, r2, r2
 8008ea8:	6239      	str	r1, [r7, #32]
 8008eaa:	415b      	adcs	r3, r3
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
 8008eae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008eb2:	4641      	mov	r1, r8
 8008eb4:	1854      	adds	r4, r2, r1
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	eb43 0501 	adc.w	r5, r3, r1
 8008ebc:	f04f 0200 	mov.w	r2, #0
 8008ec0:	f04f 0300 	mov.w	r3, #0
 8008ec4:	00eb      	lsls	r3, r5, #3
 8008ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008eca:	00e2      	lsls	r2, r4, #3
 8008ecc:	4614      	mov	r4, r2
 8008ece:	461d      	mov	r5, r3
 8008ed0:	4643      	mov	r3, r8
 8008ed2:	18e3      	adds	r3, r4, r3
 8008ed4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008ed8:	464b      	mov	r3, r9
 8008eda:	eb45 0303 	adc.w	r3, r5, r3
 8008ede:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008eee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008ef2:	f04f 0200 	mov.w	r2, #0
 8008ef6:	f04f 0300 	mov.w	r3, #0
 8008efa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008efe:	4629      	mov	r1, r5
 8008f00:	008b      	lsls	r3, r1, #2
 8008f02:	4621      	mov	r1, r4
 8008f04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f08:	4621      	mov	r1, r4
 8008f0a:	008a      	lsls	r2, r1, #2
 8008f0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008f10:	f7f7 fe00 	bl	8000b14 <__aeabi_uldivmod>
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	4b60      	ldr	r3, [pc, #384]	; (800909c <UART_SetConfig+0x4e4>)
 8008f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8008f1e:	095b      	lsrs	r3, r3, #5
 8008f20:	011c      	lsls	r4, r3, #4
 8008f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f26:	2200      	movs	r2, #0
 8008f28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008f34:	4642      	mov	r2, r8
 8008f36:	464b      	mov	r3, r9
 8008f38:	1891      	adds	r1, r2, r2
 8008f3a:	61b9      	str	r1, [r7, #24]
 8008f3c:	415b      	adcs	r3, r3
 8008f3e:	61fb      	str	r3, [r7, #28]
 8008f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f44:	4641      	mov	r1, r8
 8008f46:	1851      	adds	r1, r2, r1
 8008f48:	6139      	str	r1, [r7, #16]
 8008f4a:	4649      	mov	r1, r9
 8008f4c:	414b      	adcs	r3, r1
 8008f4e:	617b      	str	r3, [r7, #20]
 8008f50:	f04f 0200 	mov.w	r2, #0
 8008f54:	f04f 0300 	mov.w	r3, #0
 8008f58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f5c:	4659      	mov	r1, fp
 8008f5e:	00cb      	lsls	r3, r1, #3
 8008f60:	4651      	mov	r1, sl
 8008f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f66:	4651      	mov	r1, sl
 8008f68:	00ca      	lsls	r2, r1, #3
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	4603      	mov	r3, r0
 8008f70:	4642      	mov	r2, r8
 8008f72:	189b      	adds	r3, r3, r2
 8008f74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f78:	464b      	mov	r3, r9
 8008f7a:	460a      	mov	r2, r1
 8008f7c:	eb42 0303 	adc.w	r3, r2, r3
 8008f80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008f90:	f04f 0200 	mov.w	r2, #0
 8008f94:	f04f 0300 	mov.w	r3, #0
 8008f98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008f9c:	4649      	mov	r1, r9
 8008f9e:	008b      	lsls	r3, r1, #2
 8008fa0:	4641      	mov	r1, r8
 8008fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fa6:	4641      	mov	r1, r8
 8008fa8:	008a      	lsls	r2, r1, #2
 8008faa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008fae:	f7f7 fdb1 	bl	8000b14 <__aeabi_uldivmod>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4b39      	ldr	r3, [pc, #228]	; (800909c <UART_SetConfig+0x4e4>)
 8008fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8008fbc:	095b      	lsrs	r3, r3, #5
 8008fbe:	2164      	movs	r1, #100	; 0x64
 8008fc0:	fb01 f303 	mul.w	r3, r1, r3
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	011b      	lsls	r3, r3, #4
 8008fc8:	3332      	adds	r3, #50	; 0x32
 8008fca:	4a34      	ldr	r2, [pc, #208]	; (800909c <UART_SetConfig+0x4e4>)
 8008fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd0:	095b      	lsrs	r3, r3, #5
 8008fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fd6:	441c      	add	r4, r3
 8008fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fdc:	2200      	movs	r2, #0
 8008fde:	673b      	str	r3, [r7, #112]	; 0x70
 8008fe0:	677a      	str	r2, [r7, #116]	; 0x74
 8008fe2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008fe6:	4642      	mov	r2, r8
 8008fe8:	464b      	mov	r3, r9
 8008fea:	1891      	adds	r1, r2, r2
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	415b      	adcs	r3, r3
 8008ff0:	60fb      	str	r3, [r7, #12]
 8008ff2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ff6:	4641      	mov	r1, r8
 8008ff8:	1851      	adds	r1, r2, r1
 8008ffa:	6039      	str	r1, [r7, #0]
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	414b      	adcs	r3, r1
 8009000:	607b      	str	r3, [r7, #4]
 8009002:	f04f 0200 	mov.w	r2, #0
 8009006:	f04f 0300 	mov.w	r3, #0
 800900a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800900e:	4659      	mov	r1, fp
 8009010:	00cb      	lsls	r3, r1, #3
 8009012:	4651      	mov	r1, sl
 8009014:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009018:	4651      	mov	r1, sl
 800901a:	00ca      	lsls	r2, r1, #3
 800901c:	4610      	mov	r0, r2
 800901e:	4619      	mov	r1, r3
 8009020:	4603      	mov	r3, r0
 8009022:	4642      	mov	r2, r8
 8009024:	189b      	adds	r3, r3, r2
 8009026:	66bb      	str	r3, [r7, #104]	; 0x68
 8009028:	464b      	mov	r3, r9
 800902a:	460a      	mov	r2, r1
 800902c:	eb42 0303 	adc.w	r3, r2, r3
 8009030:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	663b      	str	r3, [r7, #96]	; 0x60
 800903c:	667a      	str	r2, [r7, #100]	; 0x64
 800903e:	f04f 0200 	mov.w	r2, #0
 8009042:	f04f 0300 	mov.w	r3, #0
 8009046:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800904a:	4649      	mov	r1, r9
 800904c:	008b      	lsls	r3, r1, #2
 800904e:	4641      	mov	r1, r8
 8009050:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009054:	4641      	mov	r1, r8
 8009056:	008a      	lsls	r2, r1, #2
 8009058:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800905c:	f7f7 fd5a 	bl	8000b14 <__aeabi_uldivmod>
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	4b0d      	ldr	r3, [pc, #52]	; (800909c <UART_SetConfig+0x4e4>)
 8009066:	fba3 1302 	umull	r1, r3, r3, r2
 800906a:	095b      	lsrs	r3, r3, #5
 800906c:	2164      	movs	r1, #100	; 0x64
 800906e:	fb01 f303 	mul.w	r3, r1, r3
 8009072:	1ad3      	subs	r3, r2, r3
 8009074:	011b      	lsls	r3, r3, #4
 8009076:	3332      	adds	r3, #50	; 0x32
 8009078:	4a08      	ldr	r2, [pc, #32]	; (800909c <UART_SetConfig+0x4e4>)
 800907a:	fba2 2303 	umull	r2, r3, r2, r3
 800907e:	095b      	lsrs	r3, r3, #5
 8009080:	f003 020f 	and.w	r2, r3, #15
 8009084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4422      	add	r2, r4
 800908c:	609a      	str	r2, [r3, #8]
}
 800908e:	bf00      	nop
 8009090:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009094:	46bd      	mov	sp, r7
 8009096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800909a:	bf00      	nop
 800909c:	51eb851f 	.word	0x51eb851f

080090a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090a0:	b084      	sub	sp, #16
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b084      	sub	sp, #16
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	f107 001c 	add.w	r0, r7, #28
 80090ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d122      	bne.n	80090fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80090cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80090e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d105      	bne.n	80090f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f9c0 	bl	8009478 <USB_CoreReset>
 80090f8:	4603      	mov	r3, r0
 80090fa:	73fb      	strb	r3, [r7, #15]
 80090fc:	e01a      	b.n	8009134 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f9b4 	bl	8009478 <USB_CoreReset>
 8009110:	4603      	mov	r3, r0
 8009112:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009116:	2b00      	cmp	r3, #0
 8009118:	d106      	bne.n	8009128 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	639a      	str	r2, [r3, #56]	; 0x38
 8009126:	e005      	b.n	8009134 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009136:	2b01      	cmp	r3, #1
 8009138:	d10b      	bne.n	8009152 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f043 0206 	orr.w	r2, r3, #6
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f043 0220 	orr.w	r2, r3, #32
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009152:	7bfb      	ldrb	r3, [r7, #15]
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800915e:	b004      	add	sp, #16
 8009160:	4770      	bx	lr

08009162 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009162:	b480      	push	{r7}
 8009164:	b083      	sub	sp, #12
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	f043 0201 	orr.w	r2, r3, #1
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	4618      	mov	r0, r3
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f023 0201 	bic.w	r2, r3, #1
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	370c      	adds	r7, #12
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr

080091a6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b084      	sub	sp, #16
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	460b      	mov	r3, r1
 80091b0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80091b2:	2300      	movs	r3, #0
 80091b4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80091c2:	78fb      	ldrb	r3, [r7, #3]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d115      	bne.n	80091f4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80091d4:	2001      	movs	r0, #1
 80091d6:	f7f9 fe49 	bl	8002e6c <HAL_Delay>
      ms++;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	3301      	adds	r3, #1
 80091de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f93a 	bl	800945a <USB_GetMode>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d01e      	beq.n	800922a <USB_SetCurrentMode+0x84>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2b31      	cmp	r3, #49	; 0x31
 80091f0:	d9f0      	bls.n	80091d4 <USB_SetCurrentMode+0x2e>
 80091f2:	e01a      	b.n	800922a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80091f4:	78fb      	ldrb	r3, [r7, #3]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d115      	bne.n	8009226 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009206:	2001      	movs	r0, #1
 8009208:	f7f9 fe30 	bl	8002e6c <HAL_Delay>
      ms++;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	3301      	adds	r3, #1
 8009210:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f921 	bl	800945a <USB_GetMode>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d005      	beq.n	800922a <USB_SetCurrentMode+0x84>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2b31      	cmp	r3, #49	; 0x31
 8009222:	d9f0      	bls.n	8009206 <USB_SetCurrentMode+0x60>
 8009224:	e001      	b.n	800922a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e005      	b.n	8009236 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2b32      	cmp	r3, #50	; 0x32
 800922e:	d101      	bne.n	8009234 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e000      	b.n	8009236 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
	...

08009240 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800924a:	2300      	movs	r3, #0
 800924c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	3301      	adds	r3, #1
 8009252:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	4a13      	ldr	r2, [pc, #76]	; (80092a4 <USB_FlushTxFifo+0x64>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d901      	bls.n	8009260 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e01b      	b.n	8009298 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	2b00      	cmp	r3, #0
 8009266:	daf2      	bge.n	800924e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009268:	2300      	movs	r3, #0
 800926a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	019b      	lsls	r3, r3, #6
 8009270:	f043 0220 	orr.w	r2, r3, #32
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	3301      	adds	r3, #1
 800927c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	4a08      	ldr	r2, [pc, #32]	; (80092a4 <USB_FlushTxFifo+0x64>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d901      	bls.n	800928a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009286:	2303      	movs	r3, #3
 8009288:	e006      	b.n	8009298 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	f003 0320 	and.w	r3, r3, #32
 8009292:	2b20      	cmp	r3, #32
 8009294:	d0f0      	beq.n	8009278 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3714      	adds	r7, #20
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	00030d40 	.word	0x00030d40

080092a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092b0:	2300      	movs	r3, #0
 80092b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	3301      	adds	r3, #1
 80092b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	4a11      	ldr	r2, [pc, #68]	; (8009304 <USB_FlushRxFifo+0x5c>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d901      	bls.n	80092c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80092c2:	2303      	movs	r3, #3
 80092c4:	e018      	b.n	80092f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	daf2      	bge.n	80092b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80092ce:	2300      	movs	r3, #0
 80092d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2210      	movs	r2, #16
 80092d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	3301      	adds	r3, #1
 80092dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	4a08      	ldr	r2, [pc, #32]	; (8009304 <USB_FlushRxFifo+0x5c>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d901      	bls.n	80092ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80092e6:	2303      	movs	r3, #3
 80092e8:	e006      	b.n	80092f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	f003 0310 	and.w	r3, r3, #16
 80092f2:	2b10      	cmp	r3, #16
 80092f4:	d0f0      	beq.n	80092d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3714      	adds	r7, #20
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr
 8009304:	00030d40 	.word	0x00030d40

08009308 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009308:	b480      	push	{r7}
 800930a:	b089      	sub	sp, #36	; 0x24
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	4611      	mov	r1, r2
 8009314:	461a      	mov	r2, r3
 8009316:	460b      	mov	r3, r1
 8009318:	71fb      	strb	r3, [r7, #7]
 800931a:	4613      	mov	r3, r2
 800931c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009326:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800932a:	2b00      	cmp	r3, #0
 800932c:	d123      	bne.n	8009376 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800932e:	88bb      	ldrh	r3, [r7, #4]
 8009330:	3303      	adds	r3, #3
 8009332:	089b      	lsrs	r3, r3, #2
 8009334:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009336:	2300      	movs	r3, #0
 8009338:	61bb      	str	r3, [r7, #24]
 800933a:	e018      	b.n	800936e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800933c:	79fb      	ldrb	r3, [r7, #7]
 800933e:	031a      	lsls	r2, r3, #12
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	4413      	add	r3, r2
 8009344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009348:	461a      	mov	r2, r3
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	3301      	adds	r3, #1
 8009354:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	3301      	adds	r3, #1
 800935a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	3301      	adds	r3, #1
 8009360:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	3301      	adds	r3, #1
 8009366:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	3301      	adds	r3, #1
 800936c:	61bb      	str	r3, [r7, #24]
 800936e:	69ba      	ldr	r2, [r7, #24]
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	429a      	cmp	r2, r3
 8009374:	d3e2      	bcc.n	800933c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3724      	adds	r7, #36	; 0x24
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009384:	b480      	push	{r7}
 8009386:	b08b      	sub	sp, #44	; 0x2c
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	4613      	mov	r3, r2
 8009390:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800939a:	88fb      	ldrh	r3, [r7, #6]
 800939c:	089b      	lsrs	r3, r3, #2
 800939e:	b29b      	uxth	r3, r3
 80093a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80093a2:	88fb      	ldrh	r3, [r7, #6]
 80093a4:	f003 0303 	and.w	r3, r3, #3
 80093a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80093aa:	2300      	movs	r3, #0
 80093ac:	623b      	str	r3, [r7, #32]
 80093ae:	e014      	b.n	80093da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	3301      	adds	r3, #1
 80093c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	3301      	adds	r3, #1
 80093c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	3301      	adds	r3, #1
 80093cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80093ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d0:	3301      	adds	r3, #1
 80093d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80093d4:	6a3b      	ldr	r3, [r7, #32]
 80093d6:	3301      	adds	r3, #1
 80093d8:	623b      	str	r3, [r7, #32]
 80093da:	6a3a      	ldr	r2, [r7, #32]
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d3e6      	bcc.n	80093b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80093e2:	8bfb      	ldrh	r3, [r7, #30]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d01e      	beq.n	8009426 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80093e8:	2300      	movs	r3, #0
 80093ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093f2:	461a      	mov	r2, r3
 80093f4:	f107 0310 	add.w	r3, r7, #16
 80093f8:	6812      	ldr	r2, [r2, #0]
 80093fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	6a3b      	ldr	r3, [r7, #32]
 8009400:	b2db      	uxtb	r3, r3
 8009402:	00db      	lsls	r3, r3, #3
 8009404:	fa22 f303 	lsr.w	r3, r2, r3
 8009408:	b2da      	uxtb	r2, r3
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940c:	701a      	strb	r2, [r3, #0]
      i++;
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	3301      	adds	r3, #1
 8009412:	623b      	str	r3, [r7, #32]
      pDest++;
 8009414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009416:	3301      	adds	r3, #1
 8009418:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800941a:	8bfb      	ldrh	r3, [r7, #30]
 800941c:	3b01      	subs	r3, #1
 800941e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009420:	8bfb      	ldrh	r3, [r7, #30]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1ea      	bne.n	80093fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009428:	4618      	mov	r0, r3
 800942a:	372c      	adds	r7, #44	; 0x2c
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	695b      	ldr	r3, [r3, #20]
 8009440:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	4013      	ands	r3, r2
 800944a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800944c:	68fb      	ldr	r3, [r7, #12]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3714      	adds	r7, #20
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr

0800945a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800945a:	b480      	push	{r7}
 800945c:	b083      	sub	sp, #12
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	695b      	ldr	r3, [r3, #20]
 8009466:	f003 0301 	and.w	r3, r3, #1
}
 800946a:	4618      	mov	r0, r3
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
	...

08009478 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009480:	2300      	movs	r3, #0
 8009482:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	3301      	adds	r3, #1
 8009488:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	4a13      	ldr	r2, [pc, #76]	; (80094dc <USB_CoreReset+0x64>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d901      	bls.n	8009496 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009492:	2303      	movs	r3, #3
 8009494:	e01b      	b.n	80094ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	2b00      	cmp	r3, #0
 800949c:	daf2      	bge.n	8009484 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800949e:	2300      	movs	r3, #0
 80094a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	f043 0201 	orr.w	r2, r3, #1
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3301      	adds	r3, #1
 80094b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	4a09      	ldr	r2, [pc, #36]	; (80094dc <USB_CoreReset+0x64>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d901      	bls.n	80094c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80094bc:	2303      	movs	r3, #3
 80094be:	e006      	b.n	80094ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	f003 0301 	and.w	r3, r3, #1
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d0f0      	beq.n	80094ae <USB_CoreReset+0x36>

  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3714      	adds	r7, #20
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	00030d40 	.word	0x00030d40

080094e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094e0:	b084      	sub	sp, #16
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b086      	sub	sp, #24
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80094ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80094f2:	2300      	movs	r3, #0
 80094f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009500:	461a      	mov	r2, r3
 8009502:	2300      	movs	r3, #0
 8009504:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009516:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009522:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800952e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009532:	2b00      	cmp	r3, #0
 8009534:	d018      	beq.n	8009568 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009538:	2b01      	cmp	r3, #1
 800953a:	d10a      	bne.n	8009552 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800954a:	f043 0304 	orr.w	r3, r3, #4
 800954e:	6013      	str	r3, [r2, #0]
 8009550:	e014      	b.n	800957c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009560:	f023 0304 	bic.w	r3, r3, #4
 8009564:	6013      	str	r3, [r2, #0]
 8009566:	e009      	b.n	800957c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009576:	f023 0304 	bic.w	r3, r3, #4
 800957a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800957c:	2110      	movs	r1, #16
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7ff fe5e 	bl	8009240 <USB_FlushTxFifo>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f7ff fe8a 	bl	80092a8 <USB_FlushRxFifo>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800959e:	2300      	movs	r3, #0
 80095a0:	613b      	str	r3, [r7, #16]
 80095a2:	e015      	b.n	80095d0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	015a      	lsls	r2, r3, #5
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	4413      	add	r3, r2
 80095ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095b0:	461a      	mov	r2, r3
 80095b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095b6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	015a      	lsls	r2, r3, #5
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	4413      	add	r3, r2
 80095c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095c4:	461a      	mov	r2, r3
 80095c6:	2300      	movs	r3, #0
 80095c8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	3301      	adds	r3, #1
 80095ce:	613b      	str	r3, [r7, #16]
 80095d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d2:	693a      	ldr	r2, [r7, #16]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d3e5      	bcc.n	80095a4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095e4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00b      	beq.n	800960a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095f8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a13      	ldr	r2, [pc, #76]	; (800964c <USB_HostInit+0x16c>)
 80095fe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a13      	ldr	r2, [pc, #76]	; (8009650 <USB_HostInit+0x170>)
 8009604:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009608:	e009      	b.n	800961e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2280      	movs	r2, #128	; 0x80
 800960e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a10      	ldr	r2, [pc, #64]	; (8009654 <USB_HostInit+0x174>)
 8009614:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a0f      	ldr	r2, [pc, #60]	; (8009658 <USB_HostInit+0x178>)
 800961a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800961e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009620:	2b00      	cmp	r3, #0
 8009622:	d105      	bne.n	8009630 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	f043 0210 	orr.w	r2, r3, #16
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	699a      	ldr	r2, [r3, #24]
 8009634:	4b09      	ldr	r3, [pc, #36]	; (800965c <USB_HostInit+0x17c>)
 8009636:	4313      	orrs	r3, r2
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800963c:	7dfb      	ldrb	r3, [r7, #23]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3718      	adds	r7, #24
 8009642:	46bd      	mov	sp, r7
 8009644:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009648:	b004      	add	sp, #16
 800964a:	4770      	bx	lr
 800964c:	01000200 	.word	0x01000200
 8009650:	00e00300 	.word	0x00e00300
 8009654:	00600080 	.word	0x00600080
 8009658:	004000e0 	.word	0x004000e0
 800965c:	a3200008 	.word	0xa3200008

08009660 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	460b      	mov	r3, r1
 800966a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800967e:	f023 0303 	bic.w	r3, r3, #3
 8009682:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	78fb      	ldrb	r3, [r7, #3]
 800968e:	f003 0303 	and.w	r3, r3, #3
 8009692:	68f9      	ldr	r1, [r7, #12]
 8009694:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009698:	4313      	orrs	r3, r2
 800969a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800969c:	78fb      	ldrb	r3, [r7, #3]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d107      	bne.n	80096b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096a8:	461a      	mov	r2, r3
 80096aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80096ae:	6053      	str	r3, [r2, #4]
 80096b0:	e009      	b.n	80096c6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80096b2:	78fb      	ldrb	r3, [r7, #3]
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d106      	bne.n	80096c6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096be:	461a      	mov	r2, r3
 80096c0:	f241 7370 	movw	r3, #6000	; 0x1770
 80096c4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3714      	adds	r7, #20
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80096e0:	2300      	movs	r3, #0
 80096e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80096f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80096fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009702:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009704:	2064      	movs	r0, #100	; 0x64
 8009706:	f7f9 fbb1 	bl	8002e6c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009712:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009716:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009718:	200a      	movs	r0, #10
 800971a:	f7f9 fba7 	bl	8002e6c <HAL_Delay>

  return HAL_OK;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	460b      	mov	r3, r1
 8009732:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009738:	2300      	movs	r3, #0
 800973a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800974c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009754:	2b00      	cmp	r3, #0
 8009756:	d109      	bne.n	800976c <USB_DriveVbus+0x44>
 8009758:	78fb      	ldrb	r3, [r7, #3]
 800975a:	2b01      	cmp	r3, #1
 800975c:	d106      	bne.n	800976c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009766:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800976a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009776:	d109      	bne.n	800978c <USB_DriveVbus+0x64>
 8009778:	78fb      	ldrb	r3, [r7, #3]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d106      	bne.n	800978c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800978a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3714      	adds	r7, #20
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr

0800979a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800979a:	b480      	push	{r7}
 800979c:	b085      	sub	sp, #20
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80097a6:	2300      	movs	r3, #0
 80097a8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	0c5b      	lsrs	r3, r3, #17
 80097b8:	f003 0303 	and.w	r3, r3, #3
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	b29b      	uxth	r3, r3
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3714      	adds	r7, #20
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
	...

080097ec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b088      	sub	sp, #32
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	4608      	mov	r0, r1
 80097f6:	4611      	mov	r1, r2
 80097f8:	461a      	mov	r2, r3
 80097fa:	4603      	mov	r3, r0
 80097fc:	70fb      	strb	r3, [r7, #3]
 80097fe:	460b      	mov	r3, r1
 8009800:	70bb      	strb	r3, [r7, #2]
 8009802:	4613      	mov	r3, r2
 8009804:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800980e:	78fb      	ldrb	r3, [r7, #3]
 8009810:	015a      	lsls	r2, r3, #5
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	4413      	add	r3, r2
 8009816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800981a:	461a      	mov	r2, r3
 800981c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009820:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009822:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009826:	2b03      	cmp	r3, #3
 8009828:	d87e      	bhi.n	8009928 <USB_HC_Init+0x13c>
 800982a:	a201      	add	r2, pc, #4	; (adr r2, 8009830 <USB_HC_Init+0x44>)
 800982c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009830:	08009841 	.word	0x08009841
 8009834:	080098eb 	.word	0x080098eb
 8009838:	08009841 	.word	0x08009841
 800983c:	080098ad 	.word	0x080098ad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009840:	78fb      	ldrb	r3, [r7, #3]
 8009842:	015a      	lsls	r2, r3, #5
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	4413      	add	r3, r2
 8009848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800984c:	461a      	mov	r2, r3
 800984e:	f240 439d 	movw	r3, #1181	; 0x49d
 8009852:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009854:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009858:	2b00      	cmp	r3, #0
 800985a:	da10      	bge.n	800987e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800985c:	78fb      	ldrb	r3, [r7, #3]
 800985e:	015a      	lsls	r2, r3, #5
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	4413      	add	r3, r2
 8009864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	78fa      	ldrb	r2, [r7, #3]
 800986c:	0151      	lsls	r1, r2, #5
 800986e:	693a      	ldr	r2, [r7, #16]
 8009870:	440a      	add	r2, r1
 8009872:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800987a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800987c:	e057      	b.n	800992e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009886:	2b00      	cmp	r3, #0
 8009888:	d051      	beq.n	800992e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800988a:	78fb      	ldrb	r3, [r7, #3]
 800988c:	015a      	lsls	r2, r3, #5
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	4413      	add	r3, r2
 8009892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	78fa      	ldrb	r2, [r7, #3]
 800989a:	0151      	lsls	r1, r2, #5
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	440a      	add	r2, r1
 80098a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80098a8:	60d3      	str	r3, [r2, #12]
      break;
 80098aa:	e040      	b.n	800992e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80098ac:	78fb      	ldrb	r3, [r7, #3]
 80098ae:	015a      	lsls	r2, r3, #5
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	4413      	add	r3, r2
 80098b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098b8:	461a      	mov	r2, r3
 80098ba:	f240 639d 	movw	r3, #1693	; 0x69d
 80098be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80098c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	da34      	bge.n	8009932 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80098c8:	78fb      	ldrb	r3, [r7, #3]
 80098ca:	015a      	lsls	r2, r3, #5
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	4413      	add	r3, r2
 80098d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	78fa      	ldrb	r2, [r7, #3]
 80098d8:	0151      	lsls	r1, r2, #5
 80098da:	693a      	ldr	r2, [r7, #16]
 80098dc:	440a      	add	r2, r1
 80098de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098e6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80098e8:	e023      	b.n	8009932 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80098ea:	78fb      	ldrb	r3, [r7, #3]
 80098ec:	015a      	lsls	r2, r3, #5
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	4413      	add	r3, r2
 80098f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098f6:	461a      	mov	r2, r3
 80098f8:	f240 2325 	movw	r3, #549	; 0x225
 80098fc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80098fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009902:	2b00      	cmp	r3, #0
 8009904:	da17      	bge.n	8009936 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009906:	78fb      	ldrb	r3, [r7, #3]
 8009908:	015a      	lsls	r2, r3, #5
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	4413      	add	r3, r2
 800990e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	78fa      	ldrb	r2, [r7, #3]
 8009916:	0151      	lsls	r1, r2, #5
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	440a      	add	r2, r1
 800991c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009920:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009924:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009926:	e006      	b.n	8009936 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	77fb      	strb	r3, [r7, #31]
      break;
 800992c:	e004      	b.n	8009938 <USB_HC_Init+0x14c>
      break;
 800992e:	bf00      	nop
 8009930:	e002      	b.n	8009938 <USB_HC_Init+0x14c>
      break;
 8009932:	bf00      	nop
 8009934:	e000      	b.n	8009938 <USB_HC_Init+0x14c>
      break;
 8009936:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009938:	78fb      	ldrb	r3, [r7, #3]
 800993a:	015a      	lsls	r2, r3, #5
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	4413      	add	r3, r2
 8009940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	78fa      	ldrb	r2, [r7, #3]
 8009948:	0151      	lsls	r1, r2, #5
 800994a:	693a      	ldr	r2, [r7, #16]
 800994c:	440a      	add	r2, r1
 800994e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009952:	f043 0302 	orr.w	r3, r3, #2
 8009956:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800995e:	699a      	ldr	r2, [r3, #24]
 8009960:	78fb      	ldrb	r3, [r7, #3]
 8009962:	f003 030f 	and.w	r3, r3, #15
 8009966:	2101      	movs	r1, #1
 8009968:	fa01 f303 	lsl.w	r3, r1, r3
 800996c:	6939      	ldr	r1, [r7, #16]
 800996e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009972:	4313      	orrs	r3, r2
 8009974:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	699b      	ldr	r3, [r3, #24]
 800997a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009982:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009986:	2b00      	cmp	r3, #0
 8009988:	da03      	bge.n	8009992 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800998a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800998e:	61bb      	str	r3, [r7, #24]
 8009990:	e001      	b.n	8009996 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8009992:	2300      	movs	r3, #0
 8009994:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7ff feff 	bl	800979a <USB_GetHostSpeed>
 800999c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800999e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d106      	bne.n	80099b4 <USB_HC_Init+0x1c8>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	d003      	beq.n	80099b4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80099ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80099b0:	617b      	str	r3, [r7, #20]
 80099b2:	e001      	b.n	80099b8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80099b4:	2300      	movs	r3, #0
 80099b6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80099b8:	787b      	ldrb	r3, [r7, #1]
 80099ba:	059b      	lsls	r3, r3, #22
 80099bc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80099c0:	78bb      	ldrb	r3, [r7, #2]
 80099c2:	02db      	lsls	r3, r3, #11
 80099c4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80099c8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80099ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80099ce:	049b      	lsls	r3, r3, #18
 80099d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80099d4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80099d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80099d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80099dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80099e2:	78fb      	ldrb	r3, [r7, #3]
 80099e4:	0159      	lsls	r1, r3, #5
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	440b      	add	r3, r1
 80099ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099ee:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80099f4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80099f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80099fa:	2b03      	cmp	r3, #3
 80099fc:	d003      	beq.n	8009a06 <USB_HC_Init+0x21a>
 80099fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d10f      	bne.n	8009a26 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009a06:	78fb      	ldrb	r3, [r7, #3]
 8009a08:	015a      	lsls	r2, r3, #5
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	78fa      	ldrb	r2, [r7, #3]
 8009a16:	0151      	lsls	r1, r2, #5
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	440a      	add	r2, r1
 8009a1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a24:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009a26:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3720      	adds	r7, #32
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b08c      	sub	sp, #48	; 0x30
 8009a34:	af02      	add	r7, sp, #8
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	785b      	ldrb	r3, [r3, #1]
 8009a46:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a4c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d02d      	beq.n	8009ab6 <USB_HC_StartXfer+0x86>
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	791b      	ldrb	r3, [r3, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d129      	bne.n	8009ab6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009a62:	79fb      	ldrb	r3, [r7, #7]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d117      	bne.n	8009a98 <USB_HC_StartXfer+0x68>
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	79db      	ldrb	r3, [r3, #7]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d003      	beq.n	8009a78 <USB_HC_StartXfer+0x48>
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	79db      	ldrb	r3, [r3, #7]
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d10f      	bne.n	8009a98 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	015a      	lsls	r2, r3, #5
 8009a7c:	6a3b      	ldr	r3, [r7, #32]
 8009a7e:	4413      	add	r3, r2
 8009a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	69fa      	ldr	r2, [r7, #28]
 8009a88:	0151      	lsls	r1, r2, #5
 8009a8a:	6a3a      	ldr	r2, [r7, #32]
 8009a8c:	440a      	add	r2, r1
 8009a8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a96:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009a98:	79fb      	ldrb	r3, [r7, #7]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d10b      	bne.n	8009ab6 <USB_HC_StartXfer+0x86>
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	795b      	ldrb	r3, [r3, #5]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d107      	bne.n	8009ab6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	785b      	ldrb	r3, [r3, #1]
 8009aaa:	4619      	mov	r1, r3
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	f000 fa0f 	bl	8009ed0 <USB_DoPing>
      return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	e0f8      	b.n	8009ca8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d018      	beq.n	8009af0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	68ba      	ldr	r2, [r7, #8]
 8009ac4:	8912      	ldrh	r2, [r2, #8]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	3b01      	subs	r3, #1
 8009aca:	68ba      	ldr	r2, [r7, #8]
 8009acc:	8912      	ldrh	r2, [r2, #8]
 8009ace:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ad2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009ad4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009ad6:	8b7b      	ldrh	r3, [r7, #26]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d90b      	bls.n	8009af4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009adc:	8b7b      	ldrh	r3, [r7, #26]
 8009ade:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009ae0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	8912      	ldrh	r2, [r2, #8]
 8009ae6:	fb03 f202 	mul.w	r2, r3, r2
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	611a      	str	r2, [r3, #16]
 8009aee:	e001      	b.n	8009af4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009af0:	2301      	movs	r3, #1
 8009af2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	78db      	ldrb	r3, [r3, #3]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d007      	beq.n	8009b0c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009afc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	8912      	ldrh	r2, [r2, #8]
 8009b02:	fb03 f202 	mul.w	r2, r3, r2
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	611a      	str	r2, [r3, #16]
 8009b0a:	e003      	b.n	8009b14 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	695a      	ldr	r2, [r3, #20]
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009b1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b1e:	04d9      	lsls	r1, r3, #19
 8009b20:	4b63      	ldr	r3, [pc, #396]	; (8009cb0 <USB_HC_StartXfer+0x280>)
 8009b22:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b24:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	7a9b      	ldrb	r3, [r3, #10]
 8009b2a:	075b      	lsls	r3, r3, #29
 8009b2c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b30:	69f9      	ldr	r1, [r7, #28]
 8009b32:	0148      	lsls	r0, r1, #5
 8009b34:	6a39      	ldr	r1, [r7, #32]
 8009b36:	4401      	add	r1, r0
 8009b38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009b3c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b3e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009b40:	79fb      	ldrb	r3, [r7, #7]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d009      	beq.n	8009b5a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	68d9      	ldr	r1, [r3, #12]
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	015a      	lsls	r2, r3, #5
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	4413      	add	r3, r2
 8009b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b56:	460a      	mov	r2, r1
 8009b58:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	bf0c      	ite	eq
 8009b6a:	2301      	moveq	r3, #1
 8009b6c:	2300      	movne	r3, #0
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	015a      	lsls	r2, r3, #5
 8009b76:	6a3b      	ldr	r3, [r7, #32]
 8009b78:	4413      	add	r3, r2
 8009b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	69fa      	ldr	r2, [r7, #28]
 8009b82:	0151      	lsls	r1, r2, #5
 8009b84:	6a3a      	ldr	r2, [r7, #32]
 8009b86:	440a      	add	r2, r1
 8009b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b90:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	015a      	lsls	r2, r3, #5
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	4413      	add	r3, r2
 8009b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	7e7b      	ldrb	r3, [r7, #25]
 8009ba2:	075b      	lsls	r3, r3, #29
 8009ba4:	69f9      	ldr	r1, [r7, #28]
 8009ba6:	0148      	lsls	r0, r1, #5
 8009ba8:	6a39      	ldr	r1, [r7, #32]
 8009baa:	4401      	add	r1, r0
 8009bac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	015a      	lsls	r2, r3, #5
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	4413      	add	r3, r2
 8009bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009bca:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	78db      	ldrb	r3, [r3, #3]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d004      	beq.n	8009bde <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bda:	613b      	str	r3, [r7, #16]
 8009bdc:	e003      	b.n	8009be6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009be4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009bec:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	015a      	lsls	r2, r3, #5
 8009bf2:	6a3b      	ldr	r3, [r7, #32]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009c00:	79fb      	ldrb	r3, [r7, #7]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d001      	beq.n	8009c0a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	e04e      	b.n	8009ca8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	78db      	ldrb	r3, [r3, #3]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d149      	bne.n	8009ca6 <USB_HC_StartXfer+0x276>
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d045      	beq.n	8009ca6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	79db      	ldrb	r3, [r3, #7]
 8009c1e:	2b03      	cmp	r3, #3
 8009c20:	d830      	bhi.n	8009c84 <USB_HC_StartXfer+0x254>
 8009c22:	a201      	add	r2, pc, #4	; (adr r2, 8009c28 <USB_HC_StartXfer+0x1f8>)
 8009c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c28:	08009c39 	.word	0x08009c39
 8009c2c:	08009c5d 	.word	0x08009c5d
 8009c30:	08009c39 	.word	0x08009c39
 8009c34:	08009c5d 	.word	0x08009c5d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	695b      	ldr	r3, [r3, #20]
 8009c3c:	3303      	adds	r3, #3
 8009c3e:	089b      	lsrs	r3, r3, #2
 8009c40:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009c42:	8afa      	ldrh	r2, [r7, #22]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d91c      	bls.n	8009c88 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	f043 0220 	orr.w	r2, r3, #32
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	619a      	str	r2, [r3, #24]
        }
        break;
 8009c5a:	e015      	b.n	8009c88 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	695b      	ldr	r3, [r3, #20]
 8009c60:	3303      	adds	r3, #3
 8009c62:	089b      	lsrs	r3, r3, #2
 8009c64:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009c66:	8afa      	ldrh	r2, [r7, #22]
 8009c68:	6a3b      	ldr	r3, [r7, #32]
 8009c6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d90a      	bls.n	8009c8c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	699b      	ldr	r3, [r3, #24]
 8009c7a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	619a      	str	r2, [r3, #24]
        }
        break;
 8009c82:	e003      	b.n	8009c8c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009c84:	bf00      	nop
 8009c86:	e002      	b.n	8009c8e <USB_HC_StartXfer+0x25e>
        break;
 8009c88:	bf00      	nop
 8009c8a:	e000      	b.n	8009c8e <USB_HC_StartXfer+0x25e>
        break;
 8009c8c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	68d9      	ldr	r1, [r3, #12]
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	785a      	ldrb	r2, [r3, #1]
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	695b      	ldr	r3, [r3, #20]
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	2000      	movs	r0, #0
 8009c9e:	9000      	str	r0, [sp, #0]
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f7ff fb31 	bl	8009308 <USB_WritePacket>
  }

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3728      	adds	r7, #40	; 0x28
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	1ff80000 	.word	0x1ff80000

08009cb4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cc6:	695b      	ldr	r3, [r3, #20]
 8009cc8:	b29b      	uxth	r3, r3
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3714      	adds	r7, #20
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009cd6:	b480      	push	{r7}
 8009cd8:	b089      	sub	sp, #36	; 0x24
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
 8009cde:	460b      	mov	r3, r1
 8009ce0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009ce6:	78fb      	ldrb	r3, [r7, #3]
 8009ce8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009cea:	2300      	movs	r3, #0
 8009cec:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	015a      	lsls	r2, r3, #5
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	0c9b      	lsrs	r3, r3, #18
 8009cfe:	f003 0303 	and.w	r3, r3, #3
 8009d02:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009d04:	69bb      	ldr	r3, [r7, #24]
 8009d06:	015a      	lsls	r2, r3, #5
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	0fdb      	lsrs	r3, r3, #31
 8009d14:	f003 0301 	and.w	r3, r3, #1
 8009d18:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	f003 0320 	and.w	r3, r3, #32
 8009d22:	2b20      	cmp	r3, #32
 8009d24:	d104      	bne.n	8009d30 <USB_HC_Halt+0x5a>
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d101      	bne.n	8009d30 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	e0c8      	b.n	8009ec2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d002      	beq.n	8009d3c <USB_HC_Halt+0x66>
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d163      	bne.n	8009e04 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	015a      	lsls	r2, r3, #5
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	4413      	add	r3, r2
 8009d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	69ba      	ldr	r2, [r7, #24]
 8009d4c:	0151      	lsls	r1, r2, #5
 8009d4e:	69fa      	ldr	r2, [r7, #28]
 8009d50:	440a      	add	r2, r1
 8009d52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d5a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f003 0320 	and.w	r3, r3, #32
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f040 80ab 	bne.w	8009ec0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d133      	bne.n	8009dde <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	015a      	lsls	r2, r3, #5
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	69ba      	ldr	r2, [r7, #24]
 8009d86:	0151      	lsls	r1, r2, #5
 8009d88:	69fa      	ldr	r2, [r7, #28]
 8009d8a:	440a      	add	r2, r1
 8009d8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d94:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	015a      	lsls	r2, r3, #5
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	69ba      	ldr	r2, [r7, #24]
 8009da6:	0151      	lsls	r1, r2, #5
 8009da8:	69fa      	ldr	r2, [r7, #28]
 8009daa:	440a      	add	r2, r1
 8009dac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009db0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009db4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	3301      	adds	r3, #1
 8009dba:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009dc2:	d81d      	bhi.n	8009e00 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	015a      	lsls	r2, r3, #5
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	4413      	add	r3, r2
 8009dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009dda:	d0ec      	beq.n	8009db6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009ddc:	e070      	b.n	8009ec0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	015a      	lsls	r2, r3, #5
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	4413      	add	r3, r2
 8009de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	69ba      	ldr	r2, [r7, #24]
 8009dee:	0151      	lsls	r1, r2, #5
 8009df0:	69fa      	ldr	r2, [r7, #28]
 8009df2:	440a      	add	r2, r1
 8009df4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009df8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009dfc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009dfe:	e05f      	b.n	8009ec0 <USB_HC_Halt+0x1ea>
            break;
 8009e00:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009e02:	e05d      	b.n	8009ec0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	015a      	lsls	r2, r3, #5
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	69ba      	ldr	r2, [r7, #24]
 8009e14:	0151      	lsls	r1, r2, #5
 8009e16:	69fa      	ldr	r2, [r7, #28]
 8009e18:	440a      	add	r2, r1
 8009e1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e22:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d133      	bne.n	8009e9c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	015a      	lsls	r2, r3, #5
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	69ba      	ldr	r2, [r7, #24]
 8009e44:	0151      	lsls	r1, r2, #5
 8009e46:	69fa      	ldr	r2, [r7, #28]
 8009e48:	440a      	add	r2, r1
 8009e4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e52:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	69ba      	ldr	r2, [r7, #24]
 8009e64:	0151      	lsls	r1, r2, #5
 8009e66:	69fa      	ldr	r2, [r7, #28]
 8009e68:	440a      	add	r2, r1
 8009e6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e72:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	3301      	adds	r3, #1
 8009e78:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e80:	d81d      	bhi.n	8009ebe <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	015a      	lsls	r2, r3, #5
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	4413      	add	r3, r2
 8009e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e98:	d0ec      	beq.n	8009e74 <USB_HC_Halt+0x19e>
 8009e9a:	e011      	b.n	8009ec0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	015a      	lsls	r2, r3, #5
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	69ba      	ldr	r2, [r7, #24]
 8009eac:	0151      	lsls	r1, r2, #5
 8009eae:	69fa      	ldr	r2, [r7, #28]
 8009eb0:	440a      	add	r2, r1
 8009eb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009eb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009eba:	6013      	str	r3, [r2, #0]
 8009ebc:	e000      	b.n	8009ec0 <USB_HC_Halt+0x1ea>
          break;
 8009ebe:	bf00      	nop
    }
  }

  return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3724      	adds	r7, #36	; 0x24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
	...

08009ed0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b087      	sub	sp, #28
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	460b      	mov	r3, r1
 8009eda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009ee0:	78fb      	ldrb	r3, [r7, #3]
 8009ee2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	04da      	lsls	r2, r3, #19
 8009eec:	4b15      	ldr	r3, [pc, #84]	; (8009f44 <USB_DoPing+0x74>)
 8009eee:	4013      	ands	r3, r2
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	0151      	lsls	r1, r2, #5
 8009ef4:	697a      	ldr	r2, [r7, #20]
 8009ef6:	440a      	add	r2, r1
 8009ef8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f00:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	015a      	lsls	r2, r3, #5
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	4413      	add	r3, r2
 8009f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f18:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f20:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	015a      	lsls	r2, r3, #5
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	4413      	add	r3, r2
 8009f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f2e:	461a      	mov	r2, r3
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	371c      	adds	r7, #28
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	1ff80000 	.word	0x1ff80000

08009f48 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b088      	sub	sp, #32
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7ff f911 	bl	8009184 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f62:	2110      	movs	r1, #16
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f7ff f96b 	bl	8009240 <USB_FlushTxFifo>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f7ff f997 	bl	80092a8 <USB_FlushRxFifo>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009f84:	2300      	movs	r3, #0
 8009f86:	61bb      	str	r3, [r7, #24]
 8009f88:	e01f      	b.n	8009fca <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	015a      	lsls	r2, r3, #5
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	4413      	add	r3, r2
 8009f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fa0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fa8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009fb0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	015a      	lsls	r2, r3, #5
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	4413      	add	r3, r2
 8009fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	61bb      	str	r3, [r7, #24]
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	2b0f      	cmp	r3, #15
 8009fce:	d9dc      	bls.n	8009f8a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	61bb      	str	r3, [r7, #24]
 8009fd4:	e034      	b.n	800a040 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	015a      	lsls	r2, r3, #5
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	4413      	add	r3, r2
 8009fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ff4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ffc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	015a      	lsls	r2, r3, #5
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	4413      	add	r3, r2
 800a006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a00a:	461a      	mov	r2, r3
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	3301      	adds	r3, #1
 800a014:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a01c:	d80c      	bhi.n	800a038 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	015a      	lsls	r2, r3, #5
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	4413      	add	r3, r2
 800a026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a030:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a034:	d0ec      	beq.n	800a010 <USB_StopHost+0xc8>
 800a036:	e000      	b.n	800a03a <USB_StopHost+0xf2>
        break;
 800a038:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	3301      	adds	r3, #1
 800a03e:	61bb      	str	r3, [r7, #24]
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	2b0f      	cmp	r3, #15
 800a044:	d9c7      	bls.n	8009fd6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a04c:	461a      	mov	r2, r3
 800a04e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a052:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a05a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7ff f880 	bl	8009162 <USB_EnableGlobalInt>

  return ret;
 800a062:	7ffb      	ldrb	r3, [r7, #31]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3720      	adds	r7, #32
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a06c:	b590      	push	{r4, r7, lr}
 800a06e:	b089      	sub	sp, #36	; 0x24
 800a070:	af04      	add	r7, sp, #16
 800a072:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a074:	2301      	movs	r3, #1
 800a076:	2202      	movs	r2, #2
 800a078:	2102      	movs	r1, #2
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 fc66 	bl	800a94c <USBH_FindInterface>
 800a080:	4603      	mov	r3, r0
 800a082:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a084:	7bfb      	ldrb	r3, [r7, #15]
 800a086:	2bff      	cmp	r3, #255	; 0xff
 800a088:	d002      	beq.n	800a090 <USBH_CDC_InterfaceInit+0x24>
 800a08a:	7bfb      	ldrb	r3, [r7, #15]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d901      	bls.n	800a094 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a090:	2302      	movs	r3, #2
 800a092:	e13d      	b.n	800a310 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a094:	7bfb      	ldrb	r3, [r7, #15]
 800a096:	4619      	mov	r1, r3
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 fc3b 	bl	800a914 <USBH_SelectInterface>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a0a2:	7bbb      	ldrb	r3, [r7, #14]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d001      	beq.n	800a0ac <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	e131      	b.n	800a310 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a0b2:	2050      	movs	r0, #80	; 0x50
 800a0b4:	f002 fafa 	bl	800c6ac <malloc>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0c2:	69db      	ldr	r3, [r3, #28]
 800a0c4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d101      	bne.n	800a0d0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	e11f      	b.n	800a310 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a0d0:	2250      	movs	r2, #80	; 0x50
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	68b8      	ldr	r0, [r7, #8]
 800a0d6:	f002 faf9 	bl	800c6cc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a0da:	7bfb      	ldrb	r3, [r7, #15]
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	211a      	movs	r1, #26
 800a0e0:	fb01 f303 	mul.w	r3, r1, r3
 800a0e4:	4413      	add	r3, r2
 800a0e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	b25b      	sxtb	r3, r3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	da15      	bge.n	800a11e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a0f2:	7bfb      	ldrb	r3, [r7, #15]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	211a      	movs	r1, #26
 800a0f8:	fb01 f303 	mul.w	r3, r1, r3
 800a0fc:	4413      	add	r3, r2
 800a0fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a102:	781a      	ldrb	r2, [r3, #0]
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a108:	7bfb      	ldrb	r3, [r7, #15]
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	211a      	movs	r1, #26
 800a10e:	fb01 f303 	mul.w	r3, r1, r3
 800a112:	4413      	add	r3, r2
 800a114:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a118:	881a      	ldrh	r2, [r3, #0]
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	785b      	ldrb	r3, [r3, #1]
 800a122:	4619      	mov	r1, r3
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f001 ff2c 	bl	800bf82 <USBH_AllocPipe>
 800a12a:	4603      	mov	r3, r0
 800a12c:	461a      	mov	r2, r3
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	7819      	ldrb	r1, [r3, #0]
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	7858      	ldrb	r0, [r3, #1]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a146:	68ba      	ldr	r2, [r7, #8]
 800a148:	8952      	ldrh	r2, [r2, #10]
 800a14a:	9202      	str	r2, [sp, #8]
 800a14c:	2203      	movs	r2, #3
 800a14e:	9201      	str	r2, [sp, #4]
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	4623      	mov	r3, r4
 800a154:	4602      	mov	r2, r0
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f001 fee4 	bl	800bf24 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	2200      	movs	r2, #0
 800a162:	4619      	mov	r1, r3
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f002 f9f3 	bl	800c550 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a16a:	2300      	movs	r3, #0
 800a16c:	2200      	movs	r2, #0
 800a16e:	210a      	movs	r1, #10
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 fbeb 	bl	800a94c <USBH_FindInterface>
 800a176:	4603      	mov	r3, r0
 800a178:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a17a:	7bfb      	ldrb	r3, [r7, #15]
 800a17c:	2bff      	cmp	r3, #255	; 0xff
 800a17e:	d002      	beq.n	800a186 <USBH_CDC_InterfaceInit+0x11a>
 800a180:	7bfb      	ldrb	r3, [r7, #15]
 800a182:	2b01      	cmp	r3, #1
 800a184:	d901      	bls.n	800a18a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a186:	2302      	movs	r3, #2
 800a188:	e0c2      	b.n	800a310 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a18a:	7bfb      	ldrb	r3, [r7, #15]
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	211a      	movs	r1, #26
 800a190:	fb01 f303 	mul.w	r3, r1, r3
 800a194:	4413      	add	r3, r2
 800a196:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	b25b      	sxtb	r3, r3
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	da16      	bge.n	800a1d0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a1a2:	7bfb      	ldrb	r3, [r7, #15]
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	211a      	movs	r1, #26
 800a1a8:	fb01 f303 	mul.w	r3, r1, r3
 800a1ac:	4413      	add	r3, r2
 800a1ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a1b2:	781a      	ldrb	r2, [r3, #0]
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	211a      	movs	r1, #26
 800a1be:	fb01 f303 	mul.w	r3, r1, r3
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a1c8:	881a      	ldrh	r2, [r3, #0]
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	835a      	strh	r2, [r3, #26]
 800a1ce:	e015      	b.n	800a1fc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	211a      	movs	r1, #26
 800a1d6:	fb01 f303 	mul.w	r3, r1, r3
 800a1da:	4413      	add	r3, r2
 800a1dc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a1e0:	781a      	ldrb	r2, [r3, #0]
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a1e6:	7bfb      	ldrb	r3, [r7, #15]
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	211a      	movs	r1, #26
 800a1ec:	fb01 f303 	mul.w	r3, r1, r3
 800a1f0:	4413      	add	r3, r2
 800a1f2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a1f6:	881a      	ldrh	r2, [r3, #0]
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	211a      	movs	r1, #26
 800a202:	fb01 f303 	mul.w	r3, r1, r3
 800a206:	4413      	add	r3, r2
 800a208:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	b25b      	sxtb	r3, r3
 800a210:	2b00      	cmp	r3, #0
 800a212:	da16      	bge.n	800a242 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a214:	7bfb      	ldrb	r3, [r7, #15]
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	211a      	movs	r1, #26
 800a21a:	fb01 f303 	mul.w	r3, r1, r3
 800a21e:	4413      	add	r3, r2
 800a220:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a224:	781a      	ldrb	r2, [r3, #0]
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a22a:	7bfb      	ldrb	r3, [r7, #15]
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	211a      	movs	r1, #26
 800a230:	fb01 f303 	mul.w	r3, r1, r3
 800a234:	4413      	add	r3, r2
 800a236:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a23a:	881a      	ldrh	r2, [r3, #0]
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	835a      	strh	r2, [r3, #26]
 800a240:	e015      	b.n	800a26e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a242:	7bfb      	ldrb	r3, [r7, #15]
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	211a      	movs	r1, #26
 800a248:	fb01 f303 	mul.w	r3, r1, r3
 800a24c:	4413      	add	r3, r2
 800a24e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a252:	781a      	ldrb	r2, [r3, #0]
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a258:	7bfb      	ldrb	r3, [r7, #15]
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	211a      	movs	r1, #26
 800a25e:	fb01 f303 	mul.w	r3, r1, r3
 800a262:	4413      	add	r3, r2
 800a264:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a268:	881a      	ldrh	r2, [r3, #0]
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	7b9b      	ldrb	r3, [r3, #14]
 800a272:	4619      	mov	r1, r3
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f001 fe84 	bl	800bf82 <USBH_AllocPipe>
 800a27a:	4603      	mov	r3, r0
 800a27c:	461a      	mov	r2, r3
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	7bdb      	ldrb	r3, [r3, #15]
 800a286:	4619      	mov	r1, r3
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f001 fe7a 	bl	800bf82 <USBH_AllocPipe>
 800a28e:	4603      	mov	r3, r0
 800a290:	461a      	mov	r2, r3
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	7b59      	ldrb	r1, [r3, #13]
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	7b98      	ldrb	r0, [r3, #14]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	8b12      	ldrh	r2, [r2, #24]
 800a2ae:	9202      	str	r2, [sp, #8]
 800a2b0:	2202      	movs	r2, #2
 800a2b2:	9201      	str	r2, [sp, #4]
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	4623      	mov	r3, r4
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f001 fe32 	bl	800bf24 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	7b19      	ldrb	r1, [r3, #12]
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	7bd8      	ldrb	r0, [r3, #15]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	8b52      	ldrh	r2, [r2, #26]
 800a2d8:	9202      	str	r2, [sp, #8]
 800a2da:	2202      	movs	r2, #2
 800a2dc:	9201      	str	r2, [sp, #4]
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	4623      	mov	r3, r4
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f001 fe1d 	bl	800bf24 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	7b5b      	ldrb	r3, [r3, #13]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f002 f928 	bl	800c550 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	7b1b      	ldrb	r3, [r3, #12]
 800a304:	2200      	movs	r2, #0
 800a306:	4619      	mov	r1, r3
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f002 f921 	bl	800c550 <USBH_LL_SetToggle>

  return USBH_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3714      	adds	r7, #20
 800a314:	46bd      	mov	sp, r7
 800a316:	bd90      	pop	{r4, r7, pc}

0800a318 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a326:	69db      	ldr	r3, [r3, #28]
 800a328:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00e      	beq.n	800a350 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	4619      	mov	r1, r3
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f001 fe12 	bl	800bf62 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	4619      	mov	r1, r3
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f001 fe3d 	bl	800bfc4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	7b1b      	ldrb	r3, [r3, #12]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00e      	beq.n	800a376 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	7b1b      	ldrb	r3, [r3, #12]
 800a35c:	4619      	mov	r1, r3
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f001 fdff 	bl	800bf62 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	7b1b      	ldrb	r3, [r3, #12]
 800a368:	4619      	mov	r1, r3
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f001 fe2a 	bl	800bfc4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2200      	movs	r2, #0
 800a374:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	7b5b      	ldrb	r3, [r3, #13]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00e      	beq.n	800a39c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	7b5b      	ldrb	r3, [r3, #13]
 800a382:	4619      	mov	r1, r3
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f001 fdec 	bl	800bf62 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	7b5b      	ldrb	r3, [r3, #13]
 800a38e:	4619      	mov	r1, r3
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f001 fe17 	bl	800bfc4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2200      	movs	r2, #0
 800a39a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3a2:	69db      	ldr	r3, [r3, #28]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00b      	beq.n	800a3c0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3ae:	69db      	ldr	r3, [r3, #28]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f002 f983 	bl	800c6bc <free>
    phost->pActiveClass->pData = 0U;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3bc:	2200      	movs	r2, #0
 800a3be:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b084      	sub	sp, #16
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3d8:	69db      	ldr	r3, [r3, #28]
 800a3da:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	3340      	adds	r3, #64	; 0x40
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f8b1 	bl	800a54a <GetLineCoding>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a3ec:	7afb      	ldrb	r3, [r7, #11]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d105      	bne.n	800a3fe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a3f8:	2102      	movs	r1, #2
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a3fe:	7afb      	ldrb	r3, [r7, #11]
}
 800a400:	4618      	mov	r0, r3
 800a402:	3710      	adds	r7, #16
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a410:	2301      	movs	r3, #1
 800a412:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a414:	2300      	movs	r3, #0
 800a416:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a41e:	69db      	ldr	r3, [r3, #28]
 800a420:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a428:	2b04      	cmp	r3, #4
 800a42a:	d877      	bhi.n	800a51c <USBH_CDC_Process+0x114>
 800a42c:	a201      	add	r2, pc, #4	; (adr r2, 800a434 <USBH_CDC_Process+0x2c>)
 800a42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a432:	bf00      	nop
 800a434:	0800a449 	.word	0x0800a449
 800a438:	0800a44f 	.word	0x0800a44f
 800a43c:	0800a47f 	.word	0x0800a47f
 800a440:	0800a4f3 	.word	0x0800a4f3
 800a444:	0800a501 	.word	0x0800a501
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a448:	2300      	movs	r3, #0
 800a44a:	73fb      	strb	r3, [r7, #15]
      break;
 800a44c:	e06d      	b.n	800a52a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a452:	4619      	mov	r1, r3
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 f897 	bl	800a588 <SetLineCoding>
 800a45a:	4603      	mov	r3, r0
 800a45c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a45e:	7bbb      	ldrb	r3, [r7, #14]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d104      	bne.n	800a46e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	2202      	movs	r2, #2
 800a468:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a46c:	e058      	b.n	800a520 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a46e:	7bbb      	ldrb	r3, [r7, #14]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d055      	beq.n	800a520 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	2204      	movs	r2, #4
 800a478:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a47c:	e050      	b.n	800a520 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	3340      	adds	r3, #64	; 0x40
 800a482:	4619      	mov	r1, r3
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 f860 	bl	800a54a <GetLineCoding>
 800a48a:	4603      	mov	r3, r0
 800a48c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a48e:	7bbb      	ldrb	r3, [r7, #14]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d126      	bne.n	800a4e2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4a6:	791b      	ldrb	r3, [r3, #4]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d13b      	bne.n	800a524 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4b6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d133      	bne.n	800a524 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4c6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d12b      	bne.n	800a524 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4d4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d124      	bne.n	800a524 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 f958 	bl	800a790 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a4e0:	e020      	b.n	800a524 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a4e2:	7bbb      	ldrb	r3, [r7, #14]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d01d      	beq.n	800a524 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	2204      	movs	r2, #4
 800a4ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a4f0:	e018      	b.n	800a524 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 f867 	bl	800a5c6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 f8da 	bl	800a6b2 <CDC_ProcessReception>
      break;
 800a4fe:	e014      	b.n	800a52a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a500:	2100      	movs	r1, #0
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 ffef 	bl	800b4e6 <USBH_ClrFeature>
 800a508:	4603      	mov	r3, r0
 800a50a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a50c:	7bbb      	ldrb	r3, [r7, #14]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10a      	bne.n	800a528 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	2200      	movs	r2, #0
 800a516:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a51a:	e005      	b.n	800a528 <USBH_CDC_Process+0x120>

    default:
      break;
 800a51c:	bf00      	nop
 800a51e:	e004      	b.n	800a52a <USBH_CDC_Process+0x122>
      break;
 800a520:	bf00      	nop
 800a522:	e002      	b.n	800a52a <USBH_CDC_Process+0x122>
      break;
 800a524:	bf00      	nop
 800a526:	e000      	b.n	800a52a <USBH_CDC_Process+0x122>
      break;
 800a528:	bf00      	nop

  }

  return status;
 800a52a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3710      	adds	r7, #16
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b082      	sub	sp, #8
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
 800a552:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	22a1      	movs	r2, #161	; 0xa1
 800a558:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2221      	movs	r2, #33	; 0x21
 800a55e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2207      	movs	r2, #7
 800a570:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	2207      	movs	r2, #7
 800a576:	4619      	mov	r1, r3
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f001 fa81 	bl	800ba80 <USBH_CtlReq>
 800a57e:	4603      	mov	r3, r0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3708      	adds	r7, #8
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2221      	movs	r2, #33	; 0x21
 800a596:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2220      	movs	r2, #32
 800a59c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2207      	movs	r2, #7
 800a5ae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	2207      	movs	r2, #7
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f001 fa62 	bl	800ba80 <USBH_CtlReq>
 800a5bc:	4603      	mov	r3, r0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b086      	sub	sp, #24
 800a5ca:	af02      	add	r7, sp, #8
 800a5cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5d4:	69db      	ldr	r3, [r3, #28]
 800a5d6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d002      	beq.n	800a5ec <CDC_ProcessTransmission+0x26>
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	d023      	beq.n	800a632 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a5ea:	e05e      	b.n	800a6aa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	8b12      	ldrh	r2, [r2, #24]
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d90b      	bls.n	800a610 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	69d9      	ldr	r1, [r3, #28]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	8b1a      	ldrh	r2, [r3, #24]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	7b5b      	ldrb	r3, [r3, #13]
 800a604:	2001      	movs	r0, #1
 800a606:	9000      	str	r0, [sp, #0]
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f001 fc48 	bl	800be9e <USBH_BulkSendData>
 800a60e:	e00b      	b.n	800a628 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800a618:	b29a      	uxth	r2, r3
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	7b5b      	ldrb	r3, [r3, #13]
 800a61e:	2001      	movs	r0, #1
 800a620:	9000      	str	r0, [sp, #0]
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f001 fc3b 	bl	800be9e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2202      	movs	r2, #2
 800a62c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a630:	e03b      	b.n	800a6aa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	7b5b      	ldrb	r3, [r3, #13]
 800a636:	4619      	mov	r1, r3
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f001 ff5f 	bl	800c4fc <USBH_LL_GetURBState>
 800a63e:	4603      	mov	r3, r0
 800a640:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a642:	7afb      	ldrb	r3, [r7, #11]
 800a644:	2b01      	cmp	r3, #1
 800a646:	d128      	bne.n	800a69a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64c:	68fa      	ldr	r2, [r7, #12]
 800a64e:	8b12      	ldrh	r2, [r2, #24]
 800a650:	4293      	cmp	r3, r2
 800a652:	d90e      	bls.n	800a672 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	8b12      	ldrh	r2, [r2, #24]
 800a65c:	1a9a      	subs	r2, r3, r2
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	69db      	ldr	r3, [r3, #28]
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	8b12      	ldrh	r2, [r2, #24]
 800a66a:	441a      	add	r2, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	61da      	str	r2, [r3, #28]
 800a670:	e002      	b.n	800a678 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2200      	movs	r2, #0
 800a676:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d004      	beq.n	800a68a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a688:	e00e      	b.n	800a6a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f868 	bl	800a768 <USBH_CDC_TransmitCallback>
      break;
 800a698:	e006      	b.n	800a6a8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a69a:	7afb      	ldrb	r3, [r7, #11]
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d103      	bne.n	800a6a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a6a8:	bf00      	nop
  }
}
 800a6aa:	bf00      	nop
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b086      	sub	sp, #24
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6c0:	69db      	ldr	r3, [r3, #28]
 800a6c2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a6ce:	2b03      	cmp	r3, #3
 800a6d0:	d002      	beq.n	800a6d8 <CDC_ProcessReception+0x26>
 800a6d2:	2b04      	cmp	r3, #4
 800a6d4:	d00e      	beq.n	800a6f4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a6d6:	e043      	b.n	800a760 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	6a19      	ldr	r1, [r3, #32]
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	8b5a      	ldrh	r2, [r3, #26]
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	7b1b      	ldrb	r3, [r3, #12]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f001 fbff 	bl	800bee8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	2204      	movs	r2, #4
 800a6ee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a6f2:	e035      	b.n	800a760 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	7b1b      	ldrb	r3, [r3, #12]
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f001 fefe 	bl	800c4fc <USBH_LL_GetURBState>
 800a700:	4603      	mov	r3, r0
 800a702:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a704:	7cfb      	ldrb	r3, [r7, #19]
 800a706:	2b01      	cmp	r3, #1
 800a708:	d129      	bne.n	800a75e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	7b1b      	ldrb	r3, [r3, #12]
 800a70e:	4619      	mov	r1, r3
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f001 fe61 	bl	800c3d8 <USBH_LL_GetLastXferSize>
 800a716:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d016      	beq.n	800a750 <CDC_ProcessReception+0x9e>
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	8b5b      	ldrh	r3, [r3, #26]
 800a726:	461a      	mov	r2, r3
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d910      	bls.n	800a750 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	1ad2      	subs	r2, r2, r3
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	6a1a      	ldr	r2, [r3, #32]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	441a      	add	r2, r3
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	2203      	movs	r2, #3
 800a74a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a74e:	e006      	b.n	800a75e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 f80f 	bl	800a77c <USBH_CDC_ReceiveCallback>
      break;
 800a75e:	bf00      	nop
  }
}
 800a760:	bf00      	nop
 800a762:	3718      	adds	r7, #24
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a770:	bf00      	nop
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a784:	bf00      	nop
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a798:	bf00      	nop
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d101      	bne.n	800a7bc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a7b8:	2302      	movs	r3, #2
 800a7ba:	e029      	b.n	800a810 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	79fa      	ldrb	r2, [r7, #7]
 800a7c0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	f000 f81f 	bl	800a818 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d003      	beq.n	800a808 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f001 fd31 	bl	800c270 <USBH_LL_Init>

  return USBH_OK;
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	3710      	adds	r7, #16
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a820:	2300      	movs	r3, #0
 800a822:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a824:	2300      	movs	r3, #0
 800a826:	60fb      	str	r3, [r7, #12]
 800a828:	e009      	b.n	800a83e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	33e0      	adds	r3, #224	; 0xe0
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	4413      	add	r3, r2
 800a834:	2200      	movs	r2, #0
 800a836:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	3301      	adds	r3, #1
 800a83c:	60fb      	str	r3, [r7, #12]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2b0f      	cmp	r3, #15
 800a842:	d9f2      	bls.n	800a82a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a844:	2300      	movs	r3, #0
 800a846:	60fb      	str	r3, [r7, #12]
 800a848:	e009      	b.n	800a85e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	4413      	add	r3, r2
 800a850:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a854:	2200      	movs	r2, #0
 800a856:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	3301      	adds	r3, #1
 800a85c:	60fb      	str	r3, [r7, #12]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a864:	d3f1      	bcc.n	800a84a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2240      	movs	r2, #64	; 0x40
 800a88a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3714      	adds	r7, #20
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b085      	sub	sp, #20
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d016      	beq.n	800a902 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d10e      	bne.n	800a8fc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a8e4:	1c59      	adds	r1, r3, #1
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	33de      	adds	r3, #222	; 0xde
 800a8f0:	6839      	ldr	r1, [r7, #0]
 800a8f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	73fb      	strb	r3, [r7, #15]
 800a8fa:	e004      	b.n	800a906 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a8fc:	2302      	movs	r3, #2
 800a8fe:	73fb      	strb	r3, [r7, #15]
 800a900:	e001      	b.n	800a906 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a902:	2302      	movs	r3, #2
 800a904:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a906:	7bfb      	ldrb	r3, [r7, #15]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3714      	adds	r7, #20
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a914:	b480      	push	{r7}
 800a916:	b085      	sub	sp, #20
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	460b      	mov	r3, r1
 800a91e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a920:	2300      	movs	r3, #0
 800a922:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a92a:	78fa      	ldrb	r2, [r7, #3]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d204      	bcs.n	800a93a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	78fa      	ldrb	r2, [r7, #3]
 800a934:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a938:	e001      	b.n	800a93e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a93a:	2302      	movs	r3, #2
 800a93c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a93e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a940:	4618      	mov	r0, r3
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	4608      	mov	r0, r1
 800a956:	4611      	mov	r1, r2
 800a958:	461a      	mov	r2, r3
 800a95a:	4603      	mov	r3, r0
 800a95c:	70fb      	strb	r3, [r7, #3]
 800a95e:	460b      	mov	r3, r1
 800a960:	70bb      	strb	r3, [r7, #2]
 800a962:	4613      	mov	r3, r2
 800a964:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a966:	2300      	movs	r3, #0
 800a968:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a96a:	2300      	movs	r3, #0
 800a96c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a974:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a976:	e025      	b.n	800a9c4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a978:	7dfb      	ldrb	r3, [r7, #23]
 800a97a:	221a      	movs	r2, #26
 800a97c:	fb02 f303 	mul.w	r3, r2, r3
 800a980:	3308      	adds	r3, #8
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	4413      	add	r3, r2
 800a986:	3302      	adds	r3, #2
 800a988:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	795b      	ldrb	r3, [r3, #5]
 800a98e:	78fa      	ldrb	r2, [r7, #3]
 800a990:	429a      	cmp	r2, r3
 800a992:	d002      	beq.n	800a99a <USBH_FindInterface+0x4e>
 800a994:	78fb      	ldrb	r3, [r7, #3]
 800a996:	2bff      	cmp	r3, #255	; 0xff
 800a998:	d111      	bne.n	800a9be <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a99e:	78ba      	ldrb	r2, [r7, #2]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d002      	beq.n	800a9aa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a9a4:	78bb      	ldrb	r3, [r7, #2]
 800a9a6:	2bff      	cmp	r3, #255	; 0xff
 800a9a8:	d109      	bne.n	800a9be <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a9ae:	787a      	ldrb	r2, [r7, #1]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d002      	beq.n	800a9ba <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a9b4:	787b      	ldrb	r3, [r7, #1]
 800a9b6:	2bff      	cmp	r3, #255	; 0xff
 800a9b8:	d101      	bne.n	800a9be <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a9ba:	7dfb      	ldrb	r3, [r7, #23]
 800a9bc:	e006      	b.n	800a9cc <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a9be:	7dfb      	ldrb	r3, [r7, #23]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a9c4:	7dfb      	ldrb	r3, [r7, #23]
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d9d6      	bls.n	800a978 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a9ca:	23ff      	movs	r3, #255	; 0xff
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	371c      	adds	r7, #28
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f001 fc81 	bl	800c2e8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a9e6:	2101      	movs	r1, #1
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f001 fd9a 	bl	800c522 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3708      	adds	r7, #8
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b088      	sub	sp, #32
 800a9fc:	af04      	add	r7, sp, #16
 800a9fe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800aa00:	2302      	movs	r3, #2
 800aa02:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800aa04:	2300      	movs	r3, #0
 800aa06:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d102      	bne.n	800aa1a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2203      	movs	r2, #3
 800aa18:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b0b      	cmp	r3, #11
 800aa22:	f200 81be 	bhi.w	800ada2 <USBH_Process+0x3aa>
 800aa26:	a201      	add	r2, pc, #4	; (adr r2, 800aa2c <USBH_Process+0x34>)
 800aa28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa2c:	0800aa5d 	.word	0x0800aa5d
 800aa30:	0800aa8f 	.word	0x0800aa8f
 800aa34:	0800aaf7 	.word	0x0800aaf7
 800aa38:	0800ad3d 	.word	0x0800ad3d
 800aa3c:	0800ada3 	.word	0x0800ada3
 800aa40:	0800ab9b 	.word	0x0800ab9b
 800aa44:	0800ace3 	.word	0x0800ace3
 800aa48:	0800abd1 	.word	0x0800abd1
 800aa4c:	0800abf1 	.word	0x0800abf1
 800aa50:	0800ac11 	.word	0x0800ac11
 800aa54:	0800ac55 	.word	0x0800ac55
 800aa58:	0800ad25 	.word	0x0800ad25
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f000 819e 	beq.w	800ada6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800aa70:	20c8      	movs	r0, #200	; 0xc8
 800aa72:	f001 fd9d 	bl	800c5b0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f001 fc93 	bl	800c3a2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800aa8c:	e18b      	b.n	800ada6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d107      	bne.n	800aaa8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aaa6:	e18d      	b.n	800adc4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800aaae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aab2:	d914      	bls.n	800aade <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800aaba:	3301      	adds	r3, #1
 800aabc:	b2da      	uxtb	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800aaca:	2b03      	cmp	r3, #3
 800aacc:	d903      	bls.n	800aad6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	220d      	movs	r2, #13
 800aad2:	701a      	strb	r2, [r3, #0]
      break;
 800aad4:	e176      	b.n	800adc4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	701a      	strb	r2, [r3, #0]
      break;
 800aadc:	e172      	b.n	800adc4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800aae4:	f103 020a 	add.w	r2, r3, #10
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800aaee:	200a      	movs	r0, #10
 800aaf0:	f001 fd5e 	bl	800c5b0 <USBH_Delay>
      break;
 800aaf4:	e166      	b.n	800adc4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d005      	beq.n	800ab0c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab06:	2104      	movs	r1, #4
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ab0c:	2064      	movs	r0, #100	; 0x64
 800ab0e:	f001 fd4f 	bl	800c5b0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f001 fc1e 	bl	800c354 <USBH_LL_GetSpeed>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2205      	movs	r2, #5
 800ab26:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ab28:	2100      	movs	r1, #0
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f001 fa29 	bl	800bf82 <USBH_AllocPipe>
 800ab30:	4603      	mov	r3, r0
 800ab32:	461a      	mov	r2, r3
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ab38:	2180      	movs	r1, #128	; 0x80
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f001 fa21 	bl	800bf82 <USBH_AllocPipe>
 800ab40:	4603      	mov	r3, r0
 800ab42:	461a      	mov	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	7919      	ldrb	r1, [r3, #4]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ab5c:	b292      	uxth	r2, r2
 800ab5e:	9202      	str	r2, [sp, #8]
 800ab60:	2200      	movs	r2, #0
 800ab62:	9201      	str	r2, [sp, #4]
 800ab64:	9300      	str	r3, [sp, #0]
 800ab66:	4603      	mov	r3, r0
 800ab68:	2280      	movs	r2, #128	; 0x80
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f001 f9da 	bl	800bf24 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	7959      	ldrb	r1, [r3, #5]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ab84:	b292      	uxth	r2, r2
 800ab86:	9202      	str	r2, [sp, #8]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	9201      	str	r2, [sp, #4]
 800ab8c:	9300      	str	r3, [sp, #0]
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2200      	movs	r2, #0
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f001 f9c6 	bl	800bf24 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ab98:	e114      	b.n	800adc4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 f918 	bl	800add0 <USBH_HandleEnum>
 800aba0:	4603      	mov	r3, r0
 800aba2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800aba4:	7bbb      	ldrb	r3, [r7, #14]
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	f040 80fe 	bne.w	800adaa <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d103      	bne.n	800abc8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2208      	movs	r2, #8
 800abc4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800abc6:	e0f0      	b.n	800adaa <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2207      	movs	r2, #7
 800abcc:	701a      	strb	r2, [r3, #0]
      break;
 800abce:	e0ec      	b.n	800adaa <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f000 80e9 	beq.w	800adae <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800abe2:	2101      	movs	r1, #1
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2208      	movs	r2, #8
 800abec:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800abee:	e0de      	b.n	800adae <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	4619      	mov	r1, r3
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 fc2c 	bl	800b458 <USBH_SetCfg>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f040 80d5 	bne.w	800adb2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2209      	movs	r2, #9
 800ac0c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ac0e:	e0d0      	b.n	800adb2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ac16:	f003 0320 	and.w	r3, r3, #32
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d016      	beq.n	800ac4c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ac1e:	2101      	movs	r1, #1
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 fc3c 	bl	800b49e <USBH_SetFeature>
 800ac26:	4603      	mov	r3, r0
 800ac28:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ac2a:	7bbb      	ldrb	r3, [r7, #14]
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d103      	bne.n	800ac3a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	220a      	movs	r2, #10
 800ac36:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ac38:	e0bd      	b.n	800adb6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800ac3a:	7bbb      	ldrb	r3, [r7, #14]
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	f040 80b9 	bne.w	800adb6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	220a      	movs	r2, #10
 800ac48:	701a      	strb	r2, [r3, #0]
      break;
 800ac4a:	e0b4      	b.n	800adb6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	220a      	movs	r2, #10
 800ac50:	701a      	strb	r2, [r3, #0]
      break;
 800ac52:	e0b0      	b.n	800adb6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	f000 80ad 	beq.w	800adba <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ac68:	2300      	movs	r3, #0
 800ac6a:	73fb      	strb	r3, [r7, #15]
 800ac6c:	e016      	b.n	800ac9c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ac6e:	7bfa      	ldrb	r2, [r7, #15]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	32de      	adds	r2, #222	; 0xde
 800ac74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac78:	791a      	ldrb	r2, [r3, #4]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d108      	bne.n	800ac96 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ac84:	7bfa      	ldrb	r2, [r7, #15]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	32de      	adds	r2, #222	; 0xde
 800ac8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ac94:	e005      	b.n	800aca2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ac96:	7bfb      	ldrb	r3, [r7, #15]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	73fb      	strb	r3, [r7, #15]
 800ac9c:	7bfb      	ldrb	r3, [r7, #15]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d0e5      	beq.n	800ac6e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d016      	beq.n	800acda <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	4798      	blx	r3
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d109      	bne.n	800acd2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2206      	movs	r2, #6
 800acc2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800acca:	2103      	movs	r1, #3
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800acd0:	e073      	b.n	800adba <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	220d      	movs	r2, #13
 800acd6:	701a      	strb	r2, [r3, #0]
      break;
 800acd8:	e06f      	b.n	800adba <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	220d      	movs	r2, #13
 800acde:	701a      	strb	r2, [r3, #0]
      break;
 800ace0:	e06b      	b.n	800adba <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d017      	beq.n	800ad1c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acf2:	691b      	ldr	r3, [r3, #16]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	4798      	blx	r3
 800acf8:	4603      	mov	r3, r0
 800acfa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800acfc:	7bbb      	ldrb	r3, [r7, #14]
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d103      	bne.n	800ad0c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	220b      	movs	r2, #11
 800ad08:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ad0a:	e058      	b.n	800adbe <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800ad0c:	7bbb      	ldrb	r3, [r7, #14]
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	d154      	bne.n	800adbe <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	220d      	movs	r2, #13
 800ad18:	701a      	strb	r2, [r3, #0]
      break;
 800ad1a:	e050      	b.n	800adbe <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	220d      	movs	r2, #13
 800ad20:	701a      	strb	r2, [r3, #0]
      break;
 800ad22:	e04c      	b.n	800adbe <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d049      	beq.n	800adc2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad34:	695b      	ldr	r3, [r3, #20]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	4798      	blx	r3
      }
      break;
 800ad3a:	e042      	b.n	800adc2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f7ff fd67 	bl	800a818 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d009      	beq.n	800ad68 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d005      	beq.n	800ad7e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad78:	2105      	movs	r1, #5
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d107      	bne.n	800ad9a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f7ff fe20 	bl	800a9d8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ad98:	e014      	b.n	800adc4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f001 faa4 	bl	800c2e8 <USBH_LL_Start>
      break;
 800ada0:	e010      	b.n	800adc4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800ada2:	bf00      	nop
 800ada4:	e00e      	b.n	800adc4 <USBH_Process+0x3cc>
      break;
 800ada6:	bf00      	nop
 800ada8:	e00c      	b.n	800adc4 <USBH_Process+0x3cc>
      break;
 800adaa:	bf00      	nop
 800adac:	e00a      	b.n	800adc4 <USBH_Process+0x3cc>
    break;
 800adae:	bf00      	nop
 800adb0:	e008      	b.n	800adc4 <USBH_Process+0x3cc>
      break;
 800adb2:	bf00      	nop
 800adb4:	e006      	b.n	800adc4 <USBH_Process+0x3cc>
      break;
 800adb6:	bf00      	nop
 800adb8:	e004      	b.n	800adc4 <USBH_Process+0x3cc>
      break;
 800adba:	bf00      	nop
 800adbc:	e002      	b.n	800adc4 <USBH_Process+0x3cc>
      break;
 800adbe:	bf00      	nop
 800adc0:	e000      	b.n	800adc4 <USBH_Process+0x3cc>
      break;
 800adc2:	bf00      	nop
  }
  return USBH_OK;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop

0800add0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b088      	sub	sp, #32
 800add4:	af04      	add	r7, sp, #16
 800add6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800add8:	2301      	movs	r3, #1
 800adda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800addc:	2301      	movs	r3, #1
 800adde:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	785b      	ldrb	r3, [r3, #1]
 800ade4:	2b07      	cmp	r3, #7
 800ade6:	f200 81c1 	bhi.w	800b16c <USBH_HandleEnum+0x39c>
 800adea:	a201      	add	r2, pc, #4	; (adr r2, 800adf0 <USBH_HandleEnum+0x20>)
 800adec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf0:	0800ae11 	.word	0x0800ae11
 800adf4:	0800aecf 	.word	0x0800aecf
 800adf8:	0800af39 	.word	0x0800af39
 800adfc:	0800afc7 	.word	0x0800afc7
 800ae00:	0800b031 	.word	0x0800b031
 800ae04:	0800b0a1 	.word	0x0800b0a1
 800ae08:	0800b0e7 	.word	0x0800b0e7
 800ae0c:	0800b12d 	.word	0x0800b12d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ae10:	2108      	movs	r1, #8
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fa50 	bl	800b2b8 <USBH_Get_DevDesc>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae1c:	7bbb      	ldrb	r3, [r7, #14]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d130      	bne.n	800ae84 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	7919      	ldrb	r1, [r3, #4]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ae46:	b292      	uxth	r2, r2
 800ae48:	9202      	str	r2, [sp, #8]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	9201      	str	r2, [sp, #4]
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	4603      	mov	r3, r0
 800ae52:	2280      	movs	r2, #128	; 0x80
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f001 f865 	bl	800bf24 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	7959      	ldrb	r1, [r3, #5]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ae6e:	b292      	uxth	r2, r2
 800ae70:	9202      	str	r2, [sp, #8]
 800ae72:	2200      	movs	r2, #0
 800ae74:	9201      	str	r2, [sp, #4]
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f001 f851 	bl	800bf24 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ae82:	e175      	b.n	800b170 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae84:	7bbb      	ldrb	r3, [r7, #14]
 800ae86:	2b03      	cmp	r3, #3
 800ae88:	f040 8172 	bne.w	800b170 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae92:	3301      	adds	r3, #1
 800ae94:	b2da      	uxtb	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aea2:	2b03      	cmp	r3, #3
 800aea4:	d903      	bls.n	800aeae <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	220d      	movs	r2, #13
 800aeaa:	701a      	strb	r2, [r3, #0]
      break;
 800aeac:	e160      	b.n	800b170 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	795b      	ldrb	r3, [r3, #5]
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f001 f885 	bl	800bfc4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	791b      	ldrb	r3, [r3, #4]
 800aebe:	4619      	mov	r1, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f001 f87f 	bl	800bfc4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	701a      	strb	r2, [r3, #0]
      break;
 800aecc:	e150      	b.n	800b170 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800aece:	2112      	movs	r1, #18
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 f9f1 	bl	800b2b8 <USBH_Get_DevDesc>
 800aed6:	4603      	mov	r3, r0
 800aed8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aeda:	7bbb      	ldrb	r3, [r7, #14]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d103      	bne.n	800aee8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2202      	movs	r2, #2
 800aee4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aee6:	e145      	b.n	800b174 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aee8:	7bbb      	ldrb	r3, [r7, #14]
 800aeea:	2b03      	cmp	r3, #3
 800aeec:	f040 8142 	bne.w	800b174 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aef6:	3301      	adds	r3, #1
 800aef8:	b2da      	uxtb	r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af06:	2b03      	cmp	r3, #3
 800af08:	d903      	bls.n	800af12 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	220d      	movs	r2, #13
 800af0e:	701a      	strb	r2, [r3, #0]
      break;
 800af10:	e130      	b.n	800b174 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	795b      	ldrb	r3, [r3, #5]
 800af16:	4619      	mov	r1, r3
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f001 f853 	bl	800bfc4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	791b      	ldrb	r3, [r3, #4]
 800af22:	4619      	mov	r1, r3
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f001 f84d 	bl	800bfc4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	701a      	strb	r2, [r3, #0]
      break;
 800af36:	e11d      	b.n	800b174 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800af38:	2101      	movs	r1, #1
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fa68 	bl	800b410 <USBH_SetAddress>
 800af40:	4603      	mov	r3, r0
 800af42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800af44:	7bbb      	ldrb	r3, [r7, #14]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d132      	bne.n	800afb0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800af4a:	2002      	movs	r0, #2
 800af4c:	f001 fb30 	bl	800c5b0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2203      	movs	r2, #3
 800af5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	7919      	ldrb	r1, [r3, #4]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800af72:	b292      	uxth	r2, r2
 800af74:	9202      	str	r2, [sp, #8]
 800af76:	2200      	movs	r2, #0
 800af78:	9201      	str	r2, [sp, #4]
 800af7a:	9300      	str	r3, [sp, #0]
 800af7c:	4603      	mov	r3, r0
 800af7e:	2280      	movs	r2, #128	; 0x80
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 ffcf 	bl	800bf24 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	7959      	ldrb	r1, [r3, #5]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800af9a:	b292      	uxth	r2, r2
 800af9c:	9202      	str	r2, [sp, #8]
 800af9e:	2200      	movs	r2, #0
 800afa0:	9201      	str	r2, [sp, #4]
 800afa2:	9300      	str	r3, [sp, #0]
 800afa4:	4603      	mov	r3, r0
 800afa6:	2200      	movs	r2, #0
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 ffbb 	bl	800bf24 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800afae:	e0e3      	b.n	800b178 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800afb0:	7bbb      	ldrb	r3, [r7, #14]
 800afb2:	2b03      	cmp	r3, #3
 800afb4:	f040 80e0 	bne.w	800b178 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	220d      	movs	r2, #13
 800afbc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	705a      	strb	r2, [r3, #1]
      break;
 800afc4:	e0d8      	b.n	800b178 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800afc6:	2109      	movs	r1, #9
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 f99d 	bl	800b308 <USBH_Get_CfgDesc>
 800afce:	4603      	mov	r3, r0
 800afd0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800afd2:	7bbb      	ldrb	r3, [r7, #14]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d103      	bne.n	800afe0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2204      	movs	r2, #4
 800afdc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800afde:	e0cd      	b.n	800b17c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800afe0:	7bbb      	ldrb	r3, [r7, #14]
 800afe2:	2b03      	cmp	r3, #3
 800afe4:	f040 80ca 	bne.w	800b17c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800afee:	3301      	adds	r3, #1
 800aff0:	b2da      	uxtb	r2, r3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800affe:	2b03      	cmp	r3, #3
 800b000:	d903      	bls.n	800b00a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	220d      	movs	r2, #13
 800b006:	701a      	strb	r2, [r3, #0]
      break;
 800b008:	e0b8      	b.n	800b17c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	795b      	ldrb	r3, [r3, #5]
 800b00e:	4619      	mov	r1, r3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 ffd7 	bl	800bfc4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	791b      	ldrb	r3, [r3, #4]
 800b01a:	4619      	mov	r1, r3
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 ffd1 	bl	800bfc4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2200      	movs	r2, #0
 800b02c:	701a      	strb	r2, [r3, #0]
      break;
 800b02e:	e0a5      	b.n	800b17c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b036:	4619      	mov	r1, r3
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 f965 	bl	800b308 <USBH_Get_CfgDesc>
 800b03e:	4603      	mov	r3, r0
 800b040:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b042:	7bbb      	ldrb	r3, [r7, #14]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d103      	bne.n	800b050 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2205      	movs	r2, #5
 800b04c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b04e:	e097      	b.n	800b180 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b050:	7bbb      	ldrb	r3, [r7, #14]
 800b052:	2b03      	cmp	r3, #3
 800b054:	f040 8094 	bne.w	800b180 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b05e:	3301      	adds	r3, #1
 800b060:	b2da      	uxtb	r2, r3
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b06e:	2b03      	cmp	r3, #3
 800b070:	d903      	bls.n	800b07a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	220d      	movs	r2, #13
 800b076:	701a      	strb	r2, [r3, #0]
      break;
 800b078:	e082      	b.n	800b180 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	795b      	ldrb	r3, [r3, #5]
 800b07e:	4619      	mov	r1, r3
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 ff9f 	bl	800bfc4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	791b      	ldrb	r3, [r3, #4]
 800b08a:	4619      	mov	r1, r3
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 ff99 	bl	800bfc4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2200      	movs	r2, #0
 800b09c:	701a      	strb	r2, [r3, #0]
      break;
 800b09e:	e06f      	b.n	800b180 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d019      	beq.n	800b0de <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b0b6:	23ff      	movs	r3, #255	; 0xff
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 f949 	bl	800b350 <USBH_Get_StringDesc>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b0c2:	7bbb      	ldrb	r3, [r7, #14]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d103      	bne.n	800b0d0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2206      	movs	r2, #6
 800b0cc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b0ce:	e059      	b.n	800b184 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0d0:	7bbb      	ldrb	r3, [r7, #14]
 800b0d2:	2b03      	cmp	r3, #3
 800b0d4:	d156      	bne.n	800b184 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2206      	movs	r2, #6
 800b0da:	705a      	strb	r2, [r3, #1]
      break;
 800b0dc:	e052      	b.n	800b184 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2206      	movs	r2, #6
 800b0e2:	705a      	strb	r2, [r3, #1]
      break;
 800b0e4:	e04e      	b.n	800b184 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d019      	beq.n	800b124 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b0fc:	23ff      	movs	r3, #255	; 0xff
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 f926 	bl	800b350 <USBH_Get_StringDesc>
 800b104:	4603      	mov	r3, r0
 800b106:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b108:	7bbb      	ldrb	r3, [r7, #14]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d103      	bne.n	800b116 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2207      	movs	r2, #7
 800b112:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b114:	e038      	b.n	800b188 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b116:	7bbb      	ldrb	r3, [r7, #14]
 800b118:	2b03      	cmp	r3, #3
 800b11a:	d135      	bne.n	800b188 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2207      	movs	r2, #7
 800b120:	705a      	strb	r2, [r3, #1]
      break;
 800b122:	e031      	b.n	800b188 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2207      	movs	r2, #7
 800b128:	705a      	strb	r2, [r3, #1]
      break;
 800b12a:	e02d      	b.n	800b188 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b132:	2b00      	cmp	r3, #0
 800b134:	d017      	beq.n	800b166 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b142:	23ff      	movs	r3, #255	; 0xff
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 f903 	bl	800b350 <USBH_Get_StringDesc>
 800b14a:	4603      	mov	r3, r0
 800b14c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b14e:	7bbb      	ldrb	r3, [r7, #14]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d102      	bne.n	800b15a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b158:	e018      	b.n	800b18c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b15a:	7bbb      	ldrb	r3, [r7, #14]
 800b15c:	2b03      	cmp	r3, #3
 800b15e:	d115      	bne.n	800b18c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b160:	2300      	movs	r3, #0
 800b162:	73fb      	strb	r3, [r7, #15]
      break;
 800b164:	e012      	b.n	800b18c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b166:	2300      	movs	r3, #0
 800b168:	73fb      	strb	r3, [r7, #15]
      break;
 800b16a:	e00f      	b.n	800b18c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b16c:	bf00      	nop
 800b16e:	e00e      	b.n	800b18e <USBH_HandleEnum+0x3be>
      break;
 800b170:	bf00      	nop
 800b172:	e00c      	b.n	800b18e <USBH_HandleEnum+0x3be>
      break;
 800b174:	bf00      	nop
 800b176:	e00a      	b.n	800b18e <USBH_HandleEnum+0x3be>
      break;
 800b178:	bf00      	nop
 800b17a:	e008      	b.n	800b18e <USBH_HandleEnum+0x3be>
      break;
 800b17c:	bf00      	nop
 800b17e:	e006      	b.n	800b18e <USBH_HandleEnum+0x3be>
      break;
 800b180:	bf00      	nop
 800b182:	e004      	b.n	800b18e <USBH_HandleEnum+0x3be>
      break;
 800b184:	bf00      	nop
 800b186:	e002      	b.n	800b18e <USBH_HandleEnum+0x3be>
      break;
 800b188:	bf00      	nop
 800b18a:	e000      	b.n	800b18e <USBH_HandleEnum+0x3be>
      break;
 800b18c:	bf00      	nop
  }
  return Status;
 800b18e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b190:	4618      	mov	r0, r3
 800b192:	3710      	adds	r7, #16
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	683a      	ldr	r2, [r7, #0]
 800b1a6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b1aa:	bf00      	nop
 800b1ac:	370c      	adds	r7, #12
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr

0800b1b6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b082      	sub	sp, #8
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b1c4:	1c5a      	adds	r2, r3, #1
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 f804 	bl	800b1da <USBH_HandleSof>
}
 800b1d2:	bf00      	nop
 800b1d4:	3708      	adds	r7, #8
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b082      	sub	sp, #8
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	2b0b      	cmp	r3, #11
 800b1ea:	d10a      	bne.n	800b202 <USBH_HandleSof+0x28>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d005      	beq.n	800b202 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1fc:	699b      	ldr	r3, [r3, #24]
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	4798      	blx	r3
  }
}
 800b202:	bf00      	nop
 800b204:	3708      	adds	r7, #8
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b20a:	b480      	push	{r7}
 800b20c:	b083      	sub	sp, #12
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2201      	movs	r2, #1
 800b216:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b21a:	bf00      	nop
}
 800b21c:	370c      	adds	r7, #12
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr

0800b226 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b226:	b480      	push	{r7}
 800b228:	b083      	sub	sp, #12
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2200      	movs	r2, #0
 800b232:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b236:	bf00      	nop
}
 800b238:	370c      	adds	r7, #12
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr

0800b242 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b242:	b480      	push	{r7}
 800b244:	b083      	sub	sp, #12
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2201      	movs	r2, #1
 800b24e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2200      	movs	r2, #0
 800b256:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b262:	2300      	movs	r3, #0
}
 800b264:	4618      	mov	r0, r3
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f001 f844 	bl	800c31e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	791b      	ldrb	r3, [r3, #4]
 800b29a:	4619      	mov	r1, r3
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 fe91 	bl	800bfc4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	795b      	ldrb	r3, [r3, #5]
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 fe8b 	bl	800bfc4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b2ae:	2300      	movs	r3, #0
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af02      	add	r7, sp, #8
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b2ca:	78fb      	ldrb	r3, [r7, #3]
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 f864 	bl	800b3a6 <USBH_GetDescriptor>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800b2e2:	7bfb      	ldrb	r3, [r7, #15]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d10a      	bne.n	800b2fe <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b2f4:	78fa      	ldrb	r2, [r7, #3]
 800b2f6:	b292      	uxth	r2, r2
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	f000 f918 	bl	800b52e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b2fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b300:	4618      	mov	r0, r3
 800b302:	3710      	adds	r7, #16
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b086      	sub	sp, #24
 800b30c:	af02      	add	r7, sp, #8
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	460b      	mov	r3, r1
 800b312:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	331c      	adds	r3, #28
 800b318:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b31a:	887b      	ldrh	r3, [r7, #2]
 800b31c:	9300      	str	r3, [sp, #0]
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b324:	2100      	movs	r1, #0
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 f83d 	bl	800b3a6 <USBH_GetDescriptor>
 800b32c:	4603      	mov	r3, r0
 800b32e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b330:	7bfb      	ldrb	r3, [r7, #15]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d107      	bne.n	800b346 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b336:	887b      	ldrh	r3, [r7, #2]
 800b338:	461a      	mov	r2, r3
 800b33a:	68b9      	ldr	r1, [r7, #8]
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 f987 	bl	800b650 <USBH_ParseCfgDesc>
 800b342:	4603      	mov	r3, r0
 800b344:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b346:	7bfb      	ldrb	r3, [r7, #15]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b088      	sub	sp, #32
 800b354:	af02      	add	r7, sp, #8
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	607a      	str	r2, [r7, #4]
 800b35a:	461a      	mov	r2, r3
 800b35c:	460b      	mov	r3, r1
 800b35e:	72fb      	strb	r3, [r7, #11]
 800b360:	4613      	mov	r3, r2
 800b362:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800b364:	7afb      	ldrb	r3, [r7, #11]
 800b366:	b29b      	uxth	r3, r3
 800b368:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b36c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b374:	893b      	ldrh	r3, [r7, #8]
 800b376:	9300      	str	r3, [sp, #0]
 800b378:	460b      	mov	r3, r1
 800b37a:	2100      	movs	r1, #0
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	f000 f812 	bl	800b3a6 <USBH_GetDescriptor>
 800b382:	4603      	mov	r3, r0
 800b384:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b386:	7dfb      	ldrb	r3, [r7, #23]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d107      	bne.n	800b39c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b392:	893a      	ldrh	r2, [r7, #8]
 800b394:	6879      	ldr	r1, [r7, #4]
 800b396:	4618      	mov	r0, r3
 800b398:	f000 fb24 	bl	800b9e4 <USBH_ParseStringDesc>
  }

  return status;
 800b39c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3718      	adds	r7, #24
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b084      	sub	sp, #16
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	60f8      	str	r0, [r7, #12]
 800b3ae:	607b      	str	r3, [r7, #4]
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	72fb      	strb	r3, [r7, #11]
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	789b      	ldrb	r3, [r3, #2]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d11c      	bne.n	800b3fa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b3c0:	7afb      	ldrb	r3, [r7, #11]
 800b3c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b3c6:	b2da      	uxtb	r2, r3
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2206      	movs	r2, #6
 800b3d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	893a      	ldrh	r2, [r7, #8]
 800b3d6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b3d8:	893b      	ldrh	r3, [r7, #8]
 800b3da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b3de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3e2:	d104      	bne.n	800b3ee <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f240 4209 	movw	r2, #1033	; 0x409
 800b3ea:	829a      	strh	r2, [r3, #20]
 800b3ec:	e002      	b.n	800b3f4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	8b3a      	ldrh	r2, [r7, #24]
 800b3f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b3fa:	8b3b      	ldrh	r3, [r7, #24]
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	6879      	ldr	r1, [r7, #4]
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f000 fb3d 	bl	800ba80 <USBH_CtlReq>
 800b406:	4603      	mov	r3, r0
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3710      	adds	r7, #16
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	460b      	mov	r3, r1
 800b41a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	789b      	ldrb	r3, [r3, #2]
 800b420:	2b01      	cmp	r3, #1
 800b422:	d10f      	bne.n	800b444 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2205      	movs	r2, #5
 800b42e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b430:	78fb      	ldrb	r3, [r7, #3]
 800b432:	b29a      	uxth	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2200      	movs	r2, #0
 800b43c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2200      	movs	r2, #0
 800b442:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b444:	2200      	movs	r2, #0
 800b446:	2100      	movs	r1, #0
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 fb19 	bl	800ba80 <USBH_CtlReq>
 800b44e:	4603      	mov	r3, r0
}
 800b450:	4618      	mov	r0, r3
 800b452:	3708      	adds	r7, #8
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	460b      	mov	r3, r1
 800b462:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	789b      	ldrb	r3, [r3, #2]
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d10e      	bne.n	800b48a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2209      	movs	r2, #9
 800b476:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	887a      	ldrh	r2, [r7, #2]
 800b47c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b48a:	2200      	movs	r2, #0
 800b48c:	2100      	movs	r1, #0
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 faf6 	bl	800ba80 <USBH_CtlReq>
 800b494:	4603      	mov	r3, r0
}
 800b496:	4618      	mov	r0, r3
 800b498:	3708      	adds	r7, #8
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b082      	sub	sp, #8
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	789b      	ldrb	r3, [r3, #2]
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d10f      	bne.n	800b4d2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2203      	movs	r2, #3
 800b4bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b4be:	78fb      	ldrb	r3, [r7, #3]
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 fad2 	bl	800ba80 <USBH_CtlReq>
 800b4dc:	4603      	mov	r3, r0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3708      	adds	r7, #8
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}

0800b4e6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b4e6:	b580      	push	{r7, lr}
 800b4e8:	b082      	sub	sp, #8
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	789b      	ldrb	r3, [r3, #2]
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d10f      	bne.n	800b51a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2202      	movs	r2, #2
 800b4fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2201      	movs	r2, #1
 800b504:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2200      	movs	r2, #0
 800b50a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b50c:	78fb      	ldrb	r3, [r7, #3]
 800b50e:	b29a      	uxth	r2, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800b51a:	2200      	movs	r2, #0
 800b51c:	2100      	movs	r1, #0
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 faae 	bl	800ba80 <USBH_CtlReq>
 800b524:	4603      	mov	r3, r0
}
 800b526:	4618      	mov	r0, r3
 800b528:	3708      	adds	r7, #8
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b52e:	b480      	push	{r7}
 800b530:	b085      	sub	sp, #20
 800b532:	af00      	add	r7, sp, #0
 800b534:	60f8      	str	r0, [r7, #12]
 800b536:	60b9      	str	r1, [r7, #8]
 800b538:	4613      	mov	r3, r2
 800b53a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	781a      	ldrb	r2, [r3, #0]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	785a      	ldrb	r2, [r3, #1]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	3302      	adds	r3, #2
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	b29a      	uxth	r2, r3
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	3303      	adds	r3, #3
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	021b      	lsls	r3, r3, #8
 800b55e:	b29b      	uxth	r3, r3
 800b560:	4313      	orrs	r3, r2
 800b562:	b29a      	uxth	r2, r3
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	791a      	ldrb	r2, [r3, #4]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	795a      	ldrb	r2, [r3, #5]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	799a      	ldrb	r2, [r3, #6]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	79da      	ldrb	r2, [r3, #7]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	79db      	ldrb	r3, [r3, #7]
 800b58c:	2b20      	cmp	r3, #32
 800b58e:	dc11      	bgt.n	800b5b4 <USBH_ParseDevDesc+0x86>
 800b590:	2b08      	cmp	r3, #8
 800b592:	db16      	blt.n	800b5c2 <USBH_ParseDevDesc+0x94>
 800b594:	3b08      	subs	r3, #8
 800b596:	2201      	movs	r2, #1
 800b598:	fa02 f303 	lsl.w	r3, r2, r3
 800b59c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b5a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	bf14      	ite	ne
 800b5a8:	2301      	movne	r3, #1
 800b5aa:	2300      	moveq	r3, #0
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d102      	bne.n	800b5b8 <USBH_ParseDevDesc+0x8a>
 800b5b2:	e006      	b.n	800b5c2 <USBH_ParseDevDesc+0x94>
 800b5b4:	2b40      	cmp	r3, #64	; 0x40
 800b5b6:	d104      	bne.n	800b5c2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	79da      	ldrb	r2, [r3, #7]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	71da      	strb	r2, [r3, #7]
      break;
 800b5c0:	e003      	b.n	800b5ca <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2240      	movs	r2, #64	; 0x40
 800b5c6:	71da      	strb	r2, [r3, #7]
      break;
 800b5c8:	bf00      	nop
  }

  if (length > 8U)
 800b5ca:	88fb      	ldrh	r3, [r7, #6]
 800b5cc:	2b08      	cmp	r3, #8
 800b5ce:	d939      	bls.n	800b644 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	3308      	adds	r3, #8
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	b29a      	uxth	r2, r3
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	3309      	adds	r3, #9
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	021b      	lsls	r3, r3, #8
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	b29a      	uxth	r2, r3
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	330a      	adds	r3, #10
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	b29a      	uxth	r2, r3
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	330b      	adds	r3, #11
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	021b      	lsls	r3, r3, #8
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	4313      	orrs	r3, r2
 800b602:	b29a      	uxth	r2, r3
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	330c      	adds	r3, #12
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	b29a      	uxth	r2, r3
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	330d      	adds	r3, #13
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	b29b      	uxth	r3, r3
 800b618:	021b      	lsls	r3, r3, #8
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	4313      	orrs	r3, r2
 800b61e:	b29a      	uxth	r2, r3
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	7b9a      	ldrb	r2, [r3, #14]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	7bda      	ldrb	r2, [r3, #15]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	7c1a      	ldrb	r2, [r3, #16]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	7c5a      	ldrb	r2, [r3, #17]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	745a      	strb	r2, [r3, #17]
  }
}
 800b644:	bf00      	nop
 800b646:	3714      	adds	r7, #20
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b08c      	sub	sp, #48	; 0x30
 800b654:	af00      	add	r7, sp, #0
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	60b9      	str	r1, [r7, #8]
 800b65a:	4613      	mov	r3, r2
 800b65c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b664:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b666:	2300      	movs	r3, #0
 800b668:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b670:	2300      	movs	r3, #0
 800b672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b676:	2300      	movs	r3, #0
 800b678:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	781a      	ldrb	r2, [r3, #0]
 800b684:	6a3b      	ldr	r3, [r7, #32]
 800b686:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	785a      	ldrb	r2, [r3, #1]
 800b68c:	6a3b      	ldr	r3, [r7, #32]
 800b68e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	3302      	adds	r3, #2
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	b29a      	uxth	r2, r3
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	3303      	adds	r3, #3
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	021b      	lsls	r3, r3, #8
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6ac:	bf28      	it	cs
 800b6ae:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b6b2:	b29a      	uxth	r2, r3
 800b6b4:	6a3b      	ldr	r3, [r7, #32]
 800b6b6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	791a      	ldrb	r2, [r3, #4]
 800b6bc:	6a3b      	ldr	r3, [r7, #32]
 800b6be:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	795a      	ldrb	r2, [r3, #5]
 800b6c4:	6a3b      	ldr	r3, [r7, #32]
 800b6c6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	799a      	ldrb	r2, [r3, #6]
 800b6cc:	6a3b      	ldr	r3, [r7, #32]
 800b6ce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	79da      	ldrb	r2, [r3, #7]
 800b6d4:	6a3b      	ldr	r3, [r7, #32]
 800b6d6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	7a1a      	ldrb	r2, [r3, #8]
 800b6dc:	6a3b      	ldr	r3, [r7, #32]
 800b6de:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b6e0:	6a3b      	ldr	r3, [r7, #32]
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	2b09      	cmp	r3, #9
 800b6e6:	d002      	beq.n	800b6ee <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b6e8:	6a3b      	ldr	r3, [r7, #32]
 800b6ea:	2209      	movs	r2, #9
 800b6ec:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b6ee:	88fb      	ldrh	r3, [r7, #6]
 800b6f0:	2b09      	cmp	r3, #9
 800b6f2:	f240 809d 	bls.w	800b830 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800b6f6:	2309      	movs	r3, #9
 800b6f8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b6fe:	e081      	b.n	800b804 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b700:	f107 0316 	add.w	r3, r7, #22
 800b704:	4619      	mov	r1, r3
 800b706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b708:	f000 f99f 	bl	800ba4a <USBH_GetNextDesc>
 800b70c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b710:	785b      	ldrb	r3, [r3, #1]
 800b712:	2b04      	cmp	r3, #4
 800b714:	d176      	bne.n	800b804 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	2b09      	cmp	r3, #9
 800b71c:	d002      	beq.n	800b724 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b720:	2209      	movs	r2, #9
 800b722:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b728:	221a      	movs	r2, #26
 800b72a:	fb02 f303 	mul.w	r3, r2, r3
 800b72e:	3308      	adds	r3, #8
 800b730:	6a3a      	ldr	r2, [r7, #32]
 800b732:	4413      	add	r3, r2
 800b734:	3302      	adds	r3, #2
 800b736:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b73a:	69f8      	ldr	r0, [r7, #28]
 800b73c:	f000 f87e 	bl	800b83c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b740:	2300      	movs	r3, #0
 800b742:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b746:	2300      	movs	r3, #0
 800b748:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b74a:	e043      	b.n	800b7d4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b74c:	f107 0316 	add.w	r3, r7, #22
 800b750:	4619      	mov	r1, r3
 800b752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b754:	f000 f979 	bl	800ba4a <USBH_GetNextDesc>
 800b758:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75c:	785b      	ldrb	r3, [r3, #1]
 800b75e:	2b05      	cmp	r3, #5
 800b760:	d138      	bne.n	800b7d4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	795b      	ldrb	r3, [r3, #5]
 800b766:	2b01      	cmp	r3, #1
 800b768:	d10f      	bne.n	800b78a <USBH_ParseCfgDesc+0x13a>
 800b76a:	69fb      	ldr	r3, [r7, #28]
 800b76c:	799b      	ldrb	r3, [r3, #6]
 800b76e:	2b02      	cmp	r3, #2
 800b770:	d10b      	bne.n	800b78a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b772:	69fb      	ldr	r3, [r7, #28]
 800b774:	79db      	ldrb	r3, [r3, #7]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10f      	bne.n	800b79a <USBH_ParseCfgDesc+0x14a>
 800b77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	2b09      	cmp	r3, #9
 800b780:	d00b      	beq.n	800b79a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800b782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b784:	2209      	movs	r2, #9
 800b786:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b788:	e007      	b.n	800b79a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	2b07      	cmp	r3, #7
 800b790:	d004      	beq.n	800b79c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b794:	2207      	movs	r2, #7
 800b796:	701a      	strb	r2, [r3, #0]
 800b798:	e000      	b.n	800b79c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b79a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b79c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7a0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b7a4:	3201      	adds	r2, #1
 800b7a6:	00d2      	lsls	r2, r2, #3
 800b7a8:	211a      	movs	r1, #26
 800b7aa:	fb01 f303 	mul.w	r3, r1, r3
 800b7ae:	4413      	add	r3, r2
 800b7b0:	3308      	adds	r3, #8
 800b7b2:	6a3a      	ldr	r2, [r7, #32]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	3304      	adds	r3, #4
 800b7b8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b7ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7bc:	69b9      	ldr	r1, [r7, #24]
 800b7be:	68f8      	ldr	r0, [r7, #12]
 800b7c0:	f000 f86b 	bl	800b89a <USBH_ParseEPDesc>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800b7ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	791b      	ldrb	r3, [r3, #4]
 800b7d8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d204      	bcs.n	800b7ea <USBH_ParseCfgDesc+0x19a>
 800b7e0:	6a3b      	ldr	r3, [r7, #32]
 800b7e2:	885a      	ldrh	r2, [r3, #2]
 800b7e4:	8afb      	ldrh	r3, [r7, #22]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d8b0      	bhi.n	800b74c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b7ea:	69fb      	ldr	r3, [r7, #28]
 800b7ec:	791b      	ldrb	r3, [r3, #4]
 800b7ee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d201      	bcs.n	800b7fa <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800b7f6:	2303      	movs	r3, #3
 800b7f8:	e01c      	b.n	800b834 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800b7fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7fe:	3301      	adds	r3, #1
 800b800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d805      	bhi.n	800b818 <USBH_ParseCfgDesc+0x1c8>
 800b80c:	6a3b      	ldr	r3, [r7, #32]
 800b80e:	885a      	ldrh	r2, [r3, #2]
 800b810:	8afb      	ldrh	r3, [r7, #22]
 800b812:	429a      	cmp	r2, r3
 800b814:	f63f af74 	bhi.w	800b700 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b818:	6a3b      	ldr	r3, [r7, #32]
 800b81a:	791b      	ldrb	r3, [r3, #4]
 800b81c:	2b02      	cmp	r3, #2
 800b81e:	bf28      	it	cs
 800b820:	2302      	movcs	r3, #2
 800b822:	b2db      	uxtb	r3, r3
 800b824:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b828:	429a      	cmp	r2, r3
 800b82a:	d201      	bcs.n	800b830 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800b82c:	2303      	movs	r3, #3
 800b82e:	e001      	b.n	800b834 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800b830:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b834:	4618      	mov	r0, r3
 800b836:	3730      	adds	r7, #48	; 0x30
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	781a      	ldrb	r2, [r3, #0]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	785a      	ldrb	r2, [r3, #1]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	789a      	ldrb	r2, [r3, #2]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	78da      	ldrb	r2, [r3, #3]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	791a      	ldrb	r2, [r3, #4]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	795a      	ldrb	r2, [r3, #5]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	799a      	ldrb	r2, [r3, #6]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	79da      	ldrb	r2, [r3, #7]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	7a1a      	ldrb	r2, [r3, #8]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	721a      	strb	r2, [r3, #8]
}
 800b88e:	bf00      	nop
 800b890:	370c      	adds	r7, #12
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b89a:	b480      	push	{r7}
 800b89c:	b087      	sub	sp, #28
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	60f8      	str	r0, [r7, #12]
 800b8a2:	60b9      	str	r1, [r7, #8]
 800b8a4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	781a      	ldrb	r2, [r3, #0]
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	785a      	ldrb	r2, [r3, #1]
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	789a      	ldrb	r2, [r3, #2]
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	78da      	ldrb	r2, [r3, #3]
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	3304      	adds	r3, #4
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	b29a      	uxth	r2, r3
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	3305      	adds	r3, #5
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	021b      	lsls	r3, r3, #8
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	b29a      	uxth	r2, r3
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	799a      	ldrb	r2, [r3, #6]
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	889b      	ldrh	r3, [r3, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d102      	bne.n	800b8fc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800b8f6:	2303      	movs	r3, #3
 800b8f8:	75fb      	strb	r3, [r7, #23]
 800b8fa:	e033      	b.n	800b964 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	889b      	ldrh	r3, [r3, #4]
 800b900:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b904:	f023 0307 	bic.w	r3, r3, #7
 800b908:	b29a      	uxth	r2, r3
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	889b      	ldrh	r3, [r3, #4]
 800b912:	b21a      	sxth	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	3304      	adds	r3, #4
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	b299      	uxth	r1, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	3305      	adds	r3, #5
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	b29b      	uxth	r3, r3
 800b924:	021b      	lsls	r3, r3, #8
 800b926:	b29b      	uxth	r3, r3
 800b928:	430b      	orrs	r3, r1
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b930:	2b00      	cmp	r3, #0
 800b932:	d110      	bne.n	800b956 <USBH_ParseEPDesc+0xbc>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	3304      	adds	r3, #4
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	b299      	uxth	r1, r3
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	3305      	adds	r3, #5
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	b29b      	uxth	r3, r3
 800b944:	021b      	lsls	r3, r3, #8
 800b946:	b29b      	uxth	r3, r3
 800b948:	430b      	orrs	r3, r1
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	b21b      	sxth	r3, r3
 800b94e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b952:	b21b      	sxth	r3, r3
 800b954:	e001      	b.n	800b95a <USBH_ParseEPDesc+0xc0>
 800b956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b95a:	4313      	orrs	r3, r2
 800b95c:	b21b      	sxth	r3, r3
 800b95e:	b29a      	uxth	r2, r3
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d116      	bne.n	800b99c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	78db      	ldrb	r3, [r3, #3]
 800b972:	f003 0303 	and.w	r3, r3, #3
 800b976:	2b01      	cmp	r3, #1
 800b978:	d005      	beq.n	800b986 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	78db      	ldrb	r3, [r3, #3]
 800b97e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b982:	2b03      	cmp	r3, #3
 800b984:	d127      	bne.n	800b9d6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	799b      	ldrb	r3, [r3, #6]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d003      	beq.n	800b996 <USBH_ParseEPDesc+0xfc>
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	799b      	ldrb	r3, [r3, #6]
 800b992:	2b10      	cmp	r3, #16
 800b994:	d91f      	bls.n	800b9d6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b996:	2303      	movs	r3, #3
 800b998:	75fb      	strb	r3, [r7, #23]
 800b99a:	e01c      	b.n	800b9d6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	78db      	ldrb	r3, [r3, #3]
 800b9a0:	f003 0303 	and.w	r3, r3, #3
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d10a      	bne.n	800b9be <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	799b      	ldrb	r3, [r3, #6]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d003      	beq.n	800b9b8 <USBH_ParseEPDesc+0x11e>
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	799b      	ldrb	r3, [r3, #6]
 800b9b4:	2b10      	cmp	r3, #16
 800b9b6:	d90e      	bls.n	800b9d6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b9b8:	2303      	movs	r3, #3
 800b9ba:	75fb      	strb	r3, [r7, #23]
 800b9bc:	e00b      	b.n	800b9d6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	78db      	ldrb	r3, [r3, #3]
 800b9c2:	f003 0303 	and.w	r3, r3, #3
 800b9c6:	2b03      	cmp	r3, #3
 800b9c8:	d105      	bne.n	800b9d6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	799b      	ldrb	r3, [r3, #6]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d101      	bne.n	800b9d6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b9d2:	2303      	movs	r3, #3
 800b9d4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b9d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	371c      	adds	r7, #28
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b087      	sub	sp, #28
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	2b03      	cmp	r3, #3
 800b9fa:	d120      	bne.n	800ba3e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	1e9a      	subs	r2, r3, #2
 800ba02:	88fb      	ldrh	r3, [r7, #6]
 800ba04:	4293      	cmp	r3, r2
 800ba06:	bf28      	it	cs
 800ba08:	4613      	movcs	r3, r2
 800ba0a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	3302      	adds	r3, #2
 800ba10:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ba12:	2300      	movs	r3, #0
 800ba14:	82fb      	strh	r3, [r7, #22]
 800ba16:	e00b      	b.n	800ba30 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ba18:	8afb      	ldrh	r3, [r7, #22]
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	781a      	ldrb	r2, [r3, #0]
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	3301      	adds	r3, #1
 800ba28:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ba2a:	8afb      	ldrh	r3, [r7, #22]
 800ba2c:	3302      	adds	r3, #2
 800ba2e:	82fb      	strh	r3, [r7, #22]
 800ba30:	8afa      	ldrh	r2, [r7, #22]
 800ba32:	8abb      	ldrh	r3, [r7, #20]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d3ef      	bcc.n	800ba18 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	701a      	strb	r2, [r3, #0]
  }
}
 800ba3e:	bf00      	nop
 800ba40:	371c      	adds	r7, #28
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr

0800ba4a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800ba4a:	b480      	push	{r7}
 800ba4c:	b085      	sub	sp, #20
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
 800ba52:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	881a      	ldrh	r2, [r3, #0]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	4413      	add	r3, r2
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	4413      	add	r3, r2
 800ba70:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ba72:	68fb      	ldr	r3, [r7, #12]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3714      	adds	r7, #20
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	60b9      	str	r1, [r7, #8]
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	789b      	ldrb	r3, [r3, #2]
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d002      	beq.n	800baa0 <USBH_CtlReq+0x20>
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	d00f      	beq.n	800babe <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ba9e:	e027      	b.n	800baf0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	88fa      	ldrh	r2, [r7, #6]
 800baaa:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2201      	movs	r2, #1
 800bab0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2202      	movs	r2, #2
 800bab6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bab8:	2301      	movs	r3, #1
 800baba:	75fb      	strb	r3, [r7, #23]
      break;
 800babc:	e018      	b.n	800baf0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f000 f81c 	bl	800bafc <USBH_HandleControl>
 800bac4:	4603      	mov	r3, r0
 800bac6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bac8:	7dfb      	ldrb	r3, [r7, #23]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d002      	beq.n	800bad4 <USBH_CtlReq+0x54>
 800bace:	7dfb      	ldrb	r3, [r7, #23]
 800bad0:	2b03      	cmp	r3, #3
 800bad2:	d106      	bne.n	800bae2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2201      	movs	r2, #1
 800bad8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2200      	movs	r2, #0
 800bade:	761a      	strb	r2, [r3, #24]
      break;
 800bae0:	e005      	b.n	800baee <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bae2:	7dfb      	ldrb	r3, [r7, #23]
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	d102      	bne.n	800baee <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2201      	movs	r2, #1
 800baec:	709a      	strb	r2, [r3, #2]
      break;
 800baee:	bf00      	nop
  }
  return status;
 800baf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3718      	adds	r7, #24
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
	...

0800bafc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b086      	sub	sp, #24
 800bb00:	af02      	add	r7, sp, #8
 800bb02:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bb04:	2301      	movs	r3, #1
 800bb06:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	7e1b      	ldrb	r3, [r3, #24]
 800bb10:	3b01      	subs	r3, #1
 800bb12:	2b0a      	cmp	r3, #10
 800bb14:	f200 8156 	bhi.w	800bdc4 <USBH_HandleControl+0x2c8>
 800bb18:	a201      	add	r2, pc, #4	; (adr r2, 800bb20 <USBH_HandleControl+0x24>)
 800bb1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb1e:	bf00      	nop
 800bb20:	0800bb4d 	.word	0x0800bb4d
 800bb24:	0800bb67 	.word	0x0800bb67
 800bb28:	0800bbd1 	.word	0x0800bbd1
 800bb2c:	0800bbf7 	.word	0x0800bbf7
 800bb30:	0800bc2f 	.word	0x0800bc2f
 800bb34:	0800bc59 	.word	0x0800bc59
 800bb38:	0800bcab 	.word	0x0800bcab
 800bb3c:	0800bccd 	.word	0x0800bccd
 800bb40:	0800bd09 	.word	0x0800bd09
 800bb44:	0800bd2f 	.word	0x0800bd2f
 800bb48:	0800bd6d 	.word	0x0800bd6d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f103 0110 	add.w	r1, r3, #16
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	795b      	ldrb	r3, [r3, #5]
 800bb56:	461a      	mov	r2, r3
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 f943 	bl	800bde4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2202      	movs	r2, #2
 800bb62:	761a      	strb	r2, [r3, #24]
      break;
 800bb64:	e139      	b.n	800bdda <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	795b      	ldrb	r3, [r3, #5]
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 fcc5 	bl	800c4fc <USBH_LL_GetURBState>
 800bb72:	4603      	mov	r3, r0
 800bb74:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bb76:	7bbb      	ldrb	r3, [r7, #14]
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d11e      	bne.n	800bbba <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	7c1b      	ldrb	r3, [r3, #16]
 800bb80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bb84:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	8adb      	ldrh	r3, [r3, #22]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d00a      	beq.n	800bba4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bb8e:	7b7b      	ldrb	r3, [r7, #13]
 800bb90:	2b80      	cmp	r3, #128	; 0x80
 800bb92:	d103      	bne.n	800bb9c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2203      	movs	r2, #3
 800bb98:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bb9a:	e115      	b.n	800bdc8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2205      	movs	r2, #5
 800bba0:	761a      	strb	r2, [r3, #24]
      break;
 800bba2:	e111      	b.n	800bdc8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800bba4:	7b7b      	ldrb	r3, [r7, #13]
 800bba6:	2b80      	cmp	r3, #128	; 0x80
 800bba8:	d103      	bne.n	800bbb2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2209      	movs	r2, #9
 800bbae:	761a      	strb	r2, [r3, #24]
      break;
 800bbb0:	e10a      	b.n	800bdc8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2207      	movs	r2, #7
 800bbb6:	761a      	strb	r2, [r3, #24]
      break;
 800bbb8:	e106      	b.n	800bdc8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bbba:	7bbb      	ldrb	r3, [r7, #14]
 800bbbc:	2b04      	cmp	r3, #4
 800bbbe:	d003      	beq.n	800bbc8 <USBH_HandleControl+0xcc>
 800bbc0:	7bbb      	ldrb	r3, [r7, #14]
 800bbc2:	2b02      	cmp	r3, #2
 800bbc4:	f040 8100 	bne.w	800bdc8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	220b      	movs	r2, #11
 800bbcc:	761a      	strb	r2, [r3, #24]
      break;
 800bbce:	e0fb      	b.n	800bdc8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6899      	ldr	r1, [r3, #8]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	899a      	ldrh	r2, [r3, #12]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	791b      	ldrb	r3, [r3, #4]
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 f93a 	bl	800be62 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2204      	movs	r2, #4
 800bbf2:	761a      	strb	r2, [r3, #24]
      break;
 800bbf4:	e0f1      	b.n	800bdda <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	791b      	ldrb	r3, [r3, #4]
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f000 fc7d 	bl	800c4fc <USBH_LL_GetURBState>
 800bc02:	4603      	mov	r3, r0
 800bc04:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bc06:	7bbb      	ldrb	r3, [r7, #14]
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d102      	bne.n	800bc12 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2209      	movs	r2, #9
 800bc10:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bc12:	7bbb      	ldrb	r3, [r7, #14]
 800bc14:	2b05      	cmp	r3, #5
 800bc16:	d102      	bne.n	800bc1e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bc18:	2303      	movs	r3, #3
 800bc1a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bc1c:	e0d6      	b.n	800bdcc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800bc1e:	7bbb      	ldrb	r3, [r7, #14]
 800bc20:	2b04      	cmp	r3, #4
 800bc22:	f040 80d3 	bne.w	800bdcc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	220b      	movs	r2, #11
 800bc2a:	761a      	strb	r2, [r3, #24]
      break;
 800bc2c:	e0ce      	b.n	800bdcc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6899      	ldr	r1, [r3, #8]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	899a      	ldrh	r2, [r3, #12]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	795b      	ldrb	r3, [r3, #5]
 800bc3a:	2001      	movs	r0, #1
 800bc3c:	9000      	str	r0, [sp, #0]
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 f8ea 	bl	800be18 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bc4a:	b29a      	uxth	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2206      	movs	r2, #6
 800bc54:	761a      	strb	r2, [r3, #24]
      break;
 800bc56:	e0c0      	b.n	800bdda <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	795b      	ldrb	r3, [r3, #5]
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 fc4c 	bl	800c4fc <USBH_LL_GetURBState>
 800bc64:	4603      	mov	r3, r0
 800bc66:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bc68:	7bbb      	ldrb	r3, [r7, #14]
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d103      	bne.n	800bc76 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2207      	movs	r2, #7
 800bc72:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bc74:	e0ac      	b.n	800bdd0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800bc76:	7bbb      	ldrb	r3, [r7, #14]
 800bc78:	2b05      	cmp	r3, #5
 800bc7a:	d105      	bne.n	800bc88 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	220c      	movs	r2, #12
 800bc80:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bc82:	2303      	movs	r3, #3
 800bc84:	73fb      	strb	r3, [r7, #15]
      break;
 800bc86:	e0a3      	b.n	800bdd0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bc88:	7bbb      	ldrb	r3, [r7, #14]
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	d103      	bne.n	800bc96 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2205      	movs	r2, #5
 800bc92:	761a      	strb	r2, [r3, #24]
      break;
 800bc94:	e09c      	b.n	800bdd0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800bc96:	7bbb      	ldrb	r3, [r7, #14]
 800bc98:	2b04      	cmp	r3, #4
 800bc9a:	f040 8099 	bne.w	800bdd0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	220b      	movs	r2, #11
 800bca2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bca4:	2302      	movs	r3, #2
 800bca6:	73fb      	strb	r3, [r7, #15]
      break;
 800bca8:	e092      	b.n	800bdd0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	791b      	ldrb	r3, [r3, #4]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	2100      	movs	r1, #0
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 f8d5 	bl	800be62 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bcbe:	b29a      	uxth	r2, r3
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2208      	movs	r2, #8
 800bcc8:	761a      	strb	r2, [r3, #24]

      break;
 800bcca:	e086      	b.n	800bdda <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	791b      	ldrb	r3, [r3, #4]
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 fc12 	bl	800c4fc <USBH_LL_GetURBState>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bcdc:	7bbb      	ldrb	r3, [r7, #14]
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d105      	bne.n	800bcee <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	220d      	movs	r2, #13
 800bce6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bce8:	2300      	movs	r3, #0
 800bcea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bcec:	e072      	b.n	800bdd4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800bcee:	7bbb      	ldrb	r3, [r7, #14]
 800bcf0:	2b04      	cmp	r3, #4
 800bcf2:	d103      	bne.n	800bcfc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	220b      	movs	r2, #11
 800bcf8:	761a      	strb	r2, [r3, #24]
      break;
 800bcfa:	e06b      	b.n	800bdd4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800bcfc:	7bbb      	ldrb	r3, [r7, #14]
 800bcfe:	2b05      	cmp	r3, #5
 800bd00:	d168      	bne.n	800bdd4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800bd02:	2303      	movs	r3, #3
 800bd04:	73fb      	strb	r3, [r7, #15]
      break;
 800bd06:	e065      	b.n	800bdd4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	795b      	ldrb	r3, [r3, #5]
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	9200      	str	r2, [sp, #0]
 800bd10:	2200      	movs	r2, #0
 800bd12:	2100      	movs	r1, #0
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 f87f 	bl	800be18 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bd20:	b29a      	uxth	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	220a      	movs	r2, #10
 800bd2a:	761a      	strb	r2, [r3, #24]
      break;
 800bd2c:	e055      	b.n	800bdda <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	795b      	ldrb	r3, [r3, #5]
 800bd32:	4619      	mov	r1, r3
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 fbe1 	bl	800c4fc <USBH_LL_GetURBState>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bd3e:	7bbb      	ldrb	r3, [r7, #14]
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d105      	bne.n	800bd50 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bd44:	2300      	movs	r3, #0
 800bd46:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	220d      	movs	r2, #13
 800bd4c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bd4e:	e043      	b.n	800bdd8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bd50:	7bbb      	ldrb	r3, [r7, #14]
 800bd52:	2b02      	cmp	r3, #2
 800bd54:	d103      	bne.n	800bd5e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2209      	movs	r2, #9
 800bd5a:	761a      	strb	r2, [r3, #24]
      break;
 800bd5c:	e03c      	b.n	800bdd8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800bd5e:	7bbb      	ldrb	r3, [r7, #14]
 800bd60:	2b04      	cmp	r3, #4
 800bd62:	d139      	bne.n	800bdd8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	220b      	movs	r2, #11
 800bd68:	761a      	strb	r2, [r3, #24]
      break;
 800bd6a:	e035      	b.n	800bdd8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	7e5b      	ldrb	r3, [r3, #25]
 800bd70:	3301      	adds	r3, #1
 800bd72:	b2da      	uxtb	r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	765a      	strb	r2, [r3, #25]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	7e5b      	ldrb	r3, [r3, #25]
 800bd7c:	2b02      	cmp	r3, #2
 800bd7e:	d806      	bhi.n	800bd8e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2201      	movs	r2, #1
 800bd8a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bd8c:	e025      	b.n	800bdda <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd94:	2106      	movs	r1, #6
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	795b      	ldrb	r3, [r3, #5]
 800bda4:	4619      	mov	r1, r3
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 f90c 	bl	800bfc4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	791b      	ldrb	r3, [r3, #4]
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 f906 	bl	800bfc4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bdbe:	2302      	movs	r3, #2
 800bdc0:	73fb      	strb	r3, [r7, #15]
      break;
 800bdc2:	e00a      	b.n	800bdda <USBH_HandleControl+0x2de>

    default:
      break;
 800bdc4:	bf00      	nop
 800bdc6:	e008      	b.n	800bdda <USBH_HandleControl+0x2de>
      break;
 800bdc8:	bf00      	nop
 800bdca:	e006      	b.n	800bdda <USBH_HandleControl+0x2de>
      break;
 800bdcc:	bf00      	nop
 800bdce:	e004      	b.n	800bdda <USBH_HandleControl+0x2de>
      break;
 800bdd0:	bf00      	nop
 800bdd2:	e002      	b.n	800bdda <USBH_HandleControl+0x2de>
      break;
 800bdd4:	bf00      	nop
 800bdd6:	e000      	b.n	800bdda <USBH_HandleControl+0x2de>
      break;
 800bdd8:	bf00      	nop
  }

  return status;
 800bdda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3710      	adds	r7, #16
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b088      	sub	sp, #32
 800bde8:	af04      	add	r7, sp, #16
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	4613      	mov	r3, r2
 800bdf0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bdf2:	79f9      	ldrb	r1, [r7, #7]
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	9303      	str	r3, [sp, #12]
 800bdf8:	2308      	movs	r3, #8
 800bdfa:	9302      	str	r3, [sp, #8]
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	9301      	str	r3, [sp, #4]
 800be00:	2300      	movs	r3, #0
 800be02:	9300      	str	r3, [sp, #0]
 800be04:	2300      	movs	r3, #0
 800be06:	2200      	movs	r2, #0
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	f000 fb46 	bl	800c49a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800be0e:	2300      	movs	r3, #0
}
 800be10:	4618      	mov	r0, r3
 800be12:	3710      	adds	r7, #16
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b088      	sub	sp, #32
 800be1c:	af04      	add	r7, sp, #16
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	4611      	mov	r1, r2
 800be24:	461a      	mov	r2, r3
 800be26:	460b      	mov	r3, r1
 800be28:	80fb      	strh	r3, [r7, #6]
 800be2a:	4613      	mov	r3, r2
 800be2c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800be34:	2b00      	cmp	r3, #0
 800be36:	d001      	beq.n	800be3c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800be38:	2300      	movs	r3, #0
 800be3a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800be3c:	7979      	ldrb	r1, [r7, #5]
 800be3e:	7e3b      	ldrb	r3, [r7, #24]
 800be40:	9303      	str	r3, [sp, #12]
 800be42:	88fb      	ldrh	r3, [r7, #6]
 800be44:	9302      	str	r3, [sp, #8]
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	9301      	str	r3, [sp, #4]
 800be4a:	2301      	movs	r3, #1
 800be4c:	9300      	str	r3, [sp, #0]
 800be4e:	2300      	movs	r3, #0
 800be50:	2200      	movs	r2, #0
 800be52:	68f8      	ldr	r0, [r7, #12]
 800be54:	f000 fb21 	bl	800c49a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800be58:	2300      	movs	r3, #0
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b088      	sub	sp, #32
 800be66:	af04      	add	r7, sp, #16
 800be68:	60f8      	str	r0, [r7, #12]
 800be6a:	60b9      	str	r1, [r7, #8]
 800be6c:	4611      	mov	r1, r2
 800be6e:	461a      	mov	r2, r3
 800be70:	460b      	mov	r3, r1
 800be72:	80fb      	strh	r3, [r7, #6]
 800be74:	4613      	mov	r3, r2
 800be76:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800be78:	7979      	ldrb	r1, [r7, #5]
 800be7a:	2300      	movs	r3, #0
 800be7c:	9303      	str	r3, [sp, #12]
 800be7e:	88fb      	ldrh	r3, [r7, #6]
 800be80:	9302      	str	r3, [sp, #8]
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	9301      	str	r3, [sp, #4]
 800be86:	2301      	movs	r3, #1
 800be88:	9300      	str	r3, [sp, #0]
 800be8a:	2300      	movs	r3, #0
 800be8c:	2201      	movs	r2, #1
 800be8e:	68f8      	ldr	r0, [r7, #12]
 800be90:	f000 fb03 	bl	800c49a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800be94:	2300      	movs	r3, #0

}
 800be96:	4618      	mov	r0, r3
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}

0800be9e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800be9e:	b580      	push	{r7, lr}
 800bea0:	b088      	sub	sp, #32
 800bea2:	af04      	add	r7, sp, #16
 800bea4:	60f8      	str	r0, [r7, #12]
 800bea6:	60b9      	str	r1, [r7, #8]
 800bea8:	4611      	mov	r1, r2
 800beaa:	461a      	mov	r2, r3
 800beac:	460b      	mov	r3, r1
 800beae:	80fb      	strh	r3, [r7, #6]
 800beb0:	4613      	mov	r3, r2
 800beb2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d001      	beq.n	800bec2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bebe:	2300      	movs	r3, #0
 800bec0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bec2:	7979      	ldrb	r1, [r7, #5]
 800bec4:	7e3b      	ldrb	r3, [r7, #24]
 800bec6:	9303      	str	r3, [sp, #12]
 800bec8:	88fb      	ldrh	r3, [r7, #6]
 800beca:	9302      	str	r3, [sp, #8]
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	9301      	str	r3, [sp, #4]
 800bed0:	2301      	movs	r3, #1
 800bed2:	9300      	str	r3, [sp, #0]
 800bed4:	2302      	movs	r3, #2
 800bed6:	2200      	movs	r2, #0
 800bed8:	68f8      	ldr	r0, [r7, #12]
 800beda:	f000 fade 	bl	800c49a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bede:	2300      	movs	r3, #0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3710      	adds	r7, #16
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b088      	sub	sp, #32
 800beec:	af04      	add	r7, sp, #16
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	4611      	mov	r1, r2
 800bef4:	461a      	mov	r2, r3
 800bef6:	460b      	mov	r3, r1
 800bef8:	80fb      	strh	r3, [r7, #6]
 800befa:	4613      	mov	r3, r2
 800befc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800befe:	7979      	ldrb	r1, [r7, #5]
 800bf00:	2300      	movs	r3, #0
 800bf02:	9303      	str	r3, [sp, #12]
 800bf04:	88fb      	ldrh	r3, [r7, #6]
 800bf06:	9302      	str	r3, [sp, #8]
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	9301      	str	r3, [sp, #4]
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	2302      	movs	r3, #2
 800bf12:	2201      	movs	r2, #1
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f000 fac0 	bl	800c49a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bf1a:	2300      	movs	r3, #0
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3710      	adds	r7, #16
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b086      	sub	sp, #24
 800bf28:	af04      	add	r7, sp, #16
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	4608      	mov	r0, r1
 800bf2e:	4611      	mov	r1, r2
 800bf30:	461a      	mov	r2, r3
 800bf32:	4603      	mov	r3, r0
 800bf34:	70fb      	strb	r3, [r7, #3]
 800bf36:	460b      	mov	r3, r1
 800bf38:	70bb      	strb	r3, [r7, #2]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bf3e:	7878      	ldrb	r0, [r7, #1]
 800bf40:	78ba      	ldrb	r2, [r7, #2]
 800bf42:	78f9      	ldrb	r1, [r7, #3]
 800bf44:	8b3b      	ldrh	r3, [r7, #24]
 800bf46:	9302      	str	r3, [sp, #8]
 800bf48:	7d3b      	ldrb	r3, [r7, #20]
 800bf4a:	9301      	str	r3, [sp, #4]
 800bf4c:	7c3b      	ldrb	r3, [r7, #16]
 800bf4e:	9300      	str	r3, [sp, #0]
 800bf50:	4603      	mov	r3, r0
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 fa53 	bl	800c3fe <USBH_LL_OpenPipe>

  return USBH_OK;
 800bf58:	2300      	movs	r3, #0
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3708      	adds	r7, #8
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b082      	sub	sp, #8
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
 800bf6a:	460b      	mov	r3, r1
 800bf6c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800bf6e:	78fb      	ldrb	r3, [r7, #3]
 800bf70:	4619      	mov	r1, r3
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 fa72 	bl	800c45c <USBH_LL_ClosePipe>

  return USBH_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3708      	adds	r7, #8
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b084      	sub	sp, #16
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f000 f836 	bl	800c000 <USBH_GetFreePipe>
 800bf94:	4603      	mov	r3, r0
 800bf96:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bf98:	89fb      	ldrh	r3, [r7, #14]
 800bf9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d00a      	beq.n	800bfb8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800bfa2:	78fa      	ldrb	r2, [r7, #3]
 800bfa4:	89fb      	ldrh	r3, [r7, #14]
 800bfa6:	f003 030f 	and.w	r3, r3, #15
 800bfaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bfae:	6879      	ldr	r1, [r7, #4]
 800bfb0:	33e0      	adds	r3, #224	; 0xe0
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	440b      	add	r3, r1
 800bfb6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bfb8:	89fb      	ldrh	r3, [r7, #14]
 800bfba:	b2db      	uxtb	r3, r3
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	460b      	mov	r3, r1
 800bfce:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800bfd0:	78fb      	ldrb	r3, [r7, #3]
 800bfd2:	2b0f      	cmp	r3, #15
 800bfd4:	d80d      	bhi.n	800bff2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bfd6:	78fb      	ldrb	r3, [r7, #3]
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	33e0      	adds	r3, #224	; 0xe0
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	4413      	add	r3, r2
 800bfe0:	685a      	ldr	r2, [r3, #4]
 800bfe2:	78fb      	ldrb	r3, [r7, #3]
 800bfe4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bfe8:	6879      	ldr	r1, [r7, #4]
 800bfea:	33e0      	adds	r3, #224	; 0xe0
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	440b      	add	r3, r1
 800bff0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bff2:	2300      	movs	r3, #0
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	370c      	adds	r7, #12
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr

0800c000 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c000:	b480      	push	{r7}
 800c002:	b085      	sub	sp, #20
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c008:	2300      	movs	r3, #0
 800c00a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c00c:	2300      	movs	r3, #0
 800c00e:	73fb      	strb	r3, [r7, #15]
 800c010:	e00f      	b.n	800c032 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c012:	7bfb      	ldrb	r3, [r7, #15]
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	33e0      	adds	r3, #224	; 0xe0
 800c018:	009b      	lsls	r3, r3, #2
 800c01a:	4413      	add	r3, r2
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c022:	2b00      	cmp	r3, #0
 800c024:	d102      	bne.n	800c02c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c026:	7bfb      	ldrb	r3, [r7, #15]
 800c028:	b29b      	uxth	r3, r3
 800c02a:	e007      	b.n	800c03c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c02c:	7bfb      	ldrb	r3, [r7, #15]
 800c02e:	3301      	adds	r3, #1
 800c030:	73fb      	strb	r3, [r7, #15]
 800c032:	7bfb      	ldrb	r3, [r7, #15]
 800c034:	2b0f      	cmp	r3, #15
 800c036:	d9ec      	bls.n	800c012 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c038:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3714      	adds	r7, #20
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr

0800c048 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c04c:	2201      	movs	r2, #1
 800c04e:	490e      	ldr	r1, [pc, #56]	; (800c088 <MX_USB_HOST_Init+0x40>)
 800c050:	480e      	ldr	r0, [pc, #56]	; (800c08c <MX_USB_HOST_Init+0x44>)
 800c052:	f7fe fba7 	bl	800a7a4 <USBH_Init>
 800c056:	4603      	mov	r3, r0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d001      	beq.n	800c060 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c05c:	f7f5 fb36 	bl	80016cc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c060:	490b      	ldr	r1, [pc, #44]	; (800c090 <MX_USB_HOST_Init+0x48>)
 800c062:	480a      	ldr	r0, [pc, #40]	; (800c08c <MX_USB_HOST_Init+0x44>)
 800c064:	f7fe fc2c 	bl	800a8c0 <USBH_RegisterClass>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d001      	beq.n	800c072 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c06e:	f7f5 fb2d 	bl	80016cc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c072:	4806      	ldr	r0, [pc, #24]	; (800c08c <MX_USB_HOST_Init+0x44>)
 800c074:	f7fe fcb0 	bl	800a9d8 <USBH_Start>
 800c078:	4603      	mov	r3, r0
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d001      	beq.n	800c082 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c07e:	f7f5 fb25 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c082:	bf00      	nop
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	0800c0a9 	.word	0x0800c0a9
 800c08c:	2000054c 	.word	0x2000054c
 800c090:	2000020c 	.word	0x2000020c

0800c094 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c098:	4802      	ldr	r0, [pc, #8]	; (800c0a4 <MX_USB_HOST_Process+0x10>)
 800c09a:	f7fe fcad 	bl	800a9f8 <USBH_Process>
}
 800c09e:	bf00      	nop
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	2000054c 	.word	0x2000054c

0800c0a8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c0b4:	78fb      	ldrb	r3, [r7, #3]
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	2b04      	cmp	r3, #4
 800c0ba:	d819      	bhi.n	800c0f0 <USBH_UserProcess+0x48>
 800c0bc:	a201      	add	r2, pc, #4	; (adr r2, 800c0c4 <USBH_UserProcess+0x1c>)
 800c0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c2:	bf00      	nop
 800c0c4:	0800c0f1 	.word	0x0800c0f1
 800c0c8:	0800c0e1 	.word	0x0800c0e1
 800c0cc:	0800c0f1 	.word	0x0800c0f1
 800c0d0:	0800c0e9 	.word	0x0800c0e9
 800c0d4:	0800c0d9 	.word	0x0800c0d9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c0d8:	4b09      	ldr	r3, [pc, #36]	; (800c100 <USBH_UserProcess+0x58>)
 800c0da:	2203      	movs	r2, #3
 800c0dc:	701a      	strb	r2, [r3, #0]
  break;
 800c0de:	e008      	b.n	800c0f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c0e0:	4b07      	ldr	r3, [pc, #28]	; (800c100 <USBH_UserProcess+0x58>)
 800c0e2:	2202      	movs	r2, #2
 800c0e4:	701a      	strb	r2, [r3, #0]
  break;
 800c0e6:	e004      	b.n	800c0f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c0e8:	4b05      	ldr	r3, [pc, #20]	; (800c100 <USBH_UserProcess+0x58>)
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	701a      	strb	r2, [r3, #0]
  break;
 800c0ee:	e000      	b.n	800c0f2 <USBH_UserProcess+0x4a>

  default:
  break;
 800c0f0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c0f2:	bf00      	nop
 800c0f4:	370c      	adds	r7, #12
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr
 800c0fe:	bf00      	nop
 800c100:	20000924 	.word	0x20000924

0800c104 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b08a      	sub	sp, #40	; 0x28
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c10c:	f107 0314 	add.w	r3, r7, #20
 800c110:	2200      	movs	r2, #0
 800c112:	601a      	str	r2, [r3, #0]
 800c114:	605a      	str	r2, [r3, #4]
 800c116:	609a      	str	r2, [r3, #8]
 800c118:	60da      	str	r2, [r3, #12]
 800c11a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c124:	d147      	bne.n	800c1b6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c126:	2300      	movs	r3, #0
 800c128:	613b      	str	r3, [r7, #16]
 800c12a:	4b25      	ldr	r3, [pc, #148]	; (800c1c0 <HAL_HCD_MspInit+0xbc>)
 800c12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c12e:	4a24      	ldr	r2, [pc, #144]	; (800c1c0 <HAL_HCD_MspInit+0xbc>)
 800c130:	f043 0301 	orr.w	r3, r3, #1
 800c134:	6313      	str	r3, [r2, #48]	; 0x30
 800c136:	4b22      	ldr	r3, [pc, #136]	; (800c1c0 <HAL_HCD_MspInit+0xbc>)
 800c138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c13a:	f003 0301 	and.w	r3, r3, #1
 800c13e:	613b      	str	r3, [r7, #16]
 800c140:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c142:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c148:	2300      	movs	r3, #0
 800c14a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c14c:	2300      	movs	r3, #0
 800c14e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c150:	f107 0314 	add.w	r3, r7, #20
 800c154:	4619      	mov	r1, r3
 800c156:	481b      	ldr	r0, [pc, #108]	; (800c1c4 <HAL_HCD_MspInit+0xc0>)
 800c158:	f7f7 fc1c 	bl	8003994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c15c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c162:	2302      	movs	r3, #2
 800c164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c166:	2300      	movs	r3, #0
 800c168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c16a:	2300      	movs	r3, #0
 800c16c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c16e:	230a      	movs	r3, #10
 800c170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c172:	f107 0314 	add.w	r3, r7, #20
 800c176:	4619      	mov	r1, r3
 800c178:	4812      	ldr	r0, [pc, #72]	; (800c1c4 <HAL_HCD_MspInit+0xc0>)
 800c17a:	f7f7 fc0b 	bl	8003994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c17e:	4b10      	ldr	r3, [pc, #64]	; (800c1c0 <HAL_HCD_MspInit+0xbc>)
 800c180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c182:	4a0f      	ldr	r2, [pc, #60]	; (800c1c0 <HAL_HCD_MspInit+0xbc>)
 800c184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c188:	6353      	str	r3, [r2, #52]	; 0x34
 800c18a:	2300      	movs	r3, #0
 800c18c:	60fb      	str	r3, [r7, #12]
 800c18e:	4b0c      	ldr	r3, [pc, #48]	; (800c1c0 <HAL_HCD_MspInit+0xbc>)
 800c190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c192:	4a0b      	ldr	r2, [pc, #44]	; (800c1c0 <HAL_HCD_MspInit+0xbc>)
 800c194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c198:	6453      	str	r3, [r2, #68]	; 0x44
 800c19a:	4b09      	ldr	r3, [pc, #36]	; (800c1c0 <HAL_HCD_MspInit+0xbc>)
 800c19c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c19e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1a2:	60fb      	str	r3, [r7, #12]
 800c1a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	2043      	movs	r0, #67	; 0x43
 800c1ac:	f7f7 fb29 	bl	8003802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c1b0:	2043      	movs	r0, #67	; 0x43
 800c1b2:	f7f7 fb42 	bl	800383a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c1b6:	bf00      	nop
 800c1b8:	3728      	adds	r7, #40	; 0x28
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	40023800 	.word	0x40023800
 800c1c4:	40020000 	.word	0x40020000

0800c1c8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7fe ffed 	bl	800b1b6 <USBH_LL_IncTimer>
}
 800c1dc:	bf00      	nop
 800c1de:	3708      	adds	r7, #8
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7ff f825 	bl	800b242 <USBH_LL_Connect>
}
 800c1f8:	bf00      	nop
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c20e:	4618      	mov	r0, r3
 800c210:	f7ff f82e 	bl	800b270 <USBH_LL_Disconnect>
}
 800c214:	bf00      	nop
 800c216:	3708      	adds	r7, #8
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	460b      	mov	r3, r1
 800c226:	70fb      	strb	r3, [r7, #3]
 800c228:	4613      	mov	r3, r2
 800c22a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c22c:	bf00      	nop
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c246:	4618      	mov	r0, r3
 800c248:	f7fe ffdf 	bl	800b20a <USBH_LL_PortEnabled>
}
 800c24c:	bf00      	nop
 800c24e:	3708      	adds	r7, #8
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c262:	4618      	mov	r0, r3
 800c264:	f7fe ffdf 	bl	800b226 <USBH_LL_PortDisabled>
}
 800c268:	bf00      	nop
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c27e:	2b01      	cmp	r3, #1
 800c280:	d12a      	bne.n	800c2d8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c282:	4a18      	ldr	r2, [pc, #96]	; (800c2e4 <USBH_LL_Init+0x74>)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4a15      	ldr	r2, [pc, #84]	; (800c2e4 <USBH_LL_Init+0x74>)
 800c28e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c292:	4b14      	ldr	r3, [pc, #80]	; (800c2e4 <USBH_LL_Init+0x74>)
 800c294:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c298:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c29a:	4b12      	ldr	r3, [pc, #72]	; (800c2e4 <USBH_LL_Init+0x74>)
 800c29c:	2208      	movs	r2, #8
 800c29e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c2a0:	4b10      	ldr	r3, [pc, #64]	; (800c2e4 <USBH_LL_Init+0x74>)
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c2a6:	4b0f      	ldr	r3, [pc, #60]	; (800c2e4 <USBH_LL_Init+0x74>)
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c2ac:	4b0d      	ldr	r3, [pc, #52]	; (800c2e4 <USBH_LL_Init+0x74>)
 800c2ae:	2202      	movs	r2, #2
 800c2b0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c2b2:	4b0c      	ldr	r3, [pc, #48]	; (800c2e4 <USBH_LL_Init+0x74>)
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c2b8:	480a      	ldr	r0, [pc, #40]	; (800c2e4 <USBH_LL_Init+0x74>)
 800c2ba:	f7f7 fd51 	bl	8003d60 <HAL_HCD_Init>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d001      	beq.n	800c2c8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c2c4:	f7f5 fa02 	bl	80016cc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c2c8:	4806      	ldr	r0, [pc, #24]	; (800c2e4 <USBH_LL_Init+0x74>)
 800c2ca:	f7f8 f934 	bl	8004536 <HAL_HCD_GetCurrentFrame>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f7fe ff60 	bl	800b198 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c2d8:	2300      	movs	r3, #0
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3708      	adds	r7, #8
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	20000928 	.word	0x20000928

0800c2e8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7f8 f8a3 	bl	800444a <HAL_HCD_Start>
 800c304:	4603      	mov	r3, r0
 800c306:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c308:	7bfb      	ldrb	r3, [r7, #15]
 800c30a:	4618      	mov	r0, r3
 800c30c:	f000 f95c 	bl	800c5c8 <USBH_Get_USB_Status>
 800c310:	4603      	mov	r3, r0
 800c312:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c314:	7bbb      	ldrb	r3, [r7, #14]
}
 800c316:	4618      	mov	r0, r3
 800c318:	3710      	adds	r7, #16
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c31e:	b580      	push	{r7, lr}
 800c320:	b084      	sub	sp, #16
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c326:	2300      	movs	r3, #0
 800c328:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c32a:	2300      	movs	r3, #0
 800c32c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c334:	4618      	mov	r0, r3
 800c336:	f7f8 f8ab 	bl	8004490 <HAL_HCD_Stop>
 800c33a:	4603      	mov	r3, r0
 800c33c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c33e:	7bfb      	ldrb	r3, [r7, #15]
 800c340:	4618      	mov	r0, r3
 800c342:	f000 f941 	bl	800c5c8 <USBH_Get_USB_Status>
 800c346:	4603      	mov	r3, r0
 800c348:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c34a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3710      	adds	r7, #16
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c35c:	2301      	movs	r3, #1
 800c35e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c366:	4618      	mov	r0, r3
 800c368:	f7f8 f8f3 	bl	8004552 <HAL_HCD_GetCurrentSpeed>
 800c36c:	4603      	mov	r3, r0
 800c36e:	2b02      	cmp	r3, #2
 800c370:	d00c      	beq.n	800c38c <USBH_LL_GetSpeed+0x38>
 800c372:	2b02      	cmp	r3, #2
 800c374:	d80d      	bhi.n	800c392 <USBH_LL_GetSpeed+0x3e>
 800c376:	2b00      	cmp	r3, #0
 800c378:	d002      	beq.n	800c380 <USBH_LL_GetSpeed+0x2c>
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d003      	beq.n	800c386 <USBH_LL_GetSpeed+0x32>
 800c37e:	e008      	b.n	800c392 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c380:	2300      	movs	r3, #0
 800c382:	73fb      	strb	r3, [r7, #15]
    break;
 800c384:	e008      	b.n	800c398 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c386:	2301      	movs	r3, #1
 800c388:	73fb      	strb	r3, [r7, #15]
    break;
 800c38a:	e005      	b.n	800c398 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c38c:	2302      	movs	r3, #2
 800c38e:	73fb      	strb	r3, [r7, #15]
    break;
 800c390:	e002      	b.n	800c398 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c392:	2301      	movs	r3, #1
 800c394:	73fb      	strb	r3, [r7, #15]
    break;
 800c396:	bf00      	nop
  }
  return  speed;
 800c398:	7bfb      	ldrb	r3, [r7, #15]
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3710      	adds	r7, #16
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}

0800c3a2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c3a2:	b580      	push	{r7, lr}
 800c3a4:	b084      	sub	sp, #16
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7f8 f886 	bl	80044ca <HAL_HCD_ResetPort>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c3c2:	7bfb      	ldrb	r3, [r7, #15]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f000 f8ff 	bl	800c5c8 <USBH_Get_USB_Status>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c3ea:	78fa      	ldrb	r2, [r7, #3]
 800c3ec:	4611      	mov	r1, r2
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7f8 f88d 	bl	800450e <HAL_HCD_HC_GetXferCount>
 800c3f4:	4603      	mov	r3, r0
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3708      	adds	r7, #8
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c3fe:	b590      	push	{r4, r7, lr}
 800c400:	b089      	sub	sp, #36	; 0x24
 800c402:	af04      	add	r7, sp, #16
 800c404:	6078      	str	r0, [r7, #4]
 800c406:	4608      	mov	r0, r1
 800c408:	4611      	mov	r1, r2
 800c40a:	461a      	mov	r2, r3
 800c40c:	4603      	mov	r3, r0
 800c40e:	70fb      	strb	r3, [r7, #3]
 800c410:	460b      	mov	r3, r1
 800c412:	70bb      	strb	r3, [r7, #2]
 800c414:	4613      	mov	r3, r2
 800c416:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c418:	2300      	movs	r3, #0
 800c41a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c41c:	2300      	movs	r3, #0
 800c41e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c426:	787c      	ldrb	r4, [r7, #1]
 800c428:	78ba      	ldrb	r2, [r7, #2]
 800c42a:	78f9      	ldrb	r1, [r7, #3]
 800c42c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c42e:	9302      	str	r3, [sp, #8]
 800c430:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c434:	9301      	str	r3, [sp, #4]
 800c436:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c43a:	9300      	str	r3, [sp, #0]
 800c43c:	4623      	mov	r3, r4
 800c43e:	f7f7 fcf1 	bl	8003e24 <HAL_HCD_HC_Init>
 800c442:	4603      	mov	r3, r0
 800c444:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c446:	7bfb      	ldrb	r3, [r7, #15]
 800c448:	4618      	mov	r0, r3
 800c44a:	f000 f8bd 	bl	800c5c8 <USBH_Get_USB_Status>
 800c44e:	4603      	mov	r3, r0
 800c450:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c452:	7bbb      	ldrb	r3, [r7, #14]
}
 800c454:	4618      	mov	r0, r3
 800c456:	3714      	adds	r7, #20
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd90      	pop	{r4, r7, pc}

0800c45c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	460b      	mov	r3, r1
 800c466:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c468:	2300      	movs	r3, #0
 800c46a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c46c:	2300      	movs	r3, #0
 800c46e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c476:	78fa      	ldrb	r2, [r7, #3]
 800c478:	4611      	mov	r1, r2
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7f7 fd61 	bl	8003f42 <HAL_HCD_HC_Halt>
 800c480:	4603      	mov	r3, r0
 800c482:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c484:	7bfb      	ldrb	r3, [r7, #15]
 800c486:	4618      	mov	r0, r3
 800c488:	f000 f89e 	bl	800c5c8 <USBH_Get_USB_Status>
 800c48c:	4603      	mov	r3, r0
 800c48e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c490:	7bbb      	ldrb	r3, [r7, #14]
}
 800c492:	4618      	mov	r0, r3
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c49a:	b590      	push	{r4, r7, lr}
 800c49c:	b089      	sub	sp, #36	; 0x24
 800c49e:	af04      	add	r7, sp, #16
 800c4a0:	6078      	str	r0, [r7, #4]
 800c4a2:	4608      	mov	r0, r1
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	70fb      	strb	r3, [r7, #3]
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	70bb      	strb	r3, [r7, #2]
 800c4b0:	4613      	mov	r3, r2
 800c4b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c4c2:	787c      	ldrb	r4, [r7, #1]
 800c4c4:	78ba      	ldrb	r2, [r7, #2]
 800c4c6:	78f9      	ldrb	r1, [r7, #3]
 800c4c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c4cc:	9303      	str	r3, [sp, #12]
 800c4ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c4d0:	9302      	str	r3, [sp, #8]
 800c4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d4:	9301      	str	r3, [sp, #4]
 800c4d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c4da:	9300      	str	r3, [sp, #0]
 800c4dc:	4623      	mov	r3, r4
 800c4de:	f7f7 fd53 	bl	8003f88 <HAL_HCD_HC_SubmitRequest>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c4e6:	7bfb      	ldrb	r3, [r7, #15]
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f000 f86d 	bl	800c5c8 <USBH_Get_USB_Status>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3714      	adds	r7, #20
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd90      	pop	{r4, r7, pc}

0800c4fc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	460b      	mov	r3, r1
 800c506:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c50e:	78fa      	ldrb	r2, [r7, #3]
 800c510:	4611      	mov	r1, r2
 800c512:	4618      	mov	r0, r3
 800c514:	f7f7 ffe7 	bl	80044e6 <HAL_HCD_HC_GetURBState>
 800c518:	4603      	mov	r3, r0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3708      	adds	r7, #8
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}

0800c522 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c522:	b580      	push	{r7, lr}
 800c524:	b082      	sub	sp, #8
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
 800c52a:	460b      	mov	r3, r1
 800c52c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c534:	2b01      	cmp	r3, #1
 800c536:	d103      	bne.n	800c540 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c538:	78fb      	ldrb	r3, [r7, #3]
 800c53a:	4618      	mov	r0, r3
 800c53c:	f000 f870 	bl	800c620 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c540:	20c8      	movs	r0, #200	; 0xc8
 800c542:	f7f6 fc93 	bl	8002e6c <HAL_Delay>
  return USBH_OK;
 800c546:	2300      	movs	r3, #0
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3708      	adds	r7, #8
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	460b      	mov	r3, r1
 800c55a:	70fb      	strb	r3, [r7, #3]
 800c55c:	4613      	mov	r3, r2
 800c55e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c566:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c568:	78fb      	ldrb	r3, [r7, #3]
 800c56a:	68fa      	ldr	r2, [r7, #12]
 800c56c:	212c      	movs	r1, #44	; 0x2c
 800c56e:	fb01 f303 	mul.w	r3, r1, r3
 800c572:	4413      	add	r3, r2
 800c574:	333b      	adds	r3, #59	; 0x3b
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d009      	beq.n	800c590 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c57c:	78fb      	ldrb	r3, [r7, #3]
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	212c      	movs	r1, #44	; 0x2c
 800c582:	fb01 f303 	mul.w	r3, r1, r3
 800c586:	4413      	add	r3, r2
 800c588:	3354      	adds	r3, #84	; 0x54
 800c58a:	78ba      	ldrb	r2, [r7, #2]
 800c58c:	701a      	strb	r2, [r3, #0]
 800c58e:	e008      	b.n	800c5a2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c590:	78fb      	ldrb	r3, [r7, #3]
 800c592:	68fa      	ldr	r2, [r7, #12]
 800c594:	212c      	movs	r1, #44	; 0x2c
 800c596:	fb01 f303 	mul.w	r3, r1, r3
 800c59a:	4413      	add	r3, r2
 800c59c:	3355      	adds	r3, #85	; 0x55
 800c59e:	78ba      	ldrb	r2, [r7, #2]
 800c5a0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c5a2:	2300      	movs	r3, #0
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3714      	adds	r7, #20
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f7f6 fc57 	bl	8002e6c <HAL_Delay>
}
 800c5be:	bf00      	nop
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
	...

0800c5c8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c5d6:	79fb      	ldrb	r3, [r7, #7]
 800c5d8:	2b03      	cmp	r3, #3
 800c5da:	d817      	bhi.n	800c60c <USBH_Get_USB_Status+0x44>
 800c5dc:	a201      	add	r2, pc, #4	; (adr r2, 800c5e4 <USBH_Get_USB_Status+0x1c>)
 800c5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e2:	bf00      	nop
 800c5e4:	0800c5f5 	.word	0x0800c5f5
 800c5e8:	0800c5fb 	.word	0x0800c5fb
 800c5ec:	0800c601 	.word	0x0800c601
 800c5f0:	0800c607 	.word	0x0800c607
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	73fb      	strb	r3, [r7, #15]
    break;
 800c5f8:	e00b      	b.n	800c612 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c5fa:	2302      	movs	r3, #2
 800c5fc:	73fb      	strb	r3, [r7, #15]
    break;
 800c5fe:	e008      	b.n	800c612 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c600:	2301      	movs	r3, #1
 800c602:	73fb      	strb	r3, [r7, #15]
    break;
 800c604:	e005      	b.n	800c612 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c606:	2302      	movs	r3, #2
 800c608:	73fb      	strb	r3, [r7, #15]
    break;
 800c60a:	e002      	b.n	800c612 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c60c:	2302      	movs	r3, #2
 800c60e:	73fb      	strb	r3, [r7, #15]
    break;
 800c610:	bf00      	nop
  }
  return usb_status;
 800c612:	7bfb      	ldrb	r3, [r7, #15]
}
 800c614:	4618      	mov	r0, r3
 800c616:	3714      	adds	r7, #20
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	4603      	mov	r3, r0
 800c628:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c62a:	79fb      	ldrb	r3, [r7, #7]
 800c62c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c62e:	79fb      	ldrb	r3, [r7, #7]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d102      	bne.n	800c63a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c634:	2300      	movs	r3, #0
 800c636:	73fb      	strb	r3, [r7, #15]
 800c638:	e001      	b.n	800c63e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c63a:	2301      	movs	r3, #1
 800c63c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c63e:	7bfb      	ldrb	r3, [r7, #15]
 800c640:	461a      	mov	r2, r3
 800c642:	2101      	movs	r1, #1
 800c644:	4803      	ldr	r0, [pc, #12]	; (800c654 <MX_DriverVbusFS+0x34>)
 800c646:	f7f7 fb59 	bl	8003cfc <HAL_GPIO_WritePin>
}
 800c64a:	bf00      	nop
 800c64c:	3710      	adds	r7, #16
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	40020800 	.word	0x40020800

0800c658 <__errno>:
 800c658:	4b01      	ldr	r3, [pc, #4]	; (800c660 <__errno+0x8>)
 800c65a:	6818      	ldr	r0, [r3, #0]
 800c65c:	4770      	bx	lr
 800c65e:	bf00      	nop
 800c660:	2000022c 	.word	0x2000022c

0800c664 <__libc_init_array>:
 800c664:	b570      	push	{r4, r5, r6, lr}
 800c666:	4d0d      	ldr	r5, [pc, #52]	; (800c69c <__libc_init_array+0x38>)
 800c668:	4c0d      	ldr	r4, [pc, #52]	; (800c6a0 <__libc_init_array+0x3c>)
 800c66a:	1b64      	subs	r4, r4, r5
 800c66c:	10a4      	asrs	r4, r4, #2
 800c66e:	2600      	movs	r6, #0
 800c670:	42a6      	cmp	r6, r4
 800c672:	d109      	bne.n	800c688 <__libc_init_array+0x24>
 800c674:	4d0b      	ldr	r5, [pc, #44]	; (800c6a4 <__libc_init_array+0x40>)
 800c676:	4c0c      	ldr	r4, [pc, #48]	; (800c6a8 <__libc_init_array+0x44>)
 800c678:	f000 f92e 	bl	800c8d8 <_init>
 800c67c:	1b64      	subs	r4, r4, r5
 800c67e:	10a4      	asrs	r4, r4, #2
 800c680:	2600      	movs	r6, #0
 800c682:	42a6      	cmp	r6, r4
 800c684:	d105      	bne.n	800c692 <__libc_init_array+0x2e>
 800c686:	bd70      	pop	{r4, r5, r6, pc}
 800c688:	f855 3b04 	ldr.w	r3, [r5], #4
 800c68c:	4798      	blx	r3
 800c68e:	3601      	adds	r6, #1
 800c690:	e7ee      	b.n	800c670 <__libc_init_array+0xc>
 800c692:	f855 3b04 	ldr.w	r3, [r5], #4
 800c696:	4798      	blx	r3
 800c698:	3601      	adds	r6, #1
 800c69a:	e7f2      	b.n	800c682 <__libc_init_array+0x1e>
 800c69c:	0800c914 	.word	0x0800c914
 800c6a0:	0800c914 	.word	0x0800c914
 800c6a4:	0800c914 	.word	0x0800c914
 800c6a8:	0800c918 	.word	0x0800c918

0800c6ac <malloc>:
 800c6ac:	4b02      	ldr	r3, [pc, #8]	; (800c6b8 <malloc+0xc>)
 800c6ae:	4601      	mov	r1, r0
 800c6b0:	6818      	ldr	r0, [r3, #0]
 800c6b2:	f000 b87f 	b.w	800c7b4 <_malloc_r>
 800c6b6:	bf00      	nop
 800c6b8:	2000022c 	.word	0x2000022c

0800c6bc <free>:
 800c6bc:	4b02      	ldr	r3, [pc, #8]	; (800c6c8 <free+0xc>)
 800c6be:	4601      	mov	r1, r0
 800c6c0:	6818      	ldr	r0, [r3, #0]
 800c6c2:	f000 b80b 	b.w	800c6dc <_free_r>
 800c6c6:	bf00      	nop
 800c6c8:	2000022c 	.word	0x2000022c

0800c6cc <memset>:
 800c6cc:	4402      	add	r2, r0
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d100      	bne.n	800c6d6 <memset+0xa>
 800c6d4:	4770      	bx	lr
 800c6d6:	f803 1b01 	strb.w	r1, [r3], #1
 800c6da:	e7f9      	b.n	800c6d0 <memset+0x4>

0800c6dc <_free_r>:
 800c6dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6de:	2900      	cmp	r1, #0
 800c6e0:	d044      	beq.n	800c76c <_free_r+0x90>
 800c6e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6e6:	9001      	str	r0, [sp, #4]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	f1a1 0404 	sub.w	r4, r1, #4
 800c6ee:	bfb8      	it	lt
 800c6f0:	18e4      	addlt	r4, r4, r3
 800c6f2:	f000 f8e3 	bl	800c8bc <__malloc_lock>
 800c6f6:	4a1e      	ldr	r2, [pc, #120]	; (800c770 <_free_r+0x94>)
 800c6f8:	9801      	ldr	r0, [sp, #4]
 800c6fa:	6813      	ldr	r3, [r2, #0]
 800c6fc:	b933      	cbnz	r3, 800c70c <_free_r+0x30>
 800c6fe:	6063      	str	r3, [r4, #4]
 800c700:	6014      	str	r4, [r2, #0]
 800c702:	b003      	add	sp, #12
 800c704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c708:	f000 b8de 	b.w	800c8c8 <__malloc_unlock>
 800c70c:	42a3      	cmp	r3, r4
 800c70e:	d908      	bls.n	800c722 <_free_r+0x46>
 800c710:	6825      	ldr	r5, [r4, #0]
 800c712:	1961      	adds	r1, r4, r5
 800c714:	428b      	cmp	r3, r1
 800c716:	bf01      	itttt	eq
 800c718:	6819      	ldreq	r1, [r3, #0]
 800c71a:	685b      	ldreq	r3, [r3, #4]
 800c71c:	1949      	addeq	r1, r1, r5
 800c71e:	6021      	streq	r1, [r4, #0]
 800c720:	e7ed      	b.n	800c6fe <_free_r+0x22>
 800c722:	461a      	mov	r2, r3
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	b10b      	cbz	r3, 800c72c <_free_r+0x50>
 800c728:	42a3      	cmp	r3, r4
 800c72a:	d9fa      	bls.n	800c722 <_free_r+0x46>
 800c72c:	6811      	ldr	r1, [r2, #0]
 800c72e:	1855      	adds	r5, r2, r1
 800c730:	42a5      	cmp	r5, r4
 800c732:	d10b      	bne.n	800c74c <_free_r+0x70>
 800c734:	6824      	ldr	r4, [r4, #0]
 800c736:	4421      	add	r1, r4
 800c738:	1854      	adds	r4, r2, r1
 800c73a:	42a3      	cmp	r3, r4
 800c73c:	6011      	str	r1, [r2, #0]
 800c73e:	d1e0      	bne.n	800c702 <_free_r+0x26>
 800c740:	681c      	ldr	r4, [r3, #0]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	6053      	str	r3, [r2, #4]
 800c746:	4421      	add	r1, r4
 800c748:	6011      	str	r1, [r2, #0]
 800c74a:	e7da      	b.n	800c702 <_free_r+0x26>
 800c74c:	d902      	bls.n	800c754 <_free_r+0x78>
 800c74e:	230c      	movs	r3, #12
 800c750:	6003      	str	r3, [r0, #0]
 800c752:	e7d6      	b.n	800c702 <_free_r+0x26>
 800c754:	6825      	ldr	r5, [r4, #0]
 800c756:	1961      	adds	r1, r4, r5
 800c758:	428b      	cmp	r3, r1
 800c75a:	bf04      	itt	eq
 800c75c:	6819      	ldreq	r1, [r3, #0]
 800c75e:	685b      	ldreq	r3, [r3, #4]
 800c760:	6063      	str	r3, [r4, #4]
 800c762:	bf04      	itt	eq
 800c764:	1949      	addeq	r1, r1, r5
 800c766:	6021      	streq	r1, [r4, #0]
 800c768:	6054      	str	r4, [r2, #4]
 800c76a:	e7ca      	b.n	800c702 <_free_r+0x26>
 800c76c:	b003      	add	sp, #12
 800c76e:	bd30      	pop	{r4, r5, pc}
 800c770:	20000c2c 	.word	0x20000c2c

0800c774 <sbrk_aligned>:
 800c774:	b570      	push	{r4, r5, r6, lr}
 800c776:	4e0e      	ldr	r6, [pc, #56]	; (800c7b0 <sbrk_aligned+0x3c>)
 800c778:	460c      	mov	r4, r1
 800c77a:	6831      	ldr	r1, [r6, #0]
 800c77c:	4605      	mov	r5, r0
 800c77e:	b911      	cbnz	r1, 800c786 <sbrk_aligned+0x12>
 800c780:	f000 f88c 	bl	800c89c <_sbrk_r>
 800c784:	6030      	str	r0, [r6, #0]
 800c786:	4621      	mov	r1, r4
 800c788:	4628      	mov	r0, r5
 800c78a:	f000 f887 	bl	800c89c <_sbrk_r>
 800c78e:	1c43      	adds	r3, r0, #1
 800c790:	d00a      	beq.n	800c7a8 <sbrk_aligned+0x34>
 800c792:	1cc4      	adds	r4, r0, #3
 800c794:	f024 0403 	bic.w	r4, r4, #3
 800c798:	42a0      	cmp	r0, r4
 800c79a:	d007      	beq.n	800c7ac <sbrk_aligned+0x38>
 800c79c:	1a21      	subs	r1, r4, r0
 800c79e:	4628      	mov	r0, r5
 800c7a0:	f000 f87c 	bl	800c89c <_sbrk_r>
 800c7a4:	3001      	adds	r0, #1
 800c7a6:	d101      	bne.n	800c7ac <sbrk_aligned+0x38>
 800c7a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	bd70      	pop	{r4, r5, r6, pc}
 800c7b0:	20000c30 	.word	0x20000c30

0800c7b4 <_malloc_r>:
 800c7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7b8:	1ccd      	adds	r5, r1, #3
 800c7ba:	f025 0503 	bic.w	r5, r5, #3
 800c7be:	3508      	adds	r5, #8
 800c7c0:	2d0c      	cmp	r5, #12
 800c7c2:	bf38      	it	cc
 800c7c4:	250c      	movcc	r5, #12
 800c7c6:	2d00      	cmp	r5, #0
 800c7c8:	4607      	mov	r7, r0
 800c7ca:	db01      	blt.n	800c7d0 <_malloc_r+0x1c>
 800c7cc:	42a9      	cmp	r1, r5
 800c7ce:	d905      	bls.n	800c7dc <_malloc_r+0x28>
 800c7d0:	230c      	movs	r3, #12
 800c7d2:	603b      	str	r3, [r7, #0]
 800c7d4:	2600      	movs	r6, #0
 800c7d6:	4630      	mov	r0, r6
 800c7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7dc:	4e2e      	ldr	r6, [pc, #184]	; (800c898 <_malloc_r+0xe4>)
 800c7de:	f000 f86d 	bl	800c8bc <__malloc_lock>
 800c7e2:	6833      	ldr	r3, [r6, #0]
 800c7e4:	461c      	mov	r4, r3
 800c7e6:	bb34      	cbnz	r4, 800c836 <_malloc_r+0x82>
 800c7e8:	4629      	mov	r1, r5
 800c7ea:	4638      	mov	r0, r7
 800c7ec:	f7ff ffc2 	bl	800c774 <sbrk_aligned>
 800c7f0:	1c43      	adds	r3, r0, #1
 800c7f2:	4604      	mov	r4, r0
 800c7f4:	d14d      	bne.n	800c892 <_malloc_r+0xde>
 800c7f6:	6834      	ldr	r4, [r6, #0]
 800c7f8:	4626      	mov	r6, r4
 800c7fa:	2e00      	cmp	r6, #0
 800c7fc:	d140      	bne.n	800c880 <_malloc_r+0xcc>
 800c7fe:	6823      	ldr	r3, [r4, #0]
 800c800:	4631      	mov	r1, r6
 800c802:	4638      	mov	r0, r7
 800c804:	eb04 0803 	add.w	r8, r4, r3
 800c808:	f000 f848 	bl	800c89c <_sbrk_r>
 800c80c:	4580      	cmp	r8, r0
 800c80e:	d13a      	bne.n	800c886 <_malloc_r+0xd2>
 800c810:	6821      	ldr	r1, [r4, #0]
 800c812:	3503      	adds	r5, #3
 800c814:	1a6d      	subs	r5, r5, r1
 800c816:	f025 0503 	bic.w	r5, r5, #3
 800c81a:	3508      	adds	r5, #8
 800c81c:	2d0c      	cmp	r5, #12
 800c81e:	bf38      	it	cc
 800c820:	250c      	movcc	r5, #12
 800c822:	4629      	mov	r1, r5
 800c824:	4638      	mov	r0, r7
 800c826:	f7ff ffa5 	bl	800c774 <sbrk_aligned>
 800c82a:	3001      	adds	r0, #1
 800c82c:	d02b      	beq.n	800c886 <_malloc_r+0xd2>
 800c82e:	6823      	ldr	r3, [r4, #0]
 800c830:	442b      	add	r3, r5
 800c832:	6023      	str	r3, [r4, #0]
 800c834:	e00e      	b.n	800c854 <_malloc_r+0xa0>
 800c836:	6822      	ldr	r2, [r4, #0]
 800c838:	1b52      	subs	r2, r2, r5
 800c83a:	d41e      	bmi.n	800c87a <_malloc_r+0xc6>
 800c83c:	2a0b      	cmp	r2, #11
 800c83e:	d916      	bls.n	800c86e <_malloc_r+0xba>
 800c840:	1961      	adds	r1, r4, r5
 800c842:	42a3      	cmp	r3, r4
 800c844:	6025      	str	r5, [r4, #0]
 800c846:	bf18      	it	ne
 800c848:	6059      	strne	r1, [r3, #4]
 800c84a:	6863      	ldr	r3, [r4, #4]
 800c84c:	bf08      	it	eq
 800c84e:	6031      	streq	r1, [r6, #0]
 800c850:	5162      	str	r2, [r4, r5]
 800c852:	604b      	str	r3, [r1, #4]
 800c854:	4638      	mov	r0, r7
 800c856:	f104 060b 	add.w	r6, r4, #11
 800c85a:	f000 f835 	bl	800c8c8 <__malloc_unlock>
 800c85e:	f026 0607 	bic.w	r6, r6, #7
 800c862:	1d23      	adds	r3, r4, #4
 800c864:	1af2      	subs	r2, r6, r3
 800c866:	d0b6      	beq.n	800c7d6 <_malloc_r+0x22>
 800c868:	1b9b      	subs	r3, r3, r6
 800c86a:	50a3      	str	r3, [r4, r2]
 800c86c:	e7b3      	b.n	800c7d6 <_malloc_r+0x22>
 800c86e:	6862      	ldr	r2, [r4, #4]
 800c870:	42a3      	cmp	r3, r4
 800c872:	bf0c      	ite	eq
 800c874:	6032      	streq	r2, [r6, #0]
 800c876:	605a      	strne	r2, [r3, #4]
 800c878:	e7ec      	b.n	800c854 <_malloc_r+0xa0>
 800c87a:	4623      	mov	r3, r4
 800c87c:	6864      	ldr	r4, [r4, #4]
 800c87e:	e7b2      	b.n	800c7e6 <_malloc_r+0x32>
 800c880:	4634      	mov	r4, r6
 800c882:	6876      	ldr	r6, [r6, #4]
 800c884:	e7b9      	b.n	800c7fa <_malloc_r+0x46>
 800c886:	230c      	movs	r3, #12
 800c888:	603b      	str	r3, [r7, #0]
 800c88a:	4638      	mov	r0, r7
 800c88c:	f000 f81c 	bl	800c8c8 <__malloc_unlock>
 800c890:	e7a1      	b.n	800c7d6 <_malloc_r+0x22>
 800c892:	6025      	str	r5, [r4, #0]
 800c894:	e7de      	b.n	800c854 <_malloc_r+0xa0>
 800c896:	bf00      	nop
 800c898:	20000c2c 	.word	0x20000c2c

0800c89c <_sbrk_r>:
 800c89c:	b538      	push	{r3, r4, r5, lr}
 800c89e:	4d06      	ldr	r5, [pc, #24]	; (800c8b8 <_sbrk_r+0x1c>)
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	4604      	mov	r4, r0
 800c8a4:	4608      	mov	r0, r1
 800c8a6:	602b      	str	r3, [r5, #0]
 800c8a8:	f7f5 fbc8 	bl	800203c <_sbrk>
 800c8ac:	1c43      	adds	r3, r0, #1
 800c8ae:	d102      	bne.n	800c8b6 <_sbrk_r+0x1a>
 800c8b0:	682b      	ldr	r3, [r5, #0]
 800c8b2:	b103      	cbz	r3, 800c8b6 <_sbrk_r+0x1a>
 800c8b4:	6023      	str	r3, [r4, #0]
 800c8b6:	bd38      	pop	{r3, r4, r5, pc}
 800c8b8:	20000c34 	.word	0x20000c34

0800c8bc <__malloc_lock>:
 800c8bc:	4801      	ldr	r0, [pc, #4]	; (800c8c4 <__malloc_lock+0x8>)
 800c8be:	f000 b809 	b.w	800c8d4 <__retarget_lock_acquire_recursive>
 800c8c2:	bf00      	nop
 800c8c4:	20000c38 	.word	0x20000c38

0800c8c8 <__malloc_unlock>:
 800c8c8:	4801      	ldr	r0, [pc, #4]	; (800c8d0 <__malloc_unlock+0x8>)
 800c8ca:	f000 b804 	b.w	800c8d6 <__retarget_lock_release_recursive>
 800c8ce:	bf00      	nop
 800c8d0:	20000c38 	.word	0x20000c38

0800c8d4 <__retarget_lock_acquire_recursive>:
 800c8d4:	4770      	bx	lr

0800c8d6 <__retarget_lock_release_recursive>:
 800c8d6:	4770      	bx	lr

0800c8d8 <_init>:
 800c8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8da:	bf00      	nop
 800c8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8de:	bc08      	pop	{r3}
 800c8e0:	469e      	mov	lr, r3
 800c8e2:	4770      	bx	lr

0800c8e4 <_fini>:
 800c8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8e6:	bf00      	nop
 800c8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ea:	bc08      	pop	{r3}
 800c8ec:	469e      	mov	lr, r3
 800c8ee:	4770      	bx	lr
