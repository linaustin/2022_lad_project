
encoder_Reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008520  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080086a8  080086a8  000186a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086c4  080086c4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080086c4  080086c4  000186c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086cc  080086cc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086cc  080086cc  000186cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086d0  080086d0  000186d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080086d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000858  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008e8  200008e8  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aaba  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c5c  00000000  00000000  0003ab7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001678  00000000  00000000  0003e7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014e8  00000000  00000000  0003fe50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245cd  00000000  00000000  00041338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c3c1  00000000  00000000  00065905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3b6b  00000000  00000000  00081cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155831  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006198  00000000  00000000  00155884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008690 	.word	0x08008690

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008690 	.word	0x08008690

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

uint32_t count;
int number;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

	number = number + 1;
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3301      	adds	r3, #1
 80004da:	4a04      	ldr	r2, [pc, #16]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004dc:	6013      	str	r3, [r2, #0]
	return;
 80004de:	bf00      	nop
}
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	200001ec 	.word	0x200001ec

080004f0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	count = __HAL_TIM_GET_COUNTER(htim);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004fe:	4a04      	ldr	r2, [pc, #16]	; (8000510 <HAL_TIM_IC_CaptureCallback+0x20>)
 8000500:	6013      	str	r3, [r2, #0]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	200001e8 	.word	0x200001e8

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	count = 1;
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <main+0x50>)
 800051a:	2201      	movs	r2, #1
 800051c:	601a      	str	r2, [r3, #0]
	number = 0;
 800051e:	4b12      	ldr	r3, [pc, #72]	; (8000568 <main+0x54>)
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f000 fcbe 	bl	8000ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f822 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 f970 	bl	8000810 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000530:	f000 f888 	bl	8000644 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000534:	f000 f8e2 	bl	80006fc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000538:	f007 fc62 	bl	8007e00 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 800053c:	f000 f914 	bl	8000768 <MX_TIM2_Init>
  MX_I2S3_Init();
 8000540:	f000 f8ae 	bl	80006a0 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000544:	4809      	ldr	r0, [pc, #36]	; (800056c <main+0x58>)
 8000546:	f004 f847 	bl	80045d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 800054a:	213c      	movs	r1, #60	; 0x3c
 800054c:	4807      	ldr	r0, [pc, #28]	; (800056c <main+0x58>)
 800054e:	f004 f959 	bl	8004804 <HAL_TIM_Encoder_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000552:	f007 fc7b 	bl	8007e4c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    count = __HAL_TIM_GET_COUNTER(&htim2);
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <main+0x58>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800055c:	4a01      	ldr	r2, [pc, #4]	; (8000564 <main+0x50>)
 800055e:	6013      	str	r3, [r2, #0]
    MX_USB_HOST_Process();
 8000560:	e7f7      	b.n	8000552 <main+0x3e>
 8000562:	bf00      	nop
 8000564:	200001e8 	.word	0x200001e8
 8000568:	200001ec 	.word	0x200001ec
 800056c:	200001a0 	.word	0x200001a0

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2230      	movs	r2, #48	; 0x30
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f007 ff80 	bl	8008484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	4b28      	ldr	r3, [pc, #160]	; (800063c <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a27      	ldr	r2, [pc, #156]	; (800063c <SystemClock_Config+0xcc>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b25      	ldr	r3, [pc, #148]	; (800063c <SystemClock_Config+0xcc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b22      	ldr	r3, [pc, #136]	; (8000640 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <SystemClock_Config+0xd0>)
 80005ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <SystemClock_Config+0xd0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005e4:	2348      	movs	r3, #72	; 0x48
 80005e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005ec:	2303      	movs	r3, #3
 80005ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 0320 	add.w	r3, r7, #32
 80005f4:	4618      	mov	r0, r3
 80005f6:	f003 f9a1 	bl	800393c <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000600:	f000 fa04 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2302      	movs	r3, #2
 800060a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000614:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2102      	movs	r1, #2
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fc02 	bl	8003e2c <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800062e:	f000 f9ed 	bl	8000a0c <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	; 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_I2C1_Init+0x50>)
 800064a:	4a13      	ldr	r2, [pc, #76]	; (8000698 <MX_I2C1_Init+0x54>)
 800064c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_I2C1_Init+0x50>)
 8000650:	4a12      	ldr	r2, [pc, #72]	; (800069c <MX_I2C1_Init+0x58>)
 8000652:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_I2C1_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_I2C1_Init+0x50>)
 8000662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000666:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_I2C1_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_I2C1_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_I2C1_Init+0x50>)
 8000682:	f002 fb77 	bl	8002d74 <HAL_I2C_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800068c:	f000 f9be 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200000ac 	.word	0x200000ac
 8000698:	40005400 	.word	0x40005400
 800069c:	000186a0 	.word	0x000186a0

080006a0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_I2S3_Init+0x54>)
 80006a6:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <MX_I2S3_Init+0x58>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_I2S3_Init+0x54>)
 80006ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_I2S3_Init+0x54>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006b8:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_I2S3_Init+0x54>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_I2S3_Init+0x54>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80006c4:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_I2S3_Init+0x54>)
 80006c6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80006ca:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_I2S3_Init+0x54>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_I2S3_Init+0x54>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_I2S3_Init+0x54>)
 80006da:	2201      	movs	r2, #1
 80006dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_I2S3_Init+0x54>)
 80006e0:	f002 fc8c 	bl	8002ffc <HAL_I2S_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006ea:	f000 f98f 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000100 	.word	0x20000100
 80006f8:	40003c00 	.word	0x40003c00

080006fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_SPI1_Init+0x64>)
 8000702:	4a18      	ldr	r2, [pc, #96]	; (8000764 <MX_SPI1_Init+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_SPI1_Init+0x64>)
 8000708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_SPI1_Init+0x64>)
 8000748:	220a      	movs	r2, #10
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_SPI1_Init+0x64>)
 800074e:	f003 feb9 	bl	80044c4 <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f958 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000148 	.word	0x20000148
 8000764:	40013000 	.word	0x40013000

08000768 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08c      	sub	sp, #48	; 0x30
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2224      	movs	r2, #36	; 0x24
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f007 fe84 	bl	8008484 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000784:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_TIM2_Init+0xa4>)
 8000786:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800078a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_TIM2_Init+0xa4>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000792:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_TIM2_Init+0xa4>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_TIM2_Init+0xa4>)
 800079a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800079e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_TIM2_Init+0xa4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_TIM2_Init+0xa4>)
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80007ac:	2303      	movs	r3, #3
 80007ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007b0:	2300      	movs	r3, #0
 80007b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007b4:	2301      	movs	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007c4:	2301      	movs	r3, #1
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4619      	mov	r1, r3
 80007d6:	480d      	ldr	r0, [pc, #52]	; (800080c <MX_TIM2_Init+0xa4>)
 80007d8:	f003 ff6e 	bl	80046b8 <HAL_TIM_Encoder_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80007e2:	f000 f913 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <MX_TIM2_Init+0xa4>)
 80007f4:	f004 faa0 	bl	8004d38 <HAL_TIMEx_MasterConfigSynchronization>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80007fe:	f000 f905 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3730      	adds	r7, #48	; 0x30
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200001a0 	.word	0x200001a0

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
 800082a:	4b72      	ldr	r3, [pc, #456]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a71      	ldr	r2, [pc, #452]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000830:	f043 0310 	orr.w	r3, r3, #16
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b6f      	ldr	r3, [pc, #444]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0310 	and.w	r3, r3, #16
 800083e:	61bb      	str	r3, [r7, #24]
 8000840:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	4b6b      	ldr	r3, [pc, #428]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a6a      	ldr	r2, [pc, #424]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b68      	ldr	r3, [pc, #416]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b64      	ldr	r3, [pc, #400]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a63      	ldr	r2, [pc, #396]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b61      	ldr	r3, [pc, #388]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b5d      	ldr	r3, [pc, #372]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a5c      	ldr	r2, [pc, #368]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b5a      	ldr	r3, [pc, #360]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b56      	ldr	r3, [pc, #344]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a55      	ldr	r2, [pc, #340]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b53      	ldr	r3, [pc, #332]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b4f      	ldr	r3, [pc, #316]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a4e      	ldr	r2, [pc, #312]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b4c      	ldr	r3, [pc, #304]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0308 	and.w	r3, r3, #8
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2108      	movs	r1, #8
 80008d2:	4849      	ldr	r0, [pc, #292]	; (80009f8 <MX_GPIO_Init+0x1e8>)
 80008d4:	f000 fe2a 	bl	800152c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2101      	movs	r1, #1
 80008dc:	4847      	ldr	r0, [pc, #284]	; (80009fc <MX_GPIO_Init+0x1ec>)
 80008de:	f000 fe25 	bl	800152c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e2:	2200      	movs	r2, #0
 80008e4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008e8:	4845      	ldr	r0, [pc, #276]	; (8000a00 <MX_GPIO_Init+0x1f0>)
 80008ea:	f000 fe1f 	bl	800152c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ee:	2308      	movs	r3, #8
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	483c      	ldr	r0, [pc, #240]	; (80009f8 <MX_GPIO_Init+0x1e8>)
 8000906:	f000 fc75 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800090a:	2301      	movs	r3, #1
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4836      	ldr	r0, [pc, #216]	; (80009fc <MX_GPIO_Init+0x1ec>)
 8000922:	f000 fc67 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000926:	2308      	movs	r3, #8
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000936:	2305      	movs	r3, #5
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	482e      	ldr	r0, [pc, #184]	; (80009fc <MX_GPIO_Init+0x1ec>)
 8000942:	f000 fc57 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000946:	2301      	movs	r3, #1
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800094a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	482a      	ldr	r0, [pc, #168]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 800095c:	f000 fc4a 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000960:	2304      	movs	r3, #4
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4825      	ldr	r0, [pc, #148]	; (8000a08 <MX_GPIO_Init+0x1f8>)
 8000974:	f000 fc3e 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800098a:	2305      	movs	r3, #5
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	481c      	ldr	r0, [pc, #112]	; (8000a08 <MX_GPIO_Init+0x1f8>)
 8000996:	f000 fc2d 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800099a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800099e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4813      	ldr	r0, [pc, #76]	; (8000a00 <MX_GPIO_Init+0x1f0>)
 80009b4:	f000 fc1e 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009b8:	2320      	movs	r3, #32
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	480d      	ldr	r0, [pc, #52]	; (8000a00 <MX_GPIO_Init+0x1f0>)
 80009cc:	f000 fc12 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_GPIO_Init+0x1e8>)
 80009e6:	f000 fc05 	bl	80011f4 <HAL_GPIO_Init>

}
 80009ea:	bf00      	nop
 80009ec:	3730      	adds	r7, #48	; 0x30
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40020800 	.word	0x40020800
 8000a00:	40020c00 	.word	0x40020c00
 8000a04:	40020000 	.word	0x40020000
 8000a08:	40020400 	.word	0x40020400

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>
	...

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a19      	ldr	r2, [pc, #100]	; (8000aec <HAL_I2C_MspInit+0x84>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d12c      	bne.n	8000ae4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <HAL_I2C_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a17      	ldr	r2, [pc, #92]	; (8000af0 <HAL_I2C_MspInit+0x88>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_I2C_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aa6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aac:	2312      	movs	r3, #18
 8000aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480c      	ldr	r0, [pc, #48]	; (8000af4 <HAL_I2C_MspInit+0x8c>)
 8000ac4:	f000 fb96 	bl	80011f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_I2C_MspInit+0x88>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <HAL_I2C_MspInit+0x88>)
 8000ad2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <HAL_I2C_MspInit+0x88>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	; 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40005400 	.word	0x40005400
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020400 	.word	0x40020400

08000af8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08e      	sub	sp, #56	; 0x38
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a39      	ldr	r2, [pc, #228]	; (8000c08 <HAL_I2S_MspInit+0x110>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d16b      	bne.n	8000c00 <HAL_I2S_MspInit+0x108>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000b2c:	2332      	movs	r3, #50	; 0x32
 8000b2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 fb83 	bl	8004244 <HAL_RCCEx_PeriphCLKConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b44:	f7ff ff62 	bl	8000a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	; (8000c0c <HAL_I2S_MspInit+0x114>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	4a2e      	ldr	r2, [pc, #184]	; (8000c0c <HAL_I2S_MspInit+0x114>)
 8000b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
 8000b58:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <HAL_I2S_MspInit+0x114>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <HAL_I2S_MspInit+0x114>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	4a27      	ldr	r2, [pc, #156]	; (8000c0c <HAL_I2S_MspInit+0x114>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6313      	str	r3, [r2, #48]	; 0x30
 8000b74:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <HAL_I2S_MspInit+0x114>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <HAL_I2S_MspInit+0x114>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	4a20      	ldr	r2, [pc, #128]	; (8000c0c <HAL_I2S_MspInit+0x114>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b90:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <HAL_I2S_MspInit+0x114>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b9c:	2310      	movs	r3, #16
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bac:	2306      	movs	r3, #6
 8000bae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4816      	ldr	r0, [pc, #88]	; (8000c10 <HAL_I2S_MspInit+0x118>)
 8000bb8:	f000 fb1c 	bl	80011f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bbc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bce:	2306      	movs	r3, #6
 8000bd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480e      	ldr	r0, [pc, #56]	; (8000c14 <HAL_I2S_MspInit+0x11c>)
 8000bda:	f000 fb0b 	bl	80011f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000bde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8000bf0:	2305      	movs	r3, #5
 8000bf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4806      	ldr	r0, [pc, #24]	; (8000c14 <HAL_I2S_MspInit+0x11c>)
 8000bfc:	f000 fafa 	bl	80011f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c00:	bf00      	nop
 8000c02:	3738      	adds	r7, #56	; 0x38
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40003c00 	.word	0x40003c00
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020000 	.word	0x40020000
 8000c14:	40020800 	.word	0x40020800

08000c18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a19      	ldr	r2, [pc, #100]	; (8000c9c <HAL_SPI_MspInit+0x84>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d12b      	bne.n	8000c92 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c72:	23e0      	movs	r3, #224	; 0xe0
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c82:	2305      	movs	r3, #5
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <HAL_SPI_MspInit+0x8c>)
 8000c8e:	f000 fab1 	bl	80011f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	; 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40013000 	.word	0x40013000
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cc8:	d134      	bne.n	8000d34 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <HAL_TIM_Encoder_MspInit+0x94>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a1a      	ldr	r2, [pc, #104]	; (8000d3c <HAL_TIM_Encoder_MspInit+0x94>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_TIM_Encoder_MspInit+0x94>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <HAL_TIM_Encoder_MspInit+0x94>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a13      	ldr	r2, [pc, #76]	; (8000d3c <HAL_TIM_Encoder_MspInit+0x94>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_TIM_Encoder_MspInit+0x94>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8000d02:	f248 0302 	movw	r3, #32770	; 0x8002
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d14:	2301      	movs	r3, #1
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4808      	ldr	r0, [pc, #32]	; (8000d40 <HAL_TIM_Encoder_MspInit+0x98>)
 8000d20:	f000 fa68 	bl	80011f4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2100      	movs	r1, #0
 8000d28:	201c      	movs	r0, #28
 8000d2a:	f000 fa2c 	bl	8001186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d2e:	201c      	movs	r0, #28
 8000d30:	f000 fa45 	bl	80011be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	; 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <NMI_Handler+0x4>

08000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <MemManage_Handler+0x4>

08000d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d90:	f000 f8da 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <TIM2_IRQHandler+0x10>)
 8000d9e:	f003 fddf 	bl	8004960 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200001a0 	.word	0x200001a0

08000dac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <OTG_FS_IRQHandler+0x10>)
 8000db2:	f000 fe3f 	bl	8001a34 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200005d4 	.word	0x200005d4

08000dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc8:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <_sbrk+0x5c>)
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <_sbrk+0x60>)
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <_sbrk+0x64>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <_sbrk+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d207      	bcs.n	8000e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df0:	f007 fb0e 	bl	8008410 <__errno>
 8000df4:	4603      	mov	r3, r0
 8000df6:	220c      	movs	r2, #12
 8000df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dfe:	e009      	b.n	8000e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <_sbrk+0x64>)
 8000e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20020000 	.word	0x20020000
 8000e20:	00000400 	.word	0x00000400
 8000e24:	200001f0 	.word	0x200001f0
 8000e28:	200008e8 	.word	0x200008e8

08000e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <SystemInit+0x20>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <SystemInit+0x20>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e56:	490e      	ldr	r1, [pc, #56]	; (8000e90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e58:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e6c:	4c0b      	ldr	r4, [pc, #44]	; (8000e9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e7a:	f7ff ffd7 	bl	8000e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f007 facd 	bl	800841c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e82:	f7ff fb47 	bl	8000514 <main>
  bx  lr    
 8000e86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e94:	080086d4 	.word	0x080086d4
  ldr r2, =_sbss
 8000e98:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e9c:	200008e8 	.word	0x200008e8

08000ea0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC_IRQHandler>
	...

08000ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <HAL_Init+0x40>)
 8000eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <HAL_Init+0x40>)
 8000eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <HAL_Init+0x40>)
 8000ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 f94f 	bl	8001170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f000 f808 	bl	8000ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed8:	f7ff fd9e 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023c00 	.word	0x40023c00

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_InitTick+0x54>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_InitTick+0x58>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f967 	bl	80011da <HAL_SYSTICK_Config>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00e      	b.n	8000f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d80a      	bhi.n	8000f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f24:	f000 f92f 	bl	8001186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f28:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <HAL_InitTick+0x5c>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e000      	b.n	8000f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000004 	.word	0x20000004

08000f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x20>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x24>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_IncTick+0x24>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	200001f4 	.word	0x200001f4

08000f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_GetTick+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	200001f4 	.word	0x200001f4

08000f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff ffee 	bl	8000f70 <HAL_GetTick>
 8000f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fa0:	d005      	beq.n	8000fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_Delay+0x44>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fae:	bf00      	nop
 8000fb0:	f7ff ffde 	bl	8000f70 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d8f7      	bhi.n	8000fb0 <HAL_Delay+0x28>
  {
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008

08000fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <__NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	2b00      	cmp	r3, #0
 8001044:	db0b      	blt.n	800105e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	f003 021f 	and.w	r2, r3, #31
 800104c:	4907      	ldr	r1, [pc, #28]	; (800106c <__NVIC_EnableIRQ+0x38>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	2001      	movs	r0, #1
 8001056:	fa00 f202 	lsl.w	r2, r0, r2
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db0a      	blt.n	800109a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	490c      	ldr	r1, [pc, #48]	; (80010bc <__NVIC_SetPriority+0x4c>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	0112      	lsls	r2, r2, #4
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	440b      	add	r3, r1
 8001094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001098:	e00a      	b.n	80010b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4908      	ldr	r1, [pc, #32]	; (80010c0 <__NVIC_SetPriority+0x50>)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	3b04      	subs	r3, #4
 80010a8:	0112      	lsls	r2, r2, #4
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	440b      	add	r3, r1
 80010ae:	761a      	strb	r2, [r3, #24]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43da      	mvns	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43d9      	mvns	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	4313      	orrs	r3, r2
         );
}
 800111e:	4618      	mov	r0, r3
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800113c:	d301      	bcc.n	8001142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113e:	2301      	movs	r3, #1
 8001140:	e00f      	b.n	8001162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <SysTick_Config+0x40>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114a:	210f      	movs	r1, #15
 800114c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001150:	f7ff ff8e 	bl	8001070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <SysTick_Config+0x40>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115a:	4b04      	ldr	r3, [pc, #16]	; (800116c <SysTick_Config+0x40>)
 800115c:	2207      	movs	r2, #7
 800115e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	e000e010 	.word	0xe000e010

08001170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff29 	bl	8000fd0 <__NVIC_SetPriorityGrouping>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001198:	f7ff ff3e 	bl	8001018 <__NVIC_GetPriorityGrouping>
 800119c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f7ff ff8e 	bl	80010c4 <NVIC_EncodePriority>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff5d 	bl	8001070 <__NVIC_SetPriority>
}
 80011b6:	bf00      	nop
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff31 	bl	8001034 <__NVIC_EnableIRQ>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ffa2 	bl	800112c <SysTick_Config>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
 800120e:	e16b      	b.n	80014e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001210:	2201      	movs	r2, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	429a      	cmp	r2, r3
 800122a:	f040 815a 	bne.w	80014e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	2b01      	cmp	r3, #1
 8001238:	d005      	beq.n	8001246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001242:	2b02      	cmp	r3, #2
 8001244:	d130      	bne.n	80012a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800127c:	2201      	movs	r2, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	f003 0201 	and.w	r2, r3, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d017      	beq.n	80012e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d123      	bne.n	8001338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	08da      	lsrs	r2, r3, #3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3208      	adds	r2, #8
 80012f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	691a      	ldr	r2, [r3, #16]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	08da      	lsrs	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3208      	adds	r2, #8
 8001332:	69b9      	ldr	r1, [r7, #24]
 8001334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2203      	movs	r2, #3
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0203 	and.w	r2, r3, #3
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 80b4 	beq.w	80014e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b60      	ldr	r3, [pc, #384]	; (8001500 <HAL_GPIO_Init+0x30c>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a5f      	ldr	r2, [pc, #380]	; (8001500 <HAL_GPIO_Init+0x30c>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b5d      	ldr	r3, [pc, #372]	; (8001500 <HAL_GPIO_Init+0x30c>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001396:	4a5b      	ldr	r2, [pc, #364]	; (8001504 <HAL_GPIO_Init+0x310>)
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	3302      	adds	r3, #2
 800139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	220f      	movs	r2, #15
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a52      	ldr	r2, [pc, #328]	; (8001508 <HAL_GPIO_Init+0x314>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d02b      	beq.n	800141a <HAL_GPIO_Init+0x226>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a51      	ldr	r2, [pc, #324]	; (800150c <HAL_GPIO_Init+0x318>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d025      	beq.n	8001416 <HAL_GPIO_Init+0x222>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a50      	ldr	r2, [pc, #320]	; (8001510 <HAL_GPIO_Init+0x31c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d01f      	beq.n	8001412 <HAL_GPIO_Init+0x21e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4f      	ldr	r2, [pc, #316]	; (8001514 <HAL_GPIO_Init+0x320>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d019      	beq.n	800140e <HAL_GPIO_Init+0x21a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4e      	ldr	r2, [pc, #312]	; (8001518 <HAL_GPIO_Init+0x324>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d013      	beq.n	800140a <HAL_GPIO_Init+0x216>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4d      	ldr	r2, [pc, #308]	; (800151c <HAL_GPIO_Init+0x328>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d00d      	beq.n	8001406 <HAL_GPIO_Init+0x212>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4c      	ldr	r2, [pc, #304]	; (8001520 <HAL_GPIO_Init+0x32c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d007      	beq.n	8001402 <HAL_GPIO_Init+0x20e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4b      	ldr	r2, [pc, #300]	; (8001524 <HAL_GPIO_Init+0x330>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d101      	bne.n	80013fe <HAL_GPIO_Init+0x20a>
 80013fa:	2307      	movs	r3, #7
 80013fc:	e00e      	b.n	800141c <HAL_GPIO_Init+0x228>
 80013fe:	2308      	movs	r3, #8
 8001400:	e00c      	b.n	800141c <HAL_GPIO_Init+0x228>
 8001402:	2306      	movs	r3, #6
 8001404:	e00a      	b.n	800141c <HAL_GPIO_Init+0x228>
 8001406:	2305      	movs	r3, #5
 8001408:	e008      	b.n	800141c <HAL_GPIO_Init+0x228>
 800140a:	2304      	movs	r3, #4
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x228>
 800140e:	2303      	movs	r3, #3
 8001410:	e004      	b.n	800141c <HAL_GPIO_Init+0x228>
 8001412:	2302      	movs	r3, #2
 8001414:	e002      	b.n	800141c <HAL_GPIO_Init+0x228>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <HAL_GPIO_Init+0x228>
 800141a:	2300      	movs	r3, #0
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	f002 0203 	and.w	r2, r2, #3
 8001422:	0092      	lsls	r2, r2, #2
 8001424:	4093      	lsls	r3, r2
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800142c:	4935      	ldr	r1, [pc, #212]	; (8001504 <HAL_GPIO_Init+0x310>)
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	3302      	adds	r3, #2
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800143a:	4b3b      	ldr	r3, [pc, #236]	; (8001528 <HAL_GPIO_Init+0x334>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800145e:	4a32      	ldr	r2, [pc, #200]	; (8001528 <HAL_GPIO_Init+0x334>)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001464:	4b30      	ldr	r3, [pc, #192]	; (8001528 <HAL_GPIO_Init+0x334>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001488:	4a27      	ldr	r2, [pc, #156]	; (8001528 <HAL_GPIO_Init+0x334>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800148e:	4b26      	ldr	r3, [pc, #152]	; (8001528 <HAL_GPIO_Init+0x334>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014b2:	4a1d      	ldr	r2, [pc, #116]	; (8001528 <HAL_GPIO_Init+0x334>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_GPIO_Init+0x334>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014dc:	4a12      	ldr	r2, [pc, #72]	; (8001528 <HAL_GPIO_Init+0x334>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3301      	adds	r3, #1
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	2b0f      	cmp	r3, #15
 80014ec:	f67f ae90 	bls.w	8001210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40013800 	.word	0x40013800
 8001508:	40020000 	.word	0x40020000
 800150c:	40020400 	.word	0x40020400
 8001510:	40020800 	.word	0x40020800
 8001514:	40020c00 	.word	0x40020c00
 8001518:	40021000 	.word	0x40021000
 800151c:	40021400 	.word	0x40021400
 8001520:	40021800 	.word	0x40021800
 8001524:	40021c00 	.word	0x40021c00
 8001528:	40013c00 	.word	0x40013c00

0800152c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
 8001538:	4613      	mov	r3, r2
 800153a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800153c:	787b      	ldrb	r3, [r7, #1]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001542:	887a      	ldrh	r2, [r7, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001548:	e003      	b.n	8001552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	041a      	lsls	r2, r3, #16
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	619a      	str	r2, [r3, #24]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800155e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001560:	b08f      	sub	sp, #60	; 0x3c
 8001562:	af0a      	add	r7, sp, #40	; 0x28
 8001564:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e054      	b.n	800161a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d106      	bne.n	8001590 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f006 fc96 	bl	8007ebc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2203      	movs	r2, #3
 8001594:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 fcc4 	bl	8004f3c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	687e      	ldr	r6, [r7, #4]
 80015bc:	466d      	mov	r5, sp
 80015be:	f106 0410 	add.w	r4, r6, #16
 80015c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80015d2:	1d33      	adds	r3, r6, #4
 80015d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015d6:	6838      	ldr	r0, [r7, #0]
 80015d8:	f003 fc3e 	bl	8004e58 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2101      	movs	r1, #1
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 fcbb 	bl	8004f5e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	687e      	ldr	r6, [r7, #4]
 80015f0:	466d      	mov	r5, sp
 80015f2:	f106 0410 	add.w	r4, r6, #16
 80015f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001602:	e885 0003 	stmia.w	r5, {r0, r1}
 8001606:	1d33      	adds	r3, r6, #4
 8001608:	cb0e      	ldmia	r3, {r1, r2, r3}
 800160a:	6838      	ldr	r0, [r7, #0]
 800160c:	f003 fe44 	bl	8005298 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001622 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001622:	b590      	push	{r4, r7, lr}
 8001624:	b089      	sub	sp, #36	; 0x24
 8001626:	af04      	add	r7, sp, #16
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	4608      	mov	r0, r1
 800162c:	4611      	mov	r1, r2
 800162e:	461a      	mov	r2, r3
 8001630:	4603      	mov	r3, r0
 8001632:	70fb      	strb	r3, [r7, #3]
 8001634:	460b      	mov	r3, r1
 8001636:	70bb      	strb	r3, [r7, #2]
 8001638:	4613      	mov	r3, r2
 800163a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <HAL_HCD_HC_Init+0x28>
 8001646:	2302      	movs	r3, #2
 8001648:	e076      	b.n	8001738 <HAL_HCD_HC_Init+0x116>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001652:	78fb      	ldrb	r3, [r7, #3]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	212c      	movs	r1, #44	; 0x2c
 8001658:	fb01 f303 	mul.w	r3, r1, r3
 800165c:	4413      	add	r3, r2
 800165e:	333d      	adds	r3, #61	; 0x3d
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	212c      	movs	r1, #44	; 0x2c
 800166a:	fb01 f303 	mul.w	r3, r1, r3
 800166e:	4413      	add	r3, r2
 8001670:	3338      	adds	r3, #56	; 0x38
 8001672:	787a      	ldrb	r2, [r7, #1]
 8001674:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001676:	78fb      	ldrb	r3, [r7, #3]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	212c      	movs	r1, #44	; 0x2c
 800167c:	fb01 f303 	mul.w	r3, r1, r3
 8001680:	4413      	add	r3, r2
 8001682:	3340      	adds	r3, #64	; 0x40
 8001684:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001686:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	212c      	movs	r1, #44	; 0x2c
 800168e:	fb01 f303 	mul.w	r3, r1, r3
 8001692:	4413      	add	r3, r2
 8001694:	3339      	adds	r3, #57	; 0x39
 8001696:	78fa      	ldrb	r2, [r7, #3]
 8001698:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	212c      	movs	r1, #44	; 0x2c
 80016a0:	fb01 f303 	mul.w	r3, r1, r3
 80016a4:	4413      	add	r3, r2
 80016a6:	333f      	adds	r3, #63	; 0x3f
 80016a8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80016ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	78ba      	ldrb	r2, [r7, #2]
 80016b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016b6:	b2d0      	uxtb	r0, r2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	212c      	movs	r1, #44	; 0x2c
 80016bc:	fb01 f303 	mul.w	r3, r1, r3
 80016c0:	4413      	add	r3, r2
 80016c2:	333a      	adds	r3, #58	; 0x3a
 80016c4:	4602      	mov	r2, r0
 80016c6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80016c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	da09      	bge.n	80016e4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016d0:	78fb      	ldrb	r3, [r7, #3]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	212c      	movs	r1, #44	; 0x2c
 80016d6:	fb01 f303 	mul.w	r3, r1, r3
 80016da:	4413      	add	r3, r2
 80016dc:	333b      	adds	r3, #59	; 0x3b
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]
 80016e2:	e008      	b.n	80016f6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	212c      	movs	r1, #44	; 0x2c
 80016ea:	fb01 f303 	mul.w	r3, r1, r3
 80016ee:	4413      	add	r3, r2
 80016f0:	333b      	adds	r3, #59	; 0x3b
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016f6:	78fb      	ldrb	r3, [r7, #3]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	212c      	movs	r1, #44	; 0x2c
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	333c      	adds	r3, #60	; 0x3c
 8001704:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001708:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6818      	ldr	r0, [r3, #0]
 800170e:	787c      	ldrb	r4, [r7, #1]
 8001710:	78ba      	ldrb	r2, [r7, #2]
 8001712:	78f9      	ldrb	r1, [r7, #3]
 8001714:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001716:	9302      	str	r3, [sp, #8]
 8001718:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	4623      	mov	r3, r4
 8001726:	f003 ff3d 	bl	80055a4 <USB_HC_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001736:	7bfb      	ldrb	r3, [r7, #15]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	bd90      	pop	{r4, r7, pc}

08001740 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001756:	2b01      	cmp	r3, #1
 8001758:	d101      	bne.n	800175e <HAL_HCD_HC_Halt+0x1e>
 800175a:	2302      	movs	r3, #2
 800175c:	e00f      	b.n	800177e <HAL_HCD_HC_Halt+0x3e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	4611      	mov	r1, r2
 800176e:	4618      	mov	r0, r3
 8001770:	f004 f98d 	bl	8005a8e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800177c:	7bfb      	ldrb	r3, [r7, #15]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	4608      	mov	r0, r1
 8001792:	4611      	mov	r1, r2
 8001794:	461a      	mov	r2, r3
 8001796:	4603      	mov	r3, r0
 8001798:	70fb      	strb	r3, [r7, #3]
 800179a:	460b      	mov	r3, r1
 800179c:	70bb      	strb	r3, [r7, #2]
 800179e:	4613      	mov	r3, r2
 80017a0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017a2:	78fb      	ldrb	r3, [r7, #3]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	212c      	movs	r1, #44	; 0x2c
 80017a8:	fb01 f303 	mul.w	r3, r1, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	333b      	adds	r3, #59	; 0x3b
 80017b0:	78ba      	ldrb	r2, [r7, #2]
 80017b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	212c      	movs	r1, #44	; 0x2c
 80017ba:	fb01 f303 	mul.w	r3, r1, r3
 80017be:	4413      	add	r3, r2
 80017c0:	333f      	adds	r3, #63	; 0x3f
 80017c2:	787a      	ldrb	r2, [r7, #1]
 80017c4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017c6:	7c3b      	ldrb	r3, [r7, #16]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d112      	bne.n	80017f2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	212c      	movs	r1, #44	; 0x2c
 80017d2:	fb01 f303 	mul.w	r3, r1, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	3342      	adds	r3, #66	; 0x42
 80017da:	2203      	movs	r2, #3
 80017dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	212c      	movs	r1, #44	; 0x2c
 80017e4:	fb01 f303 	mul.w	r3, r1, r3
 80017e8:	4413      	add	r3, r2
 80017ea:	333d      	adds	r3, #61	; 0x3d
 80017ec:	7f3a      	ldrb	r2, [r7, #28]
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	e008      	b.n	8001804 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	212c      	movs	r1, #44	; 0x2c
 80017f8:	fb01 f303 	mul.w	r3, r1, r3
 80017fc:	4413      	add	r3, r2
 80017fe:	3342      	adds	r3, #66	; 0x42
 8001800:	2202      	movs	r2, #2
 8001802:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001804:	787b      	ldrb	r3, [r7, #1]
 8001806:	2b03      	cmp	r3, #3
 8001808:	f200 80c6 	bhi.w	8001998 <HAL_HCD_HC_SubmitRequest+0x210>
 800180c:	a201      	add	r2, pc, #4	; (adr r2, 8001814 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800180e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001812:	bf00      	nop
 8001814:	08001825 	.word	0x08001825
 8001818:	08001985 	.word	0x08001985
 800181c:	08001889 	.word	0x08001889
 8001820:	08001907 	.word	0x08001907
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001824:	7c3b      	ldrb	r3, [r7, #16]
 8001826:	2b01      	cmp	r3, #1
 8001828:	f040 80b8 	bne.w	800199c <HAL_HCD_HC_SubmitRequest+0x214>
 800182c:	78bb      	ldrb	r3, [r7, #2]
 800182e:	2b00      	cmp	r3, #0
 8001830:	f040 80b4 	bne.w	800199c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001834:	8b3b      	ldrh	r3, [r7, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d108      	bne.n	800184c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	212c      	movs	r1, #44	; 0x2c
 8001840:	fb01 f303 	mul.w	r3, r1, r3
 8001844:	4413      	add	r3, r2
 8001846:	3355      	adds	r3, #85	; 0x55
 8001848:	2201      	movs	r2, #1
 800184a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	212c      	movs	r1, #44	; 0x2c
 8001852:	fb01 f303 	mul.w	r3, r1, r3
 8001856:	4413      	add	r3, r2
 8001858:	3355      	adds	r3, #85	; 0x55
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d109      	bne.n	8001874 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	212c      	movs	r1, #44	; 0x2c
 8001866:	fb01 f303 	mul.w	r3, r1, r3
 800186a:	4413      	add	r3, r2
 800186c:	3342      	adds	r3, #66	; 0x42
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001872:	e093      	b.n	800199c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	212c      	movs	r1, #44	; 0x2c
 800187a:	fb01 f303 	mul.w	r3, r1, r3
 800187e:	4413      	add	r3, r2
 8001880:	3342      	adds	r3, #66	; 0x42
 8001882:	2202      	movs	r2, #2
 8001884:	701a      	strb	r2, [r3, #0]
      break;
 8001886:	e089      	b.n	800199c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001888:	78bb      	ldrb	r3, [r7, #2]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d11d      	bne.n	80018ca <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	212c      	movs	r1, #44	; 0x2c
 8001894:	fb01 f303 	mul.w	r3, r1, r3
 8001898:	4413      	add	r3, r2
 800189a:	3355      	adds	r3, #85	; 0x55
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d109      	bne.n	80018b6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	212c      	movs	r1, #44	; 0x2c
 80018a8:	fb01 f303 	mul.w	r3, r1, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	3342      	adds	r3, #66	; 0x42
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018b4:	e073      	b.n	800199e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	212c      	movs	r1, #44	; 0x2c
 80018bc:	fb01 f303 	mul.w	r3, r1, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	3342      	adds	r3, #66	; 0x42
 80018c4:	2202      	movs	r2, #2
 80018c6:	701a      	strb	r2, [r3, #0]
      break;
 80018c8:	e069      	b.n	800199e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	212c      	movs	r1, #44	; 0x2c
 80018d0:	fb01 f303 	mul.w	r3, r1, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	3354      	adds	r3, #84	; 0x54
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d109      	bne.n	80018f2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	212c      	movs	r1, #44	; 0x2c
 80018e4:	fb01 f303 	mul.w	r3, r1, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	3342      	adds	r3, #66	; 0x42
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
      break;
 80018f0:	e055      	b.n	800199e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	212c      	movs	r1, #44	; 0x2c
 80018f8:	fb01 f303 	mul.w	r3, r1, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	3342      	adds	r3, #66	; 0x42
 8001900:	2202      	movs	r2, #2
 8001902:	701a      	strb	r2, [r3, #0]
      break;
 8001904:	e04b      	b.n	800199e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001906:	78bb      	ldrb	r3, [r7, #2]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d11d      	bne.n	8001948 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	212c      	movs	r1, #44	; 0x2c
 8001912:	fb01 f303 	mul.w	r3, r1, r3
 8001916:	4413      	add	r3, r2
 8001918:	3355      	adds	r3, #85	; 0x55
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d109      	bne.n	8001934 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	212c      	movs	r1, #44	; 0x2c
 8001926:	fb01 f303 	mul.w	r3, r1, r3
 800192a:	4413      	add	r3, r2
 800192c:	3342      	adds	r3, #66	; 0x42
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001932:	e034      	b.n	800199e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	212c      	movs	r1, #44	; 0x2c
 800193a:	fb01 f303 	mul.w	r3, r1, r3
 800193e:	4413      	add	r3, r2
 8001940:	3342      	adds	r3, #66	; 0x42
 8001942:	2202      	movs	r2, #2
 8001944:	701a      	strb	r2, [r3, #0]
      break;
 8001946:	e02a      	b.n	800199e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	212c      	movs	r1, #44	; 0x2c
 800194e:	fb01 f303 	mul.w	r3, r1, r3
 8001952:	4413      	add	r3, r2
 8001954:	3354      	adds	r3, #84	; 0x54
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d109      	bne.n	8001970 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	212c      	movs	r1, #44	; 0x2c
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	4413      	add	r3, r2
 8001968:	3342      	adds	r3, #66	; 0x42
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
      break;
 800196e:	e016      	b.n	800199e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	212c      	movs	r1, #44	; 0x2c
 8001976:	fb01 f303 	mul.w	r3, r1, r3
 800197a:	4413      	add	r3, r2
 800197c:	3342      	adds	r3, #66	; 0x42
 800197e:	2202      	movs	r2, #2
 8001980:	701a      	strb	r2, [r3, #0]
      break;
 8001982:	e00c      	b.n	800199e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	212c      	movs	r1, #44	; 0x2c
 800198a:	fb01 f303 	mul.w	r3, r1, r3
 800198e:	4413      	add	r3, r2
 8001990:	3342      	adds	r3, #66	; 0x42
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
      break;
 8001996:	e002      	b.n	800199e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001998:	bf00      	nop
 800199a:	e000      	b.n	800199e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800199c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	212c      	movs	r1, #44	; 0x2c
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	3344      	adds	r3, #68	; 0x44
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	8b3a      	ldrh	r2, [r7, #24]
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	202c      	movs	r0, #44	; 0x2c
 80019b8:	fb00 f303 	mul.w	r3, r0, r3
 80019bc:	440b      	add	r3, r1
 80019be:	334c      	adds	r3, #76	; 0x4c
 80019c0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	212c      	movs	r1, #44	; 0x2c
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	3360      	adds	r3, #96	; 0x60
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	212c      	movs	r1, #44	; 0x2c
 80019da:	fb01 f303 	mul.w	r3, r1, r3
 80019de:	4413      	add	r3, r2
 80019e0:	3350      	adds	r3, #80	; 0x50
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	212c      	movs	r1, #44	; 0x2c
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	3339      	adds	r3, #57	; 0x39
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	212c      	movs	r1, #44	; 0x2c
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	3361      	adds	r3, #97	; 0x61
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	222c      	movs	r2, #44	; 0x2c
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	3338      	adds	r3, #56	; 0x38
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	18d1      	adds	r1, r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	f003 fee0 	bl	80057e8 <USB_HC_StartXfer>
 8001a28:	4603      	mov	r3, r0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop

08001a34 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f003 fbe1 	bl	8005212 <USB_GetMode>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	f040 80f6 	bne.w	8001c44 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f003 fbc5 	bl	80051ec <USB_ReadInterrupts>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80ec 	beq.w	8001c42 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 fbbc 	bl	80051ec <USB_ReadInterrupts>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a7e:	d104      	bne.n	8001a8a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 fbac 	bl	80051ec <USB_ReadInterrupts>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a9e:	d104      	bne.n	8001aaa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001aa8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 fb9c 	bl	80051ec <USB_ReadInterrupts>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001abe:	d104      	bne.n	8001aca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ac8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 fb8c 	bl	80051ec <USB_ReadInterrupts>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d103      	bne.n	8001ae6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fb7e 	bl	80051ec <USB_ReadInterrupts>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001af6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001afa:	d11c      	bne.n	8001b36 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b04:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10f      	bne.n	8001b36 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b16:	2110      	movs	r1, #16
 8001b18:	6938      	ldr	r0, [r7, #16]
 8001b1a:	f003 fa6d 	bl	8004ff8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b1e:	6938      	ldr	r0, [r7, #16]
 8001b20:	f003 fa9e 	bl	8005060 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2101      	movs	r1, #1
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 fc74 	bl	8005418 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f006 fa41 	bl	8007fb8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 fb56 	bl	80051ec <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b4a:	d102      	bne.n	8001b52 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f001 f89e 	bl	8002c8e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 fb48 	bl	80051ec <USB_ReadInterrupts>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d106      	bne.n	8001b74 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f006 fa0a 	bl	8007f80 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2208      	movs	r2, #8
 8001b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 fb37 	bl	80051ec <USB_ReadInterrupts>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	2b10      	cmp	r3, #16
 8001b86:	d101      	bne.n	8001b8c <HAL_HCD_IRQHandler+0x158>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <HAL_HCD_IRQHandler+0x15a>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d012      	beq.n	8001bb8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699a      	ldr	r2, [r3, #24]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0210 	bic.w	r2, r2, #16
 8001ba0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 ffa1 	bl	8002aea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699a      	ldr	r2, [r3, #24]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0210 	orr.w	r2, r2, #16
 8001bb6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 fb15 	bl	80051ec <USB_ReadInterrupts>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bcc:	d13a      	bne.n	8001c44 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 ff4a 	bl	8005a6c <USB_HC_ReadInterrupt>
 8001bd8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	e025      	b.n	8001c2c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d018      	beq.n	8001c26 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	015a      	lsls	r2, r3, #5
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c0a:	d106      	bne.n	8001c1a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	4619      	mov	r1, r3
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f8ab 	bl	8001d6e <HCD_HC_IN_IRQHandler>
 8001c18:	e005      	b.n	8001c26 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	4619      	mov	r1, r3
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fbf9 	bl	8002418 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d3d4      	bcc.n	8001be0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c3e:	615a      	str	r2, [r3, #20]
 8001c40:	e000      	b.n	8001c44 <HAL_HCD_IRQHandler+0x210>
      return;
 8001c42:	bf00      	nop
    }
  }
}
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_HCD_Start+0x16>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e013      	b.n	8001c88 <HAL_HCD_Start+0x3e>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 fc36 	bl	80054e0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f003 f94e 	bl	8004f1a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d101      	bne.n	8001ca6 <HAL_HCD_Stop+0x16>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e00d      	b.n	8001cc2 <HAL_HCD_Stop+0x32>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f004 f824 	bl	8005d00 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f003 fbd8 	bl	800548c <USB_ResetPort>
 8001cdc:	4603      	mov	r3, r0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	212c      	movs	r1, #44	; 0x2c
 8001cf8:	fb01 f303 	mul.w	r3, r1, r3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3360      	adds	r3, #96	; 0x60
 8001d00:	781b      	ldrb	r3, [r3, #0]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	460b      	mov	r3, r1
 8001d18:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	212c      	movs	r1, #44	; 0x2c
 8001d20:	fb01 f303 	mul.w	r3, r1, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	3350      	adds	r3, #80	; 0x50
 8001d28:	681b      	ldr	r3, [r3, #0]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f003 fc1c 	bl	8005580 <USB_GetCurrentFrame>
 8001d48:	4603      	mov	r3, r0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 fbf7 	bl	8005552 <USB_GetHostSpeed>
 8001d64:	4603      	mov	r3, r0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	460b      	mov	r3, r1
 8001d78:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	015a      	lsls	r2, r3, #5
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4413      	add	r3, r2
 8001d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d11a      	bne.n	8001dd4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	015a      	lsls	r2, r3, #5
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001daa:	461a      	mov	r2, r3
 8001dac:	2304      	movs	r3, #4
 8001dae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	212c      	movs	r1, #44	; 0x2c
 8001db6:	fb01 f303 	mul.w	r3, r1, r3
 8001dba:	4413      	add	r3, r2
 8001dbc:	3361      	adds	r3, #97	; 0x61
 8001dbe:	2206      	movs	r2, #6
 8001dc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fe5e 	bl	8005a8e <USB_HC_Halt>
 8001dd2:	e0af      	b.n	8001f34 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	015a      	lsls	r2, r3, #5
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4413      	add	r3, r2
 8001ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dea:	d11b      	bne.n	8001e24 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df8:	461a      	mov	r2, r3
 8001dfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dfe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	212c      	movs	r1, #44	; 0x2c
 8001e06:	fb01 f303 	mul.w	r3, r1, r3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3361      	adds	r3, #97	; 0x61
 8001e0e:	2207      	movs	r2, #7
 8001e10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f003 fe36 	bl	8005a8e <USB_HC_Halt>
 8001e22:	e087      	b.n	8001f34 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	015a      	lsls	r2, r3, #5
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 0320 	and.w	r3, r3, #32
 8001e36:	2b20      	cmp	r3, #32
 8001e38:	d109      	bne.n	8001e4e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	015a      	lsls	r2, r3, #5
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e46:	461a      	mov	r2, r3
 8001e48:	2320      	movs	r3, #32
 8001e4a:	6093      	str	r3, [r2, #8]
 8001e4c:	e072      	b.n	8001f34 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	015a      	lsls	r2, r3, #5
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d11a      	bne.n	8001e9a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	015a      	lsls	r2, r3, #5
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e70:	461a      	mov	r2, r3
 8001e72:	2308      	movs	r3, #8
 8001e74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	212c      	movs	r1, #44	; 0x2c
 8001e7c:	fb01 f303 	mul.w	r3, r1, r3
 8001e80:	4413      	add	r3, r2
 8001e82:	3361      	adds	r3, #97	; 0x61
 8001e84:	2205      	movs	r2, #5
 8001e86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 fdfb 	bl	8005a8e <USB_HC_Halt>
 8001e98:	e04c      	b.n	8001f34 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb0:	d11b      	bne.n	8001eea <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	015a      	lsls	r2, r3, #5
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	212c      	movs	r1, #44	; 0x2c
 8001ecc:	fb01 f303 	mul.w	r3, r1, r3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3361      	adds	r3, #97	; 0x61
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f003 fdd3 	bl	8005a8e <USB_HC_Halt>
 8001ee8:	e024      	b.n	8001f34 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efc:	2b80      	cmp	r3, #128	; 0x80
 8001efe:	d119      	bne.n	8001f34 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	2380      	movs	r3, #128	; 0x80
 8001f10:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	212c      	movs	r1, #44	; 0x2c
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3361      	adds	r3, #97	; 0x61
 8001f20:	2206      	movs	r2, #6
 8001f22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f003 fdad 	bl	8005a8e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	015a      	lsls	r2, r3, #5
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f4a:	d112      	bne.n	8001f72 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	4611      	mov	r1, r2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f003 fd99 	bl	8005a8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f68:	461a      	mov	r2, r3
 8001f6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f6e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f70:	e24e      	b.n	8002410 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	f040 80df 	bne.w	8002148 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d019      	beq.n	8001fc6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3348      	adds	r3, #72	; 0x48
 8001fa0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	0159      	lsls	r1, r3, #5
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	440b      	add	r3, r1
 8001faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fb4:	1ad2      	subs	r2, r2, r3
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	202c      	movs	r0, #44	; 0x2c
 8001fbc:	fb00 f303 	mul.w	r3, r0, r3
 8001fc0:	440b      	add	r3, r1
 8001fc2:	3350      	adds	r3, #80	; 0x50
 8001fc4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	212c      	movs	r1, #44	; 0x2c
 8001fcc:	fb01 f303 	mul.w	r3, r1, r3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3361      	adds	r3, #97	; 0x61
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	212c      	movs	r1, #44	; 0x2c
 8001fde:	fb01 f303 	mul.w	r3, r1, r3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	335c      	adds	r3, #92	; 0x5c
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	212c      	movs	r1, #44	; 0x2c
 8002002:	fb01 f303 	mul.w	r3, r1, r3
 8002006:	4413      	add	r3, r2
 8002008:	333f      	adds	r3, #63	; 0x3f
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d009      	beq.n	8002024 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	212c      	movs	r1, #44	; 0x2c
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	333f      	adds	r3, #63	; 0x3f
 800201e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002020:	2b02      	cmp	r3, #2
 8002022:	d111      	bne.n	8002048 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f003 fd2d 	bl	8005a8e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4413      	add	r3, r2
 800203c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002040:	461a      	mov	r2, r3
 8002042:	2310      	movs	r3, #16
 8002044:	6093      	str	r3, [r2, #8]
 8002046:	e03a      	b.n	80020be <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	212c      	movs	r1, #44	; 0x2c
 800204e:	fb01 f303 	mul.w	r3, r1, r3
 8002052:	4413      	add	r3, r2
 8002054:	333f      	adds	r3, #63	; 0x3f
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b03      	cmp	r3, #3
 800205a:	d009      	beq.n	8002070 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	212c      	movs	r1, #44	; 0x2c
 8002062:	fb01 f303 	mul.w	r3, r1, r3
 8002066:	4413      	add	r3, r2
 8002068:	333f      	adds	r3, #63	; 0x3f
 800206a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800206c:	2b01      	cmp	r3, #1
 800206e:	d126      	bne.n	80020be <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	015a      	lsls	r2, r3, #5
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4413      	add	r3, r2
 8002078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	0151      	lsls	r1, r2, #5
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	440a      	add	r2, r1
 8002086:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800208a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800208e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	212c      	movs	r1, #44	; 0x2c
 8002096:	fb01 f303 	mul.w	r3, r1, r3
 800209a:	4413      	add	r3, r2
 800209c:	3360      	adds	r3, #96	; 0x60
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	b2d9      	uxtb	r1, r3
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	202c      	movs	r0, #44	; 0x2c
 80020ac:	fb00 f303 	mul.w	r3, r0, r3
 80020b0:	4413      	add	r3, r2
 80020b2:	3360      	adds	r3, #96	; 0x60
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f005 ff8b 	bl	8007fd4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d12b      	bne.n	800211e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	212c      	movs	r1, #44	; 0x2c
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	4413      	add	r3, r2
 80020d2:	3348      	adds	r3, #72	; 0x48
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	202c      	movs	r0, #44	; 0x2c
 80020dc:	fb00 f202 	mul.w	r2, r0, r2
 80020e0:	440a      	add	r2, r1
 80020e2:	3240      	adds	r2, #64	; 0x40
 80020e4:	8812      	ldrh	r2, [r2, #0]
 80020e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 818e 	beq.w	8002410 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	212c      	movs	r1, #44	; 0x2c
 80020fa:	fb01 f303 	mul.w	r3, r1, r3
 80020fe:	4413      	add	r3, r2
 8002100:	3354      	adds	r3, #84	; 0x54
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	f083 0301 	eor.w	r3, r3, #1
 8002108:	b2d8      	uxtb	r0, r3
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	212c      	movs	r1, #44	; 0x2c
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	3354      	adds	r3, #84	; 0x54
 8002118:	4602      	mov	r2, r0
 800211a:	701a      	strb	r2, [r3, #0]
}
 800211c:	e178      	b.n	8002410 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	212c      	movs	r1, #44	; 0x2c
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	4413      	add	r3, r2
 800212a:	3354      	adds	r3, #84	; 0x54
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	f083 0301 	eor.w	r3, r3, #1
 8002132:	b2d8      	uxtb	r0, r3
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	3354      	adds	r3, #84	; 0x54
 8002142:	4602      	mov	r2, r0
 8002144:	701a      	strb	r2, [r3, #0]
}
 8002146:	e163      	b.n	8002410 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4413      	add	r3, r2
 8002150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b02      	cmp	r3, #2
 800215c:	f040 80f6 	bne.w	800234c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	212c      	movs	r1, #44	; 0x2c
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	3361      	adds	r3, #97	; 0x61
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d109      	bne.n	8002188 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	212c      	movs	r1, #44	; 0x2c
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	4413      	add	r3, r2
 8002180:	3360      	adds	r3, #96	; 0x60
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
 8002186:	e0c9      	b.n	800231c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	212c      	movs	r1, #44	; 0x2c
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	4413      	add	r3, r2
 8002194:	3361      	adds	r3, #97	; 0x61
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b05      	cmp	r3, #5
 800219a:	d109      	bne.n	80021b0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	212c      	movs	r1, #44	; 0x2c
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	3360      	adds	r3, #96	; 0x60
 80021aa:	2205      	movs	r2, #5
 80021ac:	701a      	strb	r2, [r3, #0]
 80021ae:	e0b5      	b.n	800231c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	212c      	movs	r1, #44	; 0x2c
 80021b6:	fb01 f303 	mul.w	r3, r1, r3
 80021ba:	4413      	add	r3, r2
 80021bc:	3361      	adds	r3, #97	; 0x61
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b06      	cmp	r3, #6
 80021c2:	d009      	beq.n	80021d8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	212c      	movs	r1, #44	; 0x2c
 80021ca:	fb01 f303 	mul.w	r3, r1, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	3361      	adds	r3, #97	; 0x61
 80021d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d150      	bne.n	800227a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	212c      	movs	r1, #44	; 0x2c
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	335c      	adds	r3, #92	; 0x5c
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	202c      	movs	r0, #44	; 0x2c
 80021f0:	fb00 f303 	mul.w	r3, r0, r3
 80021f4:	440b      	add	r3, r1
 80021f6:	335c      	adds	r3, #92	; 0x5c
 80021f8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	212c      	movs	r1, #44	; 0x2c
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	4413      	add	r3, r2
 8002206:	335c      	adds	r3, #92	; 0x5c
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d912      	bls.n	8002234 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	212c      	movs	r1, #44	; 0x2c
 8002214:	fb01 f303 	mul.w	r3, r1, r3
 8002218:	4413      	add	r3, r2
 800221a:	335c      	adds	r3, #92	; 0x5c
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	212c      	movs	r1, #44	; 0x2c
 8002226:	fb01 f303 	mul.w	r3, r1, r3
 800222a:	4413      	add	r3, r2
 800222c:	3360      	adds	r3, #96	; 0x60
 800222e:	2204      	movs	r2, #4
 8002230:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002232:	e073      	b.n	800231c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	212c      	movs	r1, #44	; 0x2c
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	3360      	adds	r3, #96	; 0x60
 8002242:	2202      	movs	r2, #2
 8002244:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4413      	add	r3, r2
 800224e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800225c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002264:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4413      	add	r3, r2
 800226e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002272:	461a      	mov	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002278:	e050      	b.n	800231c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	212c      	movs	r1, #44	; 0x2c
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	3361      	adds	r3, #97	; 0x61
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b03      	cmp	r3, #3
 800228c:	d122      	bne.n	80022d4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	212c      	movs	r1, #44	; 0x2c
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	4413      	add	r3, r2
 800229a:	3360      	adds	r3, #96	; 0x60
 800229c:	2202      	movs	r2, #2
 800229e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022b6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022be:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022cc:	461a      	mov	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	e023      	b.n	800231c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	212c      	movs	r1, #44	; 0x2c
 80022da:	fb01 f303 	mul.w	r3, r1, r3
 80022de:	4413      	add	r3, r2
 80022e0:	3361      	adds	r3, #97	; 0x61
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b07      	cmp	r3, #7
 80022e6:	d119      	bne.n	800231c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	212c      	movs	r1, #44	; 0x2c
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	335c      	adds	r3, #92	; 0x5c
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	202c      	movs	r0, #44	; 0x2c
 8002300:	fb00 f303 	mul.w	r3, r0, r3
 8002304:	440b      	add	r3, r1
 8002306:	335c      	adds	r3, #92	; 0x5c
 8002308:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	3360      	adds	r3, #96	; 0x60
 8002318:	2204      	movs	r2, #4
 800231a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4413      	add	r3, r2
 8002324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002328:	461a      	mov	r2, r3
 800232a:	2302      	movs	r3, #2
 800232c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	b2d9      	uxtb	r1, r3
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	202c      	movs	r0, #44	; 0x2c
 8002338:	fb00 f303 	mul.w	r3, r0, r3
 800233c:	4413      	add	r3, r2
 800233e:	3360      	adds	r3, #96	; 0x60
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f005 fe45 	bl	8007fd4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800234a:	e061      	b.n	8002410 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b10      	cmp	r3, #16
 8002360:	d156      	bne.n	8002410 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	212c      	movs	r1, #44	; 0x2c
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	4413      	add	r3, r2
 800236e:	333f      	adds	r3, #63	; 0x3f
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b03      	cmp	r3, #3
 8002374:	d111      	bne.n	800239a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	212c      	movs	r1, #44	; 0x2c
 800237c:	fb01 f303 	mul.w	r3, r1, r3
 8002380:	4413      	add	r3, r2
 8002382:	335c      	adds	r3, #92	; 0x5c
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f003 fb7b 	bl	8005a8e <USB_HC_Halt>
 8002398:	e031      	b.n	80023fe <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	212c      	movs	r1, #44	; 0x2c
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	333f      	adds	r3, #63	; 0x3f
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	212c      	movs	r1, #44	; 0x2c
 80023b4:	fb01 f303 	mul.w	r3, r1, r3
 80023b8:	4413      	add	r3, r2
 80023ba:	333f      	adds	r3, #63	; 0x3f
 80023bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d11d      	bne.n	80023fe <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	212c      	movs	r1, #44	; 0x2c
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	4413      	add	r3, r2
 80023ce:	335c      	adds	r3, #92	; 0x5c
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d110      	bne.n	80023fe <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	212c      	movs	r1, #44	; 0x2c
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	3361      	adds	r3, #97	; 0x61
 80023ea:	2203      	movs	r2, #3
 80023ec:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f003 fb48 	bl	8005a8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4413      	add	r3, r2
 8002406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240a:	461a      	mov	r2, r3
 800240c:	2310      	movs	r3, #16
 800240e:	6093      	str	r3, [r2, #8]
}
 8002410:	bf00      	nop
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800242e:	78fb      	ldrb	r3, [r7, #3]
 8002430:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4413      	add	r3, r2
 800243a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b04      	cmp	r3, #4
 8002446:	d11a      	bne.n	800247e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	4413      	add	r3, r2
 8002450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002454:	461a      	mov	r2, r3
 8002456:	2304      	movs	r3, #4
 8002458:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	212c      	movs	r1, #44	; 0x2c
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	4413      	add	r3, r2
 8002466:	3361      	adds	r3, #97	; 0x61
 8002468:	2206      	movs	r2, #6
 800246a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f003 fb09 	bl	8005a8e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800247c:	e331      	b.n	8002ae2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	4413      	add	r3, r2
 8002486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b20      	cmp	r3, #32
 8002492:	d12e      	bne.n	80024f2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	4413      	add	r3, r2
 800249c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a0:	461a      	mov	r2, r3
 80024a2:	2320      	movs	r3, #32
 80024a4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	212c      	movs	r1, #44	; 0x2c
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	333d      	adds	r3, #61	; 0x3d
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	f040 8313 	bne.w	8002ae2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	212c      	movs	r1, #44	; 0x2c
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	333d      	adds	r3, #61	; 0x3d
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	4413      	add	r3, r2
 80024da:	3360      	adds	r3, #96	; 0x60
 80024dc:	2202      	movs	r2, #2
 80024de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 facf 	bl	8005a8e <USB_HC_Halt>
}
 80024f0:	e2f7      	b.n	8002ae2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002508:	d112      	bne.n	8002530 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	4413      	add	r3, r2
 8002512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002516:	461a      	mov	r2, r3
 8002518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800251c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f003 fab0 	bl	8005a8e <USB_HC_Halt>
}
 800252e:	e2d8      	b.n	8002ae2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b01      	cmp	r3, #1
 8002544:	d140      	bne.n	80025c8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	212c      	movs	r1, #44	; 0x2c
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	4413      	add	r3, r2
 8002552:	335c      	adds	r3, #92	; 0x5c
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	4413      	add	r3, r2
 8002560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256a:	2b40      	cmp	r3, #64	; 0x40
 800256c:	d111      	bne.n	8002592 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	212c      	movs	r1, #44	; 0x2c
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	4413      	add	r3, r2
 800257a:	333d      	adds	r3, #61	; 0x3d
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	4413      	add	r3, r2
 8002588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258c:	461a      	mov	r2, r3
 800258e:	2340      	movs	r3, #64	; 0x40
 8002590:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	4413      	add	r3, r2
 800259a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259e:	461a      	mov	r2, r3
 80025a0:	2301      	movs	r3, #1
 80025a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	212c      	movs	r1, #44	; 0x2c
 80025aa:	fb01 f303 	mul.w	r3, r1, r3
 80025ae:	4413      	add	r3, r2
 80025b0:	3361      	adds	r3, #97	; 0x61
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f003 fa64 	bl	8005a8e <USB_HC_Halt>
}
 80025c6:	e28c      	b.n	8002ae2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025da:	2b40      	cmp	r3, #64	; 0x40
 80025dc:	d12c      	bne.n	8002638 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	212c      	movs	r1, #44	; 0x2c
 80025e4:	fb01 f303 	mul.w	r3, r1, r3
 80025e8:	4413      	add	r3, r2
 80025ea:	3361      	adds	r3, #97	; 0x61
 80025ec:	2204      	movs	r2, #4
 80025ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	333d      	adds	r3, #61	; 0x3d
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	212c      	movs	r1, #44	; 0x2c
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	335c      	adds	r3, #92	; 0x5c
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f003 fa35 	bl	8005a8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	4413      	add	r3, r2
 800262c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002630:	461a      	mov	r2, r3
 8002632:	2340      	movs	r3, #64	; 0x40
 8002634:	6093      	str	r3, [r2, #8]
}
 8002636:	e254      	b.n	8002ae2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b08      	cmp	r3, #8
 800264c:	d11a      	bne.n	8002684 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	461a      	mov	r2, r3
 800265c:	2308      	movs	r3, #8
 800265e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	212c      	movs	r1, #44	; 0x2c
 8002666:	fb01 f303 	mul.w	r3, r1, r3
 800266a:	4413      	add	r3, r2
 800266c:	3361      	adds	r3, #97	; 0x61
 800266e:	2205      	movs	r2, #5
 8002670:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f003 fa06 	bl	8005a8e <USB_HC_Halt>
}
 8002682:	e22e      	b.n	8002ae2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	4413      	add	r3, r2
 800268c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 0310 	and.w	r3, r3, #16
 8002696:	2b10      	cmp	r3, #16
 8002698:	d140      	bne.n	800271c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	212c      	movs	r1, #44	; 0x2c
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	335c      	adds	r3, #92	; 0x5c
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	212c      	movs	r1, #44	; 0x2c
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	3361      	adds	r3, #97	; 0x61
 80026ba:	2203      	movs	r2, #3
 80026bc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	212c      	movs	r1, #44	; 0x2c
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	333d      	adds	r3, #61	; 0x3d
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d112      	bne.n	80026f8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	333c      	adds	r3, #60	; 0x3c
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d108      	bne.n	80026f8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	333d      	adds	r3, #61	; 0x3d
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	4611      	mov	r1, r2
 8002702:	4618      	mov	r0, r3
 8002704:	f003 f9c3 	bl	8005a8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	4413      	add	r3, r2
 8002710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002714:	461a      	mov	r2, r3
 8002716:	2310      	movs	r3, #16
 8002718:	6093      	str	r3, [r2, #8]
}
 800271a:	e1e2      	b.n	8002ae2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272e:	2b80      	cmp	r3, #128	; 0x80
 8002730:	d164      	bne.n	80027fc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d111      	bne.n	800275e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	212c      	movs	r1, #44	; 0x2c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	3361      	adds	r3, #97	; 0x61
 8002748:	2206      	movs	r2, #6
 800274a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f003 f999 	bl	8005a8e <USB_HC_Halt>
 800275c:	e044      	b.n	80027e8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	335c      	adds	r3, #92	; 0x5c
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	202c      	movs	r0, #44	; 0x2c
 8002776:	fb00 f303 	mul.w	r3, r0, r3
 800277a:	440b      	add	r3, r1
 800277c:	335c      	adds	r3, #92	; 0x5c
 800277e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	212c      	movs	r1, #44	; 0x2c
 8002786:	fb01 f303 	mul.w	r3, r1, r3
 800278a:	4413      	add	r3, r2
 800278c:	335c      	adds	r3, #92	; 0x5c
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d920      	bls.n	80027d6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	212c      	movs	r1, #44	; 0x2c
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	4413      	add	r3, r2
 80027a0:	335c      	adds	r3, #92	; 0x5c
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	3360      	adds	r3, #96	; 0x60
 80027b4:	2204      	movs	r2, #4
 80027b6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	b2d9      	uxtb	r1, r3
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	202c      	movs	r0, #44	; 0x2c
 80027c2:	fb00 f303 	mul.w	r3, r0, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	3360      	adds	r3, #96	; 0x60
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f005 fc00 	bl	8007fd4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80027d4:	e008      	b.n	80027e8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	3360      	adds	r3, #96	; 0x60
 80027e4:	2202      	movs	r2, #2
 80027e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f4:	461a      	mov	r2, r3
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	6093      	str	r3, [r2, #8]
}
 80027fa:	e172      	b.n	8002ae2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	4413      	add	r3, r2
 8002804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002812:	d11b      	bne.n	800284c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	212c      	movs	r1, #44	; 0x2c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	3361      	adds	r3, #97	; 0x61
 8002822:	2208      	movs	r2, #8
 8002824:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f003 f92c 	bl	8005a8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	4413      	add	r3, r2
 800283e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002842:	461a      	mov	r2, r3
 8002844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002848:	6093      	str	r3, [r2, #8]
}
 800284a:	e14a      	b.n	8002ae2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	4413      	add	r3, r2
 8002854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b02      	cmp	r3, #2
 8002860:	f040 813f 	bne.w	8002ae2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	212c      	movs	r1, #44	; 0x2c
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	3361      	adds	r3, #97	; 0x61
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d17d      	bne.n	8002974 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	212c      	movs	r1, #44	; 0x2c
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	4413      	add	r3, r2
 8002884:	3360      	adds	r3, #96	; 0x60
 8002886:	2201      	movs	r2, #1
 8002888:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	333f      	adds	r3, #63	; 0x3f
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d00a      	beq.n	80028b4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	212c      	movs	r1, #44	; 0x2c
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	333f      	adds	r3, #63	; 0x3f
 80028ac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	f040 8100 	bne.w	8002ab4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d113      	bne.n	80028e4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	3355      	adds	r3, #85	; 0x55
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	f083 0301 	eor.w	r3, r3, #1
 80028d0:	b2d8      	uxtb	r0, r3
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	212c      	movs	r1, #44	; 0x2c
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	4413      	add	r3, r2
 80028de:	3355      	adds	r3, #85	; 0x55
 80028e0:	4602      	mov	r2, r0
 80028e2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	f040 80e3 	bne.w	8002ab4 <HCD_HC_OUT_IRQHandler+0x69c>
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	334c      	adds	r3, #76	; 0x4c
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 80d8 	beq.w	8002ab4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	334c      	adds	r3, #76	; 0x4c
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	202c      	movs	r0, #44	; 0x2c
 800291a:	fb00 f202 	mul.w	r2, r0, r2
 800291e:	440a      	add	r2, r1
 8002920:	3240      	adds	r2, #64	; 0x40
 8002922:	8812      	ldrh	r2, [r2, #0]
 8002924:	4413      	add	r3, r2
 8002926:	3b01      	subs	r3, #1
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	202c      	movs	r0, #44	; 0x2c
 800292e:	fb00 f202 	mul.w	r2, r0, r2
 8002932:	440a      	add	r2, r1
 8002934:	3240      	adds	r2, #64	; 0x40
 8002936:	8812      	ldrh	r2, [r2, #0]
 8002938:	fbb3 f3f2 	udiv	r3, r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80b5 	beq.w	8002ab4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	3355      	adds	r3, #85	; 0x55
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	f083 0301 	eor.w	r3, r3, #1
 800295e:	b2d8      	uxtb	r0, r3
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	212c      	movs	r1, #44	; 0x2c
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	4413      	add	r3, r2
 800296c:	3355      	adds	r3, #85	; 0x55
 800296e:	4602      	mov	r2, r0
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e09f      	b.n	8002ab4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	212c      	movs	r1, #44	; 0x2c
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	3361      	adds	r3, #97	; 0x61
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d109      	bne.n	800299c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	3360      	adds	r3, #96	; 0x60
 8002996:	2202      	movs	r2, #2
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	e08b      	b.n	8002ab4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	3361      	adds	r3, #97	; 0x61
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d109      	bne.n	80029c4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	3360      	adds	r3, #96	; 0x60
 80029be:	2202      	movs	r2, #2
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	e077      	b.n	8002ab4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	3361      	adds	r3, #97	; 0x61
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b05      	cmp	r3, #5
 80029d6:	d109      	bne.n	80029ec <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	212c      	movs	r1, #44	; 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	3360      	adds	r3, #96	; 0x60
 80029e6:	2205      	movs	r2, #5
 80029e8:	701a      	strb	r2, [r3, #0]
 80029ea:	e063      	b.n	8002ab4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	212c      	movs	r1, #44	; 0x2c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	3361      	adds	r3, #97	; 0x61
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b06      	cmp	r3, #6
 80029fe:	d009      	beq.n	8002a14 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	212c      	movs	r1, #44	; 0x2c
 8002a06:	fb01 f303 	mul.w	r3, r1, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3361      	adds	r3, #97	; 0x61
 8002a0e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d14f      	bne.n	8002ab4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	212c      	movs	r1, #44	; 0x2c
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	335c      	adds	r3, #92	; 0x5c
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	202c      	movs	r0, #44	; 0x2c
 8002a2c:	fb00 f303 	mul.w	r3, r0, r3
 8002a30:	440b      	add	r3, r1
 8002a32:	335c      	adds	r3, #92	; 0x5c
 8002a34:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	212c      	movs	r1, #44	; 0x2c
 8002a3c:	fb01 f303 	mul.w	r3, r1, r3
 8002a40:	4413      	add	r3, r2
 8002a42:	335c      	adds	r3, #92	; 0x5c
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d912      	bls.n	8002a70 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	335c      	adds	r3, #92	; 0x5c
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	212c      	movs	r1, #44	; 0x2c
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	3360      	adds	r3, #96	; 0x60
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	701a      	strb	r2, [r3, #0]
 8002a6e:	e021      	b.n	8002ab4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	212c      	movs	r1, #44	; 0x2c
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3360      	adds	r3, #96	; 0x60
 8002a7e:	2202      	movs	r2, #2
 8002a80:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a98:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002aa0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aae:	461a      	mov	r2, r3
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	b2d9      	uxtb	r1, r3
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	202c      	movs	r0, #44	; 0x2c
 8002ad0:	fb00 f303 	mul.w	r3, r0, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3360      	adds	r3, #96	; 0x60
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f005 fa79 	bl	8007fd4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ae2:	bf00      	nop
 8002ae4:	3720      	adds	r7, #32
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b08a      	sub	sp, #40	; 0x28
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	0c5b      	lsrs	r3, r3, #17
 8002b10:	f003 030f 	and.w	r3, r3, #15
 8002b14:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b1e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d004      	beq.n	8002b30 <HCD_RXQLVL_IRQHandler+0x46>
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2b05      	cmp	r3, #5
 8002b2a:	f000 80a9 	beq.w	8002c80 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b2e:	e0aa      	b.n	8002c86 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 80a6 	beq.w	8002c84 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	212c      	movs	r1, #44	; 0x2c
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	3344      	adds	r3, #68	; 0x44
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 809b 	beq.w	8002c84 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	3350      	adds	r3, #80	; 0x50
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	441a      	add	r2, r3
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	202c      	movs	r0, #44	; 0x2c
 8002b68:	fb00 f303 	mul.w	r3, r0, r3
 8002b6c:	440b      	add	r3, r1
 8002b6e:	334c      	adds	r3, #76	; 0x4c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d87a      	bhi.n	8002c6c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	212c      	movs	r1, #44	; 0x2c
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	3344      	adds	r3, #68	; 0x44
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	b292      	uxth	r2, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f002 fad4 	bl	800513c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3344      	adds	r3, #68	; 0x44
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	441a      	add	r2, r3
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	202c      	movs	r0, #44	; 0x2c
 8002bae:	fb00 f303 	mul.w	r3, r0, r3
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3344      	adds	r3, #68	; 0x44
 8002bb6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	212c      	movs	r1, #44	; 0x2c
 8002bbe:	fb01 f303 	mul.w	r3, r1, r3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3350      	adds	r3, #80	; 0x50
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	441a      	add	r2, r3
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	202c      	movs	r0, #44	; 0x2c
 8002bd2:	fb00 f303 	mul.w	r3, r0, r3
 8002bd6:	440b      	add	r3, r1
 8002bd8:	3350      	adds	r3, #80	; 0x50
 8002bda:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	0cdb      	lsrs	r3, r3, #19
 8002bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bf0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3340      	adds	r3, #64	; 0x40
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d13c      	bne.n	8002c84 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d039      	beq.n	8002c84 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c26:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c2e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	212c      	movs	r1, #44	; 0x2c
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3354      	adds	r3, #84	; 0x54
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	f083 0301 	eor.w	r3, r3, #1
 8002c56:	b2d8      	uxtb	r0, r3
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	3354      	adds	r3, #84	; 0x54
 8002c66:	4602      	mov	r2, r0
 8002c68:	701a      	strb	r2, [r3, #0]
      break;
 8002c6a:	e00b      	b.n	8002c84 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3360      	adds	r3, #96	; 0x60
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	701a      	strb	r2, [r3, #0]
      break;
 8002c7e:	e001      	b.n	8002c84 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002c80:	bf00      	nop
 8002c82:	e000      	b.n	8002c86 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002c84:	bf00      	nop
  }
}
 8002c86:	bf00      	nop
 8002c88:	3728      	adds	r7, #40	; 0x28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b086      	sub	sp, #24
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002cba:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d10b      	bne.n	8002cde <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d102      	bne.n	8002cd6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f005 f963 	bl	8007f9c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f043 0302 	orr.w	r3, r3, #2
 8002cdc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d132      	bne.n	8002d4e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f043 0308 	orr.w	r3, r3, #8
 8002cee:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d126      	bne.n	8002d48 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d113      	bne.n	8002d2a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d0c:	d106      	bne.n	8002d1c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2102      	movs	r1, #2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f002 fb7f 	bl	8005418 <USB_InitFSLSPClkSel>
 8002d1a:	e011      	b.n	8002d40 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2101      	movs	r1, #1
 8002d22:	4618      	mov	r0, r3
 8002d24:	f002 fb78 	bl	8005418 <USB_InitFSLSPClkSel>
 8002d28:	e00a      	b.n	8002d40 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d106      	bne.n	8002d40 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d3e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f005 f955 	bl	8007ff0 <HAL_HCD_PortEnabled_Callback>
 8002d46:	e002      	b.n	8002d4e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f005 f95f 	bl	800800c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d103      	bne.n	8002d60 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f043 0320 	orr.w	r3, r3, #32
 8002d5e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d66:	461a      	mov	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	6013      	str	r3, [r2, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e12b      	b.n	8002fde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d106      	bne.n	8002da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fd fe64 	bl	8000a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2224      	movs	r2, #36	; 0x24
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dd8:	f001 fa20 	bl	800421c <HAL_RCC_GetPCLK1Freq>
 8002ddc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4a81      	ldr	r2, [pc, #516]	; (8002fe8 <HAL_I2C_Init+0x274>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d807      	bhi.n	8002df8 <HAL_I2C_Init+0x84>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4a80      	ldr	r2, [pc, #512]	; (8002fec <HAL_I2C_Init+0x278>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	bf94      	ite	ls
 8002df0:	2301      	movls	r3, #1
 8002df2:	2300      	movhi	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	e006      	b.n	8002e06 <HAL_I2C_Init+0x92>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4a7d      	ldr	r2, [pc, #500]	; (8002ff0 <HAL_I2C_Init+0x27c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	bf94      	ite	ls
 8002e00:	2301      	movls	r3, #1
 8002e02:	2300      	movhi	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e0e7      	b.n	8002fde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4a78      	ldr	r2, [pc, #480]	; (8002ff4 <HAL_I2C_Init+0x280>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0c9b      	lsrs	r3, r3, #18
 8002e18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4a6a      	ldr	r2, [pc, #424]	; (8002fe8 <HAL_I2C_Init+0x274>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d802      	bhi.n	8002e48 <HAL_I2C_Init+0xd4>
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	3301      	adds	r3, #1
 8002e46:	e009      	b.n	8002e5c <HAL_I2C_Init+0xe8>
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	4a69      	ldr	r2, [pc, #420]	; (8002ff8 <HAL_I2C_Init+0x284>)
 8002e54:	fba2 2303 	umull	r2, r3, r2, r3
 8002e58:	099b      	lsrs	r3, r3, #6
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	430b      	orrs	r3, r1
 8002e62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	495c      	ldr	r1, [pc, #368]	; (8002fe8 <HAL_I2C_Init+0x274>)
 8002e78:	428b      	cmp	r3, r1
 8002e7a:	d819      	bhi.n	8002eb0 <HAL_I2C_Init+0x13c>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1e59      	subs	r1, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e8a:	1c59      	adds	r1, r3, #1
 8002e8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e90:	400b      	ands	r3, r1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_I2C_Init+0x138>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1e59      	subs	r1, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eaa:	e051      	b.n	8002f50 <HAL_I2C_Init+0x1dc>
 8002eac:	2304      	movs	r3, #4
 8002eae:	e04f      	b.n	8002f50 <HAL_I2C_Init+0x1dc>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d111      	bne.n	8002edc <HAL_I2C_Init+0x168>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1e58      	subs	r0, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6859      	ldr	r1, [r3, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	440b      	add	r3, r1
 8002ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	e012      	b.n	8002f02 <HAL_I2C_Init+0x18e>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1e58      	subs	r0, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	0099      	lsls	r1, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_I2C_Init+0x196>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e022      	b.n	8002f50 <HAL_I2C_Init+0x1dc>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10e      	bne.n	8002f30 <HAL_I2C_Init+0x1bc>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1e58      	subs	r0, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6859      	ldr	r1, [r3, #4]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	440b      	add	r3, r1
 8002f20:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f24:	3301      	adds	r3, #1
 8002f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f2e:	e00f      	b.n	8002f50 <HAL_I2C_Init+0x1dc>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	1e58      	subs	r0, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	0099      	lsls	r1, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f46:	3301      	adds	r3, #1
 8002f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	6809      	ldr	r1, [r1, #0]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69da      	ldr	r2, [r3, #28]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6911      	ldr	r1, [r2, #16]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68d2      	ldr	r2, [r2, #12]
 8002f8a:	4311      	orrs	r1, r2
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695a      	ldr	r2, [r3, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	000186a0 	.word	0x000186a0
 8002fec:	001e847f 	.word	0x001e847f
 8002ff0:	003d08ff 	.word	0x003d08ff
 8002ff4:	431bde83 	.word	0x431bde83
 8002ff8:	10624dd3 	.word	0x10624dd3

08002ffc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e128      	b.n	8003260 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a90      	ldr	r2, [pc, #576]	; (8003268 <HAL_I2S_Init+0x26c>)
 8003026:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7fd fd65 	bl	8000af8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2202      	movs	r2, #2
 8003032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003044:	f023 030f 	bic.w	r3, r3, #15
 8003048:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2202      	movs	r2, #2
 8003050:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d060      	beq.n	800311c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d102      	bne.n	8003068 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003062:	2310      	movs	r3, #16
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	e001      	b.n	800306c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003068:	2320      	movs	r3, #32
 800306a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b20      	cmp	r3, #32
 8003072:	d802      	bhi.n	800307a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800307a:	2001      	movs	r0, #1
 800307c:	f001 f9c4 	bl	8004408 <HAL_RCCEx_GetPeriphCLKFreq>
 8003080:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800308a:	d125      	bne.n	80030d8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d010      	beq.n	80030b6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	fbb2 f2f3 	udiv	r2, r2, r3
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	461a      	mov	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b0:	3305      	adds	r3, #5
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	e01f      	b.n	80030f6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	461a      	mov	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d2:	3305      	adds	r3, #5
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	e00e      	b.n	80030f6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	461a      	mov	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f2:	3305      	adds	r3, #5
 80030f4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4a5c      	ldr	r2, [pc, #368]	; (800326c <HAL_I2S_Init+0x270>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	08db      	lsrs	r3, r3, #3
 8003100:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	085b      	lsrs	r3, r3, #1
 8003112:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	61bb      	str	r3, [r7, #24]
 800311a:	e003      	b.n	8003124 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800311c:	2302      	movs	r3, #2
 800311e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d902      	bls.n	8003130 <HAL_I2S_Init+0x134>
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	2bff      	cmp	r3, #255	; 0xff
 800312e:	d907      	bls.n	8003140 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003134:	f043 0210 	orr.w	r2, r3, #16
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e08f      	b.n	8003260 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	ea42 0103 	orr.w	r1, r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	430a      	orrs	r2, r1
 8003152:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800315e:	f023 030f 	bic.w	r3, r3, #15
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6851      	ldr	r1, [r2, #4]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6892      	ldr	r2, [r2, #8]
 800316a:	4311      	orrs	r1, r2
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	68d2      	ldr	r2, [r2, #12]
 8003170:	4311      	orrs	r1, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6992      	ldr	r2, [r2, #24]
 8003176:	430a      	orrs	r2, r1
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003182:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d161      	bne.n	8003250 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a38      	ldr	r2, [pc, #224]	; (8003270 <HAL_I2S_Init+0x274>)
 8003190:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a37      	ldr	r2, [pc, #220]	; (8003274 <HAL_I2S_Init+0x278>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d101      	bne.n	80031a0 <HAL_I2S_Init+0x1a4>
 800319c:	4b36      	ldr	r3, [pc, #216]	; (8003278 <HAL_I2S_Init+0x27c>)
 800319e:	e001      	b.n	80031a4 <HAL_I2S_Init+0x1a8>
 80031a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	4932      	ldr	r1, [pc, #200]	; (8003274 <HAL_I2S_Init+0x278>)
 80031ac:	428a      	cmp	r2, r1
 80031ae:	d101      	bne.n	80031b4 <HAL_I2S_Init+0x1b8>
 80031b0:	4a31      	ldr	r2, [pc, #196]	; (8003278 <HAL_I2S_Init+0x27c>)
 80031b2:	e001      	b.n	80031b8 <HAL_I2S_Init+0x1bc>
 80031b4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80031b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031bc:	f023 030f 	bic.w	r3, r3, #15
 80031c0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a2b      	ldr	r2, [pc, #172]	; (8003274 <HAL_I2S_Init+0x278>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d101      	bne.n	80031d0 <HAL_I2S_Init+0x1d4>
 80031cc:	4b2a      	ldr	r3, [pc, #168]	; (8003278 <HAL_I2S_Init+0x27c>)
 80031ce:	e001      	b.n	80031d4 <HAL_I2S_Init+0x1d8>
 80031d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031d4:	2202      	movs	r2, #2
 80031d6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a25      	ldr	r2, [pc, #148]	; (8003274 <HAL_I2S_Init+0x278>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d101      	bne.n	80031e6 <HAL_I2S_Init+0x1ea>
 80031e2:	4b25      	ldr	r3, [pc, #148]	; (8003278 <HAL_I2S_Init+0x27c>)
 80031e4:	e001      	b.n	80031ea <HAL_I2S_Init+0x1ee>
 80031e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031f6:	d003      	beq.n	8003200 <HAL_I2S_Init+0x204>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d103      	bne.n	8003208 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003200:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	e001      	b.n	800320c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003208:	2300      	movs	r3, #0
 800320a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003216:	4313      	orrs	r3, r2
 8003218:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003220:	4313      	orrs	r3, r2
 8003222:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800322a:	4313      	orrs	r3, r2
 800322c:	b29a      	uxth	r2, r3
 800322e:	897b      	ldrh	r3, [r7, #10]
 8003230:	4313      	orrs	r3, r2
 8003232:	b29b      	uxth	r3, r3
 8003234:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003238:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a0d      	ldr	r2, [pc, #52]	; (8003274 <HAL_I2S_Init+0x278>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d101      	bne.n	8003248 <HAL_I2S_Init+0x24c>
 8003244:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <HAL_I2S_Init+0x27c>)
 8003246:	e001      	b.n	800324c <HAL_I2S_Init+0x250>
 8003248:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800324c:	897a      	ldrh	r2, [r7, #10]
 800324e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3720      	adds	r7, #32
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	08003373 	.word	0x08003373
 800326c:	cccccccd 	.word	0xcccccccd
 8003270:	08003489 	.word	0x08003489
 8003274:	40003800 	.word	0x40003800
 8003278:	40003400 	.word	0x40003400

0800327c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	881a      	ldrh	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	1c9a      	adds	r2, r3, #2
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10e      	bne.n	800330c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032fc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ffb8 	bl	800327c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003326:	b292      	uxth	r2, r2
 8003328:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	1c9a      	adds	r2, r3, #2
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10e      	bne.n	800336a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800335a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ff93 	bl	8003290 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b086      	sub	sp, #24
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b04      	cmp	r3, #4
 800338c:	d13a      	bne.n	8003404 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b01      	cmp	r3, #1
 8003396:	d109      	bne.n	80033ac <I2S_IRQHandler+0x3a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a2:	2b40      	cmp	r3, #64	; 0x40
 80033a4:	d102      	bne.n	80033ac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7ff ffb4 	bl	8003314 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b2:	2b40      	cmp	r3, #64	; 0x40
 80033b4:	d126      	bne.n	8003404 <I2S_IRQHandler+0x92>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 0320 	and.w	r3, r3, #32
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d11f      	bne.n	8003404 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80033d4:	2300      	movs	r3, #0
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	f043 0202 	orr.w	r2, r3, #2
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff ff50 	bl	80032a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b03      	cmp	r3, #3
 800340e:	d136      	bne.n	800347e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b02      	cmp	r3, #2
 8003418:	d109      	bne.n	800342e <I2S_IRQHandler+0xbc>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003424:	2b80      	cmp	r3, #128	; 0x80
 8003426:	d102      	bne.n	800342e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff ff45 	bl	80032b8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b08      	cmp	r3, #8
 8003436:	d122      	bne.n	800347e <I2S_IRQHandler+0x10c>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b20      	cmp	r3, #32
 8003444:	d11b      	bne.n	800347e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003454:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003470:	f043 0204 	orr.w	r2, r3, #4
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff ff13 	bl	80032a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800347e:	bf00      	nop
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a92      	ldr	r2, [pc, #584]	; (80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d101      	bne.n	80034a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80034a2:	4b92      	ldr	r3, [pc, #584]	; (80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034a4:	e001      	b.n	80034aa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80034a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a8b      	ldr	r2, [pc, #556]	; (80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d101      	bne.n	80034c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80034c0:	4b8a      	ldr	r3, [pc, #552]	; (80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034c2:	e001      	b.n	80034c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80034c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d4:	d004      	beq.n	80034e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f040 8099 	bne.w	8003612 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d107      	bne.n	80034fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f925 	bl	8003744 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b01      	cmp	r3, #1
 8003502:	d107      	bne.n	8003514 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f9c8 	bl	80038a4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b40      	cmp	r3, #64	; 0x40
 800351c:	d13a      	bne.n	8003594 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b00      	cmp	r3, #0
 8003526:	d035      	beq.n	8003594 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a6e      	ldr	r2, [pc, #440]	; (80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d101      	bne.n	8003536 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003532:	4b6e      	ldr	r3, [pc, #440]	; (80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003534:	e001      	b.n	800353a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003536:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4969      	ldr	r1, [pc, #420]	; (80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003542:	428b      	cmp	r3, r1
 8003544:	d101      	bne.n	800354a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003546:	4b69      	ldr	r3, [pc, #420]	; (80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003548:	e001      	b.n	800354e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800354a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800354e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003552:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003562:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003586:	f043 0202 	orr.w	r2, r3, #2
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff fe88 	bl	80032a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b08      	cmp	r3, #8
 800359c:	f040 80c3 	bne.w	8003726 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 80bd 	beq.w	8003726 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035ba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a49      	ldr	r2, [pc, #292]	; (80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d101      	bne.n	80035ca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80035c6:	4b49      	ldr	r3, [pc, #292]	; (80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035c8:	e001      	b.n	80035ce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80035ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4944      	ldr	r1, [pc, #272]	; (80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035d6:	428b      	cmp	r3, r1
 80035d8:	d101      	bne.n	80035de <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80035da:	4b44      	ldr	r3, [pc, #272]	; (80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035dc:	e001      	b.n	80035e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80035de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035e6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035e8:	2300      	movs	r3, #0
 80035ea:	60bb      	str	r3, [r7, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	f043 0204 	orr.w	r2, r3, #4
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff fe4a 	bl	80032a4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003610:	e089      	b.n	8003726 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b02      	cmp	r3, #2
 800361a:	d107      	bne.n	800362c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f8be 	bl	80037a8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f8fd 	bl	8003840 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364c:	2b40      	cmp	r3, #64	; 0x40
 800364e:	d12f      	bne.n	80036b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b00      	cmp	r3, #0
 8003658:	d02a      	beq.n	80036b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003668:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a1e      	ldr	r2, [pc, #120]	; (80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d101      	bne.n	8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003674:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003676:	e001      	b.n	800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003678:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4919      	ldr	r1, [pc, #100]	; (80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003684:	428b      	cmp	r3, r1
 8003686:	d101      	bne.n	800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003688:	4b18      	ldr	r3, [pc, #96]	; (80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800368a:	e001      	b.n	8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800368c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003690:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003694:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	f043 0202 	orr.w	r2, r3, #2
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff fdfa 	bl	80032a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d136      	bne.n	8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d031      	beq.n	8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a07      	ldr	r2, [pc, #28]	; (80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d101      	bne.n	80036d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80036ce:	4b07      	ldr	r3, [pc, #28]	; (80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036d0:	e001      	b.n	80036d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80036d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4902      	ldr	r1, [pc, #8]	; (80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036de:	428b      	cmp	r3, r1
 80036e0:	d106      	bne.n	80036f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80036e2:	4b02      	ldr	r3, [pc, #8]	; (80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036e4:	e006      	b.n	80036f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80036e6:	bf00      	nop
 80036e8:	40003800 	.word	0x40003800
 80036ec:	40003400 	.word	0x40003400
 80036f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036f8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003708:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	f043 0204 	orr.w	r2, r3, #4
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff fdc0 	bl	80032a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003724:	e000      	b.n	8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003726:	bf00      	nop
}
 8003728:	bf00      	nop
 800372a:	3720      	adds	r7, #32
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	1c99      	adds	r1, r3, #2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6251      	str	r1, [r2, #36]	; 0x24
 8003756:	881a      	ldrh	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d113      	bne.n	800379e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003784:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d106      	bne.n	800379e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff ffc9 	bl	8003730 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	1c99      	adds	r1, r3, #2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6251      	str	r1, [r2, #36]	; 0x24
 80037ba:	8819      	ldrh	r1, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <I2SEx_TxISR_I2SExt+0x90>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d101      	bne.n	80037ca <I2SEx_TxISR_I2SExt+0x22>
 80037c6:	4b1d      	ldr	r3, [pc, #116]	; (800383c <I2SEx_TxISR_I2SExt+0x94>)
 80037c8:	e001      	b.n	80037ce <I2SEx_TxISR_I2SExt+0x26>
 80037ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ce:	460a      	mov	r2, r1
 80037d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d121      	bne.n	800382e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a12      	ldr	r2, [pc, #72]	; (8003838 <I2SEx_TxISR_I2SExt+0x90>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d101      	bne.n	80037f8 <I2SEx_TxISR_I2SExt+0x50>
 80037f4:	4b11      	ldr	r3, [pc, #68]	; (800383c <I2SEx_TxISR_I2SExt+0x94>)
 80037f6:	e001      	b.n	80037fc <I2SEx_TxISR_I2SExt+0x54>
 80037f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	490d      	ldr	r1, [pc, #52]	; (8003838 <I2SEx_TxISR_I2SExt+0x90>)
 8003804:	428b      	cmp	r3, r1
 8003806:	d101      	bne.n	800380c <I2SEx_TxISR_I2SExt+0x64>
 8003808:	4b0c      	ldr	r3, [pc, #48]	; (800383c <I2SEx_TxISR_I2SExt+0x94>)
 800380a:	e001      	b.n	8003810 <I2SEx_TxISR_I2SExt+0x68>
 800380c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003810:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003814:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d106      	bne.n	800382e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff ff81 	bl	8003730 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40003800 	.word	0x40003800
 800383c:	40003400 	.word	0x40003400

08003840 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68d8      	ldr	r0, [r3, #12]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003852:	1c99      	adds	r1, r3, #2
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003858:	b282      	uxth	r2, r0
 800385a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d113      	bne.n	800389c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003882:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff ff4a 	bl	8003730 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a20      	ldr	r2, [pc, #128]	; (8003934 <I2SEx_RxISR_I2SExt+0x90>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d101      	bne.n	80038ba <I2SEx_RxISR_I2SExt+0x16>
 80038b6:	4b20      	ldr	r3, [pc, #128]	; (8003938 <I2SEx_RxISR_I2SExt+0x94>)
 80038b8:	e001      	b.n	80038be <I2SEx_RxISR_I2SExt+0x1a>
 80038ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038be:	68d8      	ldr	r0, [r3, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	1c99      	adds	r1, r3, #2
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038ca:	b282      	uxth	r2, r0
 80038cc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d121      	bne.n	800392a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a12      	ldr	r2, [pc, #72]	; (8003934 <I2SEx_RxISR_I2SExt+0x90>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d101      	bne.n	80038f4 <I2SEx_RxISR_I2SExt+0x50>
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <I2SEx_RxISR_I2SExt+0x94>)
 80038f2:	e001      	b.n	80038f8 <I2SEx_RxISR_I2SExt+0x54>
 80038f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	490d      	ldr	r1, [pc, #52]	; (8003934 <I2SEx_RxISR_I2SExt+0x90>)
 8003900:	428b      	cmp	r3, r1
 8003902:	d101      	bne.n	8003908 <I2SEx_RxISR_I2SExt+0x64>
 8003904:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <I2SEx_RxISR_I2SExt+0x94>)
 8003906:	e001      	b.n	800390c <I2SEx_RxISR_I2SExt+0x68>
 8003908:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800390c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003910:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d106      	bne.n	800392a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7ff ff03 	bl	8003730 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40003800 	.word	0x40003800
 8003938:	40003400 	.word	0x40003400

0800393c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e267      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d075      	beq.n	8003a46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800395a:	4b88      	ldr	r3, [pc, #544]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	2b04      	cmp	r3, #4
 8003964:	d00c      	beq.n	8003980 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003966:	4b85      	ldr	r3, [pc, #532]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800396e:	2b08      	cmp	r3, #8
 8003970:	d112      	bne.n	8003998 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003972:	4b82      	ldr	r3, [pc, #520]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800397e:	d10b      	bne.n	8003998 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003980:	4b7e      	ldr	r3, [pc, #504]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d05b      	beq.n	8003a44 <HAL_RCC_OscConfig+0x108>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d157      	bne.n	8003a44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e242      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a0:	d106      	bne.n	80039b0 <HAL_RCC_OscConfig+0x74>
 80039a2:	4b76      	ldr	r3, [pc, #472]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a75      	ldr	r2, [pc, #468]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	e01d      	b.n	80039ec <HAL_RCC_OscConfig+0xb0>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x98>
 80039ba:	4b70      	ldr	r3, [pc, #448]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a6f      	ldr	r2, [pc, #444]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	4b6d      	ldr	r3, [pc, #436]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a6c      	ldr	r2, [pc, #432]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e00b      	b.n	80039ec <HAL_RCC_OscConfig+0xb0>
 80039d4:	4b69      	ldr	r3, [pc, #420]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a68      	ldr	r2, [pc, #416]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	4b66      	ldr	r3, [pc, #408]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a65      	ldr	r2, [pc, #404]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d013      	beq.n	8003a1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f4:	f7fd fabc 	bl	8000f70 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039fc:	f7fd fab8 	bl	8000f70 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b64      	cmp	r3, #100	; 0x64
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e207      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0e:	4b5b      	ldr	r3, [pc, #364]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0xc0>
 8003a1a:	e014      	b.n	8003a46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1c:	f7fd faa8 	bl	8000f70 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a24:	f7fd faa4 	bl	8000f70 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	; 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e1f3      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a36:	4b51      	ldr	r3, [pc, #324]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0xe8>
 8003a42:	e000      	b.n	8003a46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d063      	beq.n	8003b1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a52:	4b4a      	ldr	r3, [pc, #296]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00b      	beq.n	8003a76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a5e:	4b47      	ldr	r3, [pc, #284]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d11c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a6a:	4b44      	ldr	r3, [pc, #272]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d116      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a76:	4b41      	ldr	r3, [pc, #260]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d005      	beq.n	8003a8e <HAL_RCC_OscConfig+0x152>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d001      	beq.n	8003a8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e1c7      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a8e:	4b3b      	ldr	r3, [pc, #236]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4937      	ldr	r1, [pc, #220]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa2:	e03a      	b.n	8003b1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d020      	beq.n	8003aee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aac:	4b34      	ldr	r3, [pc, #208]	; (8003b80 <HAL_RCC_OscConfig+0x244>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab2:	f7fd fa5d 	bl	8000f70 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aba:	f7fd fa59 	bl	8000f70 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e1a8      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003acc:	4b2b      	ldr	r3, [pc, #172]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad8:	4b28      	ldr	r3, [pc, #160]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4925      	ldr	r1, [pc, #148]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]
 8003aec:	e015      	b.n	8003b1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aee:	4b24      	ldr	r3, [pc, #144]	; (8003b80 <HAL_RCC_OscConfig+0x244>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af4:	f7fd fa3c 	bl	8000f70 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003afc:	f7fd fa38 	bl	8000f70 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e187      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b0e:	4b1b      	ldr	r3, [pc, #108]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d036      	beq.n	8003b94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d016      	beq.n	8003b5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b2e:	4b15      	ldr	r3, [pc, #84]	; (8003b84 <HAL_RCC_OscConfig+0x248>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b34:	f7fd fa1c 	bl	8000f70 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b3c:	f7fd fa18 	bl	8000f70 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e167      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b4e:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <HAL_RCC_OscConfig+0x200>
 8003b5a:	e01b      	b.n	8003b94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b5c:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <HAL_RCC_OscConfig+0x248>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b62:	f7fd fa05 	bl	8000f70 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b68:	e00e      	b.n	8003b88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b6a:	f7fd fa01 	bl	8000f70 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d907      	bls.n	8003b88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e150      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	42470000 	.word	0x42470000
 8003b84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b88:	4b88      	ldr	r3, [pc, #544]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1ea      	bne.n	8003b6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8097 	beq.w	8003cd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ba6:	4b81      	ldr	r3, [pc, #516]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10f      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	4b7d      	ldr	r3, [pc, #500]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	4a7c      	ldr	r2, [pc, #496]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc2:	4b7a      	ldr	r3, [pc, #488]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bca:	60bb      	str	r3, [r7, #8]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd2:	4b77      	ldr	r3, [pc, #476]	; (8003db0 <HAL_RCC_OscConfig+0x474>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d118      	bne.n	8003c10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bde:	4b74      	ldr	r3, [pc, #464]	; (8003db0 <HAL_RCC_OscConfig+0x474>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a73      	ldr	r2, [pc, #460]	; (8003db0 <HAL_RCC_OscConfig+0x474>)
 8003be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bea:	f7fd f9c1 	bl	8000f70 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf2:	f7fd f9bd 	bl	8000f70 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e10c      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c04:	4b6a      	ldr	r3, [pc, #424]	; (8003db0 <HAL_RCC_OscConfig+0x474>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d106      	bne.n	8003c26 <HAL_RCC_OscConfig+0x2ea>
 8003c18:	4b64      	ldr	r3, [pc, #400]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	4a63      	ldr	r2, [pc, #396]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	6713      	str	r3, [r2, #112]	; 0x70
 8003c24:	e01c      	b.n	8003c60 <HAL_RCC_OscConfig+0x324>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b05      	cmp	r3, #5
 8003c2c:	d10c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x30c>
 8003c2e:	4b5f      	ldr	r3, [pc, #380]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c32:	4a5e      	ldr	r2, [pc, #376]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c34:	f043 0304 	orr.w	r3, r3, #4
 8003c38:	6713      	str	r3, [r2, #112]	; 0x70
 8003c3a:	4b5c      	ldr	r3, [pc, #368]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3e:	4a5b      	ldr	r2, [pc, #364]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	6713      	str	r3, [r2, #112]	; 0x70
 8003c46:	e00b      	b.n	8003c60 <HAL_RCC_OscConfig+0x324>
 8003c48:	4b58      	ldr	r3, [pc, #352]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	4a57      	ldr	r2, [pc, #348]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c4e:	f023 0301 	bic.w	r3, r3, #1
 8003c52:	6713      	str	r3, [r2, #112]	; 0x70
 8003c54:	4b55      	ldr	r3, [pc, #340]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c58:	4a54      	ldr	r2, [pc, #336]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c5a:	f023 0304 	bic.w	r3, r3, #4
 8003c5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d015      	beq.n	8003c94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c68:	f7fd f982 	bl	8000f70 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c6e:	e00a      	b.n	8003c86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c70:	f7fd f97e 	bl	8000f70 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e0cb      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c86:	4b49      	ldr	r3, [pc, #292]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0ee      	beq.n	8003c70 <HAL_RCC_OscConfig+0x334>
 8003c92:	e014      	b.n	8003cbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c94:	f7fd f96c 	bl	8000f70 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c9a:	e00a      	b.n	8003cb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c9c:	f7fd f968 	bl	8000f70 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e0b5      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb2:	4b3e      	ldr	r3, [pc, #248]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1ee      	bne.n	8003c9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cbe:	7dfb      	ldrb	r3, [r7, #23]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d105      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc4:	4b39      	ldr	r3, [pc, #228]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	4a38      	ldr	r2, [pc, #224]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80a1 	beq.w	8003e1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cda:	4b34      	ldr	r3, [pc, #208]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d05c      	beq.n	8003da0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d141      	bne.n	8003d72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cee:	4b31      	ldr	r3, [pc, #196]	; (8003db4 <HAL_RCC_OscConfig+0x478>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf4:	f7fd f93c 	bl	8000f70 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cfc:	f7fd f938 	bl	8000f70 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e087      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0e:	4b27      	ldr	r3, [pc, #156]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69da      	ldr	r2, [r3, #28]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	019b      	lsls	r3, r3, #6
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	085b      	lsrs	r3, r3, #1
 8003d32:	3b01      	subs	r3, #1
 8003d34:	041b      	lsls	r3, r3, #16
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	061b      	lsls	r3, r3, #24
 8003d3e:	491b      	ldr	r1, [pc, #108]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d44:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <HAL_RCC_OscConfig+0x478>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4a:	f7fd f911 	bl	8000f70 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d52:	f7fd f90d 	bl	8000f70 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e05c      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d64:	4b11      	ldr	r3, [pc, #68]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_RCC_OscConfig+0x416>
 8003d70:	e054      	b.n	8003e1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d72:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <HAL_RCC_OscConfig+0x478>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7fd f8fa 	bl	8000f70 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d80:	f7fd f8f6 	bl	8000f70 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e045      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d92:	4b06      	ldr	r3, [pc, #24]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0x444>
 8003d9e:	e03d      	b.n	8003e1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d107      	bne.n	8003db8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e038      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
 8003dac:	40023800 	.word	0x40023800
 8003db0:	40007000 	.word	0x40007000
 8003db4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003db8:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <HAL_RCC_OscConfig+0x4ec>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d028      	beq.n	8003e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d121      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d11a      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003de8:	4013      	ands	r3, r2
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d111      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	085b      	lsrs	r3, r3, #1
 8003e00:	3b01      	subs	r3, #1
 8003e02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d107      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e000      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40023800 	.word	0x40023800

08003e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0cc      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e40:	4b68      	ldr	r3, [pc, #416]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d90c      	bls.n	8003e68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b65      	ldr	r3, [pc, #404]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e56:	4b63      	ldr	r3, [pc, #396]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0b8      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d020      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e80:	4b59      	ldr	r3, [pc, #356]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4a58      	ldr	r2, [pc, #352]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e98:	4b53      	ldr	r3, [pc, #332]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4a52      	ldr	r2, [pc, #328]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ea2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ea4:	4b50      	ldr	r3, [pc, #320]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	494d      	ldr	r1, [pc, #308]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d044      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d107      	bne.n	8003eda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eca:	4b47      	ldr	r3, [pc, #284]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d119      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e07f      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d003      	beq.n	8003eea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d107      	bne.n	8003efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eea:	4b3f      	ldr	r3, [pc, #252]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d109      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e06f      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003efa:	4b3b      	ldr	r3, [pc, #236]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e067      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f0a:	4b37      	ldr	r3, [pc, #220]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f023 0203 	bic.w	r2, r3, #3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	4934      	ldr	r1, [pc, #208]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f1c:	f7fd f828 	bl	8000f70 <HAL_GetTick>
 8003f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f22:	e00a      	b.n	8003f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f24:	f7fd f824 	bl	8000f70 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e04f      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	4b2b      	ldr	r3, [pc, #172]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 020c 	and.w	r2, r3, #12
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d1eb      	bne.n	8003f24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f4c:	4b25      	ldr	r3, [pc, #148]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d20c      	bcs.n	8003f74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5a:	4b22      	ldr	r3, [pc, #136]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f62:	4b20      	ldr	r3, [pc, #128]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e032      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f80:	4b19      	ldr	r3, [pc, #100]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	4916      	ldr	r1, [pc, #88]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d009      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f9e:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	490e      	ldr	r1, [pc, #56]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fb2:	f000 f821 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	091b      	lsrs	r3, r3, #4
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	490a      	ldr	r1, [pc, #40]	; (8003fec <HAL_RCC_ClockConfig+0x1c0>)
 8003fc4:	5ccb      	ldrb	r3, [r1, r3]
 8003fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fca:	4a09      	ldr	r2, [pc, #36]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fce:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fc ff88 	bl	8000ee8 <HAL_InitTick>

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40023c00 	.word	0x40023c00
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	080086ac 	.word	0x080086ac
 8003ff0:	20000000 	.word	0x20000000
 8003ff4:	20000004 	.word	0x20000004

08003ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ffc:	b094      	sub	sp, #80	; 0x50
 8003ffe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	647b      	str	r3, [r7, #68]	; 0x44
 8004004:	2300      	movs	r3, #0
 8004006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004008:	2300      	movs	r3, #0
 800400a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004010:	4b79      	ldr	r3, [pc, #484]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 030c 	and.w	r3, r3, #12
 8004018:	2b08      	cmp	r3, #8
 800401a:	d00d      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0x40>
 800401c:	2b08      	cmp	r3, #8
 800401e:	f200 80e1 	bhi.w	80041e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0x34>
 8004026:	2b04      	cmp	r3, #4
 8004028:	d003      	beq.n	8004032 <HAL_RCC_GetSysClockFreq+0x3a>
 800402a:	e0db      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800402c:	4b73      	ldr	r3, [pc, #460]	; (80041fc <HAL_RCC_GetSysClockFreq+0x204>)
 800402e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004030:	e0db      	b.n	80041ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004032:	4b73      	ldr	r3, [pc, #460]	; (8004200 <HAL_RCC_GetSysClockFreq+0x208>)
 8004034:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004036:	e0d8      	b.n	80041ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004038:	4b6f      	ldr	r3, [pc, #444]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004040:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004042:	4b6d      	ldr	r3, [pc, #436]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d063      	beq.n	8004116 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800404e:	4b6a      	ldr	r3, [pc, #424]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	099b      	lsrs	r3, r3, #6
 8004054:	2200      	movs	r2, #0
 8004056:	63bb      	str	r3, [r7, #56]	; 0x38
 8004058:	63fa      	str	r2, [r7, #60]	; 0x3c
 800405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004060:	633b      	str	r3, [r7, #48]	; 0x30
 8004062:	2300      	movs	r3, #0
 8004064:	637b      	str	r3, [r7, #52]	; 0x34
 8004066:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800406a:	4622      	mov	r2, r4
 800406c:	462b      	mov	r3, r5
 800406e:	f04f 0000 	mov.w	r0, #0
 8004072:	f04f 0100 	mov.w	r1, #0
 8004076:	0159      	lsls	r1, r3, #5
 8004078:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800407c:	0150      	lsls	r0, r2, #5
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	4621      	mov	r1, r4
 8004084:	1a51      	subs	r1, r2, r1
 8004086:	6139      	str	r1, [r7, #16]
 8004088:	4629      	mov	r1, r5
 800408a:	eb63 0301 	sbc.w	r3, r3, r1
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800409c:	4659      	mov	r1, fp
 800409e:	018b      	lsls	r3, r1, #6
 80040a0:	4651      	mov	r1, sl
 80040a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040a6:	4651      	mov	r1, sl
 80040a8:	018a      	lsls	r2, r1, #6
 80040aa:	4651      	mov	r1, sl
 80040ac:	ebb2 0801 	subs.w	r8, r2, r1
 80040b0:	4659      	mov	r1, fp
 80040b2:	eb63 0901 	sbc.w	r9, r3, r1
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040ca:	4690      	mov	r8, r2
 80040cc:	4699      	mov	r9, r3
 80040ce:	4623      	mov	r3, r4
 80040d0:	eb18 0303 	adds.w	r3, r8, r3
 80040d4:	60bb      	str	r3, [r7, #8]
 80040d6:	462b      	mov	r3, r5
 80040d8:	eb49 0303 	adc.w	r3, r9, r3
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	f04f 0300 	mov.w	r3, #0
 80040e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040ea:	4629      	mov	r1, r5
 80040ec:	024b      	lsls	r3, r1, #9
 80040ee:	4621      	mov	r1, r4
 80040f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040f4:	4621      	mov	r1, r4
 80040f6:	024a      	lsls	r2, r1, #9
 80040f8:	4610      	mov	r0, r2
 80040fa:	4619      	mov	r1, r3
 80040fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040fe:	2200      	movs	r2, #0
 8004100:	62bb      	str	r3, [r7, #40]	; 0x28
 8004102:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004104:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004108:	f7fc f85e 	bl	80001c8 <__aeabi_uldivmod>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4613      	mov	r3, r2
 8004112:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004114:	e058      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004116:	4b38      	ldr	r3, [pc, #224]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	099b      	lsrs	r3, r3, #6
 800411c:	2200      	movs	r2, #0
 800411e:	4618      	mov	r0, r3
 8004120:	4611      	mov	r1, r2
 8004122:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004126:	623b      	str	r3, [r7, #32]
 8004128:	2300      	movs	r3, #0
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
 800412c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004130:	4642      	mov	r2, r8
 8004132:	464b      	mov	r3, r9
 8004134:	f04f 0000 	mov.w	r0, #0
 8004138:	f04f 0100 	mov.w	r1, #0
 800413c:	0159      	lsls	r1, r3, #5
 800413e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004142:	0150      	lsls	r0, r2, #5
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4641      	mov	r1, r8
 800414a:	ebb2 0a01 	subs.w	sl, r2, r1
 800414e:	4649      	mov	r1, r9
 8004150:	eb63 0b01 	sbc.w	fp, r3, r1
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004160:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004164:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004168:	ebb2 040a 	subs.w	r4, r2, sl
 800416c:	eb63 050b 	sbc.w	r5, r3, fp
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	00eb      	lsls	r3, r5, #3
 800417a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800417e:	00e2      	lsls	r2, r4, #3
 8004180:	4614      	mov	r4, r2
 8004182:	461d      	mov	r5, r3
 8004184:	4643      	mov	r3, r8
 8004186:	18e3      	adds	r3, r4, r3
 8004188:	603b      	str	r3, [r7, #0]
 800418a:	464b      	mov	r3, r9
 800418c:	eb45 0303 	adc.w	r3, r5, r3
 8004190:	607b      	str	r3, [r7, #4]
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800419e:	4629      	mov	r1, r5
 80041a0:	028b      	lsls	r3, r1, #10
 80041a2:	4621      	mov	r1, r4
 80041a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041a8:	4621      	mov	r1, r4
 80041aa:	028a      	lsls	r2, r1, #10
 80041ac:	4610      	mov	r0, r2
 80041ae:	4619      	mov	r1, r3
 80041b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041b2:	2200      	movs	r2, #0
 80041b4:	61bb      	str	r3, [r7, #24]
 80041b6:	61fa      	str	r2, [r7, #28]
 80041b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041bc:	f7fc f804 	bl	80001c8 <__aeabi_uldivmod>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4613      	mov	r3, r2
 80041c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	0c1b      	lsrs	r3, r3, #16
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	3301      	adds	r3, #1
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041e2:	e002      	b.n	80041ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041e4:	4b05      	ldr	r3, [pc, #20]	; (80041fc <HAL_RCC_GetSysClockFreq+0x204>)
 80041e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3750      	adds	r7, #80	; 0x50
 80041f0:	46bd      	mov	sp, r7
 80041f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041f6:	bf00      	nop
 80041f8:	40023800 	.word	0x40023800
 80041fc:	00f42400 	.word	0x00f42400
 8004200:	007a1200 	.word	0x007a1200

08004204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004208:	4b03      	ldr	r3, [pc, #12]	; (8004218 <HAL_RCC_GetHCLKFreq+0x14>)
 800420a:	681b      	ldr	r3, [r3, #0]
}
 800420c:	4618      	mov	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	20000000 	.word	0x20000000

0800421c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004220:	f7ff fff0 	bl	8004204 <HAL_RCC_GetHCLKFreq>
 8004224:	4602      	mov	r2, r0
 8004226:	4b05      	ldr	r3, [pc, #20]	; (800423c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	0a9b      	lsrs	r3, r3, #10
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	4903      	ldr	r1, [pc, #12]	; (8004240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004232:	5ccb      	ldrb	r3, [r1, r3]
 8004234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004238:	4618      	mov	r0, r3
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40023800 	.word	0x40023800
 8004240:	080086bc 	.word	0x080086bc

08004244 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d105      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004268:	2b00      	cmp	r3, #0
 800426a:	d035      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800426c:	4b62      	ldr	r3, [pc, #392]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004272:	f7fc fe7d 	bl	8000f70 <HAL_GetTick>
 8004276:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004278:	e008      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800427a:	f7fc fe79 	bl	8000f70 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e0b0      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800428c:	4b5b      	ldr	r3, [pc, #364]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1f0      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	019a      	lsls	r2, r3, #6
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	071b      	lsls	r3, r3, #28
 80042a4:	4955      	ldr	r1, [pc, #340]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042ac:	4b52      	ldr	r3, [pc, #328]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042b2:	f7fc fe5d 	bl	8000f70 <HAL_GetTick>
 80042b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042b8:	e008      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042ba:	f7fc fe59 	bl	8000f70 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e090      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042cc:	4b4b      	ldr	r3, [pc, #300]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8083 	beq.w	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	4b44      	ldr	r3, [pc, #272]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	4a43      	ldr	r2, [pc, #268]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f4:	6413      	str	r3, [r2, #64]	; 0x40
 80042f6:	4b41      	ldr	r3, [pc, #260]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004302:	4b3f      	ldr	r3, [pc, #252]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a3e      	ldr	r2, [pc, #248]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800430c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800430e:	f7fc fe2f 	bl	8000f70 <HAL_GetTick>
 8004312:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004314:	e008      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004316:	f7fc fe2b 	bl	8000f70 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e062      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004328:	4b35      	ldr	r3, [pc, #212]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f0      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004334:	4b31      	ldr	r3, [pc, #196]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d02f      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	429a      	cmp	r2, r3
 8004350:	d028      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004352:	4b2a      	ldr	r3, [pc, #168]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800435a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800435c:	4b29      	ldr	r3, [pc, #164]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800435e:	2201      	movs	r2, #1
 8004360:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004362:	4b28      	ldr	r3, [pc, #160]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004368:	4a24      	ldr	r2, [pc, #144]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800436e:	4b23      	ldr	r3, [pc, #140]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b01      	cmp	r3, #1
 8004378:	d114      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800437a:	f7fc fdf9 	bl	8000f70 <HAL_GetTick>
 800437e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004380:	e00a      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004382:	f7fc fdf5 	bl	8000f70 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004390:	4293      	cmp	r3, r2
 8004392:	d901      	bls.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e02a      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004398:	4b18      	ldr	r3, [pc, #96]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0ee      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043b0:	d10d      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80043b2:	4b12      	ldr	r3, [pc, #72]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c6:	490d      	ldr	r1, [pc, #52]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	608b      	str	r3, [r1, #8]
 80043cc:	e005      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x196>
 80043ce:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	4a0a      	ldr	r2, [pc, #40]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043d8:	6093      	str	r3, [r2, #8]
 80043da:	4b08      	ldr	r3, [pc, #32]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e6:	4905      	ldr	r1, [pc, #20]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	42470068 	.word	0x42470068
 80043fc:	40023800 	.word	0x40023800
 8004400:	40007000 	.word	0x40007000
 8004404:	42470e40 	.word	0x42470e40

08004408 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d13e      	bne.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004426:	4b23      	ldr	r3, [pc, #140]	; (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d12f      	bne.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800443c:	4b1e      	ldr	r3, [pc, #120]	; (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800443e:	617b      	str	r3, [r7, #20]
          break;
 8004440:	e02f      	b.n	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004442:	4b1c      	ldr	r3, [pc, #112]	; (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800444e:	d108      	bne.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004450:	4b18      	ldr	r3, [pc, #96]	; (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004458:	4a18      	ldr	r2, [pc, #96]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800445a:	fbb2 f3f3 	udiv	r3, r2, r3
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	e007      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004462:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800446a:	4a15      	ldr	r2, [pc, #84]	; (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800446c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004470:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004472:	4b10      	ldr	r3, [pc, #64]	; (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004478:	099b      	lsrs	r3, r3, #6
 800447a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	fb02 f303 	mul.w	r3, r2, r3
 8004484:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004486:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800448c:	0f1b      	lsrs	r3, r3, #28
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	fbb2 f3f3 	udiv	r3, r2, r3
 8004498:	617b      	str	r3, [r7, #20]
          break;
 800449a:	e002      	b.n	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]
          break;
 80044a0:	bf00      	nop
        }
      }
      break;
 80044a2:	bf00      	nop
    }
  }
  return frequency;
 80044a4:	697b      	ldr	r3, [r7, #20]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40023800 	.word	0x40023800
 80044b8:	00bb8000 	.word	0x00bb8000
 80044bc:	007a1200 	.word	0x007a1200
 80044c0:	00f42400 	.word	0x00f42400

080044c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e07b      	b.n	80045ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d108      	bne.n	80044f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044e6:	d009      	beq.n	80044fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	61da      	str	r2, [r3, #28]
 80044ee:	e005      	b.n	80044fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d106      	bne.n	800451c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fc fb7e 	bl	8000c18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004532:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800456c:	431a      	orrs	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004580:	ea42 0103 	orr.w	r1, r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	0c1b      	lsrs	r3, r3, #16
 800459a:	f003 0104 	and.w	r1, r3, #4
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	f003 0210 	and.w	r2, r3, #16
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	69da      	ldr	r2, [r3, #28]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d001      	beq.n	80045f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e04e      	b.n	800468e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a23      	ldr	r2, [pc, #140]	; (800469c <HAL_TIM_Base_Start_IT+0xc4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d022      	beq.n	8004658 <HAL_TIM_Base_Start_IT+0x80>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461a:	d01d      	beq.n	8004658 <HAL_TIM_Base_Start_IT+0x80>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a1f      	ldr	r2, [pc, #124]	; (80046a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d018      	beq.n	8004658 <HAL_TIM_Base_Start_IT+0x80>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a1e      	ldr	r2, [pc, #120]	; (80046a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d013      	beq.n	8004658 <HAL_TIM_Base_Start_IT+0x80>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a1c      	ldr	r2, [pc, #112]	; (80046a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d00e      	beq.n	8004658 <HAL_TIM_Base_Start_IT+0x80>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1b      	ldr	r2, [pc, #108]	; (80046ac <HAL_TIM_Base_Start_IT+0xd4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d009      	beq.n	8004658 <HAL_TIM_Base_Start_IT+0x80>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a19      	ldr	r2, [pc, #100]	; (80046b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d004      	beq.n	8004658 <HAL_TIM_Base_Start_IT+0x80>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a18      	ldr	r2, [pc, #96]	; (80046b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d111      	bne.n	800467c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b06      	cmp	r3, #6
 8004668:	d010      	beq.n	800468c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0201 	orr.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467a:	e007      	b.n	800468c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0201 	orr.w	r2, r2, #1
 800468a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40010000 	.word	0x40010000
 80046a0:	40000400 	.word	0x40000400
 80046a4:	40000800 	.word	0x40000800
 80046a8:	40000c00 	.word	0x40000c00
 80046ac:	40010400 	.word	0x40010400
 80046b0:	40014000 	.word	0x40014000
 80046b4:	40001800 	.word	0x40001800

080046b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e097      	b.n	80047fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d106      	bne.n	80046e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7fc fae1 	bl	8000ca8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2202      	movs	r2, #2
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046fc:	f023 0307 	bic.w	r3, r3, #7
 8004700:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3304      	adds	r3, #4
 800470a:	4619      	mov	r1, r3
 800470c:	4610      	mov	r0, r2
 800470e:	f000 fa4d 	bl	8004bac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800473a:	f023 0303 	bic.w	r3, r3, #3
 800473e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	4313      	orrs	r3, r2
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004758:	f023 030c 	bic.w	r3, r3, #12
 800475c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004764:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004768:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	021b      	lsls	r3, r3, #8
 8004774:	4313      	orrs	r3, r2
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	011a      	lsls	r2, r3, #4
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	031b      	lsls	r3, r3, #12
 8004788:	4313      	orrs	r3, r2
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004796:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800479e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	4313      	orrs	r3, r2
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004814:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800481c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004824:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800482c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d110      	bne.n	8004856 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d102      	bne.n	8004840 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800483a:	7b7b      	ldrb	r3, [r7, #13]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d001      	beq.n	8004844 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e089      	b.n	8004958 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004854:	e031      	b.n	80048ba <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b04      	cmp	r3, #4
 800485a:	d110      	bne.n	800487e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800485c:	7bbb      	ldrb	r3, [r7, #14]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d102      	bne.n	8004868 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004862:	7b3b      	ldrb	r3, [r7, #12]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d001      	beq.n	800486c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e075      	b.n	8004958 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800487c:	e01d      	b.n	80048ba <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d108      	bne.n	8004896 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004884:	7bbb      	ldrb	r3, [r7, #14]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d105      	bne.n	8004896 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800488a:	7b7b      	ldrb	r3, [r7, #13]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d102      	bne.n	8004896 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004890:	7b3b      	ldrb	r3, [r7, #12]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d001      	beq.n	800489a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e05e      	b.n	8004958 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2202      	movs	r2, #2
 800489e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2202      	movs	r2, #2
 80048a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2202      	movs	r2, #2
 80048ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2202      	movs	r2, #2
 80048b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <HAL_TIM_Encoder_Start_IT+0xc4>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d010      	beq.n	80048e8 <HAL_TIM_Encoder_Start_IT+0xe4>
 80048c6:	e01f      	b.n	8004908 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2201      	movs	r2, #1
 80048ce:	2100      	movs	r1, #0
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fa0b 	bl	8004cec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0202 	orr.w	r2, r2, #2
 80048e4:	60da      	str	r2, [r3, #12]
      break;
 80048e6:	e02e      	b.n	8004946 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2201      	movs	r2, #1
 80048ee:	2104      	movs	r1, #4
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 f9fb 	bl	8004cec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0204 	orr.w	r2, r2, #4
 8004904:	60da      	str	r2, [r3, #12]
      break;
 8004906:	e01e      	b.n	8004946 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2201      	movs	r2, #1
 800490e:	2100      	movs	r1, #0
 8004910:	4618      	mov	r0, r3
 8004912:	f000 f9eb 	bl	8004cec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2201      	movs	r2, #1
 800491c:	2104      	movs	r1, #4
 800491e:	4618      	mov	r0, r3
 8004920:	f000 f9e4 	bl	8004cec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0202 	orr.w	r2, r2, #2
 8004932:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0204 	orr.w	r2, r2, #4
 8004942:	60da      	str	r2, [r3, #12]
      break;
 8004944:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0201 	orr.w	r2, r2, #1
 8004954:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b02      	cmp	r3, #2
 8004974:	d122      	bne.n	80049bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b02      	cmp	r3, #2
 8004982:	d11b      	bne.n	80049bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f06f 0202 	mvn.w	r2, #2
 800498c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7fb fda4 	bl	80004f0 <HAL_TIM_IC_CaptureCallback>
 80049a8:	e005      	b.n	80049b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f8e0 	bl	8004b70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f8e7 	bl	8004b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d122      	bne.n	8004a10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d11b      	bne.n	8004a10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0204 	mvn.w	r2, #4
 80049e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2202      	movs	r2, #2
 80049e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fb fd7a 	bl	80004f0 <HAL_TIM_IC_CaptureCallback>
 80049fc:	e005      	b.n	8004a0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f8b6 	bl	8004b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f8bd 	bl	8004b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f003 0308 	and.w	r3, r3, #8
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d122      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d11b      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0208 	mvn.w	r2, #8
 8004a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2204      	movs	r2, #4
 8004a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fb fd50 	bl	80004f0 <HAL_TIM_IC_CaptureCallback>
 8004a50:	e005      	b.n	8004a5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f88c 	bl	8004b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f893 	bl	8004b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f003 0310 	and.w	r3, r3, #16
 8004a6e:	2b10      	cmp	r3, #16
 8004a70:	d122      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f003 0310 	and.w	r3, r3, #16
 8004a7c:	2b10      	cmp	r3, #16
 8004a7e:	d11b      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0210 	mvn.w	r2, #16
 8004a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2208      	movs	r2, #8
 8004a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fb fd26 	bl	80004f0 <HAL_TIM_IC_CaptureCallback>
 8004aa4:	e005      	b.n	8004ab2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f862 	bl	8004b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f869 	bl	8004b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d10e      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d107      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0201 	mvn.w	r2, #1
 8004adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fb fcf4 	bl	80004cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aee:	2b80      	cmp	r3, #128	; 0x80
 8004af0:	d10e      	bne.n	8004b10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afc:	2b80      	cmp	r3, #128	; 0x80
 8004afe:	d107      	bne.n	8004b10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f99a 	bl	8004e44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1a:	2b40      	cmp	r3, #64	; 0x40
 8004b1c:	d10e      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b28:	2b40      	cmp	r3, #64	; 0x40
 8004b2a:	d107      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f82e 	bl	8004b98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0320 	and.w	r3, r3, #32
 8004b46:	2b20      	cmp	r3, #32
 8004b48:	d10e      	bne.n	8004b68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d107      	bne.n	8004b68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0220 	mvn.w	r2, #32
 8004b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f964 	bl	8004e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b68:	bf00      	nop
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a40      	ldr	r2, [pc, #256]	; (8004cc0 <TIM_Base_SetConfig+0x114>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d013      	beq.n	8004bec <TIM_Base_SetConfig+0x40>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bca:	d00f      	beq.n	8004bec <TIM_Base_SetConfig+0x40>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a3d      	ldr	r2, [pc, #244]	; (8004cc4 <TIM_Base_SetConfig+0x118>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d00b      	beq.n	8004bec <TIM_Base_SetConfig+0x40>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a3c      	ldr	r2, [pc, #240]	; (8004cc8 <TIM_Base_SetConfig+0x11c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d007      	beq.n	8004bec <TIM_Base_SetConfig+0x40>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a3b      	ldr	r2, [pc, #236]	; (8004ccc <TIM_Base_SetConfig+0x120>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d003      	beq.n	8004bec <TIM_Base_SetConfig+0x40>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a3a      	ldr	r2, [pc, #232]	; (8004cd0 <TIM_Base_SetConfig+0x124>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d108      	bne.n	8004bfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a2f      	ldr	r2, [pc, #188]	; (8004cc0 <TIM_Base_SetConfig+0x114>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d02b      	beq.n	8004c5e <TIM_Base_SetConfig+0xb2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0c:	d027      	beq.n	8004c5e <TIM_Base_SetConfig+0xb2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a2c      	ldr	r2, [pc, #176]	; (8004cc4 <TIM_Base_SetConfig+0x118>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d023      	beq.n	8004c5e <TIM_Base_SetConfig+0xb2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a2b      	ldr	r2, [pc, #172]	; (8004cc8 <TIM_Base_SetConfig+0x11c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d01f      	beq.n	8004c5e <TIM_Base_SetConfig+0xb2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a2a      	ldr	r2, [pc, #168]	; (8004ccc <TIM_Base_SetConfig+0x120>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d01b      	beq.n	8004c5e <TIM_Base_SetConfig+0xb2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a29      	ldr	r2, [pc, #164]	; (8004cd0 <TIM_Base_SetConfig+0x124>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d017      	beq.n	8004c5e <TIM_Base_SetConfig+0xb2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a28      	ldr	r2, [pc, #160]	; (8004cd4 <TIM_Base_SetConfig+0x128>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d013      	beq.n	8004c5e <TIM_Base_SetConfig+0xb2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a27      	ldr	r2, [pc, #156]	; (8004cd8 <TIM_Base_SetConfig+0x12c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00f      	beq.n	8004c5e <TIM_Base_SetConfig+0xb2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a26      	ldr	r2, [pc, #152]	; (8004cdc <TIM_Base_SetConfig+0x130>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00b      	beq.n	8004c5e <TIM_Base_SetConfig+0xb2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a25      	ldr	r2, [pc, #148]	; (8004ce0 <TIM_Base_SetConfig+0x134>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d007      	beq.n	8004c5e <TIM_Base_SetConfig+0xb2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a24      	ldr	r2, [pc, #144]	; (8004ce4 <TIM_Base_SetConfig+0x138>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d003      	beq.n	8004c5e <TIM_Base_SetConfig+0xb2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a23      	ldr	r2, [pc, #140]	; (8004ce8 <TIM_Base_SetConfig+0x13c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d108      	bne.n	8004c70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a0a      	ldr	r2, [pc, #40]	; (8004cc0 <TIM_Base_SetConfig+0x114>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d003      	beq.n	8004ca4 <TIM_Base_SetConfig+0xf8>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a0c      	ldr	r2, [pc, #48]	; (8004cd0 <TIM_Base_SetConfig+0x124>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d103      	bne.n	8004cac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	691a      	ldr	r2, [r3, #16]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	615a      	str	r2, [r3, #20]
}
 8004cb2:	bf00      	nop
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40010000 	.word	0x40010000
 8004cc4:	40000400 	.word	0x40000400
 8004cc8:	40000800 	.word	0x40000800
 8004ccc:	40000c00 	.word	0x40000c00
 8004cd0:	40010400 	.word	0x40010400
 8004cd4:	40014000 	.word	0x40014000
 8004cd8:	40014400 	.word	0x40014400
 8004cdc:	40014800 	.word	0x40014800
 8004ce0:	40001800 	.word	0x40001800
 8004ce4:	40001c00 	.word	0x40001c00
 8004ce8:	40002000 	.word	0x40002000

08004cec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f003 031f 	and.w	r3, r3, #31
 8004cfe:	2201      	movs	r2, #1
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a1a      	ldr	r2, [r3, #32]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	401a      	ands	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a1a      	ldr	r2, [r3, #32]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f003 031f 	and.w	r3, r3, #31
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	fa01 f303 	lsl.w	r3, r1, r3
 8004d24:	431a      	orrs	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	621a      	str	r2, [r3, #32]
}
 8004d2a:	bf00      	nop
 8004d2c:	371c      	adds	r7, #28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
	...

08004d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e05a      	b.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a21      	ldr	r2, [pc, #132]	; (8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d022      	beq.n	8004dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9c:	d01d      	beq.n	8004dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1d      	ldr	r2, [pc, #116]	; (8004e18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d018      	beq.n	8004dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a1b      	ldr	r2, [pc, #108]	; (8004e1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d013      	beq.n	8004dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a1a      	ldr	r2, [pc, #104]	; (8004e20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d00e      	beq.n	8004dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a18      	ldr	r2, [pc, #96]	; (8004e24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d009      	beq.n	8004dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a17      	ldr	r2, [pc, #92]	; (8004e28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d004      	beq.n	8004dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a15      	ldr	r2, [pc, #84]	; (8004e2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d10c      	bne.n	8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004de0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40010000 	.word	0x40010000
 8004e18:	40000400 	.word	0x40000400
 8004e1c:	40000800 	.word	0x40000800
 8004e20:	40000c00 	.word	0x40000c00
 8004e24:	40010400 	.word	0x40010400
 8004e28:	40014000 	.word	0x40014000
 8004e2c:	40001800 	.word	0x40001800

08004e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e58:	b084      	sub	sp, #16
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b084      	sub	sp, #16
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	f107 001c 	add.w	r0, r7, #28
 8004e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d122      	bne.n	8004eb6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d105      	bne.n	8004eaa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f9c0 	bl	8005230 <USB_CoreReset>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	73fb      	strb	r3, [r7, #15]
 8004eb4:	e01a      	b.n	8004eec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f9b4 	bl	8005230 <USB_CoreReset>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d106      	bne.n	8004ee0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	639a      	str	r2, [r3, #56]	; 0x38
 8004ede:	e005      	b.n	8004eec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d10b      	bne.n	8004f0a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f043 0206 	orr.w	r2, r3, #6
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f043 0220 	orr.w	r2, r3, #32
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f16:	b004      	add	sp, #16
 8004f18:	4770      	bx	lr

08004f1a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f043 0201 	orr.w	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f023 0201 	bic.w	r2, r3, #1
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b084      	sub	sp, #16
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	460b      	mov	r3, r1
 8004f68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f7a:	78fb      	ldrb	r3, [r7, #3]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d115      	bne.n	8004fac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f8c:	2001      	movs	r0, #1
 8004f8e:	f7fb fffb 	bl	8000f88 <HAL_Delay>
      ms++;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	3301      	adds	r3, #1
 8004f96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f93a 	bl	8005212 <USB_GetMode>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d01e      	beq.n	8004fe2 <USB_SetCurrentMode+0x84>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b31      	cmp	r3, #49	; 0x31
 8004fa8:	d9f0      	bls.n	8004f8c <USB_SetCurrentMode+0x2e>
 8004faa:	e01a      	b.n	8004fe2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fac:	78fb      	ldrb	r3, [r7, #3]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d115      	bne.n	8004fde <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fbe:	2001      	movs	r0, #1
 8004fc0:	f7fb ffe2 	bl	8000f88 <HAL_Delay>
      ms++;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f921 	bl	8005212 <USB_GetMode>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d005      	beq.n	8004fe2 <USB_SetCurrentMode+0x84>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b31      	cmp	r3, #49	; 0x31
 8004fda:	d9f0      	bls.n	8004fbe <USB_SetCurrentMode+0x60>
 8004fdc:	e001      	b.n	8004fe2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e005      	b.n	8004fee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b32      	cmp	r3, #50	; 0x32
 8004fe6:	d101      	bne.n	8004fec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e000      	b.n	8004fee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	3301      	adds	r3, #1
 800500a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4a13      	ldr	r2, [pc, #76]	; (800505c <USB_FlushTxFifo+0x64>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d901      	bls.n	8005018 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e01b      	b.n	8005050 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	daf2      	bge.n	8005006 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	019b      	lsls	r3, r3, #6
 8005028:	f043 0220 	orr.w	r2, r3, #32
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3301      	adds	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4a08      	ldr	r2, [pc, #32]	; (800505c <USB_FlushTxFifo+0x64>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d901      	bls.n	8005042 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e006      	b.n	8005050 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b20      	cmp	r3, #32
 800504c:	d0f0      	beq.n	8005030 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	00030d40 	.word	0x00030d40

08005060 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3301      	adds	r3, #1
 8005070:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4a11      	ldr	r2, [pc, #68]	; (80050bc <USB_FlushRxFifo+0x5c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d901      	bls.n	800507e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e018      	b.n	80050b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	daf2      	bge.n	800506c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2210      	movs	r2, #16
 800508e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3301      	adds	r3, #1
 8005094:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4a08      	ldr	r2, [pc, #32]	; (80050bc <USB_FlushRxFifo+0x5c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d901      	bls.n	80050a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e006      	b.n	80050b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	2b10      	cmp	r3, #16
 80050ac:	d0f0      	beq.n	8005090 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	00030d40 	.word	0x00030d40

080050c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b089      	sub	sp, #36	; 0x24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	4611      	mov	r1, r2
 80050cc:	461a      	mov	r2, r3
 80050ce:	460b      	mov	r3, r1
 80050d0:	71fb      	strb	r3, [r7, #7]
 80050d2:	4613      	mov	r3, r2
 80050d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80050de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d123      	bne.n	800512e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050e6:	88bb      	ldrh	r3, [r7, #4]
 80050e8:	3303      	adds	r3, #3
 80050ea:	089b      	lsrs	r3, r3, #2
 80050ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050ee:	2300      	movs	r3, #0
 80050f0:	61bb      	str	r3, [r7, #24]
 80050f2:	e018      	b.n	8005126 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050f4:	79fb      	ldrb	r3, [r7, #7]
 80050f6:	031a      	lsls	r2, r3, #12
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005100:	461a      	mov	r2, r3
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	3301      	adds	r3, #1
 800510c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	3301      	adds	r3, #1
 8005112:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	3301      	adds	r3, #1
 8005118:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	3301      	adds	r3, #1
 800511e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	3301      	adds	r3, #1
 8005124:	61bb      	str	r3, [r7, #24]
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	429a      	cmp	r2, r3
 800512c:	d3e2      	bcc.n	80050f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3724      	adds	r7, #36	; 0x24
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800513c:	b480      	push	{r7}
 800513e:	b08b      	sub	sp, #44	; 0x2c
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	4613      	mov	r3, r2
 8005148:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	089b      	lsrs	r3, r3, #2
 8005156:	b29b      	uxth	r3, r3
 8005158:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	f003 0303 	and.w	r3, r3, #3
 8005160:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005162:	2300      	movs	r3, #0
 8005164:	623b      	str	r3, [r7, #32]
 8005166:	e014      	b.n	8005192 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	601a      	str	r2, [r3, #0]
    pDest++;
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	3301      	adds	r3, #1
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	3301      	adds	r3, #1
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	3301      	adds	r3, #1
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	3301      	adds	r3, #1
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	3301      	adds	r3, #1
 8005190:	623b      	str	r3, [r7, #32]
 8005192:	6a3a      	ldr	r2, [r7, #32]
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	429a      	cmp	r2, r3
 8005198:	d3e6      	bcc.n	8005168 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800519a:	8bfb      	ldrh	r3, [r7, #30]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d01e      	beq.n	80051de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051aa:	461a      	mov	r2, r3
 80051ac:	f107 0310 	add.w	r3, r7, #16
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	fa22 f303 	lsr.w	r3, r2, r3
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	701a      	strb	r2, [r3, #0]
      i++;
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	3301      	adds	r3, #1
 80051ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	3301      	adds	r3, #1
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80051d2:	8bfb      	ldrh	r3, [r7, #30]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051d8:	8bfb      	ldrh	r3, [r7, #30]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1ea      	bne.n	80051b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	372c      	adds	r7, #44	; 0x2c
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4013      	ands	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005204:	68fb      	ldr	r3, [r7, #12]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	f003 0301 	and.w	r3, r3, #1
}
 8005222:	4618      	mov	r0, r3
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
	...

08005230 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3301      	adds	r3, #1
 8005240:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4a13      	ldr	r2, [pc, #76]	; (8005294 <USB_CoreReset+0x64>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d901      	bls.n	800524e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e01b      	b.n	8005286 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	2b00      	cmp	r3, #0
 8005254:	daf2      	bge.n	800523c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f043 0201 	orr.w	r2, r3, #1
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	3301      	adds	r3, #1
 800526a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4a09      	ldr	r2, [pc, #36]	; (8005294 <USB_CoreReset+0x64>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d901      	bls.n	8005278 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e006      	b.n	8005286 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b01      	cmp	r3, #1
 8005282:	d0f0      	beq.n	8005266 <USB_CoreReset+0x36>

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	00030d40 	.word	0x00030d40

08005298 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005298:	b084      	sub	sp, #16
 800529a:	b580      	push	{r7, lr}
 800529c:	b086      	sub	sp, #24
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052b8:	461a      	mov	r2, r3
 80052ba:	2300      	movs	r3, #0
 80052bc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052da:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d018      	beq.n	8005320 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80052ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d10a      	bne.n	800530a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005302:	f043 0304 	orr.w	r3, r3, #4
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	e014      	b.n	8005334 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005318:	f023 0304 	bic.w	r3, r3, #4
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	e009      	b.n	8005334 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800532e:	f023 0304 	bic.w	r3, r3, #4
 8005332:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005334:	2110      	movs	r1, #16
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff fe5e 	bl	8004ff8 <USB_FlushTxFifo>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7ff fe8a 	bl	8005060 <USB_FlushRxFifo>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005356:	2300      	movs	r3, #0
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	e015      	b.n	8005388 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005368:	461a      	mov	r2, r3
 800536a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800536e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4413      	add	r3, r2
 8005378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537c:	461a      	mov	r2, r3
 800537e:	2300      	movs	r3, #0
 8005380:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	3301      	adds	r3, #1
 8005386:	613b      	str	r3, [r7, #16]
 8005388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	429a      	cmp	r2, r3
 800538e:	d3e5      	bcc.n	800535c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800539c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00b      	beq.n	80053c2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053b0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a13      	ldr	r2, [pc, #76]	; (8005404 <USB_HostInit+0x16c>)
 80053b6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a13      	ldr	r2, [pc, #76]	; (8005408 <USB_HostInit+0x170>)
 80053bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80053c0:	e009      	b.n	80053d6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2280      	movs	r2, #128	; 0x80
 80053c6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a10      	ldr	r2, [pc, #64]	; (800540c <USB_HostInit+0x174>)
 80053cc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a0f      	ldr	r2, [pc, #60]	; (8005410 <USB_HostInit+0x178>)
 80053d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d105      	bne.n	80053e8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	f043 0210 	orr.w	r2, r3, #16
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699a      	ldr	r2, [r3, #24]
 80053ec:	4b09      	ldr	r3, [pc, #36]	; (8005414 <USB_HostInit+0x17c>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80053f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005400:	b004      	add	sp, #16
 8005402:	4770      	bx	lr
 8005404:	01000200 	.word	0x01000200
 8005408:	00e00300 	.word	0x00e00300
 800540c:	00600080 	.word	0x00600080
 8005410:	004000e0 	.word	0x004000e0
 8005414:	a3200008 	.word	0xa3200008

08005418 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005436:	f023 0303 	bic.w	r3, r3, #3
 800543a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	78fb      	ldrb	r3, [r7, #3]
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	68f9      	ldr	r1, [r7, #12]
 800544c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005450:	4313      	orrs	r3, r2
 8005452:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005454:	78fb      	ldrb	r3, [r7, #3]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d107      	bne.n	800546a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005460:	461a      	mov	r2, r3
 8005462:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005466:	6053      	str	r3, [r2, #4]
 8005468:	e009      	b.n	800547e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800546a:	78fb      	ldrb	r3, [r7, #3]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d106      	bne.n	800547e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005476:	461a      	mov	r2, r3
 8005478:	f241 7370 	movw	r3, #6000	; 0x1770
 800547c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80054ac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ba:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80054bc:	2064      	movs	r0, #100	; 0x64
 80054be:	f7fb fd63 	bl	8000f88 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054ce:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80054d0:	200a      	movs	r0, #10
 80054d2:	f7fb fd59 	bl	8000f88 <HAL_Delay>

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005504:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d109      	bne.n	8005524 <USB_DriveVbus+0x44>
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d106      	bne.n	8005524 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800551e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005522:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800552a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800552e:	d109      	bne.n	8005544 <USB_DriveVbus+0x64>
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d106      	bne.n	8005544 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800553e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005542:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005552:	b480      	push	{r7}
 8005554:	b085      	sub	sp, #20
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	0c5b      	lsrs	r3, r3, #17
 8005570:	f003 0303 	and.w	r3, r3, #3
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	b29b      	uxth	r3, r3
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
	...

080055a4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b088      	sub	sp, #32
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	4608      	mov	r0, r1
 80055ae:	4611      	mov	r1, r2
 80055b0:	461a      	mov	r2, r3
 80055b2:	4603      	mov	r3, r0
 80055b4:	70fb      	strb	r3, [r7, #3]
 80055b6:	460b      	mov	r3, r1
 80055b8:	70bb      	strb	r3, [r7, #2]
 80055ba:	4613      	mov	r3, r2
 80055bc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80055c6:	78fb      	ldrb	r3, [r7, #3]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d2:	461a      	mov	r2, r3
 80055d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055d8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80055da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d87e      	bhi.n	80056e0 <USB_HC_Init+0x13c>
 80055e2:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <USB_HC_Init+0x44>)
 80055e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e8:	080055f9 	.word	0x080055f9
 80055ec:	080056a3 	.word	0x080056a3
 80055f0:	080055f9 	.word	0x080055f9
 80055f4:	08005665 	.word	0x08005665
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005604:	461a      	mov	r2, r3
 8005606:	f240 439d 	movw	r3, #1181	; 0x49d
 800560a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800560c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005610:	2b00      	cmp	r3, #0
 8005612:	da10      	bge.n	8005636 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005614:	78fb      	ldrb	r3, [r7, #3]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	4413      	add	r3, r2
 800561c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	78fa      	ldrb	r2, [r7, #3]
 8005624:	0151      	lsls	r1, r2, #5
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	440a      	add	r2, r1
 800562a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800562e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005632:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005634:	e057      	b.n	80056e6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563e:	2b00      	cmp	r3, #0
 8005640:	d051      	beq.n	80056e6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005642:	78fb      	ldrb	r3, [r7, #3]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	4413      	add	r3, r2
 800564a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	78fa      	ldrb	r2, [r7, #3]
 8005652:	0151      	lsls	r1, r2, #5
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	440a      	add	r2, r1
 8005658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800565c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005660:	60d3      	str	r3, [r2, #12]
      break;
 8005662:	e040      	b.n	80056e6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005664:	78fb      	ldrb	r3, [r7, #3]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	4413      	add	r3, r2
 800566c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005670:	461a      	mov	r2, r3
 8005672:	f240 639d 	movw	r3, #1693	; 0x69d
 8005676:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005678:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800567c:	2b00      	cmp	r3, #0
 800567e:	da34      	bge.n	80056ea <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4413      	add	r3, r2
 8005688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	440a      	add	r2, r1
 8005696:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800569a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800569e:	60d3      	str	r3, [r2, #12]
      }

      break;
 80056a0:	e023      	b.n	80056ea <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056a2:	78fb      	ldrb	r3, [r7, #3]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ae:	461a      	mov	r2, r3
 80056b0:	f240 2325 	movw	r3, #549	; 0x225
 80056b4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	da17      	bge.n	80056ee <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80056be:	78fb      	ldrb	r3, [r7, #3]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	78fa      	ldrb	r2, [r7, #3]
 80056ce:	0151      	lsls	r1, r2, #5
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	440a      	add	r2, r1
 80056d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056d8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80056dc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80056de:	e006      	b.n	80056ee <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	77fb      	strb	r3, [r7, #31]
      break;
 80056e4:	e004      	b.n	80056f0 <USB_HC_Init+0x14c>
      break;
 80056e6:	bf00      	nop
 80056e8:	e002      	b.n	80056f0 <USB_HC_Init+0x14c>
      break;
 80056ea:	bf00      	nop
 80056ec:	e000      	b.n	80056f0 <USB_HC_Init+0x14c>
      break;
 80056ee:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	78fa      	ldrb	r2, [r7, #3]
 8005700:	0151      	lsls	r1, r2, #5
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	440a      	add	r2, r1
 8005706:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800570a:	f043 0302 	orr.w	r3, r3, #2
 800570e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005716:	699a      	ldr	r2, [r3, #24]
 8005718:	78fb      	ldrb	r3, [r7, #3]
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	2101      	movs	r1, #1
 8005720:	fa01 f303 	lsl.w	r3, r1, r3
 8005724:	6939      	ldr	r1, [r7, #16]
 8005726:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800572a:	4313      	orrs	r3, r2
 800572c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800573a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800573e:	2b00      	cmp	r3, #0
 8005740:	da03      	bge.n	800574a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005746:	61bb      	str	r3, [r7, #24]
 8005748:	e001      	b.n	800574e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff feff 	bl	8005552 <USB_GetHostSpeed>
 8005754:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005756:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800575a:	2b02      	cmp	r3, #2
 800575c:	d106      	bne.n	800576c <USB_HC_Init+0x1c8>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b02      	cmp	r3, #2
 8005762:	d003      	beq.n	800576c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005764:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	e001      	b.n	8005770 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005770:	787b      	ldrb	r3, [r7, #1]
 8005772:	059b      	lsls	r3, r3, #22
 8005774:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005778:	78bb      	ldrb	r3, [r7, #2]
 800577a:	02db      	lsls	r3, r3, #11
 800577c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005780:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005782:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005786:	049b      	lsls	r3, r3, #18
 8005788:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800578c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800578e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005790:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005794:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	0159      	lsls	r1, r3, #5
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	440b      	add	r3, r1
 80057a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057ac:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80057ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d003      	beq.n	80057be <USB_HC_Init+0x21a>
 80057b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d10f      	bne.n	80057de <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80057be:	78fb      	ldrb	r3, [r7, #3]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	78fa      	ldrb	r2, [r7, #3]
 80057ce:	0151      	lsls	r1, r2, #5
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	440a      	add	r2, r1
 80057d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057dc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80057de:	7ffb      	ldrb	r3, [r7, #31]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3720      	adds	r7, #32
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08c      	sub	sp, #48	; 0x30
 80057ec:	af02      	add	r7, sp, #8
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	785b      	ldrb	r3, [r3, #1]
 80057fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005804:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580e:	2b00      	cmp	r3, #0
 8005810:	d02d      	beq.n	800586e <USB_HC_StartXfer+0x86>
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	791b      	ldrb	r3, [r3, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d129      	bne.n	800586e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800581a:	79fb      	ldrb	r3, [r7, #7]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d117      	bne.n	8005850 <USB_HC_StartXfer+0x68>
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	79db      	ldrb	r3, [r3, #7]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <USB_HC_StartXfer+0x48>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	79db      	ldrb	r3, [r3, #7]
 800582c:	2b02      	cmp	r3, #2
 800582e:	d10f      	bne.n	8005850 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	4413      	add	r3, r2
 8005838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	69fa      	ldr	r2, [r7, #28]
 8005840:	0151      	lsls	r1, r2, #5
 8005842:	6a3a      	ldr	r2, [r7, #32]
 8005844:	440a      	add	r2, r1
 8005846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800584a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005850:	79fb      	ldrb	r3, [r7, #7]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10b      	bne.n	800586e <USB_HC_StartXfer+0x86>
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	795b      	ldrb	r3, [r3, #5]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d107      	bne.n	800586e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	785b      	ldrb	r3, [r3, #1]
 8005862:	4619      	mov	r1, r3
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 fa0f 	bl	8005c88 <USB_DoPing>
      return HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	e0f8      	b.n	8005a60 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d018      	beq.n	80058a8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	8912      	ldrh	r2, [r2, #8]
 800587e:	4413      	add	r3, r2
 8005880:	3b01      	subs	r3, #1
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	8912      	ldrh	r2, [r2, #8]
 8005886:	fbb3 f3f2 	udiv	r3, r3, r2
 800588a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800588c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800588e:	8b7b      	ldrh	r3, [r7, #26]
 8005890:	429a      	cmp	r2, r3
 8005892:	d90b      	bls.n	80058ac <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005894:	8b7b      	ldrh	r3, [r7, #26]
 8005896:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005898:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	8912      	ldrh	r2, [r2, #8]
 800589e:	fb03 f202 	mul.w	r2, r3, r2
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	611a      	str	r2, [r3, #16]
 80058a6:	e001      	b.n	80058ac <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80058a8:	2301      	movs	r3, #1
 80058aa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	78db      	ldrb	r3, [r3, #3]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d007      	beq.n	80058c4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	8912      	ldrh	r2, [r2, #8]
 80058ba:	fb03 f202 	mul.w	r2, r3, r2
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	611a      	str	r2, [r3, #16]
 80058c2:	e003      	b.n	80058cc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	695a      	ldr	r2, [r3, #20]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058d6:	04d9      	lsls	r1, r3, #19
 80058d8:	4b63      	ldr	r3, [pc, #396]	; (8005a68 <USB_HC_StartXfer+0x280>)
 80058da:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058dc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	7a9b      	ldrb	r3, [r3, #10]
 80058e2:	075b      	lsls	r3, r3, #29
 80058e4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058e8:	69f9      	ldr	r1, [r7, #28]
 80058ea:	0148      	lsls	r0, r1, #5
 80058ec:	6a39      	ldr	r1, [r7, #32]
 80058ee:	4401      	add	r1, r0
 80058f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058f4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058f6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80058f8:	79fb      	ldrb	r3, [r7, #7]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d009      	beq.n	8005912 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	68d9      	ldr	r1, [r3, #12]
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	4413      	add	r3, r2
 800590a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590e:	460a      	mov	r2, r1
 8005910:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	bf0c      	ite	eq
 8005922:	2301      	moveq	r3, #1
 8005924:	2300      	movne	r3, #0
 8005926:	b2db      	uxtb	r3, r3
 8005928:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	4413      	add	r3, r2
 8005932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69fa      	ldr	r2, [r7, #28]
 800593a:	0151      	lsls	r1, r2, #5
 800593c:	6a3a      	ldr	r2, [r7, #32]
 800593e:	440a      	add	r2, r1
 8005940:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005944:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005948:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	4413      	add	r3, r2
 8005952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	7e7b      	ldrb	r3, [r7, #25]
 800595a:	075b      	lsls	r3, r3, #29
 800595c:	69f9      	ldr	r1, [r7, #28]
 800595e:	0148      	lsls	r0, r1, #5
 8005960:	6a39      	ldr	r1, [r7, #32]
 8005962:	4401      	add	r1, r0
 8005964:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005968:	4313      	orrs	r3, r2
 800596a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	4413      	add	r3, r2
 8005974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005982:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	78db      	ldrb	r3, [r3, #3]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d004      	beq.n	8005996 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005992:	613b      	str	r3, [r7, #16]
 8005994:	e003      	b.n	800599e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800599c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059a4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b2:	461a      	mov	r2, r3
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80059b8:	79fb      	ldrb	r3, [r7, #7]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	e04e      	b.n	8005a60 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	78db      	ldrb	r3, [r3, #3]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d149      	bne.n	8005a5e <USB_HC_StartXfer+0x276>
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d045      	beq.n	8005a5e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	79db      	ldrb	r3, [r3, #7]
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d830      	bhi.n	8005a3c <USB_HC_StartXfer+0x254>
 80059da:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <USB_HC_StartXfer+0x1f8>)
 80059dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e0:	080059f1 	.word	0x080059f1
 80059e4:	08005a15 	.word	0x08005a15
 80059e8:	080059f1 	.word	0x080059f1
 80059ec:	08005a15 	.word	0x08005a15
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	3303      	adds	r3, #3
 80059f6:	089b      	lsrs	r3, r3, #2
 80059f8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80059fa:	8afa      	ldrh	r2, [r7, #22]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d91c      	bls.n	8005a40 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	f043 0220 	orr.w	r2, r3, #32
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a12:	e015      	b.n	8005a40 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	3303      	adds	r3, #3
 8005a1a:	089b      	lsrs	r3, r3, #2
 8005a1c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005a1e:	8afa      	ldrh	r2, [r7, #22]
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d90a      	bls.n	8005a44 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a3a:	e003      	b.n	8005a44 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005a3c:	bf00      	nop
 8005a3e:	e002      	b.n	8005a46 <USB_HC_StartXfer+0x25e>
        break;
 8005a40:	bf00      	nop
 8005a42:	e000      	b.n	8005a46 <USB_HC_StartXfer+0x25e>
        break;
 8005a44:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	68d9      	ldr	r1, [r3, #12]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	785a      	ldrb	r2, [r3, #1]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	2000      	movs	r0, #0
 8005a56:	9000      	str	r0, [sp, #0]
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f7ff fb31 	bl	80050c0 <USB_WritePacket>
  }

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3728      	adds	r7, #40	; 0x28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	1ff80000 	.word	0x1ff80000

08005a6c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	b29b      	uxth	r3, r3
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b089      	sub	sp, #36	; 0x24
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	460b      	mov	r3, r1
 8005a98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	0c9b      	lsrs	r3, r3, #18
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	0fdb      	lsrs	r3, r3, #31
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d104      	bne.n	8005ae8 <USB_HC_Halt+0x5a>
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	e0c8      	b.n	8005c7a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <USB_HC_Halt+0x66>
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d163      	bne.n	8005bbc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	0151      	lsls	r1, r2, #5
 8005b06:	69fa      	ldr	r2, [r7, #28]
 8005b08:	440a      	add	r2, r1
 8005b0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b12:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f003 0320 	and.w	r3, r3, #32
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f040 80ab 	bne.w	8005c78 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d133      	bne.n	8005b96 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	0151      	lsls	r1, r2, #5
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	440a      	add	r2, r1
 8005b44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b4c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	0151      	lsls	r1, r2, #5
 8005b60:	69fa      	ldr	r2, [r7, #28]
 8005b62:	440a      	add	r2, r1
 8005b64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b6c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	3301      	adds	r3, #1
 8005b72:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b7a:	d81d      	bhi.n	8005bb8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b92:	d0ec      	beq.n	8005b6e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b94:	e070      	b.n	8005c78 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	0151      	lsls	r1, r2, #5
 8005ba8:	69fa      	ldr	r2, [r7, #28]
 8005baa:	440a      	add	r2, r1
 8005bac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bb4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bb6:	e05f      	b.n	8005c78 <USB_HC_Halt+0x1ea>
            break;
 8005bb8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bba:	e05d      	b.n	8005c78 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bda:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d133      	bne.n	8005c54 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	0151      	lsls	r1, r2, #5
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	440a      	add	r2, r1
 8005c02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c0a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c2a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c38:	d81d      	bhi.n	8005c76 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c50:	d0ec      	beq.n	8005c2c <USB_HC_Halt+0x19e>
 8005c52:	e011      	b.n	8005c78 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	0151      	lsls	r1, r2, #5
 8005c66:	69fa      	ldr	r2, [r7, #28]
 8005c68:	440a      	add	r2, r1
 8005c6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	e000      	b.n	8005c78 <USB_HC_Halt+0x1ea>
          break;
 8005c76:	bf00      	nop
    }
  }

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3724      	adds	r7, #36	; 0x24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
	...

08005c88 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	460b      	mov	r3, r1
 8005c92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005c98:	78fb      	ldrb	r3, [r7, #3]
 8005c9a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	04da      	lsls	r2, r3, #19
 8005ca4:	4b15      	ldr	r3, [pc, #84]	; (8005cfc <USB_DoPing+0x74>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cb8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cd0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cd8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	1ff80000 	.word	0x1ff80000

08005d00 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b088      	sub	sp, #32
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff f911 	bl	8004f3c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d1a:	2110      	movs	r1, #16
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7ff f96b 	bl	8004ff8 <USB_FlushTxFifo>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff f997 	bl	8005060 <USB_FlushRxFifo>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	61bb      	str	r3, [r7, #24]
 8005d40:	e01f      	b.n	8005d82 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d58:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d60:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d68:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d76:	461a      	mov	r2, r3
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	61bb      	str	r3, [r7, #24]
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	2b0f      	cmp	r3, #15
 8005d86:	d9dc      	bls.n	8005d42 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005d88:	2300      	movs	r3, #0
 8005d8a:	61bb      	str	r3, [r7, #24]
 8005d8c:	e034      	b.n	8005df8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005da4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005db4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dd4:	d80c      	bhi.n	8005df0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005de8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dec:	d0ec      	beq.n	8005dc8 <USB_StopHost+0xc8>
 8005dee:	e000      	b.n	8005df2 <USB_StopHost+0xf2>
        break;
 8005df0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	3301      	adds	r3, #1
 8005df6:	61bb      	str	r3, [r7, #24]
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	2b0f      	cmp	r3, #15
 8005dfc:	d9c7      	bls.n	8005d8e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e04:	461a      	mov	r2, r3
 8005e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e0a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e12:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7ff f880 	bl	8004f1a <USB_EnableGlobalInt>

  return ret;
 8005e1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3720      	adds	r7, #32
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005e24:	b590      	push	{r4, r7, lr}
 8005e26:	b089      	sub	sp, #36	; 0x24
 8005e28:	af04      	add	r7, sp, #16
 8005e2a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	2202      	movs	r2, #2
 8005e30:	2102      	movs	r1, #2
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fc66 	bl	8006704 <USBH_FindInterface>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	2bff      	cmp	r3, #255	; 0xff
 8005e40:	d002      	beq.n	8005e48 <USBH_CDC_InterfaceInit+0x24>
 8005e42:	7bfb      	ldrb	r3, [r7, #15]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d901      	bls.n	8005e4c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e48:	2302      	movs	r3, #2
 8005e4a:	e13d      	b.n	80060c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
 8005e4e:	4619      	mov	r1, r3
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fc3b 	bl	80066cc <USBH_SelectInterface>
 8005e56:	4603      	mov	r3, r0
 8005e58:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005e5a:	7bbb      	ldrb	r3, [r7, #14]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d001      	beq.n	8005e64 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005e60:	2302      	movs	r3, #2
 8005e62:	e131      	b.n	80060c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005e6a:	2050      	movs	r0, #80	; 0x50
 8005e6c:	f002 fafa 	bl	8008464 <malloc>
 8005e70:	4603      	mov	r3, r0
 8005e72:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005e84:	2302      	movs	r3, #2
 8005e86:	e11f      	b.n	80060c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005e88:	2250      	movs	r2, #80	; 0x50
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	68b8      	ldr	r0, [r7, #8]
 8005e8e:	f002 faf9 	bl	8008484 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	211a      	movs	r1, #26
 8005e98:	fb01 f303 	mul.w	r3, r1, r3
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	b25b      	sxtb	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	da15      	bge.n	8005ed6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	211a      	movs	r1, #26
 8005eb0:	fb01 f303 	mul.w	r3, r1, r3
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005eba:	781a      	ldrb	r2, [r3, #0]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	211a      	movs	r1, #26
 8005ec6:	fb01 f303 	mul.w	r3, r1, r3
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ed0:	881a      	ldrh	r2, [r3, #0]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	785b      	ldrb	r3, [r3, #1]
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f001 ff2c 	bl	8007d3a <USBH_AllocPipe>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	7819      	ldrb	r1, [r3, #0]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	7858      	ldrb	r0, [r3, #1]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	8952      	ldrh	r2, [r2, #10]
 8005f02:	9202      	str	r2, [sp, #8]
 8005f04:	2203      	movs	r2, #3
 8005f06:	9201      	str	r2, [sp, #4]
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	4623      	mov	r3, r4
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f001 fee4 	bl	8007cdc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f002 f9f3 	bl	8008308 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005f22:	2300      	movs	r3, #0
 8005f24:	2200      	movs	r2, #0
 8005f26:	210a      	movs	r1, #10
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fbeb 	bl	8006704 <USBH_FindInterface>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
 8005f34:	2bff      	cmp	r3, #255	; 0xff
 8005f36:	d002      	beq.n	8005f3e <USBH_CDC_InterfaceInit+0x11a>
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d901      	bls.n	8005f42 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f3e:	2302      	movs	r3, #2
 8005f40:	e0c2      	b.n	80060c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	211a      	movs	r1, #26
 8005f48:	fb01 f303 	mul.w	r3, r1, r3
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	b25b      	sxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	da16      	bge.n	8005f88 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f5a:	7bfb      	ldrb	r3, [r7, #15]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	211a      	movs	r1, #26
 8005f60:	fb01 f303 	mul.w	r3, r1, r3
 8005f64:	4413      	add	r3, r2
 8005f66:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f6a:	781a      	ldrb	r2, [r3, #0]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	211a      	movs	r1, #26
 8005f76:	fb01 f303 	mul.w	r3, r1, r3
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f80:	881a      	ldrh	r2, [r3, #0]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	835a      	strh	r2, [r3, #26]
 8005f86:	e015      	b.n	8005fb4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	211a      	movs	r1, #26
 8005f8e:	fb01 f303 	mul.w	r3, r1, r3
 8005f92:	4413      	add	r3, r2
 8005f94:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f98:	781a      	ldrb	r2, [r3, #0]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	211a      	movs	r1, #26
 8005fa4:	fb01 f303 	mul.w	r3, r1, r3
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005fae:	881a      	ldrh	r2, [r3, #0]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	211a      	movs	r1, #26
 8005fba:	fb01 f303 	mul.w	r3, r1, r3
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	b25b      	sxtb	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	da16      	bge.n	8005ffa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	211a      	movs	r1, #26
 8005fd2:	fb01 f303 	mul.w	r3, r1, r3
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005fdc:	781a      	ldrb	r2, [r3, #0]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	211a      	movs	r1, #26
 8005fe8:	fb01 f303 	mul.w	r3, r1, r3
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005ff2:	881a      	ldrh	r2, [r3, #0]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	835a      	strh	r2, [r3, #26]
 8005ff8:	e015      	b.n	8006026 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	211a      	movs	r1, #26
 8006000:	fb01 f303 	mul.w	r3, r1, r3
 8006004:	4413      	add	r3, r2
 8006006:	f203 3356 	addw	r3, r3, #854	; 0x356
 800600a:	781a      	ldrb	r2, [r3, #0]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	211a      	movs	r1, #26
 8006016:	fb01 f303 	mul.w	r3, r1, r3
 800601a:	4413      	add	r3, r2
 800601c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006020:	881a      	ldrh	r2, [r3, #0]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	7b9b      	ldrb	r3, [r3, #14]
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f001 fe84 	bl	8007d3a <USBH_AllocPipe>
 8006032:	4603      	mov	r3, r0
 8006034:	461a      	mov	r2, r3
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	7bdb      	ldrb	r3, [r3, #15]
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f001 fe7a 	bl	8007d3a <USBH_AllocPipe>
 8006046:	4603      	mov	r3, r0
 8006048:	461a      	mov	r2, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	7b59      	ldrb	r1, [r3, #13]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	7b98      	ldrb	r0, [r3, #14]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	8b12      	ldrh	r2, [r2, #24]
 8006066:	9202      	str	r2, [sp, #8]
 8006068:	2202      	movs	r2, #2
 800606a:	9201      	str	r2, [sp, #4]
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	4623      	mov	r3, r4
 8006070:	4602      	mov	r2, r0
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f001 fe32 	bl	8007cdc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	7b19      	ldrb	r1, [r3, #12]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	7bd8      	ldrb	r0, [r3, #15]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	8b52      	ldrh	r2, [r2, #26]
 8006090:	9202      	str	r2, [sp, #8]
 8006092:	2202      	movs	r2, #2
 8006094:	9201      	str	r2, [sp, #4]
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	4623      	mov	r3, r4
 800609a:	4602      	mov	r2, r0
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f001 fe1d 	bl	8007cdc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	7b5b      	ldrb	r3, [r3, #13]
 80060ae:	2200      	movs	r2, #0
 80060b0:	4619      	mov	r1, r3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f002 f928 	bl	8008308 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	7b1b      	ldrb	r3, [r3, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	4619      	mov	r1, r3
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f002 f921 	bl	8008308 <USBH_LL_SetToggle>

  return USBH_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd90      	pop	{r4, r7, pc}

080060d0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00e      	beq.n	8006108 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	4619      	mov	r1, r3
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f001 fe12 	bl	8007d1a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	4619      	mov	r1, r3
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f001 fe3d 	bl	8007d7c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	7b1b      	ldrb	r3, [r3, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00e      	beq.n	800612e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	7b1b      	ldrb	r3, [r3, #12]
 8006114:	4619      	mov	r1, r3
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f001 fdff 	bl	8007d1a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	7b1b      	ldrb	r3, [r3, #12]
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f001 fe2a 	bl	8007d7c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	7b5b      	ldrb	r3, [r3, #13]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00e      	beq.n	8006154 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	7b5b      	ldrb	r3, [r3, #13]
 800613a:	4619      	mov	r1, r3
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f001 fdec 	bl	8007d1a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	7b5b      	ldrb	r3, [r3, #13]
 8006146:	4619      	mov	r1, r3
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f001 fe17 	bl	8007d7c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00b      	beq.n	8006178 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	4618      	mov	r0, r3
 800616a:	f002 f983 	bl	8008474 <free>
    phost->pActiveClass->pData = 0U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006174:	2200      	movs	r2, #0
 8006176:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b084      	sub	sp, #16
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3340      	adds	r3, #64	; 0x40
 8006198:	4619      	mov	r1, r3
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f8b1 	bl	8006302 <GetLineCoding>
 80061a0:	4603      	mov	r3, r0
 80061a2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80061a4:	7afb      	ldrb	r3, [r7, #11]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d105      	bne.n	80061b6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061b0:	2102      	movs	r1, #2
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80061b6:	7afb      	ldrb	r3, [r7, #11]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80061c8:	2301      	movs	r3, #1
 80061ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d877      	bhi.n	80062d4 <USBH_CDC_Process+0x114>
 80061e4:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <USBH_CDC_Process+0x2c>)
 80061e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ea:	bf00      	nop
 80061ec:	08006201 	.word	0x08006201
 80061f0:	08006207 	.word	0x08006207
 80061f4:	08006237 	.word	0x08006237
 80061f8:	080062ab 	.word	0x080062ab
 80061fc:	080062b9 	.word	0x080062b9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	73fb      	strb	r3, [r7, #15]
      break;
 8006204:	e06d      	b.n	80062e2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800620a:	4619      	mov	r1, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f897 	bl	8006340 <SetLineCoding>
 8006212:	4603      	mov	r3, r0
 8006214:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006216:	7bbb      	ldrb	r3, [r7, #14]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d104      	bne.n	8006226 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006224:	e058      	b.n	80062d8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006226:	7bbb      	ldrb	r3, [r7, #14]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d055      	beq.n	80062d8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2204      	movs	r2, #4
 8006230:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006234:	e050      	b.n	80062d8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	3340      	adds	r3, #64	; 0x40
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f860 	bl	8006302 <GetLineCoding>
 8006242:	4603      	mov	r3, r0
 8006244:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006246:	7bbb      	ldrb	r3, [r7, #14]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d126      	bne.n	800629a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800625e:	791b      	ldrb	r3, [r3, #4]
 8006260:	429a      	cmp	r2, r3
 8006262:	d13b      	bne.n	80062dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800626e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006270:	429a      	cmp	r2, r3
 8006272:	d133      	bne.n	80062dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800627e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006280:	429a      	cmp	r2, r3
 8006282:	d12b      	bne.n	80062dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800628c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800628e:	429a      	cmp	r2, r3
 8006290:	d124      	bne.n	80062dc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f958 	bl	8006548 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006298:	e020      	b.n	80062dc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800629a:	7bbb      	ldrb	r3, [r7, #14]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d01d      	beq.n	80062dc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2204      	movs	r2, #4
 80062a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80062a8:	e018      	b.n	80062dc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f867 	bl	800637e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f8da 	bl	800646a <CDC_ProcessReception>
      break;
 80062b6:	e014      	b.n	80062e2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80062b8:	2100      	movs	r1, #0
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 ffef 	bl	800729e <USBH_ClrFeature>
 80062c0:	4603      	mov	r3, r0
 80062c2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80062c4:	7bbb      	ldrb	r3, [r7, #14]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10a      	bne.n	80062e0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80062d2:	e005      	b.n	80062e0 <USBH_CDC_Process+0x120>

    default:
      break;
 80062d4:	bf00      	nop
 80062d6:	e004      	b.n	80062e2 <USBH_CDC_Process+0x122>
      break;
 80062d8:	bf00      	nop
 80062da:	e002      	b.n	80062e2 <USBH_CDC_Process+0x122>
      break;
 80062dc:	bf00      	nop
 80062de:	e000      	b.n	80062e2 <USBH_CDC_Process+0x122>
      break;
 80062e0:	bf00      	nop

  }

  return status;
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b082      	sub	sp, #8
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	22a1      	movs	r2, #161	; 0xa1
 8006310:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2221      	movs	r2, #33	; 0x21
 8006316:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2207      	movs	r2, #7
 8006328:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2207      	movs	r2, #7
 800632e:	4619      	mov	r1, r3
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f001 fa81 	bl	8007838 <USBH_CtlReq>
 8006336:	4603      	mov	r3, r0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2221      	movs	r2, #33	; 0x21
 800634e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2220      	movs	r2, #32
 8006354:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2207      	movs	r2, #7
 8006366:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	2207      	movs	r2, #7
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f001 fa62 	bl	8007838 <USBH_CtlReq>
 8006374:	4603      	mov	r3, r0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b086      	sub	sp, #24
 8006382:	af02      	add	r7, sp, #8
 8006384:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006390:	2300      	movs	r3, #0
 8006392:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800639a:	2b01      	cmp	r3, #1
 800639c:	d002      	beq.n	80063a4 <CDC_ProcessTransmission+0x26>
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d023      	beq.n	80063ea <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80063a2:	e05e      	b.n	8006462 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	8b12      	ldrh	r2, [r2, #24]
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d90b      	bls.n	80063c8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	69d9      	ldr	r1, [r3, #28]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8b1a      	ldrh	r2, [r3, #24]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	7b5b      	ldrb	r3, [r3, #13]
 80063bc:	2001      	movs	r0, #1
 80063be:	9000      	str	r0, [sp, #0]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f001 fc48 	bl	8007c56 <USBH_BulkSendData>
 80063c6:	e00b      	b.n	80063e0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	7b5b      	ldrb	r3, [r3, #13]
 80063d6:	2001      	movs	r0, #1
 80063d8:	9000      	str	r0, [sp, #0]
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f001 fc3b 	bl	8007c56 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063e8:	e03b      	b.n	8006462 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	7b5b      	ldrb	r3, [r3, #13]
 80063ee:	4619      	mov	r1, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f001 ff5f 	bl	80082b4 <USBH_LL_GetURBState>
 80063f6:	4603      	mov	r3, r0
 80063f8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80063fa:	7afb      	ldrb	r3, [r7, #11]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d128      	bne.n	8006452 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	8b12      	ldrh	r2, [r2, #24]
 8006408:	4293      	cmp	r3, r2
 800640a:	d90e      	bls.n	800642a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	8b12      	ldrh	r2, [r2, #24]
 8006414:	1a9a      	subs	r2, r3, r2
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	8b12      	ldrh	r2, [r2, #24]
 8006422:	441a      	add	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	61da      	str	r2, [r3, #28]
 8006428:	e002      	b.n	8006430 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006434:	2b00      	cmp	r3, #0
 8006436:	d004      	beq.n	8006442 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006440:	e00e      	b.n	8006460 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f868 	bl	8006520 <USBH_CDC_TransmitCallback>
      break;
 8006450:	e006      	b.n	8006460 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006452:	7afb      	ldrb	r3, [r7, #11]
 8006454:	2b02      	cmp	r3, #2
 8006456:	d103      	bne.n	8006460 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006460:	bf00      	nop
  }
}
 8006462:	bf00      	nop
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b086      	sub	sp, #24
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800647c:	2300      	movs	r3, #0
 800647e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006486:	2b03      	cmp	r3, #3
 8006488:	d002      	beq.n	8006490 <CDC_ProcessReception+0x26>
 800648a:	2b04      	cmp	r3, #4
 800648c:	d00e      	beq.n	80064ac <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800648e:	e043      	b.n	8006518 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	6a19      	ldr	r1, [r3, #32]
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	8b5a      	ldrh	r2, [r3, #26]
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	7b1b      	ldrb	r3, [r3, #12]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 fbff 	bl	8007ca0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2204      	movs	r2, #4
 80064a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80064aa:	e035      	b.n	8006518 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	7b1b      	ldrb	r3, [r3, #12]
 80064b0:	4619      	mov	r1, r3
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f001 fefe 	bl	80082b4 <USBH_LL_GetURBState>
 80064b8:	4603      	mov	r3, r0
 80064ba:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80064bc:	7cfb      	ldrb	r3, [r7, #19]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d129      	bne.n	8006516 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	7b1b      	ldrb	r3, [r3, #12]
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f001 fe61 	bl	8008190 <USBH_LL_GetLastXferSize>
 80064ce:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d016      	beq.n	8006508 <CDC_ProcessReception+0x9e>
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	8b5b      	ldrh	r3, [r3, #26]
 80064de:	461a      	mov	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d910      	bls.n	8006508 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	1ad2      	subs	r2, r2, r3
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	6a1a      	ldr	r2, [r3, #32]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	441a      	add	r2, r3
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2203      	movs	r2, #3
 8006502:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006506:	e006      	b.n	8006516 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f80f 	bl	8006534 <USBH_CDC_ReceiveCallback>
      break;
 8006516:	bf00      	nop
  }
}
 8006518:	bf00      	nop
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	4613      	mov	r3, r2
 8006568:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006570:	2302      	movs	r3, #2
 8006572:	e029      	b.n	80065c8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	79fa      	ldrb	r2, [r7, #7]
 8006578:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 f81f 	bl	80065d0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d003      	beq.n	80065c0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f001 fd31 	bl	8008028 <USBH_LL_Init>

  return USBH_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065dc:	2300      	movs	r3, #0
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	e009      	b.n	80065f6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	33e0      	adds	r3, #224	; 0xe0
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	2200      	movs	r2, #0
 80065ee:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3301      	adds	r3, #1
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b0f      	cmp	r3, #15
 80065fa:	d9f2      	bls.n	80065e2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80065fc:	2300      	movs	r3, #0
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	e009      	b.n	8006616 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800660c:	2200      	movs	r2, #0
 800660e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	3301      	adds	r3, #1
 8006614:	60fb      	str	r3, [r7, #12]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800661c:	d3f1      	bcc.n	8006602 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2240      	movs	r2, #64	; 0x40
 8006642:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d016      	beq.n	80066ba <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10e      	bne.n	80066b4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800669c:	1c59      	adds	r1, r3, #1
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	33de      	adds	r3, #222	; 0xde
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	73fb      	strb	r3, [r7, #15]
 80066b2:	e004      	b.n	80066be <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80066b4:	2302      	movs	r3, #2
 80066b6:	73fb      	strb	r3, [r7, #15]
 80066b8:	e001      	b.n	80066be <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80066ba:	2302      	movs	r3, #2
 80066bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066be:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80066d8:	2300      	movs	r3, #0
 80066da:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80066e2:	78fa      	ldrb	r2, [r7, #3]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d204      	bcs.n	80066f2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	78fa      	ldrb	r2, [r7, #3]
 80066ec:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80066f0:	e001      	b.n	80066f6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80066f2:	2302      	movs	r3, #2
 80066f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	4608      	mov	r0, r1
 800670e:	4611      	mov	r1, r2
 8006710:	461a      	mov	r2, r3
 8006712:	4603      	mov	r3, r0
 8006714:	70fb      	strb	r3, [r7, #3]
 8006716:	460b      	mov	r3, r1
 8006718:	70bb      	strb	r3, [r7, #2]
 800671a:	4613      	mov	r3, r2
 800671c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006722:	2300      	movs	r3, #0
 8006724:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800672c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800672e:	e025      	b.n	800677c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006730:	7dfb      	ldrb	r3, [r7, #23]
 8006732:	221a      	movs	r2, #26
 8006734:	fb02 f303 	mul.w	r3, r2, r3
 8006738:	3308      	adds	r3, #8
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	4413      	add	r3, r2
 800673e:	3302      	adds	r3, #2
 8006740:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	795b      	ldrb	r3, [r3, #5]
 8006746:	78fa      	ldrb	r2, [r7, #3]
 8006748:	429a      	cmp	r2, r3
 800674a:	d002      	beq.n	8006752 <USBH_FindInterface+0x4e>
 800674c:	78fb      	ldrb	r3, [r7, #3]
 800674e:	2bff      	cmp	r3, #255	; 0xff
 8006750:	d111      	bne.n	8006776 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006756:	78ba      	ldrb	r2, [r7, #2]
 8006758:	429a      	cmp	r2, r3
 800675a:	d002      	beq.n	8006762 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800675c:	78bb      	ldrb	r3, [r7, #2]
 800675e:	2bff      	cmp	r3, #255	; 0xff
 8006760:	d109      	bne.n	8006776 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006766:	787a      	ldrb	r2, [r7, #1]
 8006768:	429a      	cmp	r2, r3
 800676a:	d002      	beq.n	8006772 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800676c:	787b      	ldrb	r3, [r7, #1]
 800676e:	2bff      	cmp	r3, #255	; 0xff
 8006770:	d101      	bne.n	8006776 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006772:	7dfb      	ldrb	r3, [r7, #23]
 8006774:	e006      	b.n	8006784 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006776:	7dfb      	ldrb	r3, [r7, #23]
 8006778:	3301      	adds	r3, #1
 800677a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800677c:	7dfb      	ldrb	r3, [r7, #23]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d9d6      	bls.n	8006730 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006782:	23ff      	movs	r3, #255	; 0xff
}
 8006784:	4618      	mov	r0, r3
 8006786:	371c      	adds	r7, #28
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f001 fc81 	bl	80080a0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800679e:	2101      	movs	r1, #1
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 fd9a 	bl	80082da <USBH_LL_DriverVBUS>

  return USBH_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b088      	sub	sp, #32
 80067b4:	af04      	add	r7, sp, #16
 80067b6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80067b8:	2302      	movs	r3, #2
 80067ba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d102      	bne.n	80067d2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2203      	movs	r2, #3
 80067d0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b0b      	cmp	r3, #11
 80067da:	f200 81be 	bhi.w	8006b5a <USBH_Process+0x3aa>
 80067de:	a201      	add	r2, pc, #4	; (adr r2, 80067e4 <USBH_Process+0x34>)
 80067e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e4:	08006815 	.word	0x08006815
 80067e8:	08006847 	.word	0x08006847
 80067ec:	080068af 	.word	0x080068af
 80067f0:	08006af5 	.word	0x08006af5
 80067f4:	08006b5b 	.word	0x08006b5b
 80067f8:	08006953 	.word	0x08006953
 80067fc:	08006a9b 	.word	0x08006a9b
 8006800:	08006989 	.word	0x08006989
 8006804:	080069a9 	.word	0x080069a9
 8006808:	080069c9 	.word	0x080069c9
 800680c:	08006a0d 	.word	0x08006a0d
 8006810:	08006add 	.word	0x08006add
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 819e 	beq.w	8006b5e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006828:	20c8      	movs	r0, #200	; 0xc8
 800682a:	f001 fd9d 	bl	8008368 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f001 fc93 	bl	800815a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006844:	e18b      	b.n	8006b5e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800684c:	2b01      	cmp	r3, #1
 800684e:	d107      	bne.n	8006860 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800685e:	e18d      	b.n	8006b7c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006866:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800686a:	d914      	bls.n	8006896 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006872:	3301      	adds	r3, #1
 8006874:	b2da      	uxtb	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006882:	2b03      	cmp	r3, #3
 8006884:	d903      	bls.n	800688e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	220d      	movs	r2, #13
 800688a:	701a      	strb	r2, [r3, #0]
      break;
 800688c:	e176      	b.n	8006b7c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	701a      	strb	r2, [r3, #0]
      break;
 8006894:	e172      	b.n	8006b7c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800689c:	f103 020a 	add.w	r2, r3, #10
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80068a6:	200a      	movs	r0, #10
 80068a8:	f001 fd5e 	bl	8008368 <USBH_Delay>
      break;
 80068ac:	e166      	b.n	8006b7c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d005      	beq.n	80068c4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068be:	2104      	movs	r1, #4
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80068c4:	2064      	movs	r0, #100	; 0x64
 80068c6:	f001 fd4f 	bl	8008368 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 fc1e 	bl	800810c <USBH_LL_GetSpeed>
 80068d0:	4603      	mov	r3, r0
 80068d2:	461a      	mov	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2205      	movs	r2, #5
 80068de:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80068e0:	2100      	movs	r1, #0
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f001 fa29 	bl	8007d3a <USBH_AllocPipe>
 80068e8:	4603      	mov	r3, r0
 80068ea:	461a      	mov	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80068f0:	2180      	movs	r1, #128	; 0x80
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f001 fa21 	bl	8007d3a <USBH_AllocPipe>
 80068f8:	4603      	mov	r3, r0
 80068fa:	461a      	mov	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	7919      	ldrb	r1, [r3, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006914:	b292      	uxth	r2, r2
 8006916:	9202      	str	r2, [sp, #8]
 8006918:	2200      	movs	r2, #0
 800691a:	9201      	str	r2, [sp, #4]
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	4603      	mov	r3, r0
 8006920:	2280      	movs	r2, #128	; 0x80
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f001 f9da 	bl	8007cdc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	7959      	ldrb	r1, [r3, #5]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800693c:	b292      	uxth	r2, r2
 800693e:	9202      	str	r2, [sp, #8]
 8006940:	2200      	movs	r2, #0
 8006942:	9201      	str	r2, [sp, #4]
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	4603      	mov	r3, r0
 8006948:	2200      	movs	r2, #0
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f001 f9c6 	bl	8007cdc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006950:	e114      	b.n	8006b7c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f918 	bl	8006b88 <USBH_HandleEnum>
 8006958:	4603      	mov	r3, r0
 800695a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800695c:	7bbb      	ldrb	r3, [r7, #14]
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b00      	cmp	r3, #0
 8006962:	f040 80fe 	bne.w	8006b62 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006974:	2b01      	cmp	r3, #1
 8006976:	d103      	bne.n	8006980 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2208      	movs	r2, #8
 800697c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800697e:	e0f0      	b.n	8006b62 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2207      	movs	r2, #7
 8006984:	701a      	strb	r2, [r3, #0]
      break;
 8006986:	e0ec      	b.n	8006b62 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 80e9 	beq.w	8006b66 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800699a:	2101      	movs	r1, #1
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2208      	movs	r2, #8
 80069a4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80069a6:	e0de      	b.n	8006b66 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	4619      	mov	r1, r3
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fc2c 	bl	8007210 <USBH_SetCfg>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f040 80d5 	bne.w	8006b6a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2209      	movs	r2, #9
 80069c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069c6:	e0d0      	b.n	8006b6a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80069ce:	f003 0320 	and.w	r3, r3, #32
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d016      	beq.n	8006a04 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80069d6:	2101      	movs	r1, #1
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fc3c 	bl	8007256 <USBH_SetFeature>
 80069de:	4603      	mov	r3, r0
 80069e0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80069e2:	7bbb      	ldrb	r3, [r7, #14]
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d103      	bne.n	80069f2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	220a      	movs	r2, #10
 80069ee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069f0:	e0bd      	b.n	8006b6e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80069f2:	7bbb      	ldrb	r3, [r7, #14]
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	f040 80b9 	bne.w	8006b6e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	220a      	movs	r2, #10
 8006a00:	701a      	strb	r2, [r3, #0]
      break;
 8006a02:	e0b4      	b.n	8006b6e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	220a      	movs	r2, #10
 8006a08:	701a      	strb	r2, [r3, #0]
      break;
 8006a0a:	e0b0      	b.n	8006b6e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 80ad 	beq.w	8006b72 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a20:	2300      	movs	r3, #0
 8006a22:	73fb      	strb	r3, [r7, #15]
 8006a24:	e016      	b.n	8006a54 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006a26:	7bfa      	ldrb	r2, [r7, #15]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	32de      	adds	r2, #222	; 0xde
 8006a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a30:	791a      	ldrb	r2, [r3, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d108      	bne.n	8006a4e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006a3c:	7bfa      	ldrb	r2, [r7, #15]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	32de      	adds	r2, #222	; 0xde
 8006a42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006a4c:	e005      	b.n	8006a5a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a4e:	7bfb      	ldrb	r3, [r7, #15]
 8006a50:	3301      	adds	r3, #1
 8006a52:	73fb      	strb	r3, [r7, #15]
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d0e5      	beq.n	8006a26 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d016      	beq.n	8006a92 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	4798      	blx	r3
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d109      	bne.n	8006a8a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2206      	movs	r2, #6
 8006a7a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a82:	2103      	movs	r1, #3
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a88:	e073      	b.n	8006b72 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	220d      	movs	r2, #13
 8006a8e:	701a      	strb	r2, [r3, #0]
      break;
 8006a90:	e06f      	b.n	8006b72 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	220d      	movs	r2, #13
 8006a96:	701a      	strb	r2, [r3, #0]
      break;
 8006a98:	e06b      	b.n	8006b72 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d017      	beq.n	8006ad4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	4798      	blx	r3
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d103      	bne.n	8006ac4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	220b      	movs	r2, #11
 8006ac0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ac2:	e058      	b.n	8006b76 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006ac4:	7bbb      	ldrb	r3, [r7, #14]
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d154      	bne.n	8006b76 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	220d      	movs	r2, #13
 8006ad0:	701a      	strb	r2, [r3, #0]
      break;
 8006ad2:	e050      	b.n	8006b76 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	220d      	movs	r2, #13
 8006ad8:	701a      	strb	r2, [r3, #0]
      break;
 8006ada:	e04c      	b.n	8006b76 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d049      	beq.n	8006b7a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	4798      	blx	r3
      }
      break;
 8006af2:	e042      	b.n	8006b7a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7ff fd67 	bl	80065d0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d009      	beq.n	8006b20 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d005      	beq.n	8006b36 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b30:	2105      	movs	r1, #5
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d107      	bne.n	8006b52 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7ff fe20 	bl	8006790 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b50:	e014      	b.n	8006b7c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f001 faa4 	bl	80080a0 <USBH_LL_Start>
      break;
 8006b58:	e010      	b.n	8006b7c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006b5a:	bf00      	nop
 8006b5c:	e00e      	b.n	8006b7c <USBH_Process+0x3cc>
      break;
 8006b5e:	bf00      	nop
 8006b60:	e00c      	b.n	8006b7c <USBH_Process+0x3cc>
      break;
 8006b62:	bf00      	nop
 8006b64:	e00a      	b.n	8006b7c <USBH_Process+0x3cc>
    break;
 8006b66:	bf00      	nop
 8006b68:	e008      	b.n	8006b7c <USBH_Process+0x3cc>
      break;
 8006b6a:	bf00      	nop
 8006b6c:	e006      	b.n	8006b7c <USBH_Process+0x3cc>
      break;
 8006b6e:	bf00      	nop
 8006b70:	e004      	b.n	8006b7c <USBH_Process+0x3cc>
      break;
 8006b72:	bf00      	nop
 8006b74:	e002      	b.n	8006b7c <USBH_Process+0x3cc>
      break;
 8006b76:	bf00      	nop
 8006b78:	e000      	b.n	8006b7c <USBH_Process+0x3cc>
      break;
 8006b7a:	bf00      	nop
  }
  return USBH_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop

08006b88 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af04      	add	r7, sp, #16
 8006b8e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006b90:	2301      	movs	r3, #1
 8006b92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006b94:	2301      	movs	r3, #1
 8006b96:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	785b      	ldrb	r3, [r3, #1]
 8006b9c:	2b07      	cmp	r3, #7
 8006b9e:	f200 81c1 	bhi.w	8006f24 <USBH_HandleEnum+0x39c>
 8006ba2:	a201      	add	r2, pc, #4	; (adr r2, 8006ba8 <USBH_HandleEnum+0x20>)
 8006ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba8:	08006bc9 	.word	0x08006bc9
 8006bac:	08006c87 	.word	0x08006c87
 8006bb0:	08006cf1 	.word	0x08006cf1
 8006bb4:	08006d7f 	.word	0x08006d7f
 8006bb8:	08006de9 	.word	0x08006de9
 8006bbc:	08006e59 	.word	0x08006e59
 8006bc0:	08006e9f 	.word	0x08006e9f
 8006bc4:	08006ee5 	.word	0x08006ee5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006bc8:	2108      	movs	r1, #8
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fa50 	bl	8007070 <USBH_Get_DevDesc>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006bd4:	7bbb      	ldrb	r3, [r7, #14]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d130      	bne.n	8006c3c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	7919      	ldrb	r1, [r3, #4]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006bfe:	b292      	uxth	r2, r2
 8006c00:	9202      	str	r2, [sp, #8]
 8006c02:	2200      	movs	r2, #0
 8006c04:	9201      	str	r2, [sp, #4]
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2280      	movs	r2, #128	; 0x80
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 f865 	bl	8007cdc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	7959      	ldrb	r1, [r3, #5]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c26:	b292      	uxth	r2, r2
 8006c28:	9202      	str	r2, [sp, #8]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	9201      	str	r2, [sp, #4]
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	4603      	mov	r3, r0
 8006c32:	2200      	movs	r2, #0
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f001 f851 	bl	8007cdc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006c3a:	e175      	b.n	8006f28 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c3c:	7bbb      	ldrb	r3, [r7, #14]
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	f040 8172 	bne.w	8006f28 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d903      	bls.n	8006c66 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	220d      	movs	r2, #13
 8006c62:	701a      	strb	r2, [r3, #0]
      break;
 8006c64:	e160      	b.n	8006f28 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	795b      	ldrb	r3, [r3, #5]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f001 f885 	bl	8007d7c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	791b      	ldrb	r3, [r3, #4]
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 f87f 	bl	8007d7c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	701a      	strb	r2, [r3, #0]
      break;
 8006c84:	e150      	b.n	8006f28 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006c86:	2112      	movs	r1, #18
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f9f1 	bl	8007070 <USBH_Get_DevDesc>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c92:	7bbb      	ldrb	r3, [r7, #14]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d103      	bne.n	8006ca0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c9e:	e145      	b.n	8006f2c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	f040 8142 	bne.w	8006f2c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cae:	3301      	adds	r3, #1
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d903      	bls.n	8006cca <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	220d      	movs	r2, #13
 8006cc6:	701a      	strb	r2, [r3, #0]
      break;
 8006cc8:	e130      	b.n	8006f2c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	795b      	ldrb	r3, [r3, #5]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 f853 	bl	8007d7c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	791b      	ldrb	r3, [r3, #4]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f001 f84d 	bl	8007d7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	701a      	strb	r2, [r3, #0]
      break;
 8006cee:	e11d      	b.n	8006f2c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 fa68 	bl	80071c8 <USBH_SetAddress>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006cfc:	7bbb      	ldrb	r3, [r7, #14]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d132      	bne.n	8006d68 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006d02:	2002      	movs	r0, #2
 8006d04:	f001 fb30 	bl	8008368 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2203      	movs	r2, #3
 8006d14:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	7919      	ldrb	r1, [r3, #4]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d2a:	b292      	uxth	r2, r2
 8006d2c:	9202      	str	r2, [sp, #8]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	9201      	str	r2, [sp, #4]
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	4603      	mov	r3, r0
 8006d36:	2280      	movs	r2, #128	; 0x80
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 ffcf 	bl	8007cdc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	7959      	ldrb	r1, [r3, #5]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d52:	b292      	uxth	r2, r2
 8006d54:	9202      	str	r2, [sp, #8]
 8006d56:	2200      	movs	r2, #0
 8006d58:	9201      	str	r2, [sp, #4]
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2200      	movs	r2, #0
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 ffbb 	bl	8007cdc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d66:	e0e3      	b.n	8006f30 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d68:	7bbb      	ldrb	r3, [r7, #14]
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	f040 80e0 	bne.w	8006f30 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	220d      	movs	r2, #13
 8006d74:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	705a      	strb	r2, [r3, #1]
      break;
 8006d7c:	e0d8      	b.n	8006f30 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006d7e:	2109      	movs	r1, #9
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f99d 	bl	80070c0 <USBH_Get_CfgDesc>
 8006d86:	4603      	mov	r3, r0
 8006d88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d8a:	7bbb      	ldrb	r3, [r7, #14]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d103      	bne.n	8006d98 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2204      	movs	r2, #4
 8006d94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d96:	e0cd      	b.n	8006f34 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d98:	7bbb      	ldrb	r3, [r7, #14]
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	f040 80ca 	bne.w	8006f34 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006da6:	3301      	adds	r3, #1
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d903      	bls.n	8006dc2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	220d      	movs	r2, #13
 8006dbe:	701a      	strb	r2, [r3, #0]
      break;
 8006dc0:	e0b8      	b.n	8006f34 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	795b      	ldrb	r3, [r3, #5]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 ffd7 	bl	8007d7c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	791b      	ldrb	r3, [r3, #4]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 ffd1 	bl	8007d7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	701a      	strb	r2, [r3, #0]
      break;
 8006de6:	e0a5      	b.n	8006f34 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006dee:	4619      	mov	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f965 	bl	80070c0 <USBH_Get_CfgDesc>
 8006df6:	4603      	mov	r3, r0
 8006df8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006dfa:	7bbb      	ldrb	r3, [r7, #14]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d103      	bne.n	8006e08 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2205      	movs	r2, #5
 8006e04:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e06:	e097      	b.n	8006f38 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e08:	7bbb      	ldrb	r3, [r7, #14]
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	f040 8094 	bne.w	8006f38 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e16:	3301      	adds	r3, #1
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d903      	bls.n	8006e32 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	220d      	movs	r2, #13
 8006e2e:	701a      	strb	r2, [r3, #0]
      break;
 8006e30:	e082      	b.n	8006f38 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	795b      	ldrb	r3, [r3, #5]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 ff9f 	bl	8007d7c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	791b      	ldrb	r3, [r3, #4]
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 ff99 	bl	8007d7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	701a      	strb	r2, [r3, #0]
      break;
 8006e56:	e06f      	b.n	8006f38 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d019      	beq.n	8006e96 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e6e:	23ff      	movs	r3, #255	; 0xff
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f949 	bl	8007108 <USBH_Get_StringDesc>
 8006e76:	4603      	mov	r3, r0
 8006e78:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e7a:	7bbb      	ldrb	r3, [r7, #14]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d103      	bne.n	8006e88 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2206      	movs	r2, #6
 8006e84:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e86:	e059      	b.n	8006f3c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e88:	7bbb      	ldrb	r3, [r7, #14]
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d156      	bne.n	8006f3c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2206      	movs	r2, #6
 8006e92:	705a      	strb	r2, [r3, #1]
      break;
 8006e94:	e052      	b.n	8006f3c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2206      	movs	r2, #6
 8006e9a:	705a      	strb	r2, [r3, #1]
      break;
 8006e9c:	e04e      	b.n	8006f3c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d019      	beq.n	8006edc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006eb4:	23ff      	movs	r3, #255	; 0xff
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f926 	bl	8007108 <USBH_Get_StringDesc>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ec0:	7bbb      	ldrb	r3, [r7, #14]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d103      	bne.n	8006ece <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2207      	movs	r2, #7
 8006eca:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006ecc:	e038      	b.n	8006f40 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ece:	7bbb      	ldrb	r3, [r7, #14]
 8006ed0:	2b03      	cmp	r3, #3
 8006ed2:	d135      	bne.n	8006f40 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2207      	movs	r2, #7
 8006ed8:	705a      	strb	r2, [r3, #1]
      break;
 8006eda:	e031      	b.n	8006f40 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2207      	movs	r2, #7
 8006ee0:	705a      	strb	r2, [r3, #1]
      break;
 8006ee2:	e02d      	b.n	8006f40 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d017      	beq.n	8006f1e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006efa:	23ff      	movs	r3, #255	; 0xff
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f903 	bl	8007108 <USBH_Get_StringDesc>
 8006f02:	4603      	mov	r3, r0
 8006f04:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f06:	7bbb      	ldrb	r3, [r7, #14]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d102      	bne.n	8006f12 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006f10:	e018      	b.n	8006f44 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f12:	7bbb      	ldrb	r3, [r7, #14]
 8006f14:	2b03      	cmp	r3, #3
 8006f16:	d115      	bne.n	8006f44 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f1c:	e012      	b.n	8006f44 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	73fb      	strb	r3, [r7, #15]
      break;
 8006f22:	e00f      	b.n	8006f44 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006f24:	bf00      	nop
 8006f26:	e00e      	b.n	8006f46 <USBH_HandleEnum+0x3be>
      break;
 8006f28:	bf00      	nop
 8006f2a:	e00c      	b.n	8006f46 <USBH_HandleEnum+0x3be>
      break;
 8006f2c:	bf00      	nop
 8006f2e:	e00a      	b.n	8006f46 <USBH_HandleEnum+0x3be>
      break;
 8006f30:	bf00      	nop
 8006f32:	e008      	b.n	8006f46 <USBH_HandleEnum+0x3be>
      break;
 8006f34:	bf00      	nop
 8006f36:	e006      	b.n	8006f46 <USBH_HandleEnum+0x3be>
      break;
 8006f38:	bf00      	nop
 8006f3a:	e004      	b.n	8006f46 <USBH_HandleEnum+0x3be>
      break;
 8006f3c:	bf00      	nop
 8006f3e:	e002      	b.n	8006f46 <USBH_HandleEnum+0x3be>
      break;
 8006f40:	bf00      	nop
 8006f42:	e000      	b.n	8006f46 <USBH_HandleEnum+0x3be>
      break;
 8006f44:	bf00      	nop
  }
  return Status;
 8006f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006f62:	bf00      	nop
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b082      	sub	sp, #8
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f804 	bl	8006f92 <USBH_HandleSof>
}
 8006f8a:	bf00      	nop
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b082      	sub	sp, #8
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b0b      	cmp	r3, #11
 8006fa2:	d10a      	bne.n	8006fba <USBH_HandleSof+0x28>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d005      	beq.n	8006fba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	4798      	blx	r3
  }
}
 8006fba:	bf00      	nop
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b083      	sub	sp, #12
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006fd2:	bf00      	nop
}
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b083      	sub	sp, #12
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006fee:	bf00      	nop
}
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b083      	sub	sp, #12
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f001 f844 	bl	80080d6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	791b      	ldrb	r3, [r3, #4]
 8007052:	4619      	mov	r1, r3
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fe91 	bl	8007d7c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	795b      	ldrb	r3, [r3, #5]
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fe8b 	bl	8007d7c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af02      	add	r7, sp, #8
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	460b      	mov	r3, r1
 800707a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007082:	78fb      	ldrb	r3, [r7, #3]
 8007084:	b29b      	uxth	r3, r3
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	4613      	mov	r3, r2
 800708a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800708e:	2100      	movs	r1, #0
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f864 	bl	800715e <USBH_GetDescriptor>
 8007096:	4603      	mov	r3, r0
 8007098:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10a      	bne.n	80070b6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070ac:	78fa      	ldrb	r2, [r7, #3]
 80070ae:	b292      	uxth	r2, r2
 80070b0:	4619      	mov	r1, r3
 80070b2:	f000 f918 	bl	80072e6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af02      	add	r7, sp, #8
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	331c      	adds	r3, #28
 80070d0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80070d2:	887b      	ldrh	r3, [r7, #2]
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070dc:	2100      	movs	r1, #0
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f83d 	bl	800715e <USBH_GetDescriptor>
 80070e4:	4603      	mov	r3, r0
 80070e6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d107      	bne.n	80070fe <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80070ee:	887b      	ldrh	r3, [r7, #2]
 80070f0:	461a      	mov	r2, r3
 80070f2:	68b9      	ldr	r1, [r7, #8]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f987 	bl	8007408 <USBH_ParseCfgDesc>
 80070fa:	4603      	mov	r3, r0
 80070fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af02      	add	r7, sp, #8
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	607a      	str	r2, [r7, #4]
 8007112:	461a      	mov	r2, r3
 8007114:	460b      	mov	r3, r1
 8007116:	72fb      	strb	r3, [r7, #11]
 8007118:	4613      	mov	r3, r2
 800711a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800711c:	7afb      	ldrb	r3, [r7, #11]
 800711e:	b29b      	uxth	r3, r3
 8007120:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007124:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800712c:	893b      	ldrh	r3, [r7, #8]
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	460b      	mov	r3, r1
 8007132:	2100      	movs	r1, #0
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 f812 	bl	800715e <USBH_GetDescriptor>
 800713a:	4603      	mov	r3, r0
 800713c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800713e:	7dfb      	ldrb	r3, [r7, #23]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d107      	bne.n	8007154 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800714a:	893a      	ldrh	r2, [r7, #8]
 800714c:	6879      	ldr	r1, [r7, #4]
 800714e:	4618      	mov	r0, r3
 8007150:	f000 fb24 	bl	800779c <USBH_ParseStringDesc>
  }

  return status;
 8007154:	7dfb      	ldrb	r3, [r7, #23]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	60f8      	str	r0, [r7, #12]
 8007166:	607b      	str	r3, [r7, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	72fb      	strb	r3, [r7, #11]
 800716c:	4613      	mov	r3, r2
 800716e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	789b      	ldrb	r3, [r3, #2]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d11c      	bne.n	80071b2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007178:	7afb      	ldrb	r3, [r7, #11]
 800717a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800717e:	b2da      	uxtb	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2206      	movs	r2, #6
 8007188:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	893a      	ldrh	r2, [r7, #8]
 800718e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007190:	893b      	ldrh	r3, [r7, #8]
 8007192:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800719a:	d104      	bne.n	80071a6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f240 4209 	movw	r2, #1033	; 0x409
 80071a2:	829a      	strh	r2, [r3, #20]
 80071a4:	e002      	b.n	80071ac <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8b3a      	ldrh	r2, [r7, #24]
 80071b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80071b2:	8b3b      	ldrh	r3, [r7, #24]
 80071b4:	461a      	mov	r2, r3
 80071b6:	6879      	ldr	r1, [r7, #4]
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 fb3d 	bl	8007838 <USBH_CtlReq>
 80071be:	4603      	mov	r3, r0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	460b      	mov	r3, r1
 80071d2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	789b      	ldrb	r3, [r3, #2]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d10f      	bne.n	80071fc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2205      	movs	r2, #5
 80071e6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80071e8:	78fb      	ldrb	r3, [r7, #3]
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80071fc:	2200      	movs	r2, #0
 80071fe:	2100      	movs	r1, #0
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fb19 	bl	8007838 <USBH_CtlReq>
 8007206:	4603      	mov	r3, r0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	460b      	mov	r3, r1
 800721a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	789b      	ldrb	r3, [r3, #2]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d10e      	bne.n	8007242 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2209      	movs	r2, #9
 800722e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	887a      	ldrh	r2, [r7, #2]
 8007234:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007242:	2200      	movs	r2, #0
 8007244:	2100      	movs	r1, #0
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 faf6 	bl	8007838 <USBH_CtlReq>
 800724c:	4603      	mov	r3, r0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	460b      	mov	r3, r1
 8007260:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	789b      	ldrb	r3, [r3, #2]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d10f      	bne.n	800728a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2203      	movs	r2, #3
 8007274:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007276:	78fb      	ldrb	r3, [r7, #3]
 8007278:	b29a      	uxth	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800728a:	2200      	movs	r2, #0
 800728c:	2100      	movs	r1, #0
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fad2 	bl	8007838 <USBH_CtlReq>
 8007294:	4603      	mov	r3, r0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b082      	sub	sp, #8
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	460b      	mov	r3, r1
 80072a8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	789b      	ldrb	r3, [r3, #2]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d10f      	bne.n	80072d2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2202      	movs	r2, #2
 80072b6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80072d2:	2200      	movs	r2, #0
 80072d4:	2100      	movs	r1, #0
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 faae 	bl	8007838 <USBH_CtlReq>
 80072dc:	4603      	mov	r3, r0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b085      	sub	sp, #20
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	4613      	mov	r3, r2
 80072f2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	781a      	ldrb	r2, [r3, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	785a      	ldrb	r2, [r3, #1]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	3302      	adds	r3, #2
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	b29a      	uxth	r2, r3
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	3303      	adds	r3, #3
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	b29b      	uxth	r3, r3
 8007314:	021b      	lsls	r3, r3, #8
 8007316:	b29b      	uxth	r3, r3
 8007318:	4313      	orrs	r3, r2
 800731a:	b29a      	uxth	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	791a      	ldrb	r2, [r3, #4]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	795a      	ldrb	r2, [r3, #5]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	799a      	ldrb	r2, [r3, #6]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	79da      	ldrb	r2, [r3, #7]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	79db      	ldrb	r3, [r3, #7]
 8007344:	2b20      	cmp	r3, #32
 8007346:	dc11      	bgt.n	800736c <USBH_ParseDevDesc+0x86>
 8007348:	2b08      	cmp	r3, #8
 800734a:	db16      	blt.n	800737a <USBH_ParseDevDesc+0x94>
 800734c:	3b08      	subs	r3, #8
 800734e:	2201      	movs	r2, #1
 8007350:	fa02 f303 	lsl.w	r3, r2, r3
 8007354:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800735c:	2b00      	cmp	r3, #0
 800735e:	bf14      	ite	ne
 8007360:	2301      	movne	r3, #1
 8007362:	2300      	moveq	r3, #0
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d102      	bne.n	8007370 <USBH_ParseDevDesc+0x8a>
 800736a:	e006      	b.n	800737a <USBH_ParseDevDesc+0x94>
 800736c:	2b40      	cmp	r3, #64	; 0x40
 800736e:	d104      	bne.n	800737a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	79da      	ldrb	r2, [r3, #7]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	71da      	strb	r2, [r3, #7]
      break;
 8007378:	e003      	b.n	8007382 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2240      	movs	r2, #64	; 0x40
 800737e:	71da      	strb	r2, [r3, #7]
      break;
 8007380:	bf00      	nop
  }

  if (length > 8U)
 8007382:	88fb      	ldrh	r3, [r7, #6]
 8007384:	2b08      	cmp	r3, #8
 8007386:	d939      	bls.n	80073fc <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	3308      	adds	r3, #8
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	b29a      	uxth	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	3309      	adds	r3, #9
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	021b      	lsls	r3, r3, #8
 800739a:	b29b      	uxth	r3, r3
 800739c:	4313      	orrs	r3, r2
 800739e:	b29a      	uxth	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	330a      	adds	r3, #10
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	330b      	adds	r3, #11
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	021b      	lsls	r3, r3, #8
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	4313      	orrs	r3, r2
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	330c      	adds	r3, #12
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	330d      	adds	r3, #13
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	021b      	lsls	r3, r3, #8
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	4313      	orrs	r3, r2
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	7b9a      	ldrb	r2, [r3, #14]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	7bda      	ldrb	r2, [r3, #15]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	7c1a      	ldrb	r2, [r3, #16]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	7c5a      	ldrb	r2, [r3, #17]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	745a      	strb	r2, [r3, #17]
  }
}
 80073fc:	bf00      	nop
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b08c      	sub	sp, #48	; 0x30
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	4613      	mov	r3, r2
 8007414:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800741c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	781a      	ldrb	r2, [r3, #0]
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	785a      	ldrb	r2, [r3, #1]
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	3302      	adds	r3, #2
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	b29a      	uxth	r2, r3
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	3303      	adds	r3, #3
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	b29b      	uxth	r3, r3
 8007458:	021b      	lsls	r3, r3, #8
 800745a:	b29b      	uxth	r3, r3
 800745c:	4313      	orrs	r3, r2
 800745e:	b29b      	uxth	r3, r3
 8007460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007464:	bf28      	it	cs
 8007466:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800746a:	b29a      	uxth	r2, r3
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	791a      	ldrb	r2, [r3, #4]
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	795a      	ldrb	r2, [r3, #5]
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	799a      	ldrb	r2, [r3, #6]
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	79da      	ldrb	r2, [r3, #7]
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	7a1a      	ldrb	r2, [r3, #8]
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b09      	cmp	r3, #9
 800749e:	d002      	beq.n	80074a6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	2209      	movs	r2, #9
 80074a4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80074a6:	88fb      	ldrh	r3, [r7, #6]
 80074a8:	2b09      	cmp	r3, #9
 80074aa:	f240 809d 	bls.w	80075e8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80074ae:	2309      	movs	r3, #9
 80074b0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80074b2:	2300      	movs	r3, #0
 80074b4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80074b6:	e081      	b.n	80075bc <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80074b8:	f107 0316 	add.w	r3, r7, #22
 80074bc:	4619      	mov	r1, r3
 80074be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074c0:	f000 f99f 	bl	8007802 <USBH_GetNextDesc>
 80074c4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80074c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c8:	785b      	ldrb	r3, [r3, #1]
 80074ca:	2b04      	cmp	r3, #4
 80074cc:	d176      	bne.n	80075bc <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80074ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	2b09      	cmp	r3, #9
 80074d4:	d002      	beq.n	80074dc <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	2209      	movs	r2, #9
 80074da:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80074dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074e0:	221a      	movs	r2, #26
 80074e2:	fb02 f303 	mul.w	r3, r2, r3
 80074e6:	3308      	adds	r3, #8
 80074e8:	6a3a      	ldr	r2, [r7, #32]
 80074ea:	4413      	add	r3, r2
 80074ec:	3302      	adds	r3, #2
 80074ee:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80074f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074f2:	69f8      	ldr	r0, [r7, #28]
 80074f4:	f000 f87e 	bl	80075f4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80074f8:	2300      	movs	r3, #0
 80074fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80074fe:	2300      	movs	r3, #0
 8007500:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007502:	e043      	b.n	800758c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007504:	f107 0316 	add.w	r3, r7, #22
 8007508:	4619      	mov	r1, r3
 800750a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800750c:	f000 f979 	bl	8007802 <USBH_GetNextDesc>
 8007510:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007514:	785b      	ldrb	r3, [r3, #1]
 8007516:	2b05      	cmp	r3, #5
 8007518:	d138      	bne.n	800758c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	795b      	ldrb	r3, [r3, #5]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d10f      	bne.n	8007542 <USBH_ParseCfgDesc+0x13a>
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	799b      	ldrb	r3, [r3, #6]
 8007526:	2b02      	cmp	r3, #2
 8007528:	d10b      	bne.n	8007542 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	79db      	ldrb	r3, [r3, #7]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10f      	bne.n	8007552 <USBH_ParseCfgDesc+0x14a>
 8007532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	2b09      	cmp	r3, #9
 8007538:	d00b      	beq.n	8007552 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753c:	2209      	movs	r2, #9
 800753e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007540:	e007      	b.n	8007552 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	2b07      	cmp	r3, #7
 8007548:	d004      	beq.n	8007554 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800754a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754c:	2207      	movs	r2, #7
 800754e:	701a      	strb	r2, [r3, #0]
 8007550:	e000      	b.n	8007554 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007552:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007558:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800755c:	3201      	adds	r2, #1
 800755e:	00d2      	lsls	r2, r2, #3
 8007560:	211a      	movs	r1, #26
 8007562:	fb01 f303 	mul.w	r3, r1, r3
 8007566:	4413      	add	r3, r2
 8007568:	3308      	adds	r3, #8
 800756a:	6a3a      	ldr	r2, [r7, #32]
 800756c:	4413      	add	r3, r2
 800756e:	3304      	adds	r3, #4
 8007570:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007574:	69b9      	ldr	r1, [r7, #24]
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f000 f86b 	bl	8007652 <USBH_ParseEPDesc>
 800757c:	4603      	mov	r3, r0
 800757e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007582:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007586:	3301      	adds	r3, #1
 8007588:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	791b      	ldrb	r3, [r3, #4]
 8007590:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007594:	429a      	cmp	r2, r3
 8007596:	d204      	bcs.n	80075a2 <USBH_ParseCfgDesc+0x19a>
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	885a      	ldrh	r2, [r3, #2]
 800759c:	8afb      	ldrh	r3, [r7, #22]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d8b0      	bhi.n	8007504 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	791b      	ldrb	r3, [r3, #4]
 80075a6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d201      	bcs.n	80075b2 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e01c      	b.n	80075ec <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80075b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075b6:	3301      	adds	r3, #1
 80075b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80075bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d805      	bhi.n	80075d0 <USBH_ParseCfgDesc+0x1c8>
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	885a      	ldrh	r2, [r3, #2]
 80075c8:	8afb      	ldrh	r3, [r7, #22]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	f63f af74 	bhi.w	80074b8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80075d0:	6a3b      	ldr	r3, [r7, #32]
 80075d2:	791b      	ldrb	r3, [r3, #4]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	bf28      	it	cs
 80075d8:	2302      	movcs	r3, #2
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d201      	bcs.n	80075e8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e001      	b.n	80075ec <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80075e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3730      	adds	r7, #48	; 0x30
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781a      	ldrb	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	785a      	ldrb	r2, [r3, #1]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	789a      	ldrb	r2, [r3, #2]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	78da      	ldrb	r2, [r3, #3]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	791a      	ldrb	r2, [r3, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	795a      	ldrb	r2, [r3, #5]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	799a      	ldrb	r2, [r3, #6]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	79da      	ldrb	r2, [r3, #7]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	7a1a      	ldrb	r2, [r3, #8]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	721a      	strb	r2, [r3, #8]
}
 8007646:	bf00      	nop
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007652:	b480      	push	{r7}
 8007654:	b087      	sub	sp, #28
 8007656:	af00      	add	r7, sp, #0
 8007658:	60f8      	str	r0, [r7, #12]
 800765a:	60b9      	str	r1, [r7, #8]
 800765c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	781a      	ldrb	r2, [r3, #0]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	785a      	ldrb	r2, [r3, #1]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	789a      	ldrb	r2, [r3, #2]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	78da      	ldrb	r2, [r3, #3]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	3304      	adds	r3, #4
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	b29a      	uxth	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3305      	adds	r3, #5
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	b29b      	uxth	r3, r3
 8007692:	021b      	lsls	r3, r3, #8
 8007694:	b29b      	uxth	r3, r3
 8007696:	4313      	orrs	r3, r2
 8007698:	b29a      	uxth	r2, r3
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	799a      	ldrb	r2, [r3, #6]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	889b      	ldrh	r3, [r3, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d102      	bne.n	80076b4 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80076ae:	2303      	movs	r3, #3
 80076b0:	75fb      	strb	r3, [r7, #23]
 80076b2:	e033      	b.n	800771c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	889b      	ldrh	r3, [r3, #4]
 80076b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80076bc:	f023 0307 	bic.w	r3, r3, #7
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	889b      	ldrh	r3, [r3, #4]
 80076ca:	b21a      	sxth	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3304      	adds	r3, #4
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	b299      	uxth	r1, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3305      	adds	r3, #5
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	b29b      	uxth	r3, r3
 80076dc:	021b      	lsls	r3, r3, #8
 80076de:	b29b      	uxth	r3, r3
 80076e0:	430b      	orrs	r3, r1
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d110      	bne.n	800770e <USBH_ParseEPDesc+0xbc>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3304      	adds	r3, #4
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	b299      	uxth	r1, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3305      	adds	r3, #5
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	021b      	lsls	r3, r3, #8
 80076fe:	b29b      	uxth	r3, r3
 8007700:	430b      	orrs	r3, r1
 8007702:	b29b      	uxth	r3, r3
 8007704:	b21b      	sxth	r3, r3
 8007706:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800770a:	b21b      	sxth	r3, r3
 800770c:	e001      	b.n	8007712 <USBH_ParseEPDesc+0xc0>
 800770e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007712:	4313      	orrs	r3, r2
 8007714:	b21b      	sxth	r3, r3
 8007716:	b29a      	uxth	r2, r3
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007722:	2b00      	cmp	r3, #0
 8007724:	d116      	bne.n	8007754 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	78db      	ldrb	r3, [r3, #3]
 800772a:	f003 0303 	and.w	r3, r3, #3
 800772e:	2b01      	cmp	r3, #1
 8007730:	d005      	beq.n	800773e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	78db      	ldrb	r3, [r3, #3]
 8007736:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800773a:	2b03      	cmp	r3, #3
 800773c:	d127      	bne.n	800778e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	799b      	ldrb	r3, [r3, #6]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <USBH_ParseEPDesc+0xfc>
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	799b      	ldrb	r3, [r3, #6]
 800774a:	2b10      	cmp	r3, #16
 800774c:	d91f      	bls.n	800778e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800774e:	2303      	movs	r3, #3
 8007750:	75fb      	strb	r3, [r7, #23]
 8007752:	e01c      	b.n	800778e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	78db      	ldrb	r3, [r3, #3]
 8007758:	f003 0303 	and.w	r3, r3, #3
 800775c:	2b01      	cmp	r3, #1
 800775e:	d10a      	bne.n	8007776 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	799b      	ldrb	r3, [r3, #6]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d003      	beq.n	8007770 <USBH_ParseEPDesc+0x11e>
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	799b      	ldrb	r3, [r3, #6]
 800776c:	2b10      	cmp	r3, #16
 800776e:	d90e      	bls.n	800778e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007770:	2303      	movs	r3, #3
 8007772:	75fb      	strb	r3, [r7, #23]
 8007774:	e00b      	b.n	800778e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	78db      	ldrb	r3, [r3, #3]
 800777a:	f003 0303 	and.w	r3, r3, #3
 800777e:	2b03      	cmp	r3, #3
 8007780:	d105      	bne.n	800778e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	799b      	ldrb	r3, [r3, #6]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800778a:	2303      	movs	r3, #3
 800778c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800778e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007790:	4618      	mov	r0, r3
 8007792:	371c      	adds	r7, #28
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	4613      	mov	r3, r2
 80077a8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	3301      	adds	r3, #1
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d120      	bne.n	80077f6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	1e9a      	subs	r2, r3, #2
 80077ba:	88fb      	ldrh	r3, [r7, #6]
 80077bc:	4293      	cmp	r3, r2
 80077be:	bf28      	it	cs
 80077c0:	4613      	movcs	r3, r2
 80077c2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3302      	adds	r3, #2
 80077c8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80077ca:	2300      	movs	r3, #0
 80077cc:	82fb      	strh	r3, [r7, #22]
 80077ce:	e00b      	b.n	80077e8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80077d0:	8afb      	ldrh	r3, [r7, #22]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	4413      	add	r3, r2
 80077d6:	781a      	ldrb	r2, [r3, #0]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	701a      	strb	r2, [r3, #0]
      pdest++;
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	3301      	adds	r3, #1
 80077e0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80077e2:	8afb      	ldrh	r3, [r7, #22]
 80077e4:	3302      	adds	r3, #2
 80077e6:	82fb      	strh	r3, [r7, #22]
 80077e8:	8afa      	ldrh	r2, [r7, #22]
 80077ea:	8abb      	ldrh	r3, [r7, #20]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d3ef      	bcc.n	80077d0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2200      	movs	r2, #0
 80077f4:	701a      	strb	r2, [r3, #0]
  }
}
 80077f6:	bf00      	nop
 80077f8:	371c      	adds	r7, #28
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007802:	b480      	push	{r7}
 8007804:	b085      	sub	sp, #20
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	881a      	ldrh	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	b29b      	uxth	r3, r3
 8007816:	4413      	add	r3, r2
 8007818:	b29a      	uxth	r2, r3
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4413      	add	r3, r2
 8007828:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800782a:	68fb      	ldr	r3, [r7, #12]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	4613      	mov	r3, r2
 8007844:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007846:	2301      	movs	r3, #1
 8007848:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	789b      	ldrb	r3, [r3, #2]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d002      	beq.n	8007858 <USBH_CtlReq+0x20>
 8007852:	2b02      	cmp	r3, #2
 8007854:	d00f      	beq.n	8007876 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007856:	e027      	b.n	80078a8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	88fa      	ldrh	r2, [r7, #6]
 8007862:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2201      	movs	r2, #1
 8007868:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2202      	movs	r2, #2
 800786e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007870:	2301      	movs	r3, #1
 8007872:	75fb      	strb	r3, [r7, #23]
      break;
 8007874:	e018      	b.n	80078a8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f000 f81c 	bl	80078b4 <USBH_HandleControl>
 800787c:	4603      	mov	r3, r0
 800787e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007880:	7dfb      	ldrb	r3, [r7, #23]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <USBH_CtlReq+0x54>
 8007886:	7dfb      	ldrb	r3, [r7, #23]
 8007888:	2b03      	cmp	r3, #3
 800788a:	d106      	bne.n	800789a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2201      	movs	r2, #1
 8007890:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	761a      	strb	r2, [r3, #24]
      break;
 8007898:	e005      	b.n	80078a6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800789a:	7dfb      	ldrb	r3, [r7, #23]
 800789c:	2b02      	cmp	r3, #2
 800789e:	d102      	bne.n	80078a6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2201      	movs	r2, #1
 80078a4:	709a      	strb	r2, [r3, #2]
      break;
 80078a6:	bf00      	nop
  }
  return status;
 80078a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
	...

080078b4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af02      	add	r7, sp, #8
 80078ba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80078bc:	2301      	movs	r3, #1
 80078be:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078c0:	2300      	movs	r3, #0
 80078c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	7e1b      	ldrb	r3, [r3, #24]
 80078c8:	3b01      	subs	r3, #1
 80078ca:	2b0a      	cmp	r3, #10
 80078cc:	f200 8156 	bhi.w	8007b7c <USBH_HandleControl+0x2c8>
 80078d0:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <USBH_HandleControl+0x24>)
 80078d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d6:	bf00      	nop
 80078d8:	08007905 	.word	0x08007905
 80078dc:	0800791f 	.word	0x0800791f
 80078e0:	08007989 	.word	0x08007989
 80078e4:	080079af 	.word	0x080079af
 80078e8:	080079e7 	.word	0x080079e7
 80078ec:	08007a11 	.word	0x08007a11
 80078f0:	08007a63 	.word	0x08007a63
 80078f4:	08007a85 	.word	0x08007a85
 80078f8:	08007ac1 	.word	0x08007ac1
 80078fc:	08007ae7 	.word	0x08007ae7
 8007900:	08007b25 	.word	0x08007b25
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f103 0110 	add.w	r1, r3, #16
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	795b      	ldrb	r3, [r3, #5]
 800790e:	461a      	mov	r2, r3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f943 	bl	8007b9c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2202      	movs	r2, #2
 800791a:	761a      	strb	r2, [r3, #24]
      break;
 800791c:	e139      	b.n	8007b92 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	795b      	ldrb	r3, [r3, #5]
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fcc5 	bl	80082b4 <USBH_LL_GetURBState>
 800792a:	4603      	mov	r3, r0
 800792c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800792e:	7bbb      	ldrb	r3, [r7, #14]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d11e      	bne.n	8007972 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	7c1b      	ldrb	r3, [r3, #16]
 8007938:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800793c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	8adb      	ldrh	r3, [r3, #22]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00a      	beq.n	800795c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007946:	7b7b      	ldrb	r3, [r7, #13]
 8007948:	2b80      	cmp	r3, #128	; 0x80
 800794a:	d103      	bne.n	8007954 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2203      	movs	r2, #3
 8007950:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007952:	e115      	b.n	8007b80 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2205      	movs	r2, #5
 8007958:	761a      	strb	r2, [r3, #24]
      break;
 800795a:	e111      	b.n	8007b80 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800795c:	7b7b      	ldrb	r3, [r7, #13]
 800795e:	2b80      	cmp	r3, #128	; 0x80
 8007960:	d103      	bne.n	800796a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2209      	movs	r2, #9
 8007966:	761a      	strb	r2, [r3, #24]
      break;
 8007968:	e10a      	b.n	8007b80 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2207      	movs	r2, #7
 800796e:	761a      	strb	r2, [r3, #24]
      break;
 8007970:	e106      	b.n	8007b80 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007972:	7bbb      	ldrb	r3, [r7, #14]
 8007974:	2b04      	cmp	r3, #4
 8007976:	d003      	beq.n	8007980 <USBH_HandleControl+0xcc>
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	2b02      	cmp	r3, #2
 800797c:	f040 8100 	bne.w	8007b80 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	220b      	movs	r2, #11
 8007984:	761a      	strb	r2, [r3, #24]
      break;
 8007986:	e0fb      	b.n	8007b80 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800798e:	b29a      	uxth	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6899      	ldr	r1, [r3, #8]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	899a      	ldrh	r2, [r3, #12]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	791b      	ldrb	r3, [r3, #4]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f93a 	bl	8007c1a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2204      	movs	r2, #4
 80079aa:	761a      	strb	r2, [r3, #24]
      break;
 80079ac:	e0f1      	b.n	8007b92 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	791b      	ldrb	r3, [r3, #4]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fc7d 	bl	80082b4 <USBH_LL_GetURBState>
 80079ba:	4603      	mov	r3, r0
 80079bc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80079be:	7bbb      	ldrb	r3, [r7, #14]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d102      	bne.n	80079ca <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2209      	movs	r2, #9
 80079c8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80079ca:	7bbb      	ldrb	r3, [r7, #14]
 80079cc:	2b05      	cmp	r3, #5
 80079ce:	d102      	bne.n	80079d6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80079d0:	2303      	movs	r3, #3
 80079d2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079d4:	e0d6      	b.n	8007b84 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	2b04      	cmp	r3, #4
 80079da:	f040 80d3 	bne.w	8007b84 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	220b      	movs	r2, #11
 80079e2:	761a      	strb	r2, [r3, #24]
      break;
 80079e4:	e0ce      	b.n	8007b84 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6899      	ldr	r1, [r3, #8]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	899a      	ldrh	r2, [r3, #12]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	795b      	ldrb	r3, [r3, #5]
 80079f2:	2001      	movs	r0, #1
 80079f4:	9000      	str	r0, [sp, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f8ea 	bl	8007bd0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2206      	movs	r2, #6
 8007a0c:	761a      	strb	r2, [r3, #24]
      break;
 8007a0e:	e0c0      	b.n	8007b92 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	795b      	ldrb	r3, [r3, #5]
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fc4c 	bl	80082b4 <USBH_LL_GetURBState>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d103      	bne.n	8007a2e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2207      	movs	r2, #7
 8007a2a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a2c:	e0ac      	b.n	8007b88 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	2b05      	cmp	r3, #5
 8007a32:	d105      	bne.n	8007a40 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	220c      	movs	r2, #12
 8007a38:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a3e:	e0a3      	b.n	8007b88 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d103      	bne.n	8007a4e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2205      	movs	r2, #5
 8007a4a:	761a      	strb	r2, [r3, #24]
      break;
 8007a4c:	e09c      	b.n	8007b88 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	2b04      	cmp	r3, #4
 8007a52:	f040 8099 	bne.w	8007b88 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	220b      	movs	r2, #11
 8007a5a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a60:	e092      	b.n	8007b88 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	791b      	ldrb	r3, [r3, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	2100      	movs	r1, #0
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f8d5 	bl	8007c1a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2208      	movs	r2, #8
 8007a80:	761a      	strb	r2, [r3, #24]

      break;
 8007a82:	e086      	b.n	8007b92 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	791b      	ldrb	r3, [r3, #4]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fc12 	bl	80082b4 <USBH_LL_GetURBState>
 8007a90:	4603      	mov	r3, r0
 8007a92:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d105      	bne.n	8007aa6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	220d      	movs	r2, #13
 8007a9e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007aa4:	e072      	b.n	8007b8c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
 8007aa8:	2b04      	cmp	r3, #4
 8007aaa:	d103      	bne.n	8007ab4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	220b      	movs	r2, #11
 8007ab0:	761a      	strb	r2, [r3, #24]
      break;
 8007ab2:	e06b      	b.n	8007b8c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
 8007ab6:	2b05      	cmp	r3, #5
 8007ab8:	d168      	bne.n	8007b8c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007aba:	2303      	movs	r3, #3
 8007abc:	73fb      	strb	r3, [r7, #15]
      break;
 8007abe:	e065      	b.n	8007b8c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	795b      	ldrb	r3, [r3, #5]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	9200      	str	r2, [sp, #0]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	2100      	movs	r1, #0
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f87f 	bl	8007bd0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	220a      	movs	r2, #10
 8007ae2:	761a      	strb	r2, [r3, #24]
      break;
 8007ae4:	e055      	b.n	8007b92 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	795b      	ldrb	r3, [r3, #5]
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fbe1 	bl	80082b4 <USBH_LL_GetURBState>
 8007af2:	4603      	mov	r3, r0
 8007af4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007af6:	7bbb      	ldrb	r3, [r7, #14]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d105      	bne.n	8007b08 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	220d      	movs	r2, #13
 8007b04:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b06:	e043      	b.n	8007b90 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d103      	bne.n	8007b16 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2209      	movs	r2, #9
 8007b12:	761a      	strb	r2, [r3, #24]
      break;
 8007b14:	e03c      	b.n	8007b90 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	2b04      	cmp	r3, #4
 8007b1a:	d139      	bne.n	8007b90 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	220b      	movs	r2, #11
 8007b20:	761a      	strb	r2, [r3, #24]
      break;
 8007b22:	e035      	b.n	8007b90 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	7e5b      	ldrb	r3, [r3, #25]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	765a      	strb	r2, [r3, #25]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	7e5b      	ldrb	r3, [r3, #25]
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d806      	bhi.n	8007b46 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007b44:	e025      	b.n	8007b92 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b4c:	2106      	movs	r1, #6
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	795b      	ldrb	r3, [r3, #5]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f90c 	bl	8007d7c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	791b      	ldrb	r3, [r3, #4]
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f906 	bl	8007d7c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007b76:	2302      	movs	r3, #2
 8007b78:	73fb      	strb	r3, [r7, #15]
      break;
 8007b7a:	e00a      	b.n	8007b92 <USBH_HandleControl+0x2de>

    default:
      break;
 8007b7c:	bf00      	nop
 8007b7e:	e008      	b.n	8007b92 <USBH_HandleControl+0x2de>
      break;
 8007b80:	bf00      	nop
 8007b82:	e006      	b.n	8007b92 <USBH_HandleControl+0x2de>
      break;
 8007b84:	bf00      	nop
 8007b86:	e004      	b.n	8007b92 <USBH_HandleControl+0x2de>
      break;
 8007b88:	bf00      	nop
 8007b8a:	e002      	b.n	8007b92 <USBH_HandleControl+0x2de>
      break;
 8007b8c:	bf00      	nop
 8007b8e:	e000      	b.n	8007b92 <USBH_HandleControl+0x2de>
      break;
 8007b90:	bf00      	nop
  }

  return status;
 8007b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b088      	sub	sp, #32
 8007ba0:	af04      	add	r7, sp, #16
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007baa:	79f9      	ldrb	r1, [r7, #7]
 8007bac:	2300      	movs	r3, #0
 8007bae:	9303      	str	r3, [sp, #12]
 8007bb0:	2308      	movs	r3, #8
 8007bb2:	9302      	str	r3, [sp, #8]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	2300      	movs	r3, #0
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 fb46 	bl	8008252 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b088      	sub	sp, #32
 8007bd4:	af04      	add	r7, sp, #16
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	4611      	mov	r1, r2
 8007bdc:	461a      	mov	r2, r3
 8007bde:	460b      	mov	r3, r1
 8007be0:	80fb      	strh	r3, [r7, #6]
 8007be2:	4613      	mov	r3, r2
 8007be4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d001      	beq.n	8007bf4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007bf4:	7979      	ldrb	r1, [r7, #5]
 8007bf6:	7e3b      	ldrb	r3, [r7, #24]
 8007bf8:	9303      	str	r3, [sp, #12]
 8007bfa:	88fb      	ldrh	r3, [r7, #6]
 8007bfc:	9302      	str	r3, [sp, #8]
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	9301      	str	r3, [sp, #4]
 8007c02:	2301      	movs	r3, #1
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	2300      	movs	r3, #0
 8007c08:	2200      	movs	r2, #0
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 fb21 	bl	8008252 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b088      	sub	sp, #32
 8007c1e:	af04      	add	r7, sp, #16
 8007c20:	60f8      	str	r0, [r7, #12]
 8007c22:	60b9      	str	r1, [r7, #8]
 8007c24:	4611      	mov	r1, r2
 8007c26:	461a      	mov	r2, r3
 8007c28:	460b      	mov	r3, r1
 8007c2a:	80fb      	strh	r3, [r7, #6]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c30:	7979      	ldrb	r1, [r7, #5]
 8007c32:	2300      	movs	r3, #0
 8007c34:	9303      	str	r3, [sp, #12]
 8007c36:	88fb      	ldrh	r3, [r7, #6]
 8007c38:	9302      	str	r3, [sp, #8]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	9301      	str	r3, [sp, #4]
 8007c3e:	2301      	movs	r3, #1
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	2300      	movs	r3, #0
 8007c44:	2201      	movs	r2, #1
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f000 fb03 	bl	8008252 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007c4c:	2300      	movs	r3, #0

}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b088      	sub	sp, #32
 8007c5a:	af04      	add	r7, sp, #16
 8007c5c:	60f8      	str	r0, [r7, #12]
 8007c5e:	60b9      	str	r1, [r7, #8]
 8007c60:	4611      	mov	r1, r2
 8007c62:	461a      	mov	r2, r3
 8007c64:	460b      	mov	r3, r1
 8007c66:	80fb      	strh	r3, [r7, #6]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007c76:	2300      	movs	r3, #0
 8007c78:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c7a:	7979      	ldrb	r1, [r7, #5]
 8007c7c:	7e3b      	ldrb	r3, [r7, #24]
 8007c7e:	9303      	str	r3, [sp, #12]
 8007c80:	88fb      	ldrh	r3, [r7, #6]
 8007c82:	9302      	str	r3, [sp, #8]
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	9301      	str	r3, [sp, #4]
 8007c88:	2301      	movs	r3, #1
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	2200      	movs	r2, #0
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 fade 	bl	8008252 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b088      	sub	sp, #32
 8007ca4:	af04      	add	r7, sp, #16
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	4611      	mov	r1, r2
 8007cac:	461a      	mov	r2, r3
 8007cae:	460b      	mov	r3, r1
 8007cb0:	80fb      	strh	r3, [r7, #6]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007cb6:	7979      	ldrb	r1, [r7, #5]
 8007cb8:	2300      	movs	r3, #0
 8007cba:	9303      	str	r3, [sp, #12]
 8007cbc:	88fb      	ldrh	r3, [r7, #6]
 8007cbe:	9302      	str	r3, [sp, #8]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	9301      	str	r3, [sp, #4]
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	2302      	movs	r3, #2
 8007cca:	2201      	movs	r2, #1
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 fac0 	bl	8008252 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af04      	add	r7, sp, #16
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	4608      	mov	r0, r1
 8007ce6:	4611      	mov	r1, r2
 8007ce8:	461a      	mov	r2, r3
 8007cea:	4603      	mov	r3, r0
 8007cec:	70fb      	strb	r3, [r7, #3]
 8007cee:	460b      	mov	r3, r1
 8007cf0:	70bb      	strb	r3, [r7, #2]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007cf6:	7878      	ldrb	r0, [r7, #1]
 8007cf8:	78ba      	ldrb	r2, [r7, #2]
 8007cfa:	78f9      	ldrb	r1, [r7, #3]
 8007cfc:	8b3b      	ldrh	r3, [r7, #24]
 8007cfe:	9302      	str	r3, [sp, #8]
 8007d00:	7d3b      	ldrb	r3, [r7, #20]
 8007d02:	9301      	str	r3, [sp, #4]
 8007d04:	7c3b      	ldrb	r3, [r7, #16]
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	4603      	mov	r3, r0
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fa53 	bl	80081b6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b082      	sub	sp, #8
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	460b      	mov	r3, r1
 8007d24:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007d26:	78fb      	ldrb	r3, [r7, #3]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fa72 	bl	8008214 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	460b      	mov	r3, r1
 8007d44:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f836 	bl	8007db8 <USBH_GetFreePipe>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007d50:	89fb      	ldrh	r3, [r7, #14]
 8007d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d00a      	beq.n	8007d70 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007d5a:	78fa      	ldrb	r2, [r7, #3]
 8007d5c:	89fb      	ldrh	r3, [r7, #14]
 8007d5e:	f003 030f 	and.w	r3, r3, #15
 8007d62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d66:	6879      	ldr	r1, [r7, #4]
 8007d68:	33e0      	adds	r3, #224	; 0xe0
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	440b      	add	r3, r1
 8007d6e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007d70:	89fb      	ldrh	r3, [r7, #14]
 8007d72:	b2db      	uxtb	r3, r3
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	2b0f      	cmp	r3, #15
 8007d8c:	d80d      	bhi.n	8007daa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007d8e:	78fb      	ldrb	r3, [r7, #3]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	33e0      	adds	r3, #224	; 0xe0
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	685a      	ldr	r2, [r3, #4]
 8007d9a:	78fb      	ldrb	r3, [r7, #3]
 8007d9c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007da0:	6879      	ldr	r1, [r7, #4]
 8007da2:	33e0      	adds	r3, #224	; 0xe0
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	440b      	add	r3, r1
 8007da8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	73fb      	strb	r3, [r7, #15]
 8007dc8:	e00f      	b.n	8007dea <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	33e0      	adds	r3, #224	; 0xe0
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d102      	bne.n	8007de4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	e007      	b.n	8007df4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
 8007de6:	3301      	adds	r3, #1
 8007de8:	73fb      	strb	r3, [r7, #15]
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
 8007dec:	2b0f      	cmp	r3, #15
 8007dee:	d9ec      	bls.n	8007dca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007df0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007e04:	2201      	movs	r2, #1
 8007e06:	490e      	ldr	r1, [pc, #56]	; (8007e40 <MX_USB_HOST_Init+0x40>)
 8007e08:	480e      	ldr	r0, [pc, #56]	; (8007e44 <MX_USB_HOST_Init+0x44>)
 8007e0a:	f7fe fba7 	bl	800655c <USBH_Init>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007e14:	f7f8 fdfa 	bl	8000a0c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007e18:	490b      	ldr	r1, [pc, #44]	; (8007e48 <MX_USB_HOST_Init+0x48>)
 8007e1a:	480a      	ldr	r0, [pc, #40]	; (8007e44 <MX_USB_HOST_Init+0x44>)
 8007e1c:	f7fe fc2c 	bl	8006678 <USBH_RegisterClass>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007e26:	f7f8 fdf1 	bl	8000a0c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007e2a:	4806      	ldr	r0, [pc, #24]	; (8007e44 <MX_USB_HOST_Init+0x44>)
 8007e2c:	f7fe fcb0 	bl	8006790 <USBH_Start>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007e36:	f7f8 fde9 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007e3a:	bf00      	nop
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	08007e61 	.word	0x08007e61
 8007e44:	200001f8 	.word	0x200001f8
 8007e48:	2000000c 	.word	0x2000000c

08007e4c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007e50:	4802      	ldr	r0, [pc, #8]	; (8007e5c <MX_USB_HOST_Process+0x10>)
 8007e52:	f7fe fcad 	bl	80067b0 <USBH_Process>
}
 8007e56:	bf00      	nop
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	200001f8 	.word	0x200001f8

08007e60 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e6c:	78fb      	ldrb	r3, [r7, #3]
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	d819      	bhi.n	8007ea8 <USBH_UserProcess+0x48>
 8007e74:	a201      	add	r2, pc, #4	; (adr r2, 8007e7c <USBH_UserProcess+0x1c>)
 8007e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7a:	bf00      	nop
 8007e7c:	08007ea9 	.word	0x08007ea9
 8007e80:	08007e99 	.word	0x08007e99
 8007e84:	08007ea9 	.word	0x08007ea9
 8007e88:	08007ea1 	.word	0x08007ea1
 8007e8c:	08007e91 	.word	0x08007e91
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e90:	4b09      	ldr	r3, [pc, #36]	; (8007eb8 <USBH_UserProcess+0x58>)
 8007e92:	2203      	movs	r2, #3
 8007e94:	701a      	strb	r2, [r3, #0]
  break;
 8007e96:	e008      	b.n	8007eaa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e98:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <USBH_UserProcess+0x58>)
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	701a      	strb	r2, [r3, #0]
  break;
 8007e9e:	e004      	b.n	8007eaa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007ea0:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <USBH_UserProcess+0x58>)
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	701a      	strb	r2, [r3, #0]
  break;
 8007ea6:	e000      	b.n	8007eaa <USBH_UserProcess+0x4a>

  default:
  break;
 8007ea8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007eaa:	bf00      	nop
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	200005d0 	.word	0x200005d0

08007ebc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b08a      	sub	sp, #40	; 0x28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ec4:	f107 0314 	add.w	r3, r7, #20
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]
 8007ecc:	605a      	str	r2, [r3, #4]
 8007ece:	609a      	str	r2, [r3, #8]
 8007ed0:	60da      	str	r2, [r3, #12]
 8007ed2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007edc:	d147      	bne.n	8007f6e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ede:	2300      	movs	r3, #0
 8007ee0:	613b      	str	r3, [r7, #16]
 8007ee2:	4b25      	ldr	r3, [pc, #148]	; (8007f78 <HAL_HCD_MspInit+0xbc>)
 8007ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee6:	4a24      	ldr	r2, [pc, #144]	; (8007f78 <HAL_HCD_MspInit+0xbc>)
 8007ee8:	f043 0301 	orr.w	r3, r3, #1
 8007eec:	6313      	str	r3, [r2, #48]	; 0x30
 8007eee:	4b22      	ldr	r3, [pc, #136]	; (8007f78 <HAL_HCD_MspInit+0xbc>)
 8007ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	613b      	str	r3, [r7, #16]
 8007ef8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f00:	2300      	movs	r3, #0
 8007f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f04:	2300      	movs	r3, #0
 8007f06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007f08:	f107 0314 	add.w	r3, r7, #20
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	481b      	ldr	r0, [pc, #108]	; (8007f7c <HAL_HCD_MspInit+0xc0>)
 8007f10:	f7f9 f970 	bl	80011f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007f14:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f22:	2300      	movs	r3, #0
 8007f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f26:	230a      	movs	r3, #10
 8007f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f2a:	f107 0314 	add.w	r3, r7, #20
 8007f2e:	4619      	mov	r1, r3
 8007f30:	4812      	ldr	r0, [pc, #72]	; (8007f7c <HAL_HCD_MspInit+0xc0>)
 8007f32:	f7f9 f95f 	bl	80011f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f36:	4b10      	ldr	r3, [pc, #64]	; (8007f78 <HAL_HCD_MspInit+0xbc>)
 8007f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f3a:	4a0f      	ldr	r2, [pc, #60]	; (8007f78 <HAL_HCD_MspInit+0xbc>)
 8007f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f40:	6353      	str	r3, [r2, #52]	; 0x34
 8007f42:	2300      	movs	r3, #0
 8007f44:	60fb      	str	r3, [r7, #12]
 8007f46:	4b0c      	ldr	r3, [pc, #48]	; (8007f78 <HAL_HCD_MspInit+0xbc>)
 8007f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f4a:	4a0b      	ldr	r2, [pc, #44]	; (8007f78 <HAL_HCD_MspInit+0xbc>)
 8007f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f50:	6453      	str	r3, [r2, #68]	; 0x44
 8007f52:	4b09      	ldr	r3, [pc, #36]	; (8007f78 <HAL_HCD_MspInit+0xbc>)
 8007f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f5a:	60fb      	str	r3, [r7, #12]
 8007f5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f5e:	2200      	movs	r2, #0
 8007f60:	2100      	movs	r1, #0
 8007f62:	2043      	movs	r0, #67	; 0x43
 8007f64:	f7f9 f90f 	bl	8001186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f68:	2043      	movs	r0, #67	; 0x43
 8007f6a:	f7f9 f928 	bl	80011be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f6e:	bf00      	nop
 8007f70:	3728      	adds	r7, #40	; 0x28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	40023800 	.word	0x40023800
 8007f7c:	40020000 	.word	0x40020000

08007f80 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fe ffed 	bl	8006f6e <USBH_LL_IncTimer>
}
 8007f94:	bf00      	nop
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7ff f825 	bl	8006ffa <USBH_LL_Connect>
}
 8007fb0:	bf00      	nop
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7ff f82e 	bl	8007028 <USBH_LL_Disconnect>
}
 8007fcc:	bf00      	nop
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	70fb      	strb	r3, [r7, #3]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fe ffdf 	bl	8006fc2 <USBH_LL_PortEnabled>
}
 8008004:	bf00      	nop
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800801a:	4618      	mov	r0, r3
 800801c:	f7fe ffdf 	bl	8006fde <USBH_LL_PortDisabled>
}
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008036:	2b01      	cmp	r3, #1
 8008038:	d12a      	bne.n	8008090 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800803a:	4a18      	ldr	r2, [pc, #96]	; (800809c <USBH_LL_Init+0x74>)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a15      	ldr	r2, [pc, #84]	; (800809c <USBH_LL_Init+0x74>)
 8008046:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800804a:	4b14      	ldr	r3, [pc, #80]	; (800809c <USBH_LL_Init+0x74>)
 800804c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008050:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008052:	4b12      	ldr	r3, [pc, #72]	; (800809c <USBH_LL_Init+0x74>)
 8008054:	2208      	movs	r2, #8
 8008056:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008058:	4b10      	ldr	r3, [pc, #64]	; (800809c <USBH_LL_Init+0x74>)
 800805a:	2201      	movs	r2, #1
 800805c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800805e:	4b0f      	ldr	r3, [pc, #60]	; (800809c <USBH_LL_Init+0x74>)
 8008060:	2200      	movs	r2, #0
 8008062:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008064:	4b0d      	ldr	r3, [pc, #52]	; (800809c <USBH_LL_Init+0x74>)
 8008066:	2202      	movs	r2, #2
 8008068:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800806a:	4b0c      	ldr	r3, [pc, #48]	; (800809c <USBH_LL_Init+0x74>)
 800806c:	2200      	movs	r2, #0
 800806e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008070:	480a      	ldr	r0, [pc, #40]	; (800809c <USBH_LL_Init+0x74>)
 8008072:	f7f9 fa74 	bl	800155e <HAL_HCD_Init>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800807c:	f7f8 fcc6 	bl	8000a0c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008080:	4806      	ldr	r0, [pc, #24]	; (800809c <USBH_LL_Init+0x74>)
 8008082:	f7f9 fe58 	bl	8001d36 <HAL_HCD_GetCurrentFrame>
 8008086:	4603      	mov	r3, r0
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7fe ff60 	bl	8006f50 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	200005d4 	.word	0x200005d4

080080a0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7f9 fdc7 	bl	8001c4a <HAL_HCD_Start>
 80080bc:	4603      	mov	r3, r0
 80080be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 f95c 	bl	8008380 <USBH_Get_USB_Status>
 80080c8:	4603      	mov	r3, r0
 80080ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b084      	sub	sp, #16
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7f9 fdcf 	bl	8001c90 <HAL_HCD_Stop>
 80080f2:	4603      	mov	r3, r0
 80080f4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 f941 	bl	8008380 <USBH_Get_USB_Status>
 80080fe:	4603      	mov	r3, r0
 8008100:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008102:	7bbb      	ldrb	r3, [r7, #14]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008114:	2301      	movs	r3, #1
 8008116:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800811e:	4618      	mov	r0, r3
 8008120:	f7f9 fe17 	bl	8001d52 <HAL_HCD_GetCurrentSpeed>
 8008124:	4603      	mov	r3, r0
 8008126:	2b02      	cmp	r3, #2
 8008128:	d00c      	beq.n	8008144 <USBH_LL_GetSpeed+0x38>
 800812a:	2b02      	cmp	r3, #2
 800812c:	d80d      	bhi.n	800814a <USBH_LL_GetSpeed+0x3e>
 800812e:	2b00      	cmp	r3, #0
 8008130:	d002      	beq.n	8008138 <USBH_LL_GetSpeed+0x2c>
 8008132:	2b01      	cmp	r3, #1
 8008134:	d003      	beq.n	800813e <USBH_LL_GetSpeed+0x32>
 8008136:	e008      	b.n	800814a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008138:	2300      	movs	r3, #0
 800813a:	73fb      	strb	r3, [r7, #15]
    break;
 800813c:	e008      	b.n	8008150 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800813e:	2301      	movs	r3, #1
 8008140:	73fb      	strb	r3, [r7, #15]
    break;
 8008142:	e005      	b.n	8008150 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008144:	2302      	movs	r3, #2
 8008146:	73fb      	strb	r3, [r7, #15]
    break;
 8008148:	e002      	b.n	8008150 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800814a:	2301      	movs	r3, #1
 800814c:	73fb      	strb	r3, [r7, #15]
    break;
 800814e:	bf00      	nop
  }
  return  speed;
 8008150:	7bfb      	ldrb	r3, [r7, #15]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b084      	sub	sp, #16
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008166:	2300      	movs	r3, #0
 8008168:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008170:	4618      	mov	r0, r3
 8008172:	f7f9 fdaa 	bl	8001cca <HAL_HCD_ResetPort>
 8008176:	4603      	mov	r3, r0
 8008178:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800817a:	7bfb      	ldrb	r3, [r7, #15]
 800817c:	4618      	mov	r0, r3
 800817e:	f000 f8ff 	bl	8008380 <USBH_Get_USB_Status>
 8008182:	4603      	mov	r3, r0
 8008184:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008186:	7bbb      	ldrb	r3, [r7, #14]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081a2:	78fa      	ldrb	r2, [r7, #3]
 80081a4:	4611      	mov	r1, r2
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7f9 fdb1 	bl	8001d0e <HAL_HCD_HC_GetXferCount>
 80081ac:	4603      	mov	r3, r0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80081b6:	b590      	push	{r4, r7, lr}
 80081b8:	b089      	sub	sp, #36	; 0x24
 80081ba:	af04      	add	r7, sp, #16
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	4608      	mov	r0, r1
 80081c0:	4611      	mov	r1, r2
 80081c2:	461a      	mov	r2, r3
 80081c4:	4603      	mov	r3, r0
 80081c6:	70fb      	strb	r3, [r7, #3]
 80081c8:	460b      	mov	r3, r1
 80081ca:	70bb      	strb	r3, [r7, #2]
 80081cc:	4613      	mov	r3, r2
 80081ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80081de:	787c      	ldrb	r4, [r7, #1]
 80081e0:	78ba      	ldrb	r2, [r7, #2]
 80081e2:	78f9      	ldrb	r1, [r7, #3]
 80081e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081e6:	9302      	str	r3, [sp, #8]
 80081e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081ec:	9301      	str	r3, [sp, #4]
 80081ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	4623      	mov	r3, r4
 80081f6:	f7f9 fa14 	bl	8001622 <HAL_HCD_HC_Init>
 80081fa:	4603      	mov	r3, r0
 80081fc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
 8008200:	4618      	mov	r0, r3
 8008202:	f000 f8bd 	bl	8008380 <USBH_Get_USB_Status>
 8008206:	4603      	mov	r3, r0
 8008208:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800820a:	7bbb      	ldrb	r3, [r7, #14]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	bd90      	pop	{r4, r7, pc}

08008214 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008224:	2300      	movs	r3, #0
 8008226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800822e:	78fa      	ldrb	r2, [r7, #3]
 8008230:	4611      	mov	r1, r2
 8008232:	4618      	mov	r0, r3
 8008234:	f7f9 fa84 	bl	8001740 <HAL_HCD_HC_Halt>
 8008238:	4603      	mov	r3, r0
 800823a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800823c:	7bfb      	ldrb	r3, [r7, #15]
 800823e:	4618      	mov	r0, r3
 8008240:	f000 f89e 	bl	8008380 <USBH_Get_USB_Status>
 8008244:	4603      	mov	r3, r0
 8008246:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008248:	7bbb      	ldrb	r3, [r7, #14]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008252:	b590      	push	{r4, r7, lr}
 8008254:	b089      	sub	sp, #36	; 0x24
 8008256:	af04      	add	r7, sp, #16
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	4608      	mov	r0, r1
 800825c:	4611      	mov	r1, r2
 800825e:	461a      	mov	r2, r3
 8008260:	4603      	mov	r3, r0
 8008262:	70fb      	strb	r3, [r7, #3]
 8008264:	460b      	mov	r3, r1
 8008266:	70bb      	strb	r3, [r7, #2]
 8008268:	4613      	mov	r3, r2
 800826a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800827a:	787c      	ldrb	r4, [r7, #1]
 800827c:	78ba      	ldrb	r2, [r7, #2]
 800827e:	78f9      	ldrb	r1, [r7, #3]
 8008280:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008284:	9303      	str	r3, [sp, #12]
 8008286:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008288:	9302      	str	r3, [sp, #8]
 800828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828c:	9301      	str	r3, [sp, #4]
 800828e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	4623      	mov	r3, r4
 8008296:	f7f9 fa77 	bl	8001788 <HAL_HCD_HC_SubmitRequest>
 800829a:	4603      	mov	r3, r0
 800829c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 f86d 	bl	8008380 <USBH_Get_USB_Status>
 80082a6:	4603      	mov	r3, r0
 80082a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd90      	pop	{r4, r7, pc}

080082b4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082c6:	78fa      	ldrb	r2, [r7, #3]
 80082c8:	4611      	mov	r1, r2
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7f9 fd0b 	bl	8001ce6 <HAL_HCD_HC_GetURBState>
 80082d0:	4603      	mov	r3, r0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b082      	sub	sp, #8
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	460b      	mov	r3, r1
 80082e4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d103      	bne.n	80082f8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80082f0:	78fb      	ldrb	r3, [r7, #3]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 f870 	bl	80083d8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80082f8:	20c8      	movs	r0, #200	; 0xc8
 80082fa:	f7f8 fe45 	bl	8000f88 <HAL_Delay>
  return USBH_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	70fb      	strb	r3, [r7, #3]
 8008314:	4613      	mov	r3, r2
 8008316:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800831e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008320:	78fb      	ldrb	r3, [r7, #3]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	212c      	movs	r1, #44	; 0x2c
 8008326:	fb01 f303 	mul.w	r3, r1, r3
 800832a:	4413      	add	r3, r2
 800832c:	333b      	adds	r3, #59	; 0x3b
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d009      	beq.n	8008348 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008334:	78fb      	ldrb	r3, [r7, #3]
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	212c      	movs	r1, #44	; 0x2c
 800833a:	fb01 f303 	mul.w	r3, r1, r3
 800833e:	4413      	add	r3, r2
 8008340:	3354      	adds	r3, #84	; 0x54
 8008342:	78ba      	ldrb	r2, [r7, #2]
 8008344:	701a      	strb	r2, [r3, #0]
 8008346:	e008      	b.n	800835a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008348:	78fb      	ldrb	r3, [r7, #3]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	212c      	movs	r1, #44	; 0x2c
 800834e:	fb01 f303 	mul.w	r3, r1, r3
 8008352:	4413      	add	r3, r2
 8008354:	3355      	adds	r3, #85	; 0x55
 8008356:	78ba      	ldrb	r2, [r7, #2]
 8008358:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3714      	adds	r7, #20
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f7f8 fe09 	bl	8000f88 <HAL_Delay>
}
 8008376:	bf00      	nop
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
	...

08008380 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	4603      	mov	r3, r0
 8008388:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800838e:	79fb      	ldrb	r3, [r7, #7]
 8008390:	2b03      	cmp	r3, #3
 8008392:	d817      	bhi.n	80083c4 <USBH_Get_USB_Status+0x44>
 8008394:	a201      	add	r2, pc, #4	; (adr r2, 800839c <USBH_Get_USB_Status+0x1c>)
 8008396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839a:	bf00      	nop
 800839c:	080083ad 	.word	0x080083ad
 80083a0:	080083b3 	.word	0x080083b3
 80083a4:	080083b9 	.word	0x080083b9
 80083a8:	080083bf 	.word	0x080083bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	73fb      	strb	r3, [r7, #15]
    break;
 80083b0:	e00b      	b.n	80083ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80083b2:	2302      	movs	r3, #2
 80083b4:	73fb      	strb	r3, [r7, #15]
    break;
 80083b6:	e008      	b.n	80083ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80083b8:	2301      	movs	r3, #1
 80083ba:	73fb      	strb	r3, [r7, #15]
    break;
 80083bc:	e005      	b.n	80083ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80083be:	2302      	movs	r3, #2
 80083c0:	73fb      	strb	r3, [r7, #15]
    break;
 80083c2:	e002      	b.n	80083ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80083c4:	2302      	movs	r3, #2
 80083c6:	73fb      	strb	r3, [r7, #15]
    break;
 80083c8:	bf00      	nop
  }
  return usb_status;
 80083ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	4603      	mov	r3, r0
 80083e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80083e2:	79fb      	ldrb	r3, [r7, #7]
 80083e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80083e6:	79fb      	ldrb	r3, [r7, #7]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d102      	bne.n	80083f2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80083ec:	2300      	movs	r3, #0
 80083ee:	73fb      	strb	r3, [r7, #15]
 80083f0:	e001      	b.n	80083f6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80083f2:	2301      	movs	r3, #1
 80083f4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	461a      	mov	r2, r3
 80083fa:	2101      	movs	r1, #1
 80083fc:	4803      	ldr	r0, [pc, #12]	; (800840c <MX_DriverVbusFS+0x34>)
 80083fe:	f7f9 f895 	bl	800152c <HAL_GPIO_WritePin>
}
 8008402:	bf00      	nop
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	40020800 	.word	0x40020800

08008410 <__errno>:
 8008410:	4b01      	ldr	r3, [pc, #4]	; (8008418 <__errno+0x8>)
 8008412:	6818      	ldr	r0, [r3, #0]
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	2000002c 	.word	0x2000002c

0800841c <__libc_init_array>:
 800841c:	b570      	push	{r4, r5, r6, lr}
 800841e:	4d0d      	ldr	r5, [pc, #52]	; (8008454 <__libc_init_array+0x38>)
 8008420:	4c0d      	ldr	r4, [pc, #52]	; (8008458 <__libc_init_array+0x3c>)
 8008422:	1b64      	subs	r4, r4, r5
 8008424:	10a4      	asrs	r4, r4, #2
 8008426:	2600      	movs	r6, #0
 8008428:	42a6      	cmp	r6, r4
 800842a:	d109      	bne.n	8008440 <__libc_init_array+0x24>
 800842c:	4d0b      	ldr	r5, [pc, #44]	; (800845c <__libc_init_array+0x40>)
 800842e:	4c0c      	ldr	r4, [pc, #48]	; (8008460 <__libc_init_array+0x44>)
 8008430:	f000 f92e 	bl	8008690 <_init>
 8008434:	1b64      	subs	r4, r4, r5
 8008436:	10a4      	asrs	r4, r4, #2
 8008438:	2600      	movs	r6, #0
 800843a:	42a6      	cmp	r6, r4
 800843c:	d105      	bne.n	800844a <__libc_init_array+0x2e>
 800843e:	bd70      	pop	{r4, r5, r6, pc}
 8008440:	f855 3b04 	ldr.w	r3, [r5], #4
 8008444:	4798      	blx	r3
 8008446:	3601      	adds	r6, #1
 8008448:	e7ee      	b.n	8008428 <__libc_init_array+0xc>
 800844a:	f855 3b04 	ldr.w	r3, [r5], #4
 800844e:	4798      	blx	r3
 8008450:	3601      	adds	r6, #1
 8008452:	e7f2      	b.n	800843a <__libc_init_array+0x1e>
 8008454:	080086cc 	.word	0x080086cc
 8008458:	080086cc 	.word	0x080086cc
 800845c:	080086cc 	.word	0x080086cc
 8008460:	080086d0 	.word	0x080086d0

08008464 <malloc>:
 8008464:	4b02      	ldr	r3, [pc, #8]	; (8008470 <malloc+0xc>)
 8008466:	4601      	mov	r1, r0
 8008468:	6818      	ldr	r0, [r3, #0]
 800846a:	f000 b87f 	b.w	800856c <_malloc_r>
 800846e:	bf00      	nop
 8008470:	2000002c 	.word	0x2000002c

08008474 <free>:
 8008474:	4b02      	ldr	r3, [pc, #8]	; (8008480 <free+0xc>)
 8008476:	4601      	mov	r1, r0
 8008478:	6818      	ldr	r0, [r3, #0]
 800847a:	f000 b80b 	b.w	8008494 <_free_r>
 800847e:	bf00      	nop
 8008480:	2000002c 	.word	0x2000002c

08008484 <memset>:
 8008484:	4402      	add	r2, r0
 8008486:	4603      	mov	r3, r0
 8008488:	4293      	cmp	r3, r2
 800848a:	d100      	bne.n	800848e <memset+0xa>
 800848c:	4770      	bx	lr
 800848e:	f803 1b01 	strb.w	r1, [r3], #1
 8008492:	e7f9      	b.n	8008488 <memset+0x4>

08008494 <_free_r>:
 8008494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008496:	2900      	cmp	r1, #0
 8008498:	d044      	beq.n	8008524 <_free_r+0x90>
 800849a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800849e:	9001      	str	r0, [sp, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f1a1 0404 	sub.w	r4, r1, #4
 80084a6:	bfb8      	it	lt
 80084a8:	18e4      	addlt	r4, r4, r3
 80084aa:	f000 f8e3 	bl	8008674 <__malloc_lock>
 80084ae:	4a1e      	ldr	r2, [pc, #120]	; (8008528 <_free_r+0x94>)
 80084b0:	9801      	ldr	r0, [sp, #4]
 80084b2:	6813      	ldr	r3, [r2, #0]
 80084b4:	b933      	cbnz	r3, 80084c4 <_free_r+0x30>
 80084b6:	6063      	str	r3, [r4, #4]
 80084b8:	6014      	str	r4, [r2, #0]
 80084ba:	b003      	add	sp, #12
 80084bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084c0:	f000 b8de 	b.w	8008680 <__malloc_unlock>
 80084c4:	42a3      	cmp	r3, r4
 80084c6:	d908      	bls.n	80084da <_free_r+0x46>
 80084c8:	6825      	ldr	r5, [r4, #0]
 80084ca:	1961      	adds	r1, r4, r5
 80084cc:	428b      	cmp	r3, r1
 80084ce:	bf01      	itttt	eq
 80084d0:	6819      	ldreq	r1, [r3, #0]
 80084d2:	685b      	ldreq	r3, [r3, #4]
 80084d4:	1949      	addeq	r1, r1, r5
 80084d6:	6021      	streq	r1, [r4, #0]
 80084d8:	e7ed      	b.n	80084b6 <_free_r+0x22>
 80084da:	461a      	mov	r2, r3
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	b10b      	cbz	r3, 80084e4 <_free_r+0x50>
 80084e0:	42a3      	cmp	r3, r4
 80084e2:	d9fa      	bls.n	80084da <_free_r+0x46>
 80084e4:	6811      	ldr	r1, [r2, #0]
 80084e6:	1855      	adds	r5, r2, r1
 80084e8:	42a5      	cmp	r5, r4
 80084ea:	d10b      	bne.n	8008504 <_free_r+0x70>
 80084ec:	6824      	ldr	r4, [r4, #0]
 80084ee:	4421      	add	r1, r4
 80084f0:	1854      	adds	r4, r2, r1
 80084f2:	42a3      	cmp	r3, r4
 80084f4:	6011      	str	r1, [r2, #0]
 80084f6:	d1e0      	bne.n	80084ba <_free_r+0x26>
 80084f8:	681c      	ldr	r4, [r3, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	6053      	str	r3, [r2, #4]
 80084fe:	4421      	add	r1, r4
 8008500:	6011      	str	r1, [r2, #0]
 8008502:	e7da      	b.n	80084ba <_free_r+0x26>
 8008504:	d902      	bls.n	800850c <_free_r+0x78>
 8008506:	230c      	movs	r3, #12
 8008508:	6003      	str	r3, [r0, #0]
 800850a:	e7d6      	b.n	80084ba <_free_r+0x26>
 800850c:	6825      	ldr	r5, [r4, #0]
 800850e:	1961      	adds	r1, r4, r5
 8008510:	428b      	cmp	r3, r1
 8008512:	bf04      	itt	eq
 8008514:	6819      	ldreq	r1, [r3, #0]
 8008516:	685b      	ldreq	r3, [r3, #4]
 8008518:	6063      	str	r3, [r4, #4]
 800851a:	bf04      	itt	eq
 800851c:	1949      	addeq	r1, r1, r5
 800851e:	6021      	streq	r1, [r4, #0]
 8008520:	6054      	str	r4, [r2, #4]
 8008522:	e7ca      	b.n	80084ba <_free_r+0x26>
 8008524:	b003      	add	sp, #12
 8008526:	bd30      	pop	{r4, r5, pc}
 8008528:	200008d8 	.word	0x200008d8

0800852c <sbrk_aligned>:
 800852c:	b570      	push	{r4, r5, r6, lr}
 800852e:	4e0e      	ldr	r6, [pc, #56]	; (8008568 <sbrk_aligned+0x3c>)
 8008530:	460c      	mov	r4, r1
 8008532:	6831      	ldr	r1, [r6, #0]
 8008534:	4605      	mov	r5, r0
 8008536:	b911      	cbnz	r1, 800853e <sbrk_aligned+0x12>
 8008538:	f000 f88c 	bl	8008654 <_sbrk_r>
 800853c:	6030      	str	r0, [r6, #0]
 800853e:	4621      	mov	r1, r4
 8008540:	4628      	mov	r0, r5
 8008542:	f000 f887 	bl	8008654 <_sbrk_r>
 8008546:	1c43      	adds	r3, r0, #1
 8008548:	d00a      	beq.n	8008560 <sbrk_aligned+0x34>
 800854a:	1cc4      	adds	r4, r0, #3
 800854c:	f024 0403 	bic.w	r4, r4, #3
 8008550:	42a0      	cmp	r0, r4
 8008552:	d007      	beq.n	8008564 <sbrk_aligned+0x38>
 8008554:	1a21      	subs	r1, r4, r0
 8008556:	4628      	mov	r0, r5
 8008558:	f000 f87c 	bl	8008654 <_sbrk_r>
 800855c:	3001      	adds	r0, #1
 800855e:	d101      	bne.n	8008564 <sbrk_aligned+0x38>
 8008560:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008564:	4620      	mov	r0, r4
 8008566:	bd70      	pop	{r4, r5, r6, pc}
 8008568:	200008dc 	.word	0x200008dc

0800856c <_malloc_r>:
 800856c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008570:	1ccd      	adds	r5, r1, #3
 8008572:	f025 0503 	bic.w	r5, r5, #3
 8008576:	3508      	adds	r5, #8
 8008578:	2d0c      	cmp	r5, #12
 800857a:	bf38      	it	cc
 800857c:	250c      	movcc	r5, #12
 800857e:	2d00      	cmp	r5, #0
 8008580:	4607      	mov	r7, r0
 8008582:	db01      	blt.n	8008588 <_malloc_r+0x1c>
 8008584:	42a9      	cmp	r1, r5
 8008586:	d905      	bls.n	8008594 <_malloc_r+0x28>
 8008588:	230c      	movs	r3, #12
 800858a:	603b      	str	r3, [r7, #0]
 800858c:	2600      	movs	r6, #0
 800858e:	4630      	mov	r0, r6
 8008590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008594:	4e2e      	ldr	r6, [pc, #184]	; (8008650 <_malloc_r+0xe4>)
 8008596:	f000 f86d 	bl	8008674 <__malloc_lock>
 800859a:	6833      	ldr	r3, [r6, #0]
 800859c:	461c      	mov	r4, r3
 800859e:	bb34      	cbnz	r4, 80085ee <_malloc_r+0x82>
 80085a0:	4629      	mov	r1, r5
 80085a2:	4638      	mov	r0, r7
 80085a4:	f7ff ffc2 	bl	800852c <sbrk_aligned>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	4604      	mov	r4, r0
 80085ac:	d14d      	bne.n	800864a <_malloc_r+0xde>
 80085ae:	6834      	ldr	r4, [r6, #0]
 80085b0:	4626      	mov	r6, r4
 80085b2:	2e00      	cmp	r6, #0
 80085b4:	d140      	bne.n	8008638 <_malloc_r+0xcc>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	4631      	mov	r1, r6
 80085ba:	4638      	mov	r0, r7
 80085bc:	eb04 0803 	add.w	r8, r4, r3
 80085c0:	f000 f848 	bl	8008654 <_sbrk_r>
 80085c4:	4580      	cmp	r8, r0
 80085c6:	d13a      	bne.n	800863e <_malloc_r+0xd2>
 80085c8:	6821      	ldr	r1, [r4, #0]
 80085ca:	3503      	adds	r5, #3
 80085cc:	1a6d      	subs	r5, r5, r1
 80085ce:	f025 0503 	bic.w	r5, r5, #3
 80085d2:	3508      	adds	r5, #8
 80085d4:	2d0c      	cmp	r5, #12
 80085d6:	bf38      	it	cc
 80085d8:	250c      	movcc	r5, #12
 80085da:	4629      	mov	r1, r5
 80085dc:	4638      	mov	r0, r7
 80085de:	f7ff ffa5 	bl	800852c <sbrk_aligned>
 80085e2:	3001      	adds	r0, #1
 80085e4:	d02b      	beq.n	800863e <_malloc_r+0xd2>
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	442b      	add	r3, r5
 80085ea:	6023      	str	r3, [r4, #0]
 80085ec:	e00e      	b.n	800860c <_malloc_r+0xa0>
 80085ee:	6822      	ldr	r2, [r4, #0]
 80085f0:	1b52      	subs	r2, r2, r5
 80085f2:	d41e      	bmi.n	8008632 <_malloc_r+0xc6>
 80085f4:	2a0b      	cmp	r2, #11
 80085f6:	d916      	bls.n	8008626 <_malloc_r+0xba>
 80085f8:	1961      	adds	r1, r4, r5
 80085fa:	42a3      	cmp	r3, r4
 80085fc:	6025      	str	r5, [r4, #0]
 80085fe:	bf18      	it	ne
 8008600:	6059      	strne	r1, [r3, #4]
 8008602:	6863      	ldr	r3, [r4, #4]
 8008604:	bf08      	it	eq
 8008606:	6031      	streq	r1, [r6, #0]
 8008608:	5162      	str	r2, [r4, r5]
 800860a:	604b      	str	r3, [r1, #4]
 800860c:	4638      	mov	r0, r7
 800860e:	f104 060b 	add.w	r6, r4, #11
 8008612:	f000 f835 	bl	8008680 <__malloc_unlock>
 8008616:	f026 0607 	bic.w	r6, r6, #7
 800861a:	1d23      	adds	r3, r4, #4
 800861c:	1af2      	subs	r2, r6, r3
 800861e:	d0b6      	beq.n	800858e <_malloc_r+0x22>
 8008620:	1b9b      	subs	r3, r3, r6
 8008622:	50a3      	str	r3, [r4, r2]
 8008624:	e7b3      	b.n	800858e <_malloc_r+0x22>
 8008626:	6862      	ldr	r2, [r4, #4]
 8008628:	42a3      	cmp	r3, r4
 800862a:	bf0c      	ite	eq
 800862c:	6032      	streq	r2, [r6, #0]
 800862e:	605a      	strne	r2, [r3, #4]
 8008630:	e7ec      	b.n	800860c <_malloc_r+0xa0>
 8008632:	4623      	mov	r3, r4
 8008634:	6864      	ldr	r4, [r4, #4]
 8008636:	e7b2      	b.n	800859e <_malloc_r+0x32>
 8008638:	4634      	mov	r4, r6
 800863a:	6876      	ldr	r6, [r6, #4]
 800863c:	e7b9      	b.n	80085b2 <_malloc_r+0x46>
 800863e:	230c      	movs	r3, #12
 8008640:	603b      	str	r3, [r7, #0]
 8008642:	4638      	mov	r0, r7
 8008644:	f000 f81c 	bl	8008680 <__malloc_unlock>
 8008648:	e7a1      	b.n	800858e <_malloc_r+0x22>
 800864a:	6025      	str	r5, [r4, #0]
 800864c:	e7de      	b.n	800860c <_malloc_r+0xa0>
 800864e:	bf00      	nop
 8008650:	200008d8 	.word	0x200008d8

08008654 <_sbrk_r>:
 8008654:	b538      	push	{r3, r4, r5, lr}
 8008656:	4d06      	ldr	r5, [pc, #24]	; (8008670 <_sbrk_r+0x1c>)
 8008658:	2300      	movs	r3, #0
 800865a:	4604      	mov	r4, r0
 800865c:	4608      	mov	r0, r1
 800865e:	602b      	str	r3, [r5, #0]
 8008660:	f7f8 fbae 	bl	8000dc0 <_sbrk>
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	d102      	bne.n	800866e <_sbrk_r+0x1a>
 8008668:	682b      	ldr	r3, [r5, #0]
 800866a:	b103      	cbz	r3, 800866e <_sbrk_r+0x1a>
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	bd38      	pop	{r3, r4, r5, pc}
 8008670:	200008e0 	.word	0x200008e0

08008674 <__malloc_lock>:
 8008674:	4801      	ldr	r0, [pc, #4]	; (800867c <__malloc_lock+0x8>)
 8008676:	f000 b809 	b.w	800868c <__retarget_lock_acquire_recursive>
 800867a:	bf00      	nop
 800867c:	200008e4 	.word	0x200008e4

08008680 <__malloc_unlock>:
 8008680:	4801      	ldr	r0, [pc, #4]	; (8008688 <__malloc_unlock+0x8>)
 8008682:	f000 b804 	b.w	800868e <__retarget_lock_release_recursive>
 8008686:	bf00      	nop
 8008688:	200008e4 	.word	0x200008e4

0800868c <__retarget_lock_acquire_recursive>:
 800868c:	4770      	bx	lr

0800868e <__retarget_lock_release_recursive>:
 800868e:	4770      	bx	lr

08008690 <_init>:
 8008690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008692:	bf00      	nop
 8008694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008696:	bc08      	pop	{r3}
 8008698:	469e      	mov	lr, r3
 800869a:	4770      	bx	lr

0800869c <_fini>:
 800869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869e:	bf00      	nop
 80086a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086a2:	bc08      	pop	{r3}
 80086a4:	469e      	mov	lr, r3
 80086a6:	4770      	bx	lr
