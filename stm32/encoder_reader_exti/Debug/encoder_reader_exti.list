
encoder_reader_exti.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c98  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008e20  08008e20  00018e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e3c  08008e3c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08008e3c  08008e3c  00018e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e44  08008e44  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e44  08008e44  00018e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e48  08008e48  00018e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08008e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000008a0  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000934  20000934  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ae7e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c79  00000000  00000000  0003af42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  0003ebc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014f8  00000000  00000000  00040248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245cd  00000000  00000000  00041740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c48a  00000000  00000000  00065d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3c03  00000000  00000000  00082197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155d9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061d0  00000000  00000000  00155dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008e08 	.word	0x08008e08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	08008e08 	.word	0x08008e08

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fdce 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f812 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f9d2 	bl	8000880 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f878 	bl	80005d0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8a4 	bl	800062c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8d2 	bl	800068c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f008 f846 	bl	8008578 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80004ec:	f000 f904 	bl	80006f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004f0:	f000 f978 	bl	80007e4 <MX_TIM3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f4:	f008 f866 	bl	80085c4 <MX_USB_HOST_Process>
 80004f8:	e7fc      	b.n	80004f4 <main+0x28>
	...

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	; 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2230      	movs	r2, #48	; 0x30
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f008 fb76 	bl	8008bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <SystemClock_Config+0xcc>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	4a27      	ldr	r2, [pc, #156]	; (80005c8 <SystemClock_Config+0xcc>)
 800052a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052e:	6413      	str	r3, [r2, #64]	; 0x40
 8000530:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	4b22      	ldr	r3, [pc, #136]	; (80005cc <SystemClock_Config+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a21      	ldr	r2, [pc, #132]	; (80005cc <SystemClock_Config+0xd0>)
 8000546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000558:	2301      	movs	r3, #1
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800056c:	2308      	movs	r3, #8
 800056e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000570:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000574:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057a:	2307      	movs	r3, #7
 800057c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	4618      	mov	r0, r3
 8000584:	f003 faf0 	bl	8003b68 <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800058e:	f000 fb05 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000596:	2302      	movs	r3, #2
 8000598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800059e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80005a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	2105      	movs	r1, #5
 80005b0:	4618      	mov	r0, r3
 80005b2:	f003 fd51 	bl	8004058 <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005bc:	f000 faee 	bl	8000b9c <Error_Handler>
  }
}
 80005c0:	bf00      	nop
 80005c2:	3750      	adds	r7, #80	; 0x50
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <MX_I2C1_Init+0x50>)
 80005d6:	4a13      	ldr	r2, [pc, #76]	; (8000624 <MX_I2C1_Init+0x54>)
 80005d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_I2C1_Init+0x50>)
 80005dc:	4a12      	ldr	r2, [pc, #72]	; (8000628 <MX_I2C1_Init+0x58>)
 80005de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MX_I2C1_Init+0x50>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_I2C1_Init+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_I2C1_Init+0x50>)
 80005ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MX_I2C1_Init+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_I2C1_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <MX_I2C1_Init+0x50>)
 800060e:	f002 fcc7 	bl	8002fa0 <HAL_I2C_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000618:	f000 fac0 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200000b0 	.word	0x200000b0
 8000624:	40005400 	.word	0x40005400
 8000628:	000186a0 	.word	0x000186a0

0800062c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <MX_I2S3_Init+0x54>)
 8000632:	4a14      	ldr	r2, [pc, #80]	; (8000684 <MX_I2S3_Init+0x58>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_I2S3_Init+0x54>)
 8000638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800063c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_I2S3_Init+0x54>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_I2S3_Init+0x54>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <MX_I2S3_Init+0x54>)
 800064c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000650:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_I2S3_Init+0x54>)
 8000654:	4a0c      	ldr	r2, [pc, #48]	; (8000688 <MX_I2S3_Init+0x5c>)
 8000656:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_I2S3_Init+0x54>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_I2S3_Init+0x54>)
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_I2S3_Init+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_I2S3_Init+0x54>)
 800066c:	f002 fddc 	bl	8003228 <HAL_I2S_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000676:	f000 fa91 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000104 	.word	0x20000104
 8000684:	40003c00 	.word	0x40003c00
 8000688:	00017700 	.word	0x00017700

0800068c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000690:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_SPI1_Init+0x64>)
 8000692:	4a18      	ldr	r2, [pc, #96]	; (80006f4 <MX_SPI1_Init+0x68>)
 8000694:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_SPI1_Init+0x64>)
 8000698:	f44f 7282 	mov.w	r2, #260	; 0x104
 800069c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006d8:	220a      	movs	r2, #10
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006de:	f004 f807 	bl	80046f0 <HAL_SPI_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006e8:	f000 fa58 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000014c 	.word	0x2000014c
 80006f4:	40013000 	.word	0x40013000

080006f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08e      	sub	sp, #56	; 0x38
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
 8000724:	615a      	str	r2, [r3, #20]
 8000726:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000728:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <MX_TIM2_Init+0xe8>)
 800072a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800072e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000730:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <MX_TIM2_Init+0xe8>)
 8000732:	2253      	movs	r2, #83	; 0x53
 8000734:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000736:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <MX_TIM2_Init+0xe8>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <MX_TIM2_Init+0xe8>)
 800073e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000742:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000744:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <MX_TIM2_Init+0xe8>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800074a:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <MX_TIM2_Init+0xe8>)
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000750:	4823      	ldr	r0, [pc, #140]	; (80007e0 <MX_TIM2_Init+0xe8>)
 8000752:	f004 f856 	bl	8004802 <HAL_TIM_Base_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800075c:	f000 fa1e 	bl	8000b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800076a:	4619      	mov	r1, r3
 800076c:	481c      	ldr	r0, [pc, #112]	; (80007e0 <MX_TIM2_Init+0xe8>)
 800076e:	f004 fabb 	bl	8004ce8 <HAL_TIM_ConfigClockSource>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000778:	f000 fa10 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800077c:	4818      	ldr	r0, [pc, #96]	; (80007e0 <MX_TIM2_Init+0xe8>)
 800077e:	f004 f88f 	bl	80048a0 <HAL_TIM_PWM_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000788:	f000 fa08 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	4619      	mov	r1, r3
 800079a:	4811      	ldr	r0, [pc, #68]	; (80007e0 <MX_TIM2_Init+0xe8>)
 800079c:	f004 fe88 	bl	80054b0 <HAL_TIMEx_MasterConfigSynchronization>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007a6:	f000 f9f9 	bl	8000b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007aa:	2360      	movs	r3, #96	; 0x60
 80007ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	4807      	ldr	r0, [pc, #28]	; (80007e0 <MX_TIM2_Init+0xe8>)
 80007c2:	f004 f9cf 	bl	8004b64 <HAL_TIM_PWM_ConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007cc:	f000 f9e6 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007d0:	4803      	ldr	r0, [pc, #12]	; (80007e0 <MX_TIM2_Init+0xe8>)
 80007d2:	f000 fb5d 	bl	8000e90 <HAL_TIM_MspPostInit>

}
 80007d6:	bf00      	nop
 80007d8:	3738      	adds	r7, #56	; 0x38
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200001a4 	.word	0x200001a4

080007e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ea:	f107 0308 	add.w	r3, r7, #8
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f8:	463b      	mov	r3, r7
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <MX_TIM3_Init+0x94>)
 8000802:	4a1e      	ldr	r2, [pc, #120]	; (800087c <MX_TIM3_Init+0x98>)
 8000804:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (84*100)-1;
 8000806:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <MX_TIM3_Init+0x94>)
 8000808:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800080c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_TIM3_Init+0x94>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_TIM3_Init+0x94>)
 8000816:	f240 32e7 	movw	r2, #999	; 0x3e7
 800081a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <MX_TIM3_Init+0x94>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_TIM3_Init+0x94>)
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000828:	4813      	ldr	r0, [pc, #76]	; (8000878 <MX_TIM3_Init+0x94>)
 800082a:	f003 ffea 	bl	8004802 <HAL_TIM_Base_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000834:	f000 f9b2 	bl	8000b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	4619      	mov	r1, r3
 8000844:	480c      	ldr	r0, [pc, #48]	; (8000878 <MX_TIM3_Init+0x94>)
 8000846:	f004 fa4f 	bl	8004ce8 <HAL_TIM_ConfigClockSource>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000850:	f000 f9a4 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000854:	2300      	movs	r3, #0
 8000856:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	4619      	mov	r1, r3
 8000860:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_TIM3_Init+0x94>)
 8000862:	f004 fe25 	bl	80054b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800086c:	f000 f996 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200001ec 	.word	0x200001ec
 800087c:	40000400 	.word	0x40000400

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08c      	sub	sp, #48	; 0x30
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
 800089a:	4b8a      	ldr	r3, [pc, #552]	; (8000ac4 <MX_GPIO_Init+0x244>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a89      	ldr	r2, [pc, #548]	; (8000ac4 <MX_GPIO_Init+0x244>)
 80008a0:	f043 0310 	orr.w	r3, r3, #16
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b87      	ldr	r3, [pc, #540]	; (8000ac4 <MX_GPIO_Init+0x244>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0310 	and.w	r3, r3, #16
 80008ae:	61bb      	str	r3, [r7, #24]
 80008b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	4b83      	ldr	r3, [pc, #524]	; (8000ac4 <MX_GPIO_Init+0x244>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a82      	ldr	r2, [pc, #520]	; (8000ac4 <MX_GPIO_Init+0x244>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b80      	ldr	r3, [pc, #512]	; (8000ac4 <MX_GPIO_Init+0x244>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b7c      	ldr	r3, [pc, #496]	; (8000ac4 <MX_GPIO_Init+0x244>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a7b      	ldr	r2, [pc, #492]	; (8000ac4 <MX_GPIO_Init+0x244>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b79      	ldr	r3, [pc, #484]	; (8000ac4 <MX_GPIO_Init+0x244>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b75      	ldr	r3, [pc, #468]	; (8000ac4 <MX_GPIO_Init+0x244>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a74      	ldr	r2, [pc, #464]	; (8000ac4 <MX_GPIO_Init+0x244>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b72      	ldr	r3, [pc, #456]	; (8000ac4 <MX_GPIO_Init+0x244>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	4b6e      	ldr	r3, [pc, #440]	; (8000ac4 <MX_GPIO_Init+0x244>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a6d      	ldr	r2, [pc, #436]	; (8000ac4 <MX_GPIO_Init+0x244>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b6b      	ldr	r3, [pc, #428]	; (8000ac4 <MX_GPIO_Init+0x244>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b67      	ldr	r3, [pc, #412]	; (8000ac4 <MX_GPIO_Init+0x244>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a66      	ldr	r2, [pc, #408]	; (8000ac4 <MX_GPIO_Init+0x244>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b64      	ldr	r3, [pc, #400]	; (8000ac4 <MX_GPIO_Init+0x244>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2138      	movs	r1, #56	; 0x38
 8000942:	4861      	ldr	r0, [pc, #388]	; (8000ac8 <MX_GPIO_Init+0x248>)
 8000944:	f000 fef0 	bl	8001728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2101      	movs	r1, #1
 800094c:	485f      	ldr	r0, [pc, #380]	; (8000acc <MX_GPIO_Init+0x24c>)
 800094e:	f000 feeb 	bl	8001728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000952:	2200      	movs	r2, #0
 8000954:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000958:	485d      	ldr	r0, [pc, #372]	; (8000ad0 <MX_GPIO_Init+0x250>)
 800095a:	f000 fee5 	bl	8001728 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800095e:	2308      	movs	r3, #8
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4854      	ldr	r0, [pc, #336]	; (8000ac8 <MX_GPIO_Init+0x248>)
 8000976:	f000 fd23 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800097a:	2330      	movs	r3, #48	; 0x30
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000982:	2302      	movs	r3, #2
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	484d      	ldr	r0, [pc, #308]	; (8000ac8 <MX_GPIO_Init+0x248>)
 8000992:	f000 fd15 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000996:	2301      	movs	r3, #1
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4847      	ldr	r0, [pc, #284]	; (8000acc <MX_GPIO_Init+0x24c>)
 80009ae:	f000 fd07 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009b2:	2308      	movs	r3, #8
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009c2:	2305      	movs	r3, #5
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	483f      	ldr	r0, [pc, #252]	; (8000acc <MX_GPIO_Init+0x24c>)
 80009ce:	f000 fcf7 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	483b      	ldr	r0, [pc, #236]	; (8000ad4 <MX_GPIO_Init+0x254>)
 80009e8:	f000 fcea 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009ec:	2304      	movs	r3, #4
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4836      	ldr	r0, [pc, #216]	; (8000ad8 <MX_GPIO_Init+0x258>)
 8000a00:	f000 fcde 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a16:	2305      	movs	r3, #5
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	482d      	ldr	r0, [pc, #180]	; (8000ad8 <MX_GPIO_Init+0x258>)
 8000a22:	f000 fccd 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a32:	2302      	movs	r3, #2
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4826      	ldr	r0, [pc, #152]	; (8000ad8 <MX_GPIO_Init+0x258>)
 8000a3e:	f000 fcbf 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	4820      	ldr	r0, [pc, #128]	; (8000ad8 <MX_GPIO_Init+0x258>)
 8000a58:	f000 fcb2 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a5c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a60:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4816      	ldr	r0, [pc, #88]	; (8000ad0 <MX_GPIO_Init+0x250>)
 8000a76:	f000 fca3 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a7a:	2320      	movs	r3, #32
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4810      	ldr	r0, [pc, #64]	; (8000ad0 <MX_GPIO_Init+0x250>)
 8000a8e:	f000 fc97 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a96:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4808      	ldr	r0, [pc, #32]	; (8000ac8 <MX_GPIO_Init+0x248>)
 8000aa8:	f000 fc8a 	bl	80013c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2028      	movs	r0, #40	; 0x28
 8000ab2:	f000 fc4e 	bl	8001352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ab6:	2028      	movs	r0, #40	; 0x28
 8000ab8:	f000 fc67 	bl	800138a <HAL_NVIC_EnableIRQ>

}
 8000abc:	bf00      	nop
 8000abe:	3730      	adds	r7, #48	; 0x30
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40020800 	.word	0x40020800
 8000ad0:	40020c00 	.word	0x40020c00
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40020400 	.word	0x40020400

08000adc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == GPIO_PIN_12){
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000aec:	d14b      	bne.n	8000b86 <HAL_GPIO_EXTI_Callback+0xaa>
		//pb12 rising edge
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)){
 8000aee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af2:	4826      	ldr	r0, [pc, #152]	; (8000b8c <HAL_GPIO_EXTI_Callback+0xb0>)
 8000af4:	f000 fe00 	bl	80016f8 <HAL_GPIO_ReadPin>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d013      	beq.n	8000b26 <HAL_GPIO_EXTI_Callback+0x4a>
			//pb13 HIGH and pb12 rising edge
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)){
 8000afe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b02:	4822      	ldr	r0, [pc, #136]	; (8000b8c <HAL_GPIO_EXTI_Callback+0xb0>)
 8000b04:	f000 fdf8 	bl	80016f8 <HAL_GPIO_ReadPin>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d005      	beq.n	8000b1a <HAL_GPIO_EXTI_Callback+0x3e>
				wheel_Step--;
 8000b0e:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	4a1e      	ldr	r2, [pc, #120]	; (8000b90 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	e018      	b.n	8000b4c <HAL_GPIO_EXTI_Callback+0x70>
			}
			//pb13 LOW and pb12 rising edge
			else{
				wheel_Step++;
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	4a1b      	ldr	r2, [pc, #108]	; (8000b90 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	e012      	b.n	8000b4c <HAL_GPIO_EXTI_Callback+0x70>
			}
		}
		//pb12 falling edge
		else{
			//pb13 HIGH and pb12 falling edge
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)){
 8000b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2a:	4818      	ldr	r0, [pc, #96]	; (8000b8c <HAL_GPIO_EXTI_Callback+0xb0>)
 8000b2c:	f000 fde4 	bl	80016f8 <HAL_GPIO_ReadPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d005      	beq.n	8000b42 <HAL_GPIO_EXTI_Callback+0x66>
				wheel_Step++;
 8000b36:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	e004      	b.n	8000b4c <HAL_GPIO_EXTI_Callback+0x70>
			}
			//pb13 LOW and pb12 falling edge
			else{
				wheel_Step--;
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	4a11      	ldr	r2, [pc, #68]	; (8000b90 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000b4a:	6013      	str	r3, [r2, #0]
			}
		}

		if(wheel_Step > step_Per_Round){
 8000b4c:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dd08      	ble.n	8000b6a <HAL_GPIO_EXTI_Callback+0x8e>
			wheel_Step = 0;
 8000b58:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
			wheel_Round++;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	3301      	adds	r3, #1
 8000b64:	4a0c      	ldr	r2, [pc, #48]	; (8000b98 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000b66:	6013      	str	r3, [r2, #0]
		else if(wheel_Step < 0){
			wheel_Step = step_Per_Round;
			wheel_Round--;
		}

		return;
 8000b68:	e00c      	b.n	8000b84 <HAL_GPIO_EXTI_Callback+0xa8>
		else if(wheel_Step < 0){
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	da08      	bge.n	8000b84 <HAL_GPIO_EXTI_Callback+0xa8>
			wheel_Step = step_Per_Round;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000b78:	6013      	str	r3, [r2, #0]
			wheel_Round--;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000b82:	6013      	str	r3, [r2, #0]
		return;
 8000b84:	bf00      	nop
	}
}
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40020400 	.word	0x40020400
 8000b90:	20000234 	.word	0x20000234
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000238 	.word	0x20000238

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <Error_Handler+0x8>
	...

08000ba8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000be6:	2007      	movs	r0, #7
 8000be8:	f000 fba8 	bl	800133c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a19      	ldr	r2, [pc, #100]	; (8000c7c <HAL_I2C_MspInit+0x84>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d12c      	bne.n	8000c74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_I2C_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <HAL_I2C_MspInit+0x88>)
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_I2C_MspInit+0x88>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c36:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c3c:	2312      	movs	r3, #18
 8000c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	480c      	ldr	r0, [pc, #48]	; (8000c84 <HAL_I2C_MspInit+0x8c>)
 8000c54:	f000 fbb4 	bl	80013c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_I2C_MspInit+0x88>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	4a07      	ldr	r2, [pc, #28]	; (8000c80 <HAL_I2C_MspInit+0x88>)
 8000c62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c66:	6413      	str	r3, [r2, #64]	; 0x40
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <HAL_I2C_MspInit+0x88>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c74:	bf00      	nop
 8000c76:	3728      	adds	r7, #40	; 0x28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40005400 	.word	0x40005400
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020400 	.word	0x40020400

08000c88 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08e      	sub	sp, #56	; 0x38
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a31      	ldr	r2, [pc, #196]	; (8000d78 <HAL_I2S_MspInit+0xf0>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d15a      	bne.n	8000d6e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cbc:	23c0      	movs	r3, #192	; 0xc0
 8000cbe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f003 fbd1 	bl	8004470 <HAL_RCCEx_PeriphCLKConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000cd4:	f7ff ff62 	bl	8000b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <HAL_I2S_MspInit+0xf4>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	4a26      	ldr	r2, [pc, #152]	; (8000d7c <HAL_I2S_MspInit+0xf4>)
 8000ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce8:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <HAL_I2S_MspInit+0xf4>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <HAL_I2S_MspInit+0xf4>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	4a1f      	ldr	r2, [pc, #124]	; (8000d7c <HAL_I2S_MspInit+0xf4>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6313      	str	r3, [r2, #48]	; 0x30
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <HAL_I2S_MspInit+0xf4>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <HAL_I2S_MspInit+0xf4>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	4a18      	ldr	r2, [pc, #96]	; (8000d7c <HAL_I2S_MspInit+0xf4>)
 8000d1a:	f043 0304 	orr.w	r3, r3, #4
 8000d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <HAL_I2S_MspInit+0xf4>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d2c:	2310      	movs	r3, #16
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d3c:	2306      	movs	r3, #6
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d44:	4619      	mov	r1, r3
 8000d46:	480e      	ldr	r0, [pc, #56]	; (8000d80 <HAL_I2S_MspInit+0xf8>)
 8000d48:	f000 fb3a 	bl	80013c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d4c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d5e:	2306      	movs	r3, #6
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	4806      	ldr	r0, [pc, #24]	; (8000d84 <HAL_I2S_MspInit+0xfc>)
 8000d6a:	f000 fb29 	bl	80013c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3738      	adds	r7, #56	; 0x38
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40003c00 	.word	0x40003c00
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000
 8000d84:	40020800 	.word	0x40020800

08000d88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <HAL_SPI_MspInit+0x84>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d12b      	bne.n	8000e02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <HAL_SPI_MspInit+0x88>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <HAL_SPI_MspInit+0x88>)
 8000db4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000db8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <HAL_SPI_MspInit+0x88>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <HAL_SPI_MspInit+0x88>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <HAL_SPI_MspInit+0x88>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_SPI_MspInit+0x88>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000de2:	23e0      	movs	r3, #224	; 0xe0
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000df2:	2305      	movs	r3, #5
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <HAL_SPI_MspInit+0x8c>)
 8000dfe:	f000 fadf 	bl	80013c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	3728      	adds	r7, #40	; 0x28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40013000 	.word	0x40013000
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020000 	.word	0x40020000

08000e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e28:	d10e      	bne.n	8000e48 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_TIM_Base_MspInit+0x70>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a15      	ldr	r2, [pc, #84]	; (8000e88 <HAL_TIM_Base_MspInit+0x70>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <HAL_TIM_Base_MspInit+0x70>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e46:	e01a      	b.n	8000e7e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <HAL_TIM_Base_MspInit+0x74>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d115      	bne.n	8000e7e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_TIM_Base_MspInit+0x70>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <HAL_TIM_Base_MspInit+0x70>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_TIM_Base_MspInit+0x70>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	201d      	movs	r0, #29
 8000e74:	f000 fa6d 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e78:	201d      	movs	r0, #29
 8000e7a:	f000 fa86 	bl	800138a <HAL_NVIC_EnableIRQ>
}
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40000400 	.word	0x40000400

08000e90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb0:	d11e      	bne.n	8000ef0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <HAL_TIM_MspPostInit+0x68>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <HAL_TIM_MspPostInit+0x68>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <HAL_TIM_MspPostInit+0x68>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ed2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000edc:	2303      	movs	r3, #3
 8000ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4804      	ldr	r0, [pc, #16]	; (8000efc <HAL_TIM_MspPostInit+0x6c>)
 8000eec:	f000 fa68 	bl	80013c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ef0:	bf00      	nop
 8000ef2:	3720      	adds	r7, #32
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020000 	.word	0x40020000

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <NMI_Handler+0x4>

08000f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <MemManage_Handler+0x4>

08000f12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4c:	f000 f8e2 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <TIM3_IRQHandler+0x10>)
 8000f5a:	f003 fcfa 	bl	8004952 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200001ec 	.word	0x200001ec

08000f68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000f6c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000f70:	f000 fbf4 	bl	800175c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <OTG_FS_IRQHandler+0x10>)
 8000f7e:	f000 fe6f 	bl	8001c60 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000620 	.word	0x20000620

08000f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f94:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <_sbrk+0x5c>)
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <_sbrk+0x60>)
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <_sbrk+0x64>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <_sbrk+0x68>)
 8000fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d207      	bcs.n	8000fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fbc:	f007 fde4 	bl	8008b88 <__errno>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fca:	e009      	b.n	8000fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <_sbrk+0x64>)
 8000fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20020000 	.word	0x20020000
 8000fec:	00000400 	.word	0x00000400
 8000ff0:	2000023c 	.word	0x2000023c
 8000ff4:	20000938 	.word	0x20000938

08000ff8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <SystemInit+0x20>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <SystemInit+0x20>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001054 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001022:	490e      	ldr	r1, [pc, #56]	; (800105c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001024:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001038:	4c0b      	ldr	r4, [pc, #44]	; (8001068 <LoopFillZerobss+0x26>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001046:	f7ff ffd7 	bl	8000ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104a:	f007 fda3 	bl	8008b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104e:	f7ff fa3d 	bl	80004cc <main>
  bx  lr    
 8001052:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001054:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001060:	08008e4c 	.word	0x08008e4c
  ldr r2, =_sbss
 8001064:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001068:	20000934 	.word	0x20000934

0800106c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC_IRQHandler>
	...

08001070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_Init+0x40>)
 800107a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_Init+0x40>)
 8001086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_Init+0x40>)
 8001092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001098:	2003      	movs	r0, #3
 800109a:	f000 f94f 	bl	800133c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109e:	2000      	movs	r0, #0
 80010a0:	f000 f808 	bl	80010b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a4:	f7ff fd80 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023c00 	.word	0x40023c00

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_InitTick+0x54>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_InitTick+0x58>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f967 	bl	80013a6 <HAL_SYSTICK_Config>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e00e      	b.n	8001100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b0f      	cmp	r3, #15
 80010e6:	d80a      	bhi.n	80010fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e8:	2200      	movs	r2, #0
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010f0:	f000 f92f 	bl	8001352 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f4:	4a06      	ldr	r2, [pc, #24]	; (8001110 <HAL_InitTick+0x5c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e000      	b.n	8001100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000004 	.word	0x20000004
 800110c:	2000000c 	.word	0x2000000c
 8001110:	20000008 	.word	0x20000008

08001114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x20>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x24>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_IncTick+0x24>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	2000000c 	.word	0x2000000c
 8001138:	20000240 	.word	0x20000240

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000240 	.word	0x20000240

08001154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff ffee 	bl	800113c <HAL_GetTick>
 8001160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800116c:	d005      	beq.n	800117a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_Delay+0x44>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800117a:	bf00      	nop
 800117c:	f7ff ffde 	bl	800113c <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d8f7      	bhi.n	800117c <HAL_Delay+0x28>
  {
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000000c 	.word	0x2000000c

0800119c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	60d3      	str	r3, [r2, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db0b      	blt.n	800122a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f003 021f 	and.w	r2, r3, #31
 8001218:	4907      	ldr	r1, [pc, #28]	; (8001238 <__NVIC_EnableIRQ+0x38>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	2001      	movs	r0, #1
 8001222:	fa00 f202 	lsl.w	r2, r0, r2
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000e100 	.word	0xe000e100

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0a      	blt.n	8001266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	490c      	ldr	r1, [pc, #48]	; (8001288 <__NVIC_SetPriority+0x4c>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	440b      	add	r3, r1
 8001260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001264:	e00a      	b.n	800127c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4908      	ldr	r1, [pc, #32]	; (800128c <__NVIC_SetPriority+0x50>)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3b04      	subs	r3, #4
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	440b      	add	r3, r1
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf28      	it	cs
 80012ae:	2304      	movcs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d902      	bls.n	80012c0 <NVIC_EncodePriority+0x30>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b03      	subs	r3, #3
 80012be:	e000      	b.n	80012c2 <NVIC_EncodePriority+0x32>
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001308:	d301      	bcc.n	800130e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130a:	2301      	movs	r3, #1
 800130c:	e00f      	b.n	800132e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130e:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <SysTick_Config+0x40>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001316:	210f      	movs	r1, #15
 8001318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800131c:	f7ff ff8e 	bl	800123c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <SysTick_Config+0x40>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001326:	4b04      	ldr	r3, [pc, #16]	; (8001338 <SysTick_Config+0x40>)
 8001328:	2207      	movs	r2, #7
 800132a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	e000e010 	.word	0xe000e010

0800133c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff29 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001364:	f7ff ff3e 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 8001368:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	6978      	ldr	r0, [r7, #20]
 8001370:	f7ff ff8e 	bl	8001290 <NVIC_EncodePriority>
 8001374:	4602      	mov	r2, r0
 8001376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff5d 	bl	800123c <__NVIC_SetPriority>
}
 8001382:	bf00      	nop
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff31 	bl	8001200 <__NVIC_EnableIRQ>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffa2 	bl	80012f8 <SysTick_Config>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	e16b      	b.n	80016b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013dc:	2201      	movs	r2, #1
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	f040 815a 	bne.w	80016ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d005      	beq.n	8001412 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800140e:	2b02      	cmp	r3, #2
 8001410:	d130      	bne.n	8001474 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	68da      	ldr	r2, [r3, #12]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001448:	2201      	movs	r2, #1
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	091b      	lsrs	r3, r3, #4
 800145e:	f003 0201 	and.w	r2, r3, #1
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b03      	cmp	r3, #3
 800147e:	d017      	beq.n	80014b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	2203      	movs	r2, #3
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d123      	bne.n	8001504 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	08da      	lsrs	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3208      	adds	r2, #8
 80014c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	220f      	movs	r2, #15
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	08da      	lsrs	r2, r3, #3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3208      	adds	r2, #8
 80014fe:	69b9      	ldr	r1, [r7, #24]
 8001500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2203      	movs	r2, #3
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0203 	and.w	r2, r3, #3
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 80b4 	beq.w	80016ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b60      	ldr	r3, [pc, #384]	; (80016cc <HAL_GPIO_Init+0x30c>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	4a5f      	ldr	r2, [pc, #380]	; (80016cc <HAL_GPIO_Init+0x30c>)
 8001550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001554:	6453      	str	r3, [r2, #68]	; 0x44
 8001556:	4b5d      	ldr	r3, [pc, #372]	; (80016cc <HAL_GPIO_Init+0x30c>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001562:	4a5b      	ldr	r2, [pc, #364]	; (80016d0 <HAL_GPIO_Init+0x310>)
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	3302      	adds	r3, #2
 800156a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	220f      	movs	r2, #15
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a52      	ldr	r2, [pc, #328]	; (80016d4 <HAL_GPIO_Init+0x314>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d02b      	beq.n	80015e6 <HAL_GPIO_Init+0x226>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a51      	ldr	r2, [pc, #324]	; (80016d8 <HAL_GPIO_Init+0x318>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d025      	beq.n	80015e2 <HAL_GPIO_Init+0x222>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a50      	ldr	r2, [pc, #320]	; (80016dc <HAL_GPIO_Init+0x31c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d01f      	beq.n	80015de <HAL_GPIO_Init+0x21e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4f      	ldr	r2, [pc, #316]	; (80016e0 <HAL_GPIO_Init+0x320>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d019      	beq.n	80015da <HAL_GPIO_Init+0x21a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4e      	ldr	r2, [pc, #312]	; (80016e4 <HAL_GPIO_Init+0x324>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d013      	beq.n	80015d6 <HAL_GPIO_Init+0x216>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4d      	ldr	r2, [pc, #308]	; (80016e8 <HAL_GPIO_Init+0x328>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00d      	beq.n	80015d2 <HAL_GPIO_Init+0x212>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4c      	ldr	r2, [pc, #304]	; (80016ec <HAL_GPIO_Init+0x32c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d007      	beq.n	80015ce <HAL_GPIO_Init+0x20e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a4b      	ldr	r2, [pc, #300]	; (80016f0 <HAL_GPIO_Init+0x330>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_GPIO_Init+0x20a>
 80015c6:	2307      	movs	r3, #7
 80015c8:	e00e      	b.n	80015e8 <HAL_GPIO_Init+0x228>
 80015ca:	2308      	movs	r3, #8
 80015cc:	e00c      	b.n	80015e8 <HAL_GPIO_Init+0x228>
 80015ce:	2306      	movs	r3, #6
 80015d0:	e00a      	b.n	80015e8 <HAL_GPIO_Init+0x228>
 80015d2:	2305      	movs	r3, #5
 80015d4:	e008      	b.n	80015e8 <HAL_GPIO_Init+0x228>
 80015d6:	2304      	movs	r3, #4
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x228>
 80015da:	2303      	movs	r3, #3
 80015dc:	e004      	b.n	80015e8 <HAL_GPIO_Init+0x228>
 80015de:	2302      	movs	r3, #2
 80015e0:	e002      	b.n	80015e8 <HAL_GPIO_Init+0x228>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <HAL_GPIO_Init+0x228>
 80015e6:	2300      	movs	r3, #0
 80015e8:	69fa      	ldr	r2, [r7, #28]
 80015ea:	f002 0203 	and.w	r2, r2, #3
 80015ee:	0092      	lsls	r2, r2, #2
 80015f0:	4093      	lsls	r3, r2
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f8:	4935      	ldr	r1, [pc, #212]	; (80016d0 <HAL_GPIO_Init+0x310>)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	3302      	adds	r3, #2
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001606:	4b3b      	ldr	r3, [pc, #236]	; (80016f4 <HAL_GPIO_Init+0x334>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800162a:	4a32      	ldr	r2, [pc, #200]	; (80016f4 <HAL_GPIO_Init+0x334>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001630:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <HAL_GPIO_Init+0x334>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001654:	4a27      	ldr	r2, [pc, #156]	; (80016f4 <HAL_GPIO_Init+0x334>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800165a:	4b26      	ldr	r3, [pc, #152]	; (80016f4 <HAL_GPIO_Init+0x334>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800167e:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <HAL_GPIO_Init+0x334>)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_GPIO_Init+0x334>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a8:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <HAL_GPIO_Init+0x334>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3301      	adds	r3, #1
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	2b0f      	cmp	r3, #15
 80016b8:	f67f ae90 	bls.w	80013dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3724      	adds	r7, #36	; 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40013800 	.word	0x40013800
 80016d4:	40020000 	.word	0x40020000
 80016d8:	40020400 	.word	0x40020400
 80016dc:	40020800 	.word	0x40020800
 80016e0:	40020c00 	.word	0x40020c00
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40021400 	.word	0x40021400
 80016ec:	40021800 	.word	0x40021800
 80016f0:	40021c00 	.word	0x40021c00
 80016f4:	40013c00 	.word	0x40013c00

080016f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691a      	ldr	r2, [r3, #16]
 8001708:	887b      	ldrh	r3, [r7, #2]
 800170a:	4013      	ands	r3, r2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	e001      	b.n	800171a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	807b      	strh	r3, [r7, #2]
 8001734:	4613      	mov	r3, r2
 8001736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001738:	787b      	ldrb	r3, [r7, #1]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800173e:	887a      	ldrh	r2, [r7, #2]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001744:	e003      	b.n	800174e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001746:	887b      	ldrh	r3, [r7, #2]
 8001748:	041a      	lsls	r2, r3, #16
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	619a      	str	r2, [r3, #24]
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001766:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001768:	695a      	ldr	r2, [r3, #20]
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	4013      	ands	r3, r2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d006      	beq.n	8001780 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff f9ae 	bl	8000adc <HAL_GPIO_EXTI_Callback>
  }
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40013c00 	.word	0x40013c00

0800178c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800178c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178e:	b08f      	sub	sp, #60	; 0x3c
 8001790:	af0a      	add	r7, sp, #40	; 0x28
 8001792:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e054      	b.n	8001848 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d106      	bne.n	80017be <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f006 ff3b 	bl	8008634 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2203      	movs	r2, #3
 80017c2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d102      	bne.n	80017d8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f003 ff69 	bl	80056b4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	687e      	ldr	r6, [r7, #4]
 80017ea:	466d      	mov	r5, sp
 80017ec:	f106 0410 	add.w	r4, r6, #16
 80017f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001800:	1d33      	adds	r3, r6, #4
 8001802:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001804:	6838      	ldr	r0, [r7, #0]
 8001806:	f003 fee3 	bl	80055d0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2101      	movs	r1, #1
 8001810:	4618      	mov	r0, r3
 8001812:	f003 ff60 	bl	80056d6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	687e      	ldr	r6, [r7, #4]
 800181e:	466d      	mov	r5, sp
 8001820:	f106 0410 	add.w	r4, r6, #16
 8001824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800182a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800182c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001830:	e885 0003 	stmia.w	r5, {r0, r1}
 8001834:	1d33      	adds	r3, r6, #4
 8001836:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001838:	6838      	ldr	r0, [r7, #0]
 800183a:	f004 f8e9 	bl	8005a10 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001850 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af04      	add	r7, sp, #16
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	4608      	mov	r0, r1
 800185a:	4611      	mov	r1, r2
 800185c:	461a      	mov	r2, r3
 800185e:	4603      	mov	r3, r0
 8001860:	70fb      	strb	r3, [r7, #3]
 8001862:	460b      	mov	r3, r1
 8001864:	70bb      	strb	r3, [r7, #2]
 8001866:	4613      	mov	r3, r2
 8001868:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001870:	2b01      	cmp	r3, #1
 8001872:	d101      	bne.n	8001878 <HAL_HCD_HC_Init+0x28>
 8001874:	2302      	movs	r3, #2
 8001876:	e076      	b.n	8001966 <HAL_HCD_HC_Init+0x116>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	212c      	movs	r1, #44	; 0x2c
 8001886:	fb01 f303 	mul.w	r3, r1, r3
 800188a:	4413      	add	r3, r2
 800188c:	333d      	adds	r3, #61	; 0x3d
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	212c      	movs	r1, #44	; 0x2c
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	4413      	add	r3, r2
 800189e:	3338      	adds	r3, #56	; 0x38
 80018a0:	787a      	ldrb	r2, [r7, #1]
 80018a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	212c      	movs	r1, #44	; 0x2c
 80018aa:	fb01 f303 	mul.w	r3, r1, r3
 80018ae:	4413      	add	r3, r2
 80018b0:	3340      	adds	r3, #64	; 0x40
 80018b2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80018b4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	212c      	movs	r1, #44	; 0x2c
 80018bc:	fb01 f303 	mul.w	r3, r1, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	3339      	adds	r3, #57	; 0x39
 80018c4:	78fa      	ldrb	r2, [r7, #3]
 80018c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	212c      	movs	r1, #44	; 0x2c
 80018ce:	fb01 f303 	mul.w	r3, r1, r3
 80018d2:	4413      	add	r3, r2
 80018d4:	333f      	adds	r3, #63	; 0x3f
 80018d6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80018da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	78ba      	ldrb	r2, [r7, #2]
 80018e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018e4:	b2d0      	uxtb	r0, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	212c      	movs	r1, #44	; 0x2c
 80018ea:	fb01 f303 	mul.w	r3, r1, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	333a      	adds	r3, #58	; 0x3a
 80018f2:	4602      	mov	r2, r0
 80018f4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80018f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	da09      	bge.n	8001912 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	212c      	movs	r1, #44	; 0x2c
 8001904:	fb01 f303 	mul.w	r3, r1, r3
 8001908:	4413      	add	r3, r2
 800190a:	333b      	adds	r3, #59	; 0x3b
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
 8001910:	e008      	b.n	8001924 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	212c      	movs	r1, #44	; 0x2c
 8001918:	fb01 f303 	mul.w	r3, r1, r3
 800191c:	4413      	add	r3, r2
 800191e:	333b      	adds	r3, #59	; 0x3b
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	212c      	movs	r1, #44	; 0x2c
 800192a:	fb01 f303 	mul.w	r3, r1, r3
 800192e:	4413      	add	r3, r2
 8001930:	333c      	adds	r3, #60	; 0x3c
 8001932:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001936:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	787c      	ldrb	r4, [r7, #1]
 800193e:	78ba      	ldrb	r2, [r7, #2]
 8001940:	78f9      	ldrb	r1, [r7, #3]
 8001942:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001944:	9302      	str	r3, [sp, #8]
 8001946:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	4623      	mov	r3, r4
 8001954:	f004 f9e2 	bl	8005d1c <USB_HC_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001964:	7bfb      	ldrb	r3, [r7, #15]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	bd90      	pop	{r4, r7, pc}

0800196e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b084      	sub	sp, #16
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	460b      	mov	r3, r1
 8001978:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_HCD_HC_Halt+0x1e>
 8001988:	2302      	movs	r3, #2
 800198a:	e00f      	b.n	80019ac <HAL_HCD_HC_Halt+0x3e>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f004 fc32 	bl	8006206 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	4608      	mov	r0, r1
 80019be:	4611      	mov	r1, r2
 80019c0:	461a      	mov	r2, r3
 80019c2:	4603      	mov	r3, r0
 80019c4:	70fb      	strb	r3, [r7, #3]
 80019c6:	460b      	mov	r3, r1
 80019c8:	70bb      	strb	r3, [r7, #2]
 80019ca:	4613      	mov	r3, r2
 80019cc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	212c      	movs	r1, #44	; 0x2c
 80019d4:	fb01 f303 	mul.w	r3, r1, r3
 80019d8:	4413      	add	r3, r2
 80019da:	333b      	adds	r3, #59	; 0x3b
 80019dc:	78ba      	ldrb	r2, [r7, #2]
 80019de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	212c      	movs	r1, #44	; 0x2c
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	333f      	adds	r3, #63	; 0x3f
 80019ee:	787a      	ldrb	r2, [r7, #1]
 80019f0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80019f2:	7c3b      	ldrb	r3, [r7, #16]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d112      	bne.n	8001a1e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	212c      	movs	r1, #44	; 0x2c
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	3342      	adds	r3, #66	; 0x42
 8001a06:	2203      	movs	r2, #3
 8001a08:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	212c      	movs	r1, #44	; 0x2c
 8001a10:	fb01 f303 	mul.w	r3, r1, r3
 8001a14:	4413      	add	r3, r2
 8001a16:	333d      	adds	r3, #61	; 0x3d
 8001a18:	7f3a      	ldrb	r2, [r7, #28]
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	e008      	b.n	8001a30 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a1e:	78fb      	ldrb	r3, [r7, #3]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	212c      	movs	r1, #44	; 0x2c
 8001a24:	fb01 f303 	mul.w	r3, r1, r3
 8001a28:	4413      	add	r3, r2
 8001a2a:	3342      	adds	r3, #66	; 0x42
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a30:	787b      	ldrb	r3, [r7, #1]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	f200 80c6 	bhi.w	8001bc4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001a38:	a201      	add	r2, pc, #4	; (adr r2, 8001a40 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3e:	bf00      	nop
 8001a40:	08001a51 	.word	0x08001a51
 8001a44:	08001bb1 	.word	0x08001bb1
 8001a48:	08001ab5 	.word	0x08001ab5
 8001a4c:	08001b33 	.word	0x08001b33
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a50:	7c3b      	ldrb	r3, [r7, #16]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	f040 80b8 	bne.w	8001bc8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001a58:	78bb      	ldrb	r3, [r7, #2]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 80b4 	bne.w	8001bc8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001a60:	8b3b      	ldrh	r3, [r7, #24]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d108      	bne.n	8001a78 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	212c      	movs	r1, #44	; 0x2c
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	3355      	adds	r3, #85	; 0x55
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	212c      	movs	r1, #44	; 0x2c
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	3355      	adds	r3, #85	; 0x55
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d109      	bne.n	8001aa0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	212c      	movs	r1, #44	; 0x2c
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	3342      	adds	r3, #66	; 0x42
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a9e:	e093      	b.n	8001bc8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	212c      	movs	r1, #44	; 0x2c
 8001aa6:	fb01 f303 	mul.w	r3, r1, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	3342      	adds	r3, #66	; 0x42
 8001aae:	2202      	movs	r2, #2
 8001ab0:	701a      	strb	r2, [r3, #0]
      break;
 8001ab2:	e089      	b.n	8001bc8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001ab4:	78bb      	ldrb	r3, [r7, #2]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d11d      	bne.n	8001af6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	212c      	movs	r1, #44	; 0x2c
 8001ac0:	fb01 f303 	mul.w	r3, r1, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3355      	adds	r3, #85	; 0x55
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	212c      	movs	r1, #44	; 0x2c
 8001ad4:	fb01 f303 	mul.w	r3, r1, r3
 8001ad8:	4413      	add	r3, r2
 8001ada:	3342      	adds	r3, #66	; 0x42
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ae0:	e073      	b.n	8001bca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	212c      	movs	r1, #44	; 0x2c
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	3342      	adds	r3, #66	; 0x42
 8001af0:	2202      	movs	r2, #2
 8001af2:	701a      	strb	r2, [r3, #0]
      break;
 8001af4:	e069      	b.n	8001bca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	212c      	movs	r1, #44	; 0x2c
 8001afc:	fb01 f303 	mul.w	r3, r1, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	3354      	adds	r3, #84	; 0x54
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	212c      	movs	r1, #44	; 0x2c
 8001b10:	fb01 f303 	mul.w	r3, r1, r3
 8001b14:	4413      	add	r3, r2
 8001b16:	3342      	adds	r3, #66	; 0x42
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
      break;
 8001b1c:	e055      	b.n	8001bca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	212c      	movs	r1, #44	; 0x2c
 8001b24:	fb01 f303 	mul.w	r3, r1, r3
 8001b28:	4413      	add	r3, r2
 8001b2a:	3342      	adds	r3, #66	; 0x42
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	701a      	strb	r2, [r3, #0]
      break;
 8001b30:	e04b      	b.n	8001bca <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b32:	78bb      	ldrb	r3, [r7, #2]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d11d      	bne.n	8001b74 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	212c      	movs	r1, #44	; 0x2c
 8001b3e:	fb01 f303 	mul.w	r3, r1, r3
 8001b42:	4413      	add	r3, r2
 8001b44:	3355      	adds	r3, #85	; 0x55
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	212c      	movs	r1, #44	; 0x2c
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	3342      	adds	r3, #66	; 0x42
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b5e:	e034      	b.n	8001bca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	212c      	movs	r1, #44	; 0x2c
 8001b66:	fb01 f303 	mul.w	r3, r1, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3342      	adds	r3, #66	; 0x42
 8001b6e:	2202      	movs	r2, #2
 8001b70:	701a      	strb	r2, [r3, #0]
      break;
 8001b72:	e02a      	b.n	8001bca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b74:	78fb      	ldrb	r3, [r7, #3]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	212c      	movs	r1, #44	; 0x2c
 8001b7a:	fb01 f303 	mul.w	r3, r1, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	3354      	adds	r3, #84	; 0x54
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d109      	bne.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	212c      	movs	r1, #44	; 0x2c
 8001b8e:	fb01 f303 	mul.w	r3, r1, r3
 8001b92:	4413      	add	r3, r2
 8001b94:	3342      	adds	r3, #66	; 0x42
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
      break;
 8001b9a:	e016      	b.n	8001bca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	212c      	movs	r1, #44	; 0x2c
 8001ba2:	fb01 f303 	mul.w	r3, r1, r3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3342      	adds	r3, #66	; 0x42
 8001baa:	2202      	movs	r2, #2
 8001bac:	701a      	strb	r2, [r3, #0]
      break;
 8001bae:	e00c      	b.n	8001bca <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	212c      	movs	r1, #44	; 0x2c
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	3342      	adds	r3, #66	; 0x42
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
      break;
 8001bc2:	e002      	b.n	8001bca <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001bc4:	bf00      	nop
 8001bc6:	e000      	b.n	8001bca <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001bc8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	212c      	movs	r1, #44	; 0x2c
 8001bd0:	fb01 f303 	mul.w	r3, r1, r3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3344      	adds	r3, #68	; 0x44
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	8b3a      	ldrh	r2, [r7, #24]
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	202c      	movs	r0, #44	; 0x2c
 8001be4:	fb00 f303 	mul.w	r3, r0, r3
 8001be8:	440b      	add	r3, r1
 8001bea:	334c      	adds	r3, #76	; 0x4c
 8001bec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	212c      	movs	r1, #44	; 0x2c
 8001bf4:	fb01 f303 	mul.w	r3, r1, r3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3360      	adds	r3, #96	; 0x60
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	212c      	movs	r1, #44	; 0x2c
 8001c06:	fb01 f303 	mul.w	r3, r1, r3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3350      	adds	r3, #80	; 0x50
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	212c      	movs	r1, #44	; 0x2c
 8001c18:	fb01 f303 	mul.w	r3, r1, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3339      	adds	r3, #57	; 0x39
 8001c20:	78fa      	ldrb	r2, [r7, #3]
 8001c22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	212c      	movs	r1, #44	; 0x2c
 8001c2a:	fb01 f303 	mul.w	r3, r1, r3
 8001c2e:	4413      	add	r3, r2
 8001c30:	3361      	adds	r3, #97	; 0x61
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	222c      	movs	r2, #44	; 0x2c
 8001c3e:	fb02 f303 	mul.w	r3, r2, r3
 8001c42:	3338      	adds	r3, #56	; 0x38
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	18d1      	adds	r1, r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f004 f986 	bl	8005f60 <USB_HC_StartXfer>
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop

08001c60 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 fe87 	bl	800598a <USB_GetMode>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	f040 80f6 	bne.w	8001e70 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 fe6b 	bl	8005964 <USB_ReadInterrupts>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80ec 	beq.w	8001e6e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 fe62 	bl	8005964 <USB_ReadInterrupts>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001caa:	d104      	bne.n	8001cb6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001cb4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 fe52 	bl	8005964 <USB_ReadInterrupts>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cca:	d104      	bne.n	8001cd6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cd4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f003 fe42 	bl	8005964 <USB_ReadInterrupts>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ce6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cea:	d104      	bne.n	8001cf6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cf4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f003 fe32 	bl	8005964 <USB_ReadInterrupts>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d103      	bne.n	8001d12 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f003 fe24 	bl	8005964 <USB_ReadInterrupts>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d26:	d11c      	bne.n	8001d62 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d30:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10f      	bne.n	8001d62 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d42:	2110      	movs	r1, #16
 8001d44:	6938      	ldr	r0, [r7, #16]
 8001d46:	f003 fd13 	bl	8005770 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d4a:	6938      	ldr	r0, [r7, #16]
 8001d4c:	f003 fd44 	bl	80057d8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2101      	movs	r1, #1
 8001d56:	4618      	mov	r0, r3
 8001d58:	f003 ff1a 	bl	8005b90 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f006 fce7 	bl	8008730 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 fdfc 	bl	8005964 <USB_ReadInterrupts>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d76:	d102      	bne.n	8001d7e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f001 f89e 	bl	8002eba <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f003 fdee 	bl	8005964 <USB_ReadInterrupts>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d106      	bne.n	8001da0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f006 fcb0 	bl	80086f8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2208      	movs	r2, #8
 8001d9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f003 fddd 	bl	8005964 <USB_ReadInterrupts>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	2b10      	cmp	r3, #16
 8001db2:	d101      	bne.n	8001db8 <HAL_HCD_IRQHandler+0x158>
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <HAL_HCD_IRQHandler+0x15a>
 8001db8:	2300      	movs	r3, #0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d012      	beq.n	8001de4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699a      	ldr	r2, [r3, #24]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0210 	bic.w	r2, r2, #16
 8001dcc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 ffa1 	bl	8002d16 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699a      	ldr	r2, [r3, #24]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0210 	orr.w	r2, r2, #16
 8001de2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 fdbb 	bl	8005964 <USB_ReadInterrupts>
 8001dee:	4603      	mov	r3, r0
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001df8:	d13a      	bne.n	8001e70 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f004 f9f0 	bl	80061e4 <USB_HC_ReadInterrupt>
 8001e04:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	e025      	b.n	8001e58 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	fa22 f303 	lsr.w	r3, r2, r3
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d018      	beq.n	8001e52 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	015a      	lsls	r2, r3, #5
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4413      	add	r3, r2
 8001e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e36:	d106      	bne.n	8001e46 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f8ab 	bl	8001f9a <HCD_HC_IN_IRQHandler>
 8001e44:	e005      	b.n	8001e52 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 fbf9 	bl	8002644 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3301      	adds	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d3d4      	bcc.n	8001e0c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e6a:	615a      	str	r2, [r3, #20]
 8001e6c:	e000      	b.n	8001e70 <HAL_HCD_IRQHandler+0x210>
      return;
 8001e6e:	bf00      	nop
    }
  }
}
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_HCD_Start+0x16>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e013      	b.n	8001eb4 <HAL_HCD_Start+0x3e>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2101      	movs	r1, #1
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f003 fedc 	bl	8005c58 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f003 fbf4 	bl	8005692 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_HCD_Stop+0x16>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e00d      	b.n	8001eee <HAL_HCD_Stop+0x32>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 faca 	bl	8006478 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f003 fe7e 	bl	8005c04 <USB_ResetPort>
 8001f08:	4603      	mov	r3, r0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	212c      	movs	r1, #44	; 0x2c
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	3360      	adds	r3, #96	; 0x60
 8001f2c:	781b      	ldrb	r3, [r3, #0]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	460b      	mov	r3, r1
 8001f44:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	212c      	movs	r1, #44	; 0x2c
 8001f4c:	fb01 f303 	mul.w	r3, r1, r3
 8001f50:	4413      	add	r3, r2
 8001f52:	3350      	adds	r3, #80	; 0x50
 8001f54:	681b      	ldr	r3, [r3, #0]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 fec2 	bl	8005cf8 <USB_GetCurrentFrame>
 8001f74:	4603      	mov	r3, r0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f003 fe9d 	bl	8005cca <USB_GetHostSpeed>
 8001f90:	4603      	mov	r3, r0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b086      	sub	sp, #24
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d11a      	bne.n	8002000 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	015a      	lsls	r2, r3, #5
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	2304      	movs	r3, #4
 8001fda:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	212c      	movs	r1, #44	; 0x2c
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3361      	adds	r3, #97	; 0x61
 8001fea:	2206      	movs	r2, #6
 8001fec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f004 f904 	bl	8006206 <USB_HC_Halt>
 8001ffe:	e0af      	b.n	8002160 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002016:	d11b      	bne.n	8002050 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4413      	add	r3, r2
 8002020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002024:	461a      	mov	r2, r3
 8002026:	f44f 7380 	mov.w	r3, #256	; 0x100
 800202a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	212c      	movs	r1, #44	; 0x2c
 8002032:	fb01 f303 	mul.w	r3, r1, r3
 8002036:	4413      	add	r3, r2
 8002038:	3361      	adds	r3, #97	; 0x61
 800203a:	2207      	movs	r2, #7
 800203c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f004 f8dc 	bl	8006206 <USB_HC_Halt>
 800204e:	e087      	b.n	8002160 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4413      	add	r3, r2
 8002058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b20      	cmp	r3, #32
 8002064:	d109      	bne.n	800207a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4413      	add	r3, r2
 800206e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002072:	461a      	mov	r2, r3
 8002074:	2320      	movs	r3, #32
 8002076:	6093      	str	r3, [r2, #8]
 8002078:	e072      	b.n	8002160 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	015a      	lsls	r2, r3, #5
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4413      	add	r3, r2
 8002082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b08      	cmp	r3, #8
 800208e:	d11a      	bne.n	80020c6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4413      	add	r3, r2
 8002098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209c:	461a      	mov	r2, r3
 800209e:	2308      	movs	r3, #8
 80020a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	212c      	movs	r1, #44	; 0x2c
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	3361      	adds	r3, #97	; 0x61
 80020b0:	2205      	movs	r2, #5
 80020b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	4611      	mov	r1, r2
 80020be:	4618      	mov	r0, r3
 80020c0:	f004 f8a1 	bl	8006206 <USB_HC_Halt>
 80020c4:	e04c      	b.n	8002160 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	015a      	lsls	r2, r3, #5
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020dc:	d11b      	bne.n	8002116 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ea:	461a      	mov	r2, r3
 80020ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	212c      	movs	r1, #44	; 0x2c
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	3361      	adds	r3, #97	; 0x61
 8002100:	2208      	movs	r2, #8
 8002102:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	4611      	mov	r1, r2
 800210e:	4618      	mov	r0, r3
 8002110:	f004 f879 	bl	8006206 <USB_HC_Halt>
 8002114:	e024      	b.n	8002160 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	015a      	lsls	r2, r3, #5
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4413      	add	r3, r2
 800211e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002128:	2b80      	cmp	r3, #128	; 0x80
 800212a:	d119      	bne.n	8002160 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4413      	add	r3, r2
 8002134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002138:	461a      	mov	r2, r3
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	212c      	movs	r1, #44	; 0x2c
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	4413      	add	r3, r2
 800214a:	3361      	adds	r3, #97	; 0x61
 800214c:	2206      	movs	r2, #6
 800214e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f004 f853 	bl	8006206 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	015a      	lsls	r2, r3, #5
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4413      	add	r3, r2
 8002168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002176:	d112      	bne.n	800219e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f004 f83f 	bl	8006206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002194:	461a      	mov	r2, r3
 8002196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800219a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800219c:	e24e      	b.n	800263c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	f040 80df 	bne.w	8002374 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d019      	beq.n	80021f2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	212c      	movs	r1, #44	; 0x2c
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	3348      	adds	r3, #72	; 0x48
 80021cc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	0159      	lsls	r1, r3, #5
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	440b      	add	r3, r1
 80021d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80021e0:	1ad2      	subs	r2, r2, r3
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	202c      	movs	r0, #44	; 0x2c
 80021e8:	fb00 f303 	mul.w	r3, r0, r3
 80021ec:	440b      	add	r3, r1
 80021ee:	3350      	adds	r3, #80	; 0x50
 80021f0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	212c      	movs	r1, #44	; 0x2c
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	4413      	add	r3, r2
 80021fe:	3361      	adds	r3, #97	; 0x61
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	212c      	movs	r1, #44	; 0x2c
 800220a:	fb01 f303 	mul.w	r3, r1, r3
 800220e:	4413      	add	r3, r2
 8002210:	335c      	adds	r3, #92	; 0x5c
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4413      	add	r3, r2
 800221e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002222:	461a      	mov	r2, r3
 8002224:	2301      	movs	r3, #1
 8002226:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	212c      	movs	r1, #44	; 0x2c
 800222e:	fb01 f303 	mul.w	r3, r1, r3
 8002232:	4413      	add	r3, r2
 8002234:	333f      	adds	r3, #63	; 0x3f
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d009      	beq.n	8002250 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	212c      	movs	r1, #44	; 0x2c
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	333f      	adds	r3, #63	; 0x3f
 800224a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800224c:	2b02      	cmp	r3, #2
 800224e:	d111      	bne.n	8002274 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	4611      	mov	r1, r2
 800225a:	4618      	mov	r0, r3
 800225c:	f003 ffd3 	bl	8006206 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4413      	add	r3, r2
 8002268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226c:	461a      	mov	r2, r3
 800226e:	2310      	movs	r3, #16
 8002270:	6093      	str	r3, [r2, #8]
 8002272:	e03a      	b.n	80022ea <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	333f      	adds	r3, #63	; 0x3f
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b03      	cmp	r3, #3
 8002286:	d009      	beq.n	800229c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	333f      	adds	r3, #63	; 0x3f
 8002296:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002298:	2b01      	cmp	r3, #1
 800229a:	d126      	bne.n	80022ea <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	0151      	lsls	r1, r2, #5
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	440a      	add	r2, r1
 80022b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022ba:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	212c      	movs	r1, #44	; 0x2c
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	3360      	adds	r3, #96	; 0x60
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	b2d9      	uxtb	r1, r3
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	202c      	movs	r0, #44	; 0x2c
 80022d8:	fb00 f303 	mul.w	r3, r0, r3
 80022dc:	4413      	add	r3, r2
 80022de:	3360      	adds	r3, #96	; 0x60
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f006 fa31 	bl	800874c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d12b      	bne.n	800234a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	212c      	movs	r1, #44	; 0x2c
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	3348      	adds	r3, #72	; 0x48
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	202c      	movs	r0, #44	; 0x2c
 8002308:	fb00 f202 	mul.w	r2, r0, r2
 800230c:	440a      	add	r2, r1
 800230e:	3240      	adds	r2, #64	; 0x40
 8002310:	8812      	ldrh	r2, [r2, #0]
 8002312:	fbb3 f3f2 	udiv	r3, r3, r2
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 818e 	beq.w	800263c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	212c      	movs	r1, #44	; 0x2c
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	3354      	adds	r3, #84	; 0x54
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	f083 0301 	eor.w	r3, r3, #1
 8002334:	b2d8      	uxtb	r0, r3
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	212c      	movs	r1, #44	; 0x2c
 800233c:	fb01 f303 	mul.w	r3, r1, r3
 8002340:	4413      	add	r3, r2
 8002342:	3354      	adds	r3, #84	; 0x54
 8002344:	4602      	mov	r2, r0
 8002346:	701a      	strb	r2, [r3, #0]
}
 8002348:	e178      	b.n	800263c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	212c      	movs	r1, #44	; 0x2c
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	3354      	adds	r3, #84	; 0x54
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	f083 0301 	eor.w	r3, r3, #1
 800235e:	b2d8      	uxtb	r0, r3
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	212c      	movs	r1, #44	; 0x2c
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	4413      	add	r3, r2
 800236c:	3354      	adds	r3, #84	; 0x54
 800236e:	4602      	mov	r2, r0
 8002370:	701a      	strb	r2, [r3, #0]
}
 8002372:	e163      	b.n	800263c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b02      	cmp	r3, #2
 8002388:	f040 80f6 	bne.w	8002578 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	3361      	adds	r3, #97	; 0x61
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d109      	bne.n	80023b4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	212c      	movs	r1, #44	; 0x2c
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	3360      	adds	r3, #96	; 0x60
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	e0c9      	b.n	8002548 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	212c      	movs	r1, #44	; 0x2c
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	4413      	add	r3, r2
 80023c0:	3361      	adds	r3, #97	; 0x61
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b05      	cmp	r3, #5
 80023c6:	d109      	bne.n	80023dc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	212c      	movs	r1, #44	; 0x2c
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	3360      	adds	r3, #96	; 0x60
 80023d6:	2205      	movs	r2, #5
 80023d8:	701a      	strb	r2, [r3, #0]
 80023da:	e0b5      	b.n	8002548 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	212c      	movs	r1, #44	; 0x2c
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	3361      	adds	r3, #97	; 0x61
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b06      	cmp	r3, #6
 80023ee:	d009      	beq.n	8002404 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	212c      	movs	r1, #44	; 0x2c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	3361      	adds	r3, #97	; 0x61
 80023fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002400:	2b08      	cmp	r3, #8
 8002402:	d150      	bne.n	80024a6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	212c      	movs	r1, #44	; 0x2c
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4413      	add	r3, r2
 8002410:	335c      	adds	r3, #92	; 0x5c
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	202c      	movs	r0, #44	; 0x2c
 800241c:	fb00 f303 	mul.w	r3, r0, r3
 8002420:	440b      	add	r3, r1
 8002422:	335c      	adds	r3, #92	; 0x5c
 8002424:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	212c      	movs	r1, #44	; 0x2c
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	4413      	add	r3, r2
 8002432:	335c      	adds	r3, #92	; 0x5c
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d912      	bls.n	8002460 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	212c      	movs	r1, #44	; 0x2c
 8002440:	fb01 f303 	mul.w	r3, r1, r3
 8002444:	4413      	add	r3, r2
 8002446:	335c      	adds	r3, #92	; 0x5c
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	212c      	movs	r1, #44	; 0x2c
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	4413      	add	r3, r2
 8002458:	3360      	adds	r3, #96	; 0x60
 800245a:	2204      	movs	r2, #4
 800245c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800245e:	e073      	b.n	8002548 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	212c      	movs	r1, #44	; 0x2c
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	4413      	add	r3, r2
 800246c:	3360      	adds	r3, #96	; 0x60
 800246e:	2202      	movs	r2, #2
 8002470:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4413      	add	r3, r2
 800247a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002488:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002490:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	015a      	lsls	r2, r3, #5
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4413      	add	r3, r2
 800249a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249e:	461a      	mov	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024a4:	e050      	b.n	8002548 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	212c      	movs	r1, #44	; 0x2c
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	3361      	adds	r3, #97	; 0x61
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d122      	bne.n	8002500 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	212c      	movs	r1, #44	; 0x2c
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	3360      	adds	r3, #96	; 0x60
 80024c8:	2202      	movs	r2, #2
 80024ca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024e2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024ea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f8:	461a      	mov	r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e023      	b.n	8002548 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	212c      	movs	r1, #44	; 0x2c
 8002506:	fb01 f303 	mul.w	r3, r1, r3
 800250a:	4413      	add	r3, r2
 800250c:	3361      	adds	r3, #97	; 0x61
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b07      	cmp	r3, #7
 8002512:	d119      	bne.n	8002548 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	212c      	movs	r1, #44	; 0x2c
 800251a:	fb01 f303 	mul.w	r3, r1, r3
 800251e:	4413      	add	r3, r2
 8002520:	335c      	adds	r3, #92	; 0x5c
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	202c      	movs	r0, #44	; 0x2c
 800252c:	fb00 f303 	mul.w	r3, r0, r3
 8002530:	440b      	add	r3, r1
 8002532:	335c      	adds	r3, #92	; 0x5c
 8002534:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	212c      	movs	r1, #44	; 0x2c
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	4413      	add	r3, r2
 8002542:	3360      	adds	r3, #96	; 0x60
 8002544:	2204      	movs	r2, #4
 8002546:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4413      	add	r3, r2
 8002550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002554:	461a      	mov	r2, r3
 8002556:	2302      	movs	r3, #2
 8002558:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	b2d9      	uxtb	r1, r3
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	202c      	movs	r0, #44	; 0x2c
 8002564:	fb00 f303 	mul.w	r3, r0, r3
 8002568:	4413      	add	r3, r2
 800256a:	3360      	adds	r3, #96	; 0x60
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f006 f8eb 	bl	800874c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002576:	e061      	b.n	800263c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4413      	add	r3, r2
 8002580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b10      	cmp	r3, #16
 800258c:	d156      	bne.n	800263c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	333f      	adds	r3, #63	; 0x3f
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d111      	bne.n	80025c6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	212c      	movs	r1, #44	; 0x2c
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	335c      	adds	r3, #92	; 0x5c
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	4611      	mov	r1, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 fe21 	bl	8006206 <USB_HC_Halt>
 80025c4:	e031      	b.n	800262a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	333f      	adds	r3, #63	; 0x3f
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d009      	beq.n	80025ee <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	212c      	movs	r1, #44	; 0x2c
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	333f      	adds	r3, #63	; 0x3f
 80025e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d11d      	bne.n	800262a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	212c      	movs	r1, #44	; 0x2c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	335c      	adds	r3, #92	; 0x5c
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d110      	bne.n	800262a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	212c      	movs	r1, #44	; 0x2c
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	4413      	add	r3, r2
 8002614:	3361      	adds	r3, #97	; 0x61
 8002616:	2203      	movs	r2, #3
 8002618:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f003 fdee 	bl	8006206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	461a      	mov	r2, r3
 8002638:	2310      	movs	r3, #16
 800263a:	6093      	str	r3, [r2, #8]
}
 800263c:	bf00      	nop
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	015a      	lsls	r2, r3, #5
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	4413      	add	r3, r2
 8002666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b04      	cmp	r3, #4
 8002672:	d11a      	bne.n	80026aa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	4413      	add	r3, r2
 800267c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002680:	461a      	mov	r2, r3
 8002682:	2304      	movs	r3, #4
 8002684:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	212c      	movs	r1, #44	; 0x2c
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4413      	add	r3, r2
 8002692:	3361      	adds	r3, #97	; 0x61
 8002694:	2206      	movs	r2, #6
 8002696:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	4611      	mov	r1, r2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f003 fdaf 	bl	8006206 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80026a8:	e331      	b.n	8002d0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	2b20      	cmp	r3, #32
 80026be:	d12e      	bne.n	800271e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026cc:	461a      	mov	r2, r3
 80026ce:	2320      	movs	r3, #32
 80026d0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	333d      	adds	r3, #61	; 0x3d
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	f040 8313 	bne.w	8002d0e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	212c      	movs	r1, #44	; 0x2c
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	333d      	adds	r3, #61	; 0x3d
 80026f6:	2200      	movs	r2, #0
 80026f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	212c      	movs	r1, #44	; 0x2c
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	3360      	adds	r3, #96	; 0x60
 8002708:	2202      	movs	r2, #2
 800270a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	4611      	mov	r1, r2
 8002716:	4618      	mov	r0, r3
 8002718:	f003 fd75 	bl	8006206 <USB_HC_Halt>
}
 800271c:	e2f7      	b.n	8002d0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	4413      	add	r3, r2
 8002726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002734:	d112      	bne.n	800275c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002742:	461a      	mov	r2, r3
 8002744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002748:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f003 fd56 	bl	8006206 <USB_HC_Halt>
}
 800275a:	e2d8      	b.n	8002d0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	4413      	add	r3, r2
 8002764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b01      	cmp	r3, #1
 8002770:	d140      	bne.n	80027f4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	212c      	movs	r1, #44	; 0x2c
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	4413      	add	r3, r2
 800277e:	335c      	adds	r3, #92	; 0x5c
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002796:	2b40      	cmp	r3, #64	; 0x40
 8002798:	d111      	bne.n	80027be <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	212c      	movs	r1, #44	; 0x2c
 80027a0:	fb01 f303 	mul.w	r3, r1, r3
 80027a4:	4413      	add	r3, r2
 80027a6:	333d      	adds	r3, #61	; 0x3d
 80027a8:	2201      	movs	r2, #1
 80027aa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	461a      	mov	r2, r3
 80027ba:	2340      	movs	r3, #64	; 0x40
 80027bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ca:	461a      	mov	r2, r3
 80027cc:	2301      	movs	r3, #1
 80027ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	212c      	movs	r1, #44	; 0x2c
 80027d6:	fb01 f303 	mul.w	r3, r1, r3
 80027da:	4413      	add	r3, r2
 80027dc:	3361      	adds	r3, #97	; 0x61
 80027de:	2201      	movs	r2, #1
 80027e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f003 fd0a 	bl	8006206 <USB_HC_Halt>
}
 80027f2:	e28c      	b.n	8002d0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002806:	2b40      	cmp	r3, #64	; 0x40
 8002808:	d12c      	bne.n	8002864 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	212c      	movs	r1, #44	; 0x2c
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	4413      	add	r3, r2
 8002816:	3361      	adds	r3, #97	; 0x61
 8002818:	2204      	movs	r2, #4
 800281a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	4413      	add	r3, r2
 8002828:	333d      	adds	r3, #61	; 0x3d
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	212c      	movs	r1, #44	; 0x2c
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	335c      	adds	r3, #92	; 0x5c
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	4611      	mov	r1, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f003 fcdb 	bl	8006206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285c:	461a      	mov	r2, r3
 800285e:	2340      	movs	r3, #64	; 0x40
 8002860:	6093      	str	r3, [r2, #8]
}
 8002862:	e254      	b.n	8002d0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	4413      	add	r3, r2
 800286c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b08      	cmp	r3, #8
 8002878:	d11a      	bne.n	80028b0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	461a      	mov	r2, r3
 8002888:	2308      	movs	r3, #8
 800288a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	212c      	movs	r1, #44	; 0x2c
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	3361      	adds	r3, #97	; 0x61
 800289a:	2205      	movs	r2, #5
 800289c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f003 fcac 	bl	8006206 <USB_HC_Halt>
}
 80028ae:	e22e      	b.n	8002d0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b10      	cmp	r3, #16
 80028c4:	d140      	bne.n	8002948 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	212c      	movs	r1, #44	; 0x2c
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	335c      	adds	r3, #92	; 0x5c
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3361      	adds	r3, #97	; 0x61
 80028e6:	2203      	movs	r2, #3
 80028e8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	333d      	adds	r3, #61	; 0x3d
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d112      	bne.n	8002924 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	333c      	adds	r3, #60	; 0x3c
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d108      	bne.n	8002924 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	333d      	adds	r3, #61	; 0x3d
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	4611      	mov	r1, r2
 800292e:	4618      	mov	r0, r3
 8002930:	f003 fc69 	bl	8006206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	461a      	mov	r2, r3
 8002942:	2310      	movs	r3, #16
 8002944:	6093      	str	r3, [r2, #8]
}
 8002946:	e1e2      	b.n	8002d0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	4413      	add	r3, r2
 8002950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295a:	2b80      	cmp	r3, #128	; 0x80
 800295c:	d164      	bne.n	8002a28 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d111      	bne.n	800298a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	212c      	movs	r1, #44	; 0x2c
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	4413      	add	r3, r2
 8002972:	3361      	adds	r3, #97	; 0x61
 8002974:	2206      	movs	r2, #6
 8002976:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f003 fc3f 	bl	8006206 <USB_HC_Halt>
 8002988:	e044      	b.n	8002a14 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	212c      	movs	r1, #44	; 0x2c
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	4413      	add	r3, r2
 8002996:	335c      	adds	r3, #92	; 0x5c
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	202c      	movs	r0, #44	; 0x2c
 80029a2:	fb00 f303 	mul.w	r3, r0, r3
 80029a6:	440b      	add	r3, r1
 80029a8:	335c      	adds	r3, #92	; 0x5c
 80029aa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	335c      	adds	r3, #92	; 0x5c
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d920      	bls.n	8002a02 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	335c      	adds	r3, #92	; 0x5c
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	212c      	movs	r1, #44	; 0x2c
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	4413      	add	r3, r2
 80029de:	3360      	adds	r3, #96	; 0x60
 80029e0:	2204      	movs	r2, #4
 80029e2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	b2d9      	uxtb	r1, r3
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	202c      	movs	r0, #44	; 0x2c
 80029ee:	fb00 f303 	mul.w	r3, r0, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	3360      	adds	r3, #96	; 0x60
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f005 fea6 	bl	800874c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a00:	e008      	b.n	8002a14 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	212c      	movs	r1, #44	; 0x2c
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3360      	adds	r3, #96	; 0x60
 8002a10:	2202      	movs	r2, #2
 8002a12:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	461a      	mov	r2, r3
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	6093      	str	r3, [r2, #8]
}
 8002a26:	e172      	b.n	8002d0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a3e:	d11b      	bne.n	8002a78 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	212c      	movs	r1, #44	; 0x2c
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3361      	adds	r3, #97	; 0x61
 8002a4e:	2208      	movs	r2, #8
 8002a50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f003 fbd2 	bl	8006206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a74:	6093      	str	r3, [r2, #8]
}
 8002a76:	e14a      	b.n	8002d0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	f040 813f 	bne.w	8002d0e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	212c      	movs	r1, #44	; 0x2c
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3361      	adds	r3, #97	; 0x61
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d17d      	bne.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3360      	adds	r3, #96	; 0x60
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	212c      	movs	r1, #44	; 0x2c
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	333f      	adds	r3, #63	; 0x3f
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d00a      	beq.n	8002ae0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	333f      	adds	r3, #63	; 0x3f
 8002ad8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	f040 8100 	bne.w	8002ce0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d113      	bne.n	8002b10 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	3355      	adds	r3, #85	; 0x55
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	f083 0301 	eor.w	r3, r3, #1
 8002afc:	b2d8      	uxtb	r0, r3
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	3355      	adds	r3, #85	; 0x55
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	f040 80e3 	bne.w	8002ce0 <HCD_HC_OUT_IRQHandler+0x69c>
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	334c      	adds	r3, #76	; 0x4c
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 80d8 	beq.w	8002ce0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	334c      	adds	r3, #76	; 0x4c
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	202c      	movs	r0, #44	; 0x2c
 8002b46:	fb00 f202 	mul.w	r2, r0, r2
 8002b4a:	440a      	add	r2, r1
 8002b4c:	3240      	adds	r2, #64	; 0x40
 8002b4e:	8812      	ldrh	r2, [r2, #0]
 8002b50:	4413      	add	r3, r2
 8002b52:	3b01      	subs	r3, #1
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	202c      	movs	r0, #44	; 0x2c
 8002b5a:	fb00 f202 	mul.w	r2, r0, r2
 8002b5e:	440a      	add	r2, r1
 8002b60:	3240      	adds	r2, #64	; 0x40
 8002b62:	8812      	ldrh	r2, [r2, #0]
 8002b64:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80b5 	beq.w	8002ce0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	3355      	adds	r3, #85	; 0x55
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	f083 0301 	eor.w	r3, r3, #1
 8002b8a:	b2d8      	uxtb	r0, r3
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	212c      	movs	r1, #44	; 0x2c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	3355      	adds	r3, #85	; 0x55
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	701a      	strb	r2, [r3, #0]
 8002b9e:	e09f      	b.n	8002ce0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	212c      	movs	r1, #44	; 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	3361      	adds	r3, #97	; 0x61
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d109      	bne.n	8002bc8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	212c      	movs	r1, #44	; 0x2c
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3360      	adds	r3, #96	; 0x60
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	701a      	strb	r2, [r3, #0]
 8002bc6:	e08b      	b.n	8002ce0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3361      	adds	r3, #97	; 0x61
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d109      	bne.n	8002bf0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	3360      	adds	r3, #96	; 0x60
 8002bea:	2202      	movs	r2, #2
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	e077      	b.n	8002ce0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3361      	adds	r3, #97	; 0x61
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b05      	cmp	r3, #5
 8002c02:	d109      	bne.n	8002c18 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3360      	adds	r3, #96	; 0x60
 8002c12:	2205      	movs	r2, #5
 8002c14:	701a      	strb	r2, [r3, #0]
 8002c16:	e063      	b.n	8002ce0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	212c      	movs	r1, #44	; 0x2c
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	3361      	adds	r3, #97	; 0x61
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b06      	cmp	r3, #6
 8002c2a:	d009      	beq.n	8002c40 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	3361      	adds	r3, #97	; 0x61
 8002c3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d14f      	bne.n	8002ce0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	335c      	adds	r3, #92	; 0x5c
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	202c      	movs	r0, #44	; 0x2c
 8002c58:	fb00 f303 	mul.w	r3, r0, r3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	335c      	adds	r3, #92	; 0x5c
 8002c60:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	335c      	adds	r3, #92	; 0x5c
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d912      	bls.n	8002c9c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	212c      	movs	r1, #44	; 0x2c
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	335c      	adds	r3, #92	; 0x5c
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	212c      	movs	r1, #44	; 0x2c
 8002c8e:	fb01 f303 	mul.w	r3, r1, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	3360      	adds	r3, #96	; 0x60
 8002c96:	2204      	movs	r2, #4
 8002c98:	701a      	strb	r2, [r3, #0]
 8002c9a:	e021      	b.n	8002ce0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3360      	adds	r3, #96	; 0x60
 8002caa:	2202      	movs	r2, #2
 8002cac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cc4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ccc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cda:	461a      	mov	r2, r3
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cec:	461a      	mov	r2, r3
 8002cee:	2302      	movs	r3, #2
 8002cf0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	b2d9      	uxtb	r1, r3
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	202c      	movs	r0, #44	; 0x2c
 8002cfc:	fb00 f303 	mul.w	r3, r0, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	3360      	adds	r3, #96	; 0x60
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f005 fd1f 	bl	800874c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d0e:	bf00      	nop
 8002d10:	3720      	adds	r7, #32
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b08a      	sub	sp, #40	; 0x28
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	0c5b      	lsrs	r3, r3, #17
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d4a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d004      	beq.n	8002d5c <HCD_RXQLVL_IRQHandler+0x46>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	f000 80a9 	beq.w	8002eac <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d5a:	e0aa      	b.n	8002eb2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 80a6 	beq.w	8002eb0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	212c      	movs	r1, #44	; 0x2c
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	3344      	adds	r3, #68	; 0x44
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 809b 	beq.w	8002eb0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	212c      	movs	r1, #44	; 0x2c
 8002d80:	fb01 f303 	mul.w	r3, r1, r3
 8002d84:	4413      	add	r3, r2
 8002d86:	3350      	adds	r3, #80	; 0x50
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	441a      	add	r2, r3
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	202c      	movs	r0, #44	; 0x2c
 8002d94:	fb00 f303 	mul.w	r3, r0, r3
 8002d98:	440b      	add	r3, r1
 8002d9a:	334c      	adds	r3, #76	; 0x4c
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d87a      	bhi.n	8002e98 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	212c      	movs	r1, #44	; 0x2c
 8002dac:	fb01 f303 	mul.w	r3, r1, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	3344      	adds	r3, #68	; 0x44
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	b292      	uxth	r2, r2
 8002dba:	4619      	mov	r1, r3
 8002dbc:	f002 fd7a 	bl	80058b4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	212c      	movs	r1, #44	; 0x2c
 8002dc6:	fb01 f303 	mul.w	r3, r1, r3
 8002dca:	4413      	add	r3, r2
 8002dcc:	3344      	adds	r3, #68	; 0x44
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	441a      	add	r2, r3
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	202c      	movs	r0, #44	; 0x2c
 8002dda:	fb00 f303 	mul.w	r3, r0, r3
 8002dde:	440b      	add	r3, r1
 8002de0:	3344      	adds	r3, #68	; 0x44
 8002de2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	212c      	movs	r1, #44	; 0x2c
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	3350      	adds	r3, #80	; 0x50
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	441a      	add	r2, r3
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	202c      	movs	r0, #44	; 0x2c
 8002dfe:	fb00 f303 	mul.w	r3, r0, r3
 8002e02:	440b      	add	r3, r1
 8002e04:	3350      	adds	r3, #80	; 0x50
 8002e06:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	0cdb      	lsrs	r3, r3, #19
 8002e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e1c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	212c      	movs	r1, #44	; 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	3340      	adds	r3, #64	; 0x40
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d13c      	bne.n	8002eb0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d039      	beq.n	8002eb0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e52:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e5a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e68:	461a      	mov	r2, r3
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	212c      	movs	r1, #44	; 0x2c
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	3354      	adds	r3, #84	; 0x54
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	f083 0301 	eor.w	r3, r3, #1
 8002e82:	b2d8      	uxtb	r0, r3
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	212c      	movs	r1, #44	; 0x2c
 8002e8a:	fb01 f303 	mul.w	r3, r1, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	3354      	adds	r3, #84	; 0x54
 8002e92:	4602      	mov	r2, r0
 8002e94:	701a      	strb	r2, [r3, #0]
      break;
 8002e96:	e00b      	b.n	8002eb0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	212c      	movs	r1, #44	; 0x2c
 8002e9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3360      	adds	r3, #96	; 0x60
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	701a      	strb	r2, [r3, #0]
      break;
 8002eaa:	e001      	b.n	8002eb0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002eac:	bf00      	nop
 8002eae:	e000      	b.n	8002eb2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002eb0:	bf00      	nop
  }
}
 8002eb2:	bf00      	nop
 8002eb4:	3728      	adds	r7, #40	; 0x28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ee6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d10b      	bne.n	8002f0a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d102      	bne.n	8002f02 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f005 fc09 	bl	8008714 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f043 0302 	orr.w	r3, r3, #2
 8002f08:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d132      	bne.n	8002f7a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f043 0308 	orr.w	r3, r3, #8
 8002f1a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d126      	bne.n	8002f74 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d113      	bne.n	8002f56 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f38:	d106      	bne.n	8002f48 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2102      	movs	r1, #2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f002 fe25 	bl	8005b90 <USB_InitFSLSPClkSel>
 8002f46:	e011      	b.n	8002f6c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f002 fe1e 	bl	8005b90 <USB_InitFSLSPClkSel>
 8002f54:	e00a      	b.n	8002f6c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d106      	bne.n	8002f6c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f64:	461a      	mov	r2, r3
 8002f66:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f6a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f005 fbfb 	bl	8008768 <HAL_HCD_PortEnabled_Callback>
 8002f72:	e002      	b.n	8002f7a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f005 fc05 	bl	8008784 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d103      	bne.n	8002f8c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f043 0320 	orr.w	r3, r3, #32
 8002f8a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f92:	461a      	mov	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	6013      	str	r3, [r2, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e12b      	b.n	800320a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d106      	bne.n	8002fcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7fd fe16 	bl	8000bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2224      	movs	r2, #36	; 0x24
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0201 	bic.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ff2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003002:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003004:	f001 fa20 	bl	8004448 <HAL_RCC_GetPCLK1Freq>
 8003008:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4a81      	ldr	r2, [pc, #516]	; (8003214 <HAL_I2C_Init+0x274>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d807      	bhi.n	8003024 <HAL_I2C_Init+0x84>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a80      	ldr	r2, [pc, #512]	; (8003218 <HAL_I2C_Init+0x278>)
 8003018:	4293      	cmp	r3, r2
 800301a:	bf94      	ite	ls
 800301c:	2301      	movls	r3, #1
 800301e:	2300      	movhi	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	e006      	b.n	8003032 <HAL_I2C_Init+0x92>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a7d      	ldr	r2, [pc, #500]	; (800321c <HAL_I2C_Init+0x27c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	bf94      	ite	ls
 800302c:	2301      	movls	r3, #1
 800302e:	2300      	movhi	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e0e7      	b.n	800320a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4a78      	ldr	r2, [pc, #480]	; (8003220 <HAL_I2C_Init+0x280>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	0c9b      	lsrs	r3, r3, #18
 8003044:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	430a      	orrs	r2, r1
 8003058:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4a6a      	ldr	r2, [pc, #424]	; (8003214 <HAL_I2C_Init+0x274>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d802      	bhi.n	8003074 <HAL_I2C_Init+0xd4>
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	3301      	adds	r3, #1
 8003072:	e009      	b.n	8003088 <HAL_I2C_Init+0xe8>
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800307a:	fb02 f303 	mul.w	r3, r2, r3
 800307e:	4a69      	ldr	r2, [pc, #420]	; (8003224 <HAL_I2C_Init+0x284>)
 8003080:	fba2 2303 	umull	r2, r3, r2, r3
 8003084:	099b      	lsrs	r3, r3, #6
 8003086:	3301      	adds	r3, #1
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	430b      	orrs	r3, r1
 800308e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800309a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	495c      	ldr	r1, [pc, #368]	; (8003214 <HAL_I2C_Init+0x274>)
 80030a4:	428b      	cmp	r3, r1
 80030a6:	d819      	bhi.n	80030dc <HAL_I2C_Init+0x13c>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	1e59      	subs	r1, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030b6:	1c59      	adds	r1, r3, #1
 80030b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030bc:	400b      	ands	r3, r1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <HAL_I2C_Init+0x138>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1e59      	subs	r1, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80030d0:	3301      	adds	r3, #1
 80030d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d6:	e051      	b.n	800317c <HAL_I2C_Init+0x1dc>
 80030d8:	2304      	movs	r3, #4
 80030da:	e04f      	b.n	800317c <HAL_I2C_Init+0x1dc>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d111      	bne.n	8003108 <HAL_I2C_Init+0x168>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1e58      	subs	r0, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6859      	ldr	r1, [r3, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	440b      	add	r3, r1
 80030f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f6:	3301      	adds	r3, #1
 80030f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	e012      	b.n	800312e <HAL_I2C_Init+0x18e>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	1e58      	subs	r0, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6859      	ldr	r1, [r3, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	0099      	lsls	r1, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	fbb0 f3f3 	udiv	r3, r0, r3
 800311e:	3301      	adds	r3, #1
 8003120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf0c      	ite	eq
 8003128:	2301      	moveq	r3, #1
 800312a:	2300      	movne	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_I2C_Init+0x196>
 8003132:	2301      	movs	r3, #1
 8003134:	e022      	b.n	800317c <HAL_I2C_Init+0x1dc>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10e      	bne.n	800315c <HAL_I2C_Init+0x1bc>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1e58      	subs	r0, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6859      	ldr	r1, [r3, #4]
 8003146:	460b      	mov	r3, r1
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	440b      	add	r3, r1
 800314c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003150:	3301      	adds	r3, #1
 8003152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800315a:	e00f      	b.n	800317c <HAL_I2C_Init+0x1dc>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	1e58      	subs	r0, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6859      	ldr	r1, [r3, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	0099      	lsls	r1, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003172:	3301      	adds	r3, #1
 8003174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003178:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	6809      	ldr	r1, [r1, #0]
 8003180:	4313      	orrs	r3, r2
 8003182:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69da      	ldr	r2, [r3, #28]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6911      	ldr	r1, [r2, #16]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68d2      	ldr	r2, [r2, #12]
 80031b6:	4311      	orrs	r1, r2
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	430b      	orrs	r3, r1
 80031be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695a      	ldr	r2, [r3, #20]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	000186a0 	.word	0x000186a0
 8003218:	001e847f 	.word	0x001e847f
 800321c:	003d08ff 	.word	0x003d08ff
 8003220:	431bde83 	.word	0x431bde83
 8003224:	10624dd3 	.word	0x10624dd3

08003228 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e128      	b.n	800348c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a90      	ldr	r2, [pc, #576]	; (8003494 <HAL_I2S_Init+0x26c>)
 8003252:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7fd fd17 	bl	8000c88 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2202      	movs	r2, #2
 800325e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003270:	f023 030f 	bic.w	r3, r3, #15
 8003274:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2202      	movs	r2, #2
 800327c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d060      	beq.n	8003348 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d102      	bne.n	8003294 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800328e:	2310      	movs	r3, #16
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	e001      	b.n	8003298 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003294:	2320      	movs	r3, #32
 8003296:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b20      	cmp	r3, #32
 800329e:	d802      	bhi.n	80032a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80032a6:	2001      	movs	r0, #1
 80032a8:	f001 f9c4 	bl	8004634 <HAL_RCCEx_GetPeriphCLKFreq>
 80032ac:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b6:	d125      	bne.n	8003304 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d010      	beq.n	80032e2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	461a      	mov	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032dc:	3305      	adds	r3, #5
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	e01f      	b.n	8003322 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	461a      	mov	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	3305      	adds	r3, #5
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	e00e      	b.n	8003322 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	fbb2 f2f3 	udiv	r2, r2, r3
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	461a      	mov	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	fbb2 f3f3 	udiv	r3, r2, r3
 800331e:	3305      	adds	r3, #5
 8003320:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4a5c      	ldr	r2, [pc, #368]	; (8003498 <HAL_I2S_Init+0x270>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	08db      	lsrs	r3, r3, #3
 800332c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	e003      	b.n	8003350 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003348:	2302      	movs	r3, #2
 800334a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d902      	bls.n	800335c <HAL_I2S_Init+0x134>
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	2bff      	cmp	r3, #255	; 0xff
 800335a:	d907      	bls.n	800336c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003360:	f043 0210 	orr.w	r2, r3, #16
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e08f      	b.n	800348c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	ea42 0103 	orr.w	r1, r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69fa      	ldr	r2, [r7, #28]
 800337c:	430a      	orrs	r2, r1
 800337e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800338a:	f023 030f 	bic.w	r3, r3, #15
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6851      	ldr	r1, [r2, #4]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6892      	ldr	r2, [r2, #8]
 8003396:	4311      	orrs	r1, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	68d2      	ldr	r2, [r2, #12]
 800339c:	4311      	orrs	r1, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6992      	ldr	r2, [r2, #24]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d161      	bne.n	800347c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a38      	ldr	r2, [pc, #224]	; (800349c <HAL_I2S_Init+0x274>)
 80033bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a37      	ldr	r2, [pc, #220]	; (80034a0 <HAL_I2S_Init+0x278>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d101      	bne.n	80033cc <HAL_I2S_Init+0x1a4>
 80033c8:	4b36      	ldr	r3, [pc, #216]	; (80034a4 <HAL_I2S_Init+0x27c>)
 80033ca:	e001      	b.n	80033d0 <HAL_I2S_Init+0x1a8>
 80033cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6812      	ldr	r2, [r2, #0]
 80033d6:	4932      	ldr	r1, [pc, #200]	; (80034a0 <HAL_I2S_Init+0x278>)
 80033d8:	428a      	cmp	r2, r1
 80033da:	d101      	bne.n	80033e0 <HAL_I2S_Init+0x1b8>
 80033dc:	4a31      	ldr	r2, [pc, #196]	; (80034a4 <HAL_I2S_Init+0x27c>)
 80033de:	e001      	b.n	80033e4 <HAL_I2S_Init+0x1bc>
 80033e0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80033e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033e8:	f023 030f 	bic.w	r3, r3, #15
 80033ec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a2b      	ldr	r2, [pc, #172]	; (80034a0 <HAL_I2S_Init+0x278>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d101      	bne.n	80033fc <HAL_I2S_Init+0x1d4>
 80033f8:	4b2a      	ldr	r3, [pc, #168]	; (80034a4 <HAL_I2S_Init+0x27c>)
 80033fa:	e001      	b.n	8003400 <HAL_I2S_Init+0x1d8>
 80033fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003400:	2202      	movs	r2, #2
 8003402:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a25      	ldr	r2, [pc, #148]	; (80034a0 <HAL_I2S_Init+0x278>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d101      	bne.n	8003412 <HAL_I2S_Init+0x1ea>
 800340e:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <HAL_I2S_Init+0x27c>)
 8003410:	e001      	b.n	8003416 <HAL_I2S_Init+0x1ee>
 8003412:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003422:	d003      	beq.n	800342c <HAL_I2S_Init+0x204>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d103      	bne.n	8003434 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800342c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	e001      	b.n	8003438 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003434:	2300      	movs	r3, #0
 8003436:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003442:	4313      	orrs	r3, r2
 8003444:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800344c:	4313      	orrs	r3, r2
 800344e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003456:	4313      	orrs	r3, r2
 8003458:	b29a      	uxth	r2, r3
 800345a:	897b      	ldrh	r3, [r7, #10]
 800345c:	4313      	orrs	r3, r2
 800345e:	b29b      	uxth	r3, r3
 8003460:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003464:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a0d      	ldr	r2, [pc, #52]	; (80034a0 <HAL_I2S_Init+0x278>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d101      	bne.n	8003474 <HAL_I2S_Init+0x24c>
 8003470:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <HAL_I2S_Init+0x27c>)
 8003472:	e001      	b.n	8003478 <HAL_I2S_Init+0x250>
 8003474:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003478:	897a      	ldrh	r2, [r7, #10]
 800347a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3720      	adds	r7, #32
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	0800359f 	.word	0x0800359f
 8003498:	cccccccd 	.word	0xcccccccd
 800349c:	080036b5 	.word	0x080036b5
 80034a0:	40003800 	.word	0x40003800
 80034a4:	40003400 	.word	0x40003400

080034a8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	881a      	ldrh	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	1c9a      	adds	r2, r3, #2
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10e      	bne.n	8003538 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003528:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ffb8 	bl	80034a8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	b292      	uxth	r2, r2
 8003554:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	1c9a      	adds	r2, r3, #2
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10e      	bne.n	8003596 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003586:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff ff93 	bl	80034bc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b086      	sub	sp, #24
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d13a      	bne.n	8003630 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d109      	bne.n	80035d8 <I2S_IRQHandler+0x3a>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ce:	2b40      	cmp	r3, #64	; 0x40
 80035d0:	d102      	bne.n	80035d8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ffb4 	bl	8003540 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	2b40      	cmp	r3, #64	; 0x40
 80035e0:	d126      	bne.n	8003630 <I2S_IRQHandler+0x92>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	d11f      	bne.n	8003630 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035fe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003600:	2300      	movs	r3, #0
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	f043 0202 	orr.w	r2, r3, #2
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff ff50 	bl	80034d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b03      	cmp	r3, #3
 800363a:	d136      	bne.n	80036aa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b02      	cmp	r3, #2
 8003644:	d109      	bne.n	800365a <I2S_IRQHandler+0xbc>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003650:	2b80      	cmp	r3, #128	; 0x80
 8003652:	d102      	bne.n	800365a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff ff45 	bl	80034e4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b08      	cmp	r3, #8
 8003662:	d122      	bne.n	80036aa <I2S_IRQHandler+0x10c>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b20      	cmp	r3, #32
 8003670:	d11b      	bne.n	80036aa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003680:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369c:	f043 0204 	orr.w	r2, r3, #4
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff ff13 	bl	80034d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036aa:	bf00      	nop
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a92      	ldr	r2, [pc, #584]	; (8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d101      	bne.n	80036d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80036ce:	4b92      	ldr	r3, [pc, #584]	; (8003918 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036d0:	e001      	b.n	80036d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80036d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a8b      	ldr	r2, [pc, #556]	; (8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d101      	bne.n	80036f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80036ec:	4b8a      	ldr	r3, [pc, #552]	; (8003918 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036ee:	e001      	b.n	80036f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80036f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003700:	d004      	beq.n	800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	f040 8099 	bne.w	800383e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b02      	cmp	r3, #2
 8003714:	d107      	bne.n	8003726 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f925 	bl	8003970 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b01      	cmp	r3, #1
 800372e:	d107      	bne.n	8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f9c8 	bl	8003ad0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003746:	2b40      	cmp	r3, #64	; 0x40
 8003748:	d13a      	bne.n	80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	2b00      	cmp	r3, #0
 8003752:	d035      	beq.n	80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a6e      	ldr	r2, [pc, #440]	; (8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800375e:	4b6e      	ldr	r3, [pc, #440]	; (8003918 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003760:	e001      	b.n	8003766 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003762:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4969      	ldr	r1, [pc, #420]	; (8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800376e:	428b      	cmp	r3, r1
 8003770:	d101      	bne.n	8003776 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003772:	4b69      	ldr	r3, [pc, #420]	; (8003918 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003774:	e001      	b.n	800377a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003776:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800377a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800377e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800378e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f043 0202 	orr.w	r2, r3, #2
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff fe88 	bl	80034d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	f040 80c3 	bne.w	8003952 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 80bd 	beq.w	8003952 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037e6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a49      	ldr	r2, [pc, #292]	; (8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d101      	bne.n	80037f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80037f2:	4b49      	ldr	r3, [pc, #292]	; (8003918 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037f4:	e001      	b.n	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80037f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4944      	ldr	r1, [pc, #272]	; (8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003802:	428b      	cmp	r3, r1
 8003804:	d101      	bne.n	800380a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003806:	4b44      	ldr	r3, [pc, #272]	; (8003918 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003808:	e001      	b.n	800380e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800380a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800380e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003812:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003814:	2300      	movs	r3, #0
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	60bb      	str	r3, [r7, #8]
 8003820:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	f043 0204 	orr.w	r2, r3, #4
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7ff fe4a 	bl	80034d0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800383c:	e089      	b.n	8003952 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b02      	cmp	r3, #2
 8003846:	d107      	bne.n	8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f8be 	bl	80039d4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b01      	cmp	r3, #1
 8003860:	d107      	bne.n	8003872 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f8fd 	bl	8003a6c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003878:	2b40      	cmp	r3, #64	; 0x40
 800387a:	d12f      	bne.n	80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	2b00      	cmp	r3, #0
 8003884:	d02a      	beq.n	80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003894:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1e      	ldr	r2, [pc, #120]	; (8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d101      	bne.n	80038a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038a2:	e001      	b.n	80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80038a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4919      	ldr	r1, [pc, #100]	; (8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038b0:	428b      	cmp	r3, r1
 80038b2:	d101      	bne.n	80038b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80038b4:	4b18      	ldr	r3, [pc, #96]	; (8003918 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038b6:	e001      	b.n	80038bc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80038b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	f043 0202 	orr.w	r2, r3, #2
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff fdfa 	bl	80034d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d136      	bne.n	8003954 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d031      	beq.n	8003954 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a07      	ldr	r2, [pc, #28]	; (8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80038fa:	4b07      	ldr	r3, [pc, #28]	; (8003918 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038fc:	e001      	b.n	8003902 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80038fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4902      	ldr	r1, [pc, #8]	; (8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800390a:	428b      	cmp	r3, r1
 800390c:	d106      	bne.n	800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800390e:	4b02      	ldr	r3, [pc, #8]	; (8003918 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003910:	e006      	b.n	8003920 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003912:	bf00      	nop
 8003914:	40003800 	.word	0x40003800
 8003918:	40003400 	.word	0x40003400
 800391c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003920:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003924:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003934:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003942:	f043 0204 	orr.w	r2, r3, #4
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff fdc0 	bl	80034d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003950:	e000      	b.n	8003954 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003952:	bf00      	nop
}
 8003954:	bf00      	nop
 8003956:	3720      	adds	r7, #32
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	1c99      	adds	r1, r3, #2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6251      	str	r1, [r2, #36]	; 0x24
 8003982:	881a      	ldrh	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d113      	bne.n	80039ca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d106      	bne.n	80039ca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff ffc9 	bl	800395c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	1c99      	adds	r1, r3, #2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6251      	str	r1, [r2, #36]	; 0x24
 80039e6:	8819      	ldrh	r1, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a1d      	ldr	r2, [pc, #116]	; (8003a64 <I2SEx_TxISR_I2SExt+0x90>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d101      	bne.n	80039f6 <I2SEx_TxISR_I2SExt+0x22>
 80039f2:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <I2SEx_TxISR_I2SExt+0x94>)
 80039f4:	e001      	b.n	80039fa <I2SEx_TxISR_I2SExt+0x26>
 80039f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039fa:	460a      	mov	r2, r1
 80039fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d121      	bne.n	8003a5a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a12      	ldr	r2, [pc, #72]	; (8003a64 <I2SEx_TxISR_I2SExt+0x90>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d101      	bne.n	8003a24 <I2SEx_TxISR_I2SExt+0x50>
 8003a20:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <I2SEx_TxISR_I2SExt+0x94>)
 8003a22:	e001      	b.n	8003a28 <I2SEx_TxISR_I2SExt+0x54>
 8003a24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	490d      	ldr	r1, [pc, #52]	; (8003a64 <I2SEx_TxISR_I2SExt+0x90>)
 8003a30:	428b      	cmp	r3, r1
 8003a32:	d101      	bne.n	8003a38 <I2SEx_TxISR_I2SExt+0x64>
 8003a34:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <I2SEx_TxISR_I2SExt+0x94>)
 8003a36:	e001      	b.n	8003a3c <I2SEx_TxISR_I2SExt+0x68>
 8003a38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a40:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d106      	bne.n	8003a5a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff ff81 	bl	800395c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40003800 	.word	0x40003800
 8003a68:	40003400 	.word	0x40003400

08003a6c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68d8      	ldr	r0, [r3, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	1c99      	adds	r1, r3, #2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a84:	b282      	uxth	r2, r0
 8003a86:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d113      	bne.n	8003ac8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003aae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff ff4a 	bl	800395c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a20      	ldr	r2, [pc, #128]	; (8003b60 <I2SEx_RxISR_I2SExt+0x90>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d101      	bne.n	8003ae6 <I2SEx_RxISR_I2SExt+0x16>
 8003ae2:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <I2SEx_RxISR_I2SExt+0x94>)
 8003ae4:	e001      	b.n	8003aea <I2SEx_RxISR_I2SExt+0x1a>
 8003ae6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aea:	68d8      	ldr	r0, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	1c99      	adds	r1, r3, #2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003af6:	b282      	uxth	r2, r0
 8003af8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d121      	bne.n	8003b56 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a12      	ldr	r2, [pc, #72]	; (8003b60 <I2SEx_RxISR_I2SExt+0x90>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d101      	bne.n	8003b20 <I2SEx_RxISR_I2SExt+0x50>
 8003b1c:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <I2SEx_RxISR_I2SExt+0x94>)
 8003b1e:	e001      	b.n	8003b24 <I2SEx_RxISR_I2SExt+0x54>
 8003b20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	490d      	ldr	r1, [pc, #52]	; (8003b60 <I2SEx_RxISR_I2SExt+0x90>)
 8003b2c:	428b      	cmp	r3, r1
 8003b2e:	d101      	bne.n	8003b34 <I2SEx_RxISR_I2SExt+0x64>
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <I2SEx_RxISR_I2SExt+0x94>)
 8003b32:	e001      	b.n	8003b38 <I2SEx_RxISR_I2SExt+0x68>
 8003b34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b3c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff ff03 	bl	800395c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40003800 	.word	0x40003800
 8003b64:	40003400 	.word	0x40003400

08003b68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e267      	b.n	800404a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d075      	beq.n	8003c72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b86:	4b88      	ldr	r3, [pc, #544]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d00c      	beq.n	8003bac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b92:	4b85      	ldr	r3, [pc, #532]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d112      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b9e:	4b82      	ldr	r3, [pc, #520]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003baa:	d10b      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bac:	4b7e      	ldr	r3, [pc, #504]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d05b      	beq.n	8003c70 <HAL_RCC_OscConfig+0x108>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d157      	bne.n	8003c70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e242      	b.n	800404a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bcc:	d106      	bne.n	8003bdc <HAL_RCC_OscConfig+0x74>
 8003bce:	4b76      	ldr	r3, [pc, #472]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a75      	ldr	r2, [pc, #468]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	e01d      	b.n	8003c18 <HAL_RCC_OscConfig+0xb0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003be4:	d10c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x98>
 8003be6:	4b70      	ldr	r3, [pc, #448]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a6f      	ldr	r2, [pc, #444]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	4b6d      	ldr	r3, [pc, #436]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a6c      	ldr	r2, [pc, #432]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	e00b      	b.n	8003c18 <HAL_RCC_OscConfig+0xb0>
 8003c00:	4b69      	ldr	r3, [pc, #420]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a68      	ldr	r2, [pc, #416]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	4b66      	ldr	r3, [pc, #408]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a65      	ldr	r2, [pc, #404]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d013      	beq.n	8003c48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c20:	f7fd fa8c 	bl	800113c <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c28:	f7fd fa88 	bl	800113c <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b64      	cmp	r3, #100	; 0x64
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e207      	b.n	800404a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3a:	4b5b      	ldr	r3, [pc, #364]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f0      	beq.n	8003c28 <HAL_RCC_OscConfig+0xc0>
 8003c46:	e014      	b.n	8003c72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c48:	f7fd fa78 	bl	800113c <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c50:	f7fd fa74 	bl	800113c <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b64      	cmp	r3, #100	; 0x64
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e1f3      	b.n	800404a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c62:	4b51      	ldr	r3, [pc, #324]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f0      	bne.n	8003c50 <HAL_RCC_OscConfig+0xe8>
 8003c6e:	e000      	b.n	8003c72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d063      	beq.n	8003d46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c7e:	4b4a      	ldr	r3, [pc, #296]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 030c 	and.w	r3, r3, #12
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00b      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c8a:	4b47      	ldr	r3, [pc, #284]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d11c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c96:	4b44      	ldr	r3, [pc, #272]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d116      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca2:	4b41      	ldr	r3, [pc, #260]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d005      	beq.n	8003cba <HAL_RCC_OscConfig+0x152>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d001      	beq.n	8003cba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e1c7      	b.n	800404a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cba:	4b3b      	ldr	r3, [pc, #236]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4937      	ldr	r1, [pc, #220]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cce:	e03a      	b.n	8003d46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d020      	beq.n	8003d1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cd8:	4b34      	ldr	r3, [pc, #208]	; (8003dac <HAL_RCC_OscConfig+0x244>)
 8003cda:	2201      	movs	r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cde:	f7fd fa2d 	bl	800113c <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ce6:	f7fd fa29 	bl	800113c <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e1a8      	b.n	800404a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf8:	4b2b      	ldr	r3, [pc, #172]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0f0      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d04:	4b28      	ldr	r3, [pc, #160]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	4925      	ldr	r1, [pc, #148]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	600b      	str	r3, [r1, #0]
 8003d18:	e015      	b.n	8003d46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d1a:	4b24      	ldr	r3, [pc, #144]	; (8003dac <HAL_RCC_OscConfig+0x244>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d20:	f7fd fa0c 	bl	800113c <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d28:	f7fd fa08 	bl	800113c <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e187      	b.n	800404a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d3a:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d036      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d016      	beq.n	8003d88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d5a:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <HAL_RCC_OscConfig+0x248>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d60:	f7fd f9ec 	bl	800113c <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d68:	f7fd f9e8 	bl	800113c <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e167      	b.n	800404a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d7a:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0f0      	beq.n	8003d68 <HAL_RCC_OscConfig+0x200>
 8003d86:	e01b      	b.n	8003dc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d88:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <HAL_RCC_OscConfig+0x248>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d8e:	f7fd f9d5 	bl	800113c <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d94:	e00e      	b.n	8003db4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d96:	f7fd f9d1 	bl	800113c <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d907      	bls.n	8003db4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e150      	b.n	800404a <HAL_RCC_OscConfig+0x4e2>
 8003da8:	40023800 	.word	0x40023800
 8003dac:	42470000 	.word	0x42470000
 8003db0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db4:	4b88      	ldr	r3, [pc, #544]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1ea      	bne.n	8003d96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 8097 	beq.w	8003efc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd2:	4b81      	ldr	r3, [pc, #516]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10f      	bne.n	8003dfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	4b7d      	ldr	r3, [pc, #500]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	4a7c      	ldr	r2, [pc, #496]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dec:	6413      	str	r3, [r2, #64]	; 0x40
 8003dee:	4b7a      	ldr	r3, [pc, #488]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfe:	4b77      	ldr	r3, [pc, #476]	; (8003fdc <HAL_RCC_OscConfig+0x474>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d118      	bne.n	8003e3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e0a:	4b74      	ldr	r3, [pc, #464]	; (8003fdc <HAL_RCC_OscConfig+0x474>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a73      	ldr	r2, [pc, #460]	; (8003fdc <HAL_RCC_OscConfig+0x474>)
 8003e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e16:	f7fd f991 	bl	800113c <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e1e:	f7fd f98d 	bl	800113c <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e10c      	b.n	800404a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e30:	4b6a      	ldr	r3, [pc, #424]	; (8003fdc <HAL_RCC_OscConfig+0x474>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d106      	bne.n	8003e52 <HAL_RCC_OscConfig+0x2ea>
 8003e44:	4b64      	ldr	r3, [pc, #400]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e48:	4a63      	ldr	r2, [pc, #396]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e50:	e01c      	b.n	8003e8c <HAL_RCC_OscConfig+0x324>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b05      	cmp	r3, #5
 8003e58:	d10c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x30c>
 8003e5a:	4b5f      	ldr	r3, [pc, #380]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	4a5e      	ldr	r2, [pc, #376]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003e60:	f043 0304 	orr.w	r3, r3, #4
 8003e64:	6713      	str	r3, [r2, #112]	; 0x70
 8003e66:	4b5c      	ldr	r3, [pc, #368]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	4a5b      	ldr	r2, [pc, #364]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	6713      	str	r3, [r2, #112]	; 0x70
 8003e72:	e00b      	b.n	8003e8c <HAL_RCC_OscConfig+0x324>
 8003e74:	4b58      	ldr	r3, [pc, #352]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e78:	4a57      	ldr	r2, [pc, #348]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003e7a:	f023 0301 	bic.w	r3, r3, #1
 8003e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e80:	4b55      	ldr	r3, [pc, #340]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e84:	4a54      	ldr	r2, [pc, #336]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003e86:	f023 0304 	bic.w	r3, r3, #4
 8003e8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d015      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e94:	f7fd f952 	bl	800113c <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e9c:	f7fd f94e 	bl	800113c <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e0cb      	b.n	800404a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb2:	4b49      	ldr	r3, [pc, #292]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0ee      	beq.n	8003e9c <HAL_RCC_OscConfig+0x334>
 8003ebe:	e014      	b.n	8003eea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec0:	f7fd f93c 	bl	800113c <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec8:	f7fd f938 	bl	800113c <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e0b5      	b.n	800404a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ede:	4b3e      	ldr	r3, [pc, #248]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1ee      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eea:	7dfb      	ldrb	r3, [r7, #23]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d105      	bne.n	8003efc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef0:	4b39      	ldr	r3, [pc, #228]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	4a38      	ldr	r2, [pc, #224]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003efa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 80a1 	beq.w	8004048 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f06:	4b34      	ldr	r3, [pc, #208]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d05c      	beq.n	8003fcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d141      	bne.n	8003f9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f1a:	4b31      	ldr	r3, [pc, #196]	; (8003fe0 <HAL_RCC_OscConfig+0x478>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f20:	f7fd f90c 	bl	800113c <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f28:	f7fd f908 	bl	800113c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e087      	b.n	800404a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3a:	4b27      	ldr	r3, [pc, #156]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69da      	ldr	r2, [r3, #28]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	019b      	lsls	r3, r3, #6
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	085b      	lsrs	r3, r3, #1
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	041b      	lsls	r3, r3, #16
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	061b      	lsls	r3, r3, #24
 8003f6a:	491b      	ldr	r1, [pc, #108]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f70:	4b1b      	ldr	r3, [pc, #108]	; (8003fe0 <HAL_RCC_OscConfig+0x478>)
 8003f72:	2201      	movs	r2, #1
 8003f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f76:	f7fd f8e1 	bl	800113c <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f7e:	f7fd f8dd 	bl	800113c <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e05c      	b.n	800404a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f90:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0f0      	beq.n	8003f7e <HAL_RCC_OscConfig+0x416>
 8003f9c:	e054      	b.n	8004048 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9e:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <HAL_RCC_OscConfig+0x478>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa4:	f7fd f8ca 	bl	800113c <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fac:	f7fd f8c6 	bl	800113c <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e045      	b.n	800404a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fbe:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <HAL_RCC_OscConfig+0x470>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f0      	bne.n	8003fac <HAL_RCC_OscConfig+0x444>
 8003fca:	e03d      	b.n	8004048 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d107      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e038      	b.n	800404a <HAL_RCC_OscConfig+0x4e2>
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	40007000 	.word	0x40007000
 8003fe0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <HAL_RCC_OscConfig+0x4ec>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d028      	beq.n	8004044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d121      	bne.n	8004044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800400a:	429a      	cmp	r2, r3
 800400c:	d11a      	bne.n	8004044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004014:	4013      	ands	r3, r2
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800401a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800401c:	4293      	cmp	r3, r2
 800401e:	d111      	bne.n	8004044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	085b      	lsrs	r3, r3, #1
 800402c:	3b01      	subs	r3, #1
 800402e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004030:	429a      	cmp	r2, r3
 8004032:	d107      	bne.n	8004044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40023800 	.word	0x40023800

08004058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0cc      	b.n	8004206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800406c:	4b68      	ldr	r3, [pc, #416]	; (8004210 <HAL_RCC_ClockConfig+0x1b8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d90c      	bls.n	8004094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407a:	4b65      	ldr	r3, [pc, #404]	; (8004210 <HAL_RCC_ClockConfig+0x1b8>)
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004082:	4b63      	ldr	r3, [pc, #396]	; (8004210 <HAL_RCC_ClockConfig+0x1b8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0b8      	b.n	8004206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d020      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040ac:	4b59      	ldr	r3, [pc, #356]	; (8004214 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	4a58      	ldr	r2, [pc, #352]	; (8004214 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040c4:	4b53      	ldr	r3, [pc, #332]	; (8004214 <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	4a52      	ldr	r2, [pc, #328]	; (8004214 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d0:	4b50      	ldr	r3, [pc, #320]	; (8004214 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	494d      	ldr	r1, [pc, #308]	; (8004214 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d044      	beq.n	8004178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d107      	bne.n	8004106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f6:	4b47      	ldr	r3, [pc, #284]	; (8004214 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d119      	bne.n	8004136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e07f      	b.n	8004206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d003      	beq.n	8004116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004112:	2b03      	cmp	r3, #3
 8004114:	d107      	bne.n	8004126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004116:	4b3f      	ldr	r3, [pc, #252]	; (8004214 <HAL_RCC_ClockConfig+0x1bc>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d109      	bne.n	8004136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e06f      	b.n	8004206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004126:	4b3b      	ldr	r3, [pc, #236]	; (8004214 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e067      	b.n	8004206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004136:	4b37      	ldr	r3, [pc, #220]	; (8004214 <HAL_RCC_ClockConfig+0x1bc>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f023 0203 	bic.w	r2, r3, #3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	4934      	ldr	r1, [pc, #208]	; (8004214 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	4313      	orrs	r3, r2
 8004146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004148:	f7fc fff8 	bl	800113c <HAL_GetTick>
 800414c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800414e:	e00a      	b.n	8004166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004150:	f7fc fff4 	bl	800113c <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	f241 3288 	movw	r2, #5000	; 0x1388
 800415e:	4293      	cmp	r3, r2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e04f      	b.n	8004206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004166:	4b2b      	ldr	r3, [pc, #172]	; (8004214 <HAL_RCC_ClockConfig+0x1bc>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 020c 	and.w	r2, r3, #12
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	429a      	cmp	r2, r3
 8004176:	d1eb      	bne.n	8004150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004178:	4b25      	ldr	r3, [pc, #148]	; (8004210 <HAL_RCC_ClockConfig+0x1b8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d20c      	bcs.n	80041a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004186:	4b22      	ldr	r3, [pc, #136]	; (8004210 <HAL_RCC_ClockConfig+0x1b8>)
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b20      	ldr	r3, [pc, #128]	; (8004210 <HAL_RCC_ClockConfig+0x1b8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e032      	b.n	8004206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041ac:	4b19      	ldr	r3, [pc, #100]	; (8004214 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4916      	ldr	r1, [pc, #88]	; (8004214 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d009      	beq.n	80041de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ca:	4b12      	ldr	r3, [pc, #72]	; (8004214 <HAL_RCC_ClockConfig+0x1bc>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	490e      	ldr	r1, [pc, #56]	; (8004214 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041de:	f000 f821 	bl	8004224 <HAL_RCC_GetSysClockFreq>
 80041e2:	4602      	mov	r2, r0
 80041e4:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	490a      	ldr	r1, [pc, #40]	; (8004218 <HAL_RCC_ClockConfig+0x1c0>)
 80041f0:	5ccb      	ldrb	r3, [r1, r3]
 80041f2:	fa22 f303 	lsr.w	r3, r2, r3
 80041f6:	4a09      	ldr	r2, [pc, #36]	; (800421c <HAL_RCC_ClockConfig+0x1c4>)
 80041f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041fa:	4b09      	ldr	r3, [pc, #36]	; (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fc ff58 	bl	80010b4 <HAL_InitTick>

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40023c00 	.word	0x40023c00
 8004214:	40023800 	.word	0x40023800
 8004218:	08008e24 	.word	0x08008e24
 800421c:	20000004 	.word	0x20000004
 8004220:	20000008 	.word	0x20000008

08004224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004228:	b094      	sub	sp, #80	; 0x50
 800422a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	647b      	str	r3, [r7, #68]	; 0x44
 8004230:	2300      	movs	r3, #0
 8004232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004234:	2300      	movs	r3, #0
 8004236:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800423c:	4b79      	ldr	r3, [pc, #484]	; (8004424 <HAL_RCC_GetSysClockFreq+0x200>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 030c 	and.w	r3, r3, #12
 8004244:	2b08      	cmp	r3, #8
 8004246:	d00d      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0x40>
 8004248:	2b08      	cmp	r3, #8
 800424a:	f200 80e1 	bhi.w	8004410 <HAL_RCC_GetSysClockFreq+0x1ec>
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <HAL_RCC_GetSysClockFreq+0x34>
 8004252:	2b04      	cmp	r3, #4
 8004254:	d003      	beq.n	800425e <HAL_RCC_GetSysClockFreq+0x3a>
 8004256:	e0db      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004258:	4b73      	ldr	r3, [pc, #460]	; (8004428 <HAL_RCC_GetSysClockFreq+0x204>)
 800425a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800425c:	e0db      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800425e:	4b73      	ldr	r3, [pc, #460]	; (800442c <HAL_RCC_GetSysClockFreq+0x208>)
 8004260:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004262:	e0d8      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004264:	4b6f      	ldr	r3, [pc, #444]	; (8004424 <HAL_RCC_GetSysClockFreq+0x200>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800426c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800426e:	4b6d      	ldr	r3, [pc, #436]	; (8004424 <HAL_RCC_GetSysClockFreq+0x200>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d063      	beq.n	8004342 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800427a:	4b6a      	ldr	r3, [pc, #424]	; (8004424 <HAL_RCC_GetSysClockFreq+0x200>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	099b      	lsrs	r3, r3, #6
 8004280:	2200      	movs	r2, #0
 8004282:	63bb      	str	r3, [r7, #56]	; 0x38
 8004284:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800428c:	633b      	str	r3, [r7, #48]	; 0x30
 800428e:	2300      	movs	r3, #0
 8004290:	637b      	str	r3, [r7, #52]	; 0x34
 8004292:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004296:	4622      	mov	r2, r4
 8004298:	462b      	mov	r3, r5
 800429a:	f04f 0000 	mov.w	r0, #0
 800429e:	f04f 0100 	mov.w	r1, #0
 80042a2:	0159      	lsls	r1, r3, #5
 80042a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042a8:	0150      	lsls	r0, r2, #5
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4621      	mov	r1, r4
 80042b0:	1a51      	subs	r1, r2, r1
 80042b2:	6139      	str	r1, [r7, #16]
 80042b4:	4629      	mov	r1, r5
 80042b6:	eb63 0301 	sbc.w	r3, r3, r1
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042c8:	4659      	mov	r1, fp
 80042ca:	018b      	lsls	r3, r1, #6
 80042cc:	4651      	mov	r1, sl
 80042ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042d2:	4651      	mov	r1, sl
 80042d4:	018a      	lsls	r2, r1, #6
 80042d6:	4651      	mov	r1, sl
 80042d8:	ebb2 0801 	subs.w	r8, r2, r1
 80042dc:	4659      	mov	r1, fp
 80042de:	eb63 0901 	sbc.w	r9, r3, r1
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042f6:	4690      	mov	r8, r2
 80042f8:	4699      	mov	r9, r3
 80042fa:	4623      	mov	r3, r4
 80042fc:	eb18 0303 	adds.w	r3, r8, r3
 8004300:	60bb      	str	r3, [r7, #8]
 8004302:	462b      	mov	r3, r5
 8004304:	eb49 0303 	adc.w	r3, r9, r3
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004316:	4629      	mov	r1, r5
 8004318:	024b      	lsls	r3, r1, #9
 800431a:	4621      	mov	r1, r4
 800431c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004320:	4621      	mov	r1, r4
 8004322:	024a      	lsls	r2, r1, #9
 8004324:	4610      	mov	r0, r2
 8004326:	4619      	mov	r1, r3
 8004328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800432a:	2200      	movs	r2, #0
 800432c:	62bb      	str	r3, [r7, #40]	; 0x28
 800432e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004330:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004334:	f7fb ff48 	bl	80001c8 <__aeabi_uldivmod>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4613      	mov	r3, r2
 800433e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004340:	e058      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004342:	4b38      	ldr	r3, [pc, #224]	; (8004424 <HAL_RCC_GetSysClockFreq+0x200>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	099b      	lsrs	r3, r3, #6
 8004348:	2200      	movs	r2, #0
 800434a:	4618      	mov	r0, r3
 800434c:	4611      	mov	r1, r2
 800434e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004352:	623b      	str	r3, [r7, #32]
 8004354:	2300      	movs	r3, #0
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
 8004358:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800435c:	4642      	mov	r2, r8
 800435e:	464b      	mov	r3, r9
 8004360:	f04f 0000 	mov.w	r0, #0
 8004364:	f04f 0100 	mov.w	r1, #0
 8004368:	0159      	lsls	r1, r3, #5
 800436a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800436e:	0150      	lsls	r0, r2, #5
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4641      	mov	r1, r8
 8004376:	ebb2 0a01 	subs.w	sl, r2, r1
 800437a:	4649      	mov	r1, r9
 800437c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	f04f 0300 	mov.w	r3, #0
 8004388:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800438c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004390:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004394:	ebb2 040a 	subs.w	r4, r2, sl
 8004398:	eb63 050b 	sbc.w	r5, r3, fp
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	00eb      	lsls	r3, r5, #3
 80043a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043aa:	00e2      	lsls	r2, r4, #3
 80043ac:	4614      	mov	r4, r2
 80043ae:	461d      	mov	r5, r3
 80043b0:	4643      	mov	r3, r8
 80043b2:	18e3      	adds	r3, r4, r3
 80043b4:	603b      	str	r3, [r7, #0]
 80043b6:	464b      	mov	r3, r9
 80043b8:	eb45 0303 	adc.w	r3, r5, r3
 80043bc:	607b      	str	r3, [r7, #4]
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043ca:	4629      	mov	r1, r5
 80043cc:	028b      	lsls	r3, r1, #10
 80043ce:	4621      	mov	r1, r4
 80043d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043d4:	4621      	mov	r1, r4
 80043d6:	028a      	lsls	r2, r1, #10
 80043d8:	4610      	mov	r0, r2
 80043da:	4619      	mov	r1, r3
 80043dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043de:	2200      	movs	r2, #0
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	61fa      	str	r2, [r7, #28]
 80043e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043e8:	f7fb feee 	bl	80001c8 <__aeabi_uldivmod>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4613      	mov	r3, r2
 80043f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <HAL_RCC_GetSysClockFreq+0x200>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	0c1b      	lsrs	r3, r3, #16
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	3301      	adds	r3, #1
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004404:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004408:	fbb2 f3f3 	udiv	r3, r2, r3
 800440c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800440e:	e002      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004410:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_RCC_GetSysClockFreq+0x204>)
 8004412:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004418:	4618      	mov	r0, r3
 800441a:	3750      	adds	r7, #80	; 0x50
 800441c:	46bd      	mov	sp, r7
 800441e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004422:	bf00      	nop
 8004424:	40023800 	.word	0x40023800
 8004428:	00f42400 	.word	0x00f42400
 800442c:	007a1200 	.word	0x007a1200

08004430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004434:	4b03      	ldr	r3, [pc, #12]	; (8004444 <HAL_RCC_GetHCLKFreq+0x14>)
 8004436:	681b      	ldr	r3, [r3, #0]
}
 8004438:	4618      	mov	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	20000004 	.word	0x20000004

08004448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800444c:	f7ff fff0 	bl	8004430 <HAL_RCC_GetHCLKFreq>
 8004450:	4602      	mov	r2, r0
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	0a9b      	lsrs	r3, r3, #10
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	4903      	ldr	r1, [pc, #12]	; (800446c <HAL_RCC_GetPCLK1Freq+0x24>)
 800445e:	5ccb      	ldrb	r3, [r1, r3]
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004464:	4618      	mov	r0, r3
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40023800 	.word	0x40023800
 800446c:	08008e34 	.word	0x08008e34

08004470 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d105      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004494:	2b00      	cmp	r3, #0
 8004496:	d035      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004498:	4b62      	ldr	r3, [pc, #392]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800449e:	f7fc fe4d 	bl	800113c <HAL_GetTick>
 80044a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044a4:	e008      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044a6:	f7fc fe49 	bl	800113c <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e0b0      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044b8:	4b5b      	ldr	r3, [pc, #364]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1f0      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	019a      	lsls	r2, r3, #6
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	071b      	lsls	r3, r3, #28
 80044d0:	4955      	ldr	r1, [pc, #340]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044d8:	4b52      	ldr	r3, [pc, #328]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044de:	f7fc fe2d 	bl	800113c <HAL_GetTick>
 80044e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044e4:	e008      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044e6:	f7fc fe29 	bl	800113c <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e090      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044f8:	4b4b      	ldr	r3, [pc, #300]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 8083 	beq.w	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	4b44      	ldr	r3, [pc, #272]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	4a43      	ldr	r2, [pc, #268]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800451c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004520:	6413      	str	r3, [r2, #64]	; 0x40
 8004522:	4b41      	ldr	r3, [pc, #260]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800452e:	4b3f      	ldr	r3, [pc, #252]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a3e      	ldr	r2, [pc, #248]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004538:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800453a:	f7fc fdff 	bl	800113c <HAL_GetTick>
 800453e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004540:	e008      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004542:	f7fc fdfb 	bl	800113c <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e062      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004554:	4b35      	ldr	r3, [pc, #212]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f0      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004560:	4b31      	ldr	r3, [pc, #196]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004568:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d02f      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	429a      	cmp	r2, r3
 800457c:	d028      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800457e:	4b2a      	ldr	r3, [pc, #168]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004586:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004588:	4b29      	ldr	r3, [pc, #164]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800458a:	2201      	movs	r2, #1
 800458c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800458e:	4b28      	ldr	r3, [pc, #160]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004594:	4a24      	ldr	r2, [pc, #144]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800459a:	4b23      	ldr	r3, [pc, #140]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d114      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80045a6:	f7fc fdc9 	bl	800113c <HAL_GetTick>
 80045aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ac:	e00a      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ae:	f7fc fdc5 	bl	800113c <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045bc:	4293      	cmp	r3, r2
 80045be:	d901      	bls.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e02a      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c4:	4b18      	ldr	r3, [pc, #96]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0ee      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045dc:	d10d      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80045de:	4b12      	ldr	r3, [pc, #72]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f2:	490d      	ldr	r1, [pc, #52]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	608b      	str	r3, [r1, #8]
 80045f8:	e005      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80045fa:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	4a0a      	ldr	r2, [pc, #40]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004600:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004604:	6093      	str	r3, [r2, #8]
 8004606:	4b08      	ldr	r3, [pc, #32]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004608:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004612:	4905      	ldr	r1, [pc, #20]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004614:	4313      	orrs	r3, r2
 8004616:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	42470068 	.word	0x42470068
 8004628:	40023800 	.word	0x40023800
 800462c:	40007000 	.word	0x40007000
 8004630:	42470e40 	.word	0x42470e40

08004634 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d13e      	bne.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004652:	4b23      	ldr	r3, [pc, #140]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d12f      	bne.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004668:	4b1e      	ldr	r3, [pc, #120]	; (80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800466a:	617b      	str	r3, [r7, #20]
          break;
 800466c:	e02f      	b.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800466e:	4b1c      	ldr	r3, [pc, #112]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800467a:	d108      	bne.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800467c:	4b18      	ldr	r3, [pc, #96]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004684:	4a18      	ldr	r2, [pc, #96]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004686:	fbb2 f3f3 	udiv	r3, r2, r3
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	e007      	b.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800468e:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004696:	4a15      	ldr	r2, [pc, #84]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004698:	fbb2 f3f3 	udiv	r3, r2, r3
 800469c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800469e:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a4:	099b      	lsrs	r3, r3, #6
 80046a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	fb02 f303 	mul.w	r3, r2, r3
 80046b0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80046b2:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b8:	0f1b      	lsrs	r3, r3, #28
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c4:	617b      	str	r3, [r7, #20]
          break;
 80046c6:	e002      	b.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]
          break;
 80046cc:	bf00      	nop
        }
      }
      break;
 80046ce:	bf00      	nop
    }
  }
  return frequency;
 80046d0:	697b      	ldr	r3, [r7, #20]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40023800 	.word	0x40023800
 80046e4:	00bb8000 	.word	0x00bb8000
 80046e8:	007a1200 	.word	0x007a1200
 80046ec:	00f42400 	.word	0x00f42400

080046f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e07b      	b.n	80047fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	2b00      	cmp	r3, #0
 8004708:	d108      	bne.n	800471c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004712:	d009      	beq.n	8004728 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	61da      	str	r2, [r3, #28]
 800471a:	e005      	b.n	8004728 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d106      	bne.n	8004748 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7fc fb20 	bl	8000d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800475e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ac:	ea42 0103 	orr.w	r1, r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	0c1b      	lsrs	r3, r3, #16
 80047c6:	f003 0104 	and.w	r1, r3, #4
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	f003 0210 	and.w	r2, r3, #16
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69da      	ldr	r2, [r3, #28]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b082      	sub	sp, #8
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e041      	b.n	8004898 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d106      	bne.n	800482e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7fc faf5 	bl	8000e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2202      	movs	r2, #2
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3304      	adds	r3, #4
 800483e:	4619      	mov	r1, r3
 8004840:	4610      	mov	r0, r2
 8004842:	f000 fb4b 	bl	8004edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e041      	b.n	8004936 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f839 	bl	800493e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3304      	adds	r3, #4
 80048dc:	4619      	mov	r1, r3
 80048de:	4610      	mov	r0, r2
 80048e0:	f000 fafc 	bl	8004edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b02      	cmp	r3, #2
 8004966:	d122      	bne.n	80049ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b02      	cmp	r3, #2
 8004974:	d11b      	bne.n	80049ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f06f 0202 	mvn.w	r2, #2
 800497e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 fa82 	bl	8004e9e <HAL_TIM_IC_CaptureCallback>
 800499a:	e005      	b.n	80049a8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fa74 	bl	8004e8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fa85 	bl	8004eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d122      	bne.n	8004a02 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d11b      	bne.n	8004a02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f06f 0204 	mvn.w	r2, #4
 80049d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fa58 	bl	8004e9e <HAL_TIM_IC_CaptureCallback>
 80049ee:	e005      	b.n	80049fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fa4a 	bl	8004e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fa5b 	bl	8004eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d122      	bne.n	8004a56 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f003 0308 	and.w	r3, r3, #8
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d11b      	bne.n	8004a56 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f06f 0208 	mvn.w	r2, #8
 8004a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2204      	movs	r2, #4
 8004a2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 fa2e 	bl	8004e9e <HAL_TIM_IC_CaptureCallback>
 8004a42:	e005      	b.n	8004a50 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fa20 	bl	8004e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fa31 	bl	8004eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b10      	cmp	r3, #16
 8004a62:	d122      	bne.n	8004aaa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f003 0310 	and.w	r3, r3, #16
 8004a6e:	2b10      	cmp	r3, #16
 8004a70:	d11b      	bne.n	8004aaa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f06f 0210 	mvn.w	r2, #16
 8004a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2208      	movs	r2, #8
 8004a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fa04 	bl	8004e9e <HAL_TIM_IC_CaptureCallback>
 8004a96:	e005      	b.n	8004aa4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f9f6 	bl	8004e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fa07 	bl	8004eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d10e      	bne.n	8004ad6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d107      	bne.n	8004ad6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f06f 0201 	mvn.w	r2, #1
 8004ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f9d0 	bl	8004e76 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae0:	2b80      	cmp	r3, #128	; 0x80
 8004ae2:	d10e      	bne.n	8004b02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aee:	2b80      	cmp	r3, #128	; 0x80
 8004af0:	d107      	bne.n	8004b02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 fd5d 	bl	80055bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0c:	2b40      	cmp	r3, #64	; 0x40
 8004b0e:	d10e      	bne.n	8004b2e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1a:	2b40      	cmp	r3, #64	; 0x40
 8004b1c:	d107      	bne.n	8004b2e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f9cc 	bl	8004ec6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d10e      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f003 0320 	and.w	r3, r3, #32
 8004b46:	2b20      	cmp	r3, #32
 8004b48:	d107      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f06f 0220 	mvn.w	r2, #32
 8004b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fd27 	bl	80055a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b5a:	bf00      	nop
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e0ae      	b.n	8004ce0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b0c      	cmp	r3, #12
 8004b8e:	f200 809f 	bhi.w	8004cd0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b92:	a201      	add	r2, pc, #4	; (adr r2, 8004b98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b98:	08004bcd 	.word	0x08004bcd
 8004b9c:	08004cd1 	.word	0x08004cd1
 8004ba0:	08004cd1 	.word	0x08004cd1
 8004ba4:	08004cd1 	.word	0x08004cd1
 8004ba8:	08004c0d 	.word	0x08004c0d
 8004bac:	08004cd1 	.word	0x08004cd1
 8004bb0:	08004cd1 	.word	0x08004cd1
 8004bb4:	08004cd1 	.word	0x08004cd1
 8004bb8:	08004c4f 	.word	0x08004c4f
 8004bbc:	08004cd1 	.word	0x08004cd1
 8004bc0:	08004cd1 	.word	0x08004cd1
 8004bc4:	08004cd1 	.word	0x08004cd1
 8004bc8:	08004c8f 	.word	0x08004c8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fa22 	bl	800501c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0208 	orr.w	r2, r2, #8
 8004be6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699a      	ldr	r2, [r3, #24]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0204 	bic.w	r2, r2, #4
 8004bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6999      	ldr	r1, [r3, #24]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	619a      	str	r2, [r3, #24]
      break;
 8004c0a:	e064      	b.n	8004cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68b9      	ldr	r1, [r7, #8]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fa72 	bl	80050fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6999      	ldr	r1, [r3, #24]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	021a      	lsls	r2, r3, #8
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	619a      	str	r2, [r3, #24]
      break;
 8004c4c:	e043      	b.n	8004cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 fac7 	bl	80051e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69da      	ldr	r2, [r3, #28]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f042 0208 	orr.w	r2, r2, #8
 8004c68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69da      	ldr	r2, [r3, #28]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0204 	bic.w	r2, r2, #4
 8004c78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69d9      	ldr	r1, [r3, #28]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	61da      	str	r2, [r3, #28]
      break;
 8004c8c:	e023      	b.n	8004cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 fb1b 	bl	80052d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69da      	ldr	r2, [r3, #28]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69d9      	ldr	r1, [r3, #28]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	021a      	lsls	r2, r3, #8
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	61da      	str	r2, [r3, #28]
      break;
 8004cce:	e002      	b.n	8004cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8004cd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_TIM_ConfigClockSource+0x1c>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e0b4      	b.n	8004e6e <HAL_TIM_ConfigClockSource+0x186>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d3c:	d03e      	beq.n	8004dbc <HAL_TIM_ConfigClockSource+0xd4>
 8004d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d42:	f200 8087 	bhi.w	8004e54 <HAL_TIM_ConfigClockSource+0x16c>
 8004d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d4a:	f000 8086 	beq.w	8004e5a <HAL_TIM_ConfigClockSource+0x172>
 8004d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d52:	d87f      	bhi.n	8004e54 <HAL_TIM_ConfigClockSource+0x16c>
 8004d54:	2b70      	cmp	r3, #112	; 0x70
 8004d56:	d01a      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0xa6>
 8004d58:	2b70      	cmp	r3, #112	; 0x70
 8004d5a:	d87b      	bhi.n	8004e54 <HAL_TIM_ConfigClockSource+0x16c>
 8004d5c:	2b60      	cmp	r3, #96	; 0x60
 8004d5e:	d050      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x11a>
 8004d60:	2b60      	cmp	r3, #96	; 0x60
 8004d62:	d877      	bhi.n	8004e54 <HAL_TIM_ConfigClockSource+0x16c>
 8004d64:	2b50      	cmp	r3, #80	; 0x50
 8004d66:	d03c      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0xfa>
 8004d68:	2b50      	cmp	r3, #80	; 0x50
 8004d6a:	d873      	bhi.n	8004e54 <HAL_TIM_ConfigClockSource+0x16c>
 8004d6c:	2b40      	cmp	r3, #64	; 0x40
 8004d6e:	d058      	beq.n	8004e22 <HAL_TIM_ConfigClockSource+0x13a>
 8004d70:	2b40      	cmp	r3, #64	; 0x40
 8004d72:	d86f      	bhi.n	8004e54 <HAL_TIM_ConfigClockSource+0x16c>
 8004d74:	2b30      	cmp	r3, #48	; 0x30
 8004d76:	d064      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x15a>
 8004d78:	2b30      	cmp	r3, #48	; 0x30
 8004d7a:	d86b      	bhi.n	8004e54 <HAL_TIM_ConfigClockSource+0x16c>
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	d060      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x15a>
 8004d80:	2b20      	cmp	r3, #32
 8004d82:	d867      	bhi.n	8004e54 <HAL_TIM_ConfigClockSource+0x16c>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d05c      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x15a>
 8004d88:	2b10      	cmp	r3, #16
 8004d8a:	d05a      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x15a>
 8004d8c:	e062      	b.n	8004e54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6899      	ldr	r1, [r3, #8]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f000 fb67 	bl	8005470 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004db0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	609a      	str	r2, [r3, #8]
      break;
 8004dba:	e04f      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6818      	ldr	r0, [r3, #0]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	6899      	ldr	r1, [r3, #8]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f000 fb50 	bl	8005470 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dde:	609a      	str	r2, [r3, #8]
      break;
 8004de0:	e03c      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6818      	ldr	r0, [r3, #0]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	6859      	ldr	r1, [r3, #4]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	461a      	mov	r2, r3
 8004df0:	f000 fac4 	bl	800537c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2150      	movs	r1, #80	; 0x50
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 fb1d 	bl	800543a <TIM_ITRx_SetConfig>
      break;
 8004e00:	e02c      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6859      	ldr	r1, [r3, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f000 fae3 	bl	80053da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2160      	movs	r1, #96	; 0x60
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fb0d 	bl	800543a <TIM_ITRx_SetConfig>
      break;
 8004e20:	e01c      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	6859      	ldr	r1, [r3, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f000 faa4 	bl	800537c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2140      	movs	r1, #64	; 0x40
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 fafd 	bl	800543a <TIM_ITRx_SetConfig>
      break;
 8004e40:	e00c      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	f000 faf4 	bl	800543a <TIM_ITRx_SetConfig>
      break;
 8004e52:	e003      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	73fb      	strb	r3, [r7, #15]
      break;
 8004e58:	e000      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
	...

08004edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a40      	ldr	r2, [pc, #256]	; (8004ff0 <TIM_Base_SetConfig+0x114>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d013      	beq.n	8004f1c <TIM_Base_SetConfig+0x40>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efa:	d00f      	beq.n	8004f1c <TIM_Base_SetConfig+0x40>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a3d      	ldr	r2, [pc, #244]	; (8004ff4 <TIM_Base_SetConfig+0x118>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00b      	beq.n	8004f1c <TIM_Base_SetConfig+0x40>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a3c      	ldr	r2, [pc, #240]	; (8004ff8 <TIM_Base_SetConfig+0x11c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d007      	beq.n	8004f1c <TIM_Base_SetConfig+0x40>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a3b      	ldr	r2, [pc, #236]	; (8004ffc <TIM_Base_SetConfig+0x120>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d003      	beq.n	8004f1c <TIM_Base_SetConfig+0x40>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a3a      	ldr	r2, [pc, #232]	; (8005000 <TIM_Base_SetConfig+0x124>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d108      	bne.n	8004f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a2f      	ldr	r2, [pc, #188]	; (8004ff0 <TIM_Base_SetConfig+0x114>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d02b      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3c:	d027      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a2c      	ldr	r2, [pc, #176]	; (8004ff4 <TIM_Base_SetConfig+0x118>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d023      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a2b      	ldr	r2, [pc, #172]	; (8004ff8 <TIM_Base_SetConfig+0x11c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d01f      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a2a      	ldr	r2, [pc, #168]	; (8004ffc <TIM_Base_SetConfig+0x120>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d01b      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a29      	ldr	r2, [pc, #164]	; (8005000 <TIM_Base_SetConfig+0x124>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d017      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a28      	ldr	r2, [pc, #160]	; (8005004 <TIM_Base_SetConfig+0x128>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d013      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a27      	ldr	r2, [pc, #156]	; (8005008 <TIM_Base_SetConfig+0x12c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00f      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a26      	ldr	r2, [pc, #152]	; (800500c <TIM_Base_SetConfig+0x130>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00b      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a25      	ldr	r2, [pc, #148]	; (8005010 <TIM_Base_SetConfig+0x134>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d007      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a24      	ldr	r2, [pc, #144]	; (8005014 <TIM_Base_SetConfig+0x138>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d003      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a23      	ldr	r2, [pc, #140]	; (8005018 <TIM_Base_SetConfig+0x13c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d108      	bne.n	8004fa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a0a      	ldr	r2, [pc, #40]	; (8004ff0 <TIM_Base_SetConfig+0x114>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d003      	beq.n	8004fd4 <TIM_Base_SetConfig+0xf8>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a0c      	ldr	r2, [pc, #48]	; (8005000 <TIM_Base_SetConfig+0x124>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d103      	bne.n	8004fdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	615a      	str	r2, [r3, #20]
}
 8004fe2:	bf00      	nop
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40010000 	.word	0x40010000
 8004ff4:	40000400 	.word	0x40000400
 8004ff8:	40000800 	.word	0x40000800
 8004ffc:	40000c00 	.word	0x40000c00
 8005000:	40010400 	.word	0x40010400
 8005004:	40014000 	.word	0x40014000
 8005008:	40014400 	.word	0x40014400
 800500c:	40014800 	.word	0x40014800
 8005010:	40001800 	.word	0x40001800
 8005014:	40001c00 	.word	0x40001c00
 8005018:	40002000 	.word	0x40002000

0800501c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	f023 0201 	bic.w	r2, r3, #1
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0303 	bic.w	r3, r3, #3
 8005052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f023 0302 	bic.w	r3, r3, #2
 8005064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a20      	ldr	r2, [pc, #128]	; (80050f4 <TIM_OC1_SetConfig+0xd8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d003      	beq.n	8005080 <TIM_OC1_SetConfig+0x64>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a1f      	ldr	r2, [pc, #124]	; (80050f8 <TIM_OC1_SetConfig+0xdc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d10c      	bne.n	800509a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f023 0308 	bic.w	r3, r3, #8
 8005086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f023 0304 	bic.w	r3, r3, #4
 8005098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a15      	ldr	r2, [pc, #84]	; (80050f4 <TIM_OC1_SetConfig+0xd8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d003      	beq.n	80050aa <TIM_OC1_SetConfig+0x8e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a14      	ldr	r2, [pc, #80]	; (80050f8 <TIM_OC1_SetConfig+0xdc>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d111      	bne.n	80050ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	621a      	str	r2, [r3, #32]
}
 80050e8:	bf00      	nop
 80050ea:	371c      	adds	r7, #28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	40010000 	.word	0x40010000
 80050f8:	40010400 	.word	0x40010400

080050fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f023 0210 	bic.w	r2, r3, #16
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f023 0320 	bic.w	r3, r3, #32
 8005146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a22      	ldr	r2, [pc, #136]	; (80051e0 <TIM_OC2_SetConfig+0xe4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d003      	beq.n	8005164 <TIM_OC2_SetConfig+0x68>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a21      	ldr	r2, [pc, #132]	; (80051e4 <TIM_OC2_SetConfig+0xe8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d10d      	bne.n	8005180 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800516a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800517e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a17      	ldr	r2, [pc, #92]	; (80051e0 <TIM_OC2_SetConfig+0xe4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d003      	beq.n	8005190 <TIM_OC2_SetConfig+0x94>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a16      	ldr	r2, [pc, #88]	; (80051e4 <TIM_OC2_SetConfig+0xe8>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d113      	bne.n	80051b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005196:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800519e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	621a      	str	r2, [r3, #32]
}
 80051d2:	bf00      	nop
 80051d4:	371c      	adds	r7, #28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40010000 	.word	0x40010000
 80051e4:	40010400 	.word	0x40010400

080051e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0303 	bic.w	r3, r3, #3
 800521e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	021b      	lsls	r3, r3, #8
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a21      	ldr	r2, [pc, #132]	; (80052c8 <TIM_OC3_SetConfig+0xe0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d003      	beq.n	800524e <TIM_OC3_SetConfig+0x66>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a20      	ldr	r2, [pc, #128]	; (80052cc <TIM_OC3_SetConfig+0xe4>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d10d      	bne.n	800526a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005254:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	021b      	lsls	r3, r3, #8
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a16      	ldr	r2, [pc, #88]	; (80052c8 <TIM_OC3_SetConfig+0xe0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d003      	beq.n	800527a <TIM_OC3_SetConfig+0x92>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a15      	ldr	r2, [pc, #84]	; (80052cc <TIM_OC3_SetConfig+0xe4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d113      	bne.n	80052a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	011b      	lsls	r3, r3, #4
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	621a      	str	r2, [r3, #32]
}
 80052bc:	bf00      	nop
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	40010000 	.word	0x40010000
 80052cc:	40010400 	.word	0x40010400

080052d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800531a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	031b      	lsls	r3, r3, #12
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a12      	ldr	r2, [pc, #72]	; (8005374 <TIM_OC4_SetConfig+0xa4>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d003      	beq.n	8005338 <TIM_OC4_SetConfig+0x68>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a11      	ldr	r2, [pc, #68]	; (8005378 <TIM_OC4_SetConfig+0xa8>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d109      	bne.n	800534c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800533e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	019b      	lsls	r3, r3, #6
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	621a      	str	r2, [r3, #32]
}
 8005366:	bf00      	nop
 8005368:	371c      	adds	r7, #28
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40010000 	.word	0x40010000
 8005378:	40010400 	.word	0x40010400

0800537c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	f023 0201 	bic.w	r2, r3, #1
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f023 030a 	bic.w	r3, r3, #10
 80053b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	621a      	str	r2, [r3, #32]
}
 80053ce:	bf00      	nop
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053da:	b480      	push	{r7}
 80053dc:	b087      	sub	sp, #28
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	f023 0210 	bic.w	r2, r3, #16
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005404:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	031b      	lsls	r3, r3, #12
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	4313      	orrs	r3, r2
 800540e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005416:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4313      	orrs	r3, r2
 8005420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800543a:	b480      	push	{r7}
 800543c:	b085      	sub	sp, #20
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
 8005442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005450:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4313      	orrs	r3, r2
 8005458:	f043 0307 	orr.w	r3, r3, #7
 800545c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	609a      	str	r2, [r3, #8]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800548a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	021a      	lsls	r2, r3, #8
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	431a      	orrs	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4313      	orrs	r3, r2
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	609a      	str	r2, [r3, #8]
}
 80054a4:	bf00      	nop
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e05a      	b.n	800557e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a21      	ldr	r2, [pc, #132]	; (800558c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d022      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005514:	d01d      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a1d      	ldr	r2, [pc, #116]	; (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d018      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1b      	ldr	r2, [pc, #108]	; (8005594 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d013      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1a      	ldr	r2, [pc, #104]	; (8005598 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00e      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a18      	ldr	r2, [pc, #96]	; (800559c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d009      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a17      	ldr	r2, [pc, #92]	; (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d004      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a15      	ldr	r2, [pc, #84]	; (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d10c      	bne.n	800556c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005558:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	4313      	orrs	r3, r2
 8005562:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	40010000 	.word	0x40010000
 8005590:	40000400 	.word	0x40000400
 8005594:	40000800 	.word	0x40000800
 8005598:	40000c00 	.word	0x40000c00
 800559c:	40010400 	.word	0x40010400
 80055a0:	40014000 	.word	0x40014000
 80055a4:	40001800 	.word	0x40001800

080055a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055d0:	b084      	sub	sp, #16
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	f107 001c 	add.w	r0, r7, #28
 80055de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d122      	bne.n	800562e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005612:	2b01      	cmp	r3, #1
 8005614:	d105      	bne.n	8005622 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f9c0 	bl	80059a8 <USB_CoreReset>
 8005628:	4603      	mov	r3, r0
 800562a:	73fb      	strb	r3, [r7, #15]
 800562c:	e01a      	b.n	8005664 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f9b4 	bl	80059a8 <USB_CoreReset>
 8005640:	4603      	mov	r3, r0
 8005642:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005646:	2b00      	cmp	r3, #0
 8005648:	d106      	bne.n	8005658 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	639a      	str	r2, [r3, #56]	; 0x38
 8005656:	e005      	b.n	8005664 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	2b01      	cmp	r3, #1
 8005668:	d10b      	bne.n	8005682 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f043 0206 	orr.w	r2, r3, #6
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f043 0220 	orr.w	r2, r3, #32
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005682:	7bfb      	ldrb	r3, [r7, #15]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800568e:	b004      	add	sp, #16
 8005690:	4770      	bx	lr

08005692 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f043 0201 	orr.w	r2, r3, #1
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f023 0201 	bic.w	r2, r3, #1
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b084      	sub	sp, #16
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	460b      	mov	r3, r1
 80056e0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d115      	bne.n	8005724 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005704:	2001      	movs	r0, #1
 8005706:	f7fb fd25 	bl	8001154 <HAL_Delay>
      ms++;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	3301      	adds	r3, #1
 800570e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f93a 	bl	800598a <USB_GetMode>
 8005716:	4603      	mov	r3, r0
 8005718:	2b01      	cmp	r3, #1
 800571a:	d01e      	beq.n	800575a <USB_SetCurrentMode+0x84>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b31      	cmp	r3, #49	; 0x31
 8005720:	d9f0      	bls.n	8005704 <USB_SetCurrentMode+0x2e>
 8005722:	e01a      	b.n	800575a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d115      	bne.n	8005756 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005736:	2001      	movs	r0, #1
 8005738:	f7fb fd0c 	bl	8001154 <HAL_Delay>
      ms++;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3301      	adds	r3, #1
 8005740:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f921 	bl	800598a <USB_GetMode>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d005      	beq.n	800575a <USB_SetCurrentMode+0x84>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b31      	cmp	r3, #49	; 0x31
 8005752:	d9f0      	bls.n	8005736 <USB_SetCurrentMode+0x60>
 8005754:	e001      	b.n	800575a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e005      	b.n	8005766 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b32      	cmp	r3, #50	; 0x32
 800575e:	d101      	bne.n	8005764 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e000      	b.n	8005766 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3301      	adds	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4a13      	ldr	r2, [pc, #76]	; (80057d4 <USB_FlushTxFifo+0x64>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d901      	bls.n	8005790 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e01b      	b.n	80057c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	daf2      	bge.n	800577e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	019b      	lsls	r3, r3, #6
 80057a0:	f043 0220 	orr.w	r2, r3, #32
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3301      	adds	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4a08      	ldr	r2, [pc, #32]	; (80057d4 <USB_FlushTxFifo+0x64>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d901      	bls.n	80057ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e006      	b.n	80057c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d0f0      	beq.n	80057a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	00030d40 	.word	0x00030d40

080057d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3301      	adds	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4a11      	ldr	r2, [pc, #68]	; (8005834 <USB_FlushRxFifo+0x5c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d901      	bls.n	80057f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e018      	b.n	8005828 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	daf2      	bge.n	80057e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2210      	movs	r2, #16
 8005806:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3301      	adds	r3, #1
 800580c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4a08      	ldr	r2, [pc, #32]	; (8005834 <USB_FlushRxFifo+0x5c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d901      	bls.n	800581a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e006      	b.n	8005828 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0310 	and.w	r3, r3, #16
 8005822:	2b10      	cmp	r3, #16
 8005824:	d0f0      	beq.n	8005808 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	00030d40 	.word	0x00030d40

08005838 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005838:	b480      	push	{r7}
 800583a:	b089      	sub	sp, #36	; 0x24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	4611      	mov	r1, r2
 8005844:	461a      	mov	r2, r3
 8005846:	460b      	mov	r3, r1
 8005848:	71fb      	strb	r3, [r7, #7]
 800584a:	4613      	mov	r3, r2
 800584c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005856:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800585a:	2b00      	cmp	r3, #0
 800585c:	d123      	bne.n	80058a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800585e:	88bb      	ldrh	r3, [r7, #4]
 8005860:	3303      	adds	r3, #3
 8005862:	089b      	lsrs	r3, r3, #2
 8005864:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005866:	2300      	movs	r3, #0
 8005868:	61bb      	str	r3, [r7, #24]
 800586a:	e018      	b.n	800589e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800586c:	79fb      	ldrb	r3, [r7, #7]
 800586e:	031a      	lsls	r2, r3, #12
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	4413      	add	r3, r2
 8005874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005878:	461a      	mov	r2, r3
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	3301      	adds	r3, #1
 8005884:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	3301      	adds	r3, #1
 800588a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	3301      	adds	r3, #1
 8005890:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	3301      	adds	r3, #1
 8005896:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	3301      	adds	r3, #1
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d3e2      	bcc.n	800586c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3724      	adds	r7, #36	; 0x24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b08b      	sub	sp, #44	; 0x2c
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	4613      	mov	r3, r2
 80058c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	089b      	lsrs	r3, r3, #2
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80058d2:	88fb      	ldrh	r3, [r7, #6]
 80058d4:	f003 0303 	and.w	r3, r3, #3
 80058d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80058da:	2300      	movs	r3, #0
 80058dc:	623b      	str	r3, [r7, #32]
 80058de:	e014      	b.n	800590a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	3301      	adds	r3, #1
 80058f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	3301      	adds	r3, #1
 80058f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	3301      	adds	r3, #1
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	3301      	adds	r3, #1
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	3301      	adds	r3, #1
 8005908:	623b      	str	r3, [r7, #32]
 800590a:	6a3a      	ldr	r2, [r7, #32]
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	429a      	cmp	r2, r3
 8005910:	d3e6      	bcc.n	80058e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005912:	8bfb      	ldrh	r3, [r7, #30]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01e      	beq.n	8005956 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005922:	461a      	mov	r2, r3
 8005924:	f107 0310 	add.w	r3, r7, #16
 8005928:	6812      	ldr	r2, [r2, #0]
 800592a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	b2db      	uxtb	r3, r3
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
 8005938:	b2da      	uxtb	r2, r3
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	701a      	strb	r2, [r3, #0]
      i++;
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	3301      	adds	r3, #1
 8005942:	623b      	str	r3, [r7, #32]
      pDest++;
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	3301      	adds	r3, #1
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800594a:	8bfb      	ldrh	r3, [r7, #30]
 800594c:	3b01      	subs	r3, #1
 800594e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005950:	8bfb      	ldrh	r3, [r7, #30]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1ea      	bne.n	800592c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005958:	4618      	mov	r0, r3
 800595a:	372c      	adds	r7, #44	; 0x2c
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4013      	ands	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800597c:	68fb      	ldr	r3, [r7, #12]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	f003 0301 	and.w	r3, r3, #1
}
 800599a:	4618      	mov	r0, r3
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
	...

080059a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3301      	adds	r3, #1
 80059b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4a13      	ldr	r2, [pc, #76]	; (8005a0c <USB_CoreReset+0x64>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e01b      	b.n	80059fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	daf2      	bge.n	80059b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f043 0201 	orr.w	r2, r3, #1
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3301      	adds	r3, #1
 80059e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4a09      	ldr	r2, [pc, #36]	; (8005a0c <USB_CoreReset+0x64>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d901      	bls.n	80059f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e006      	b.n	80059fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d0f0      	beq.n	80059de <USB_CoreReset+0x36>

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	00030d40 	.word	0x00030d40

08005a10 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a10:	b084      	sub	sp, #16
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b086      	sub	sp, #24
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a22:	2300      	movs	r3, #0
 8005a24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a30:	461a      	mov	r2, r3
 8005a32:	2300      	movs	r3, #0
 8005a34:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a46:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d018      	beq.n	8005a98 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d10a      	bne.n	8005a82 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a7a:	f043 0304 	orr.w	r3, r3, #4
 8005a7e:	6013      	str	r3, [r2, #0]
 8005a80:	e014      	b.n	8005aac <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a90:	f023 0304 	bic.w	r3, r3, #4
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	e009      	b.n	8005aac <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005aa6:	f023 0304 	bic.w	r3, r3, #4
 8005aaa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005aac:	2110      	movs	r1, #16
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7ff fe5e 	bl	8005770 <USB_FlushTxFifo>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff fe8a 	bl	80057d8 <USB_FlushRxFifo>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ace:	2300      	movs	r3, #0
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	e015      	b.n	8005b00 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ae6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af4:	461a      	mov	r2, r3
 8005af6:	2300      	movs	r3, #0
 8005af8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	3301      	adds	r3, #1
 8005afe:	613b      	str	r3, [r7, #16]
 8005b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d3e5      	bcc.n	8005ad4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b14:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00b      	beq.n	8005b3a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b28:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a13      	ldr	r2, [pc, #76]	; (8005b7c <USB_HostInit+0x16c>)
 8005b2e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a13      	ldr	r2, [pc, #76]	; (8005b80 <USB_HostInit+0x170>)
 8005b34:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005b38:	e009      	b.n	8005b4e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2280      	movs	r2, #128	; 0x80
 8005b3e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a10      	ldr	r2, [pc, #64]	; (8005b84 <USB_HostInit+0x174>)
 8005b44:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a0f      	ldr	r2, [pc, #60]	; (8005b88 <USB_HostInit+0x178>)
 8005b4a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d105      	bne.n	8005b60 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	f043 0210 	orr.w	r2, r3, #16
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699a      	ldr	r2, [r3, #24]
 8005b64:	4b09      	ldr	r3, [pc, #36]	; (8005b8c <USB_HostInit+0x17c>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b78:	b004      	add	sp, #16
 8005b7a:	4770      	bx	lr
 8005b7c:	01000200 	.word	0x01000200
 8005b80:	00e00300 	.word	0x00e00300
 8005b84:	00600080 	.word	0x00600080
 8005b88:	004000e0 	.word	0x004000e0
 8005b8c:	a3200008 	.word	0xa3200008

08005b90 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bae:	f023 0303 	bic.w	r3, r3, #3
 8005bb2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	78fb      	ldrb	r3, [r7, #3]
 8005bbe:	f003 0303 	and.w	r3, r3, #3
 8005bc2:	68f9      	ldr	r1, [r7, #12]
 8005bc4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005bcc:	78fb      	ldrb	r3, [r7, #3]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d107      	bne.n	8005be2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bd8:	461a      	mov	r2, r3
 8005bda:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005bde:	6053      	str	r3, [r2, #4]
 8005be0:	e009      	b.n	8005bf6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005be2:	78fb      	ldrb	r3, [r7, #3]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d106      	bne.n	8005bf6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f241 7370 	movw	r3, #6000	; 0x1770
 8005bf4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c24:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c32:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005c34:	2064      	movs	r0, #100	; 0x64
 8005c36:	f7fb fa8d 	bl	8001154 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c46:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005c48:	200a      	movs	r0, #10
 8005c4a:	f7fb fa83 	bl	8001154 <HAL_Delay>

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c7c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <USB_DriveVbus+0x44>
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d106      	bne.n	8005c9c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c9a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca6:	d109      	bne.n	8005cbc <USB_DriveVbus+0x64>
 8005ca8:	78fb      	ldrb	r3, [r7, #3]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d106      	bne.n	8005cbc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cba:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b085      	sub	sp, #20
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	0c5b      	lsrs	r3, r3, #17
 8005ce8:	f003 0303 	and.w	r3, r3, #3
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	b29b      	uxth	r3, r3
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
	...

08005d1c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b088      	sub	sp, #32
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	4608      	mov	r0, r1
 8005d26:	4611      	mov	r1, r2
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	70fb      	strb	r3, [r7, #3]
 8005d2e:	460b      	mov	r3, r1
 8005d30:	70bb      	strb	r3, [r7, #2]
 8005d32:	4613      	mov	r3, r2
 8005d34:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005d3e:	78fb      	ldrb	r3, [r7, #3]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d50:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005d52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d56:	2b03      	cmp	r3, #3
 8005d58:	d87e      	bhi.n	8005e58 <USB_HC_Init+0x13c>
 8005d5a:	a201      	add	r2, pc, #4	; (adr r2, 8005d60 <USB_HC_Init+0x44>)
 8005d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d60:	08005d71 	.word	0x08005d71
 8005d64:	08005e1b 	.word	0x08005e1b
 8005d68:	08005d71 	.word	0x08005d71
 8005d6c:	08005ddd 	.word	0x08005ddd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005d82:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005d84:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	da10      	bge.n	8005dae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	78fa      	ldrb	r2, [r7, #3]
 8005d9c:	0151      	lsls	r1, r2, #5
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	440a      	add	r2, r1
 8005da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005daa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005dac:	e057      	b.n	8005e5e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d051      	beq.n	8005e5e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005dba:	78fb      	ldrb	r3, [r7, #3]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	78fa      	ldrb	r2, [r7, #3]
 8005dca:	0151      	lsls	r1, r2, #5
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	440a      	add	r2, r1
 8005dd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dd4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005dd8:	60d3      	str	r3, [r2, #12]
      break;
 8005dda:	e040      	b.n	8005e5e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de8:	461a      	mov	r2, r3
 8005dea:	f240 639d 	movw	r3, #1693	; 0x69d
 8005dee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005df0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	da34      	bge.n	8005e62 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005df8:	78fb      	ldrb	r3, [r7, #3]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	78fa      	ldrb	r2, [r7, #3]
 8005e08:	0151      	lsls	r1, r2, #5
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	440a      	add	r2, r1
 8005e0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e16:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005e18:	e023      	b.n	8005e62 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e1a:	78fb      	ldrb	r3, [r7, #3]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e26:	461a      	mov	r2, r3
 8005e28:	f240 2325 	movw	r3, #549	; 0x225
 8005e2c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	da17      	bge.n	8005e66 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005e36:	78fb      	ldrb	r3, [r7, #3]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	78fa      	ldrb	r2, [r7, #3]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e50:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005e54:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005e56:	e006      	b.n	8005e66 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	77fb      	strb	r3, [r7, #31]
      break;
 8005e5c:	e004      	b.n	8005e68 <USB_HC_Init+0x14c>
      break;
 8005e5e:	bf00      	nop
 8005e60:	e002      	b.n	8005e68 <USB_HC_Init+0x14c>
      break;
 8005e62:	bf00      	nop
 8005e64:	e000      	b.n	8005e68 <USB_HC_Init+0x14c>
      break;
 8005e66:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005e68:	78fb      	ldrb	r3, [r7, #3]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	78fa      	ldrb	r2, [r7, #3]
 8005e78:	0151      	lsls	r1, r2, #5
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	440a      	add	r2, r1
 8005e7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e82:	f043 0302 	orr.w	r3, r3, #2
 8005e86:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e8e:	699a      	ldr	r2, [r3, #24]
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	2101      	movs	r1, #1
 8005e98:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9c:	6939      	ldr	r1, [r7, #16]
 8005e9e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005eb2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	da03      	bge.n	8005ec2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ebe:	61bb      	str	r3, [r7, #24]
 8005ec0:	e001      	b.n	8005ec6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff feff 	bl	8005cca <USB_GetHostSpeed>
 8005ecc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005ece:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d106      	bne.n	8005ee4 <USB_HC_Init+0x1c8>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d003      	beq.n	8005ee4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	e001      	b.n	8005ee8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ee8:	787b      	ldrb	r3, [r7, #1]
 8005eea:	059b      	lsls	r3, r3, #22
 8005eec:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ef0:	78bb      	ldrb	r3, [r7, #2]
 8005ef2:	02db      	lsls	r3, r3, #11
 8005ef4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ef8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005efa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005efe:	049b      	lsls	r3, r3, #18
 8005f00:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f04:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f06:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f08:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f0c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f12:	78fb      	ldrb	r3, [r7, #3]
 8005f14:	0159      	lsls	r1, r3, #5
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	440b      	add	r3, r1
 8005f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f1e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f24:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005f26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d003      	beq.n	8005f36 <USB_HC_Init+0x21a>
 8005f2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d10f      	bne.n	8005f56 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005f36:	78fb      	ldrb	r3, [r7, #3]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	78fa      	ldrb	r2, [r7, #3]
 8005f46:	0151      	lsls	r1, r2, #5
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	440a      	add	r2, r1
 8005f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f54:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005f56:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3720      	adds	r7, #32
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08c      	sub	sp, #48	; 0x30
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	785b      	ldrb	r3, [r3, #1]
 8005f76:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005f78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f7c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d02d      	beq.n	8005fe6 <USB_HC_StartXfer+0x86>
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	791b      	ldrb	r3, [r3, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d129      	bne.n	8005fe6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005f92:	79fb      	ldrb	r3, [r7, #7]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d117      	bne.n	8005fc8 <USB_HC_StartXfer+0x68>
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	79db      	ldrb	r3, [r3, #7]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <USB_HC_StartXfer+0x48>
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	79db      	ldrb	r3, [r3, #7]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d10f      	bne.n	8005fc8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	69fa      	ldr	r2, [r7, #28]
 8005fb8:	0151      	lsls	r1, r2, #5
 8005fba:	6a3a      	ldr	r2, [r7, #32]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005fc8:	79fb      	ldrb	r3, [r7, #7]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10b      	bne.n	8005fe6 <USB_HC_StartXfer+0x86>
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	795b      	ldrb	r3, [r3, #5]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d107      	bne.n	8005fe6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	785b      	ldrb	r3, [r3, #1]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 fa0f 	bl	8006400 <USB_DoPing>
      return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e0f8      	b.n	80061d8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d018      	beq.n	8006020 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	8912      	ldrh	r2, [r2, #8]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	8912      	ldrh	r2, [r2, #8]
 8005ffe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006002:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006004:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006006:	8b7b      	ldrh	r3, [r7, #26]
 8006008:	429a      	cmp	r2, r3
 800600a:	d90b      	bls.n	8006024 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800600c:	8b7b      	ldrh	r3, [r7, #26]
 800600e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006010:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	8912      	ldrh	r2, [r2, #8]
 8006016:	fb03 f202 	mul.w	r2, r3, r2
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	611a      	str	r2, [r3, #16]
 800601e:	e001      	b.n	8006024 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006020:	2301      	movs	r3, #1
 8006022:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	78db      	ldrb	r3, [r3, #3]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d007      	beq.n	800603c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800602c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	8912      	ldrh	r2, [r2, #8]
 8006032:	fb03 f202 	mul.w	r2, r3, r2
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	611a      	str	r2, [r3, #16]
 800603a:	e003      	b.n	8006044 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	695a      	ldr	r2, [r3, #20]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800604c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800604e:	04d9      	lsls	r1, r3, #19
 8006050:	4b63      	ldr	r3, [pc, #396]	; (80061e0 <USB_HC_StartXfer+0x280>)
 8006052:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006054:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	7a9b      	ldrb	r3, [r3, #10]
 800605a:	075b      	lsls	r3, r3, #29
 800605c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006060:	69f9      	ldr	r1, [r7, #28]
 8006062:	0148      	lsls	r0, r1, #5
 8006064:	6a39      	ldr	r1, [r7, #32]
 8006066:	4401      	add	r1, r0
 8006068:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800606c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800606e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006070:	79fb      	ldrb	r3, [r7, #7]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d009      	beq.n	800608a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	68d9      	ldr	r1, [r3, #12]
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	4413      	add	r3, r2
 8006082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006086:	460a      	mov	r2, r1
 8006088:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b00      	cmp	r3, #0
 8006098:	bf0c      	ite	eq
 800609a:	2301      	moveq	r3, #1
 800609c:	2300      	movne	r3, #0
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	69fa      	ldr	r2, [r7, #28]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	6a3a      	ldr	r2, [r7, #32]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060c0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	7e7b      	ldrb	r3, [r7, #25]
 80060d2:	075b      	lsls	r3, r3, #29
 80060d4:	69f9      	ldr	r1, [r7, #28]
 80060d6:	0148      	lsls	r0, r1, #5
 80060d8:	6a39      	ldr	r1, [r7, #32]
 80060da:	4401      	add	r1, r0
 80060dc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80060e0:	4313      	orrs	r3, r2
 80060e2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060fa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	78db      	ldrb	r3, [r3, #3]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d004      	beq.n	800610e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	e003      	b.n	8006116 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006114:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800611c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	4413      	add	r3, r2
 8006126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612a:	461a      	mov	r2, r3
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006130:	79fb      	ldrb	r3, [r7, #7]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	e04e      	b.n	80061d8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	78db      	ldrb	r3, [r3, #3]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d149      	bne.n	80061d6 <USB_HC_StartXfer+0x276>
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d045      	beq.n	80061d6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	79db      	ldrb	r3, [r3, #7]
 800614e:	2b03      	cmp	r3, #3
 8006150:	d830      	bhi.n	80061b4 <USB_HC_StartXfer+0x254>
 8006152:	a201      	add	r2, pc, #4	; (adr r2, 8006158 <USB_HC_StartXfer+0x1f8>)
 8006154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006158:	08006169 	.word	0x08006169
 800615c:	0800618d 	.word	0x0800618d
 8006160:	08006169 	.word	0x08006169
 8006164:	0800618d 	.word	0x0800618d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	3303      	adds	r3, #3
 800616e:	089b      	lsrs	r3, r3, #2
 8006170:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006172:	8afa      	ldrh	r2, [r7, #22]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	b29b      	uxth	r3, r3
 800617a:	429a      	cmp	r2, r3
 800617c:	d91c      	bls.n	80061b8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	f043 0220 	orr.w	r2, r3, #32
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	619a      	str	r2, [r3, #24]
        }
        break;
 800618a:	e015      	b.n	80061b8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	3303      	adds	r3, #3
 8006192:	089b      	lsrs	r3, r3, #2
 8006194:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006196:	8afa      	ldrh	r2, [r7, #22]
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d90a      	bls.n	80061bc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	619a      	str	r2, [r3, #24]
        }
        break;
 80061b2:	e003      	b.n	80061bc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80061b4:	bf00      	nop
 80061b6:	e002      	b.n	80061be <USB_HC_StartXfer+0x25e>
        break;
 80061b8:	bf00      	nop
 80061ba:	e000      	b.n	80061be <USB_HC_StartXfer+0x25e>
        break;
 80061bc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	68d9      	ldr	r1, [r3, #12]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	785a      	ldrb	r2, [r3, #1]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	2000      	movs	r0, #0
 80061ce:	9000      	str	r0, [sp, #0]
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f7ff fb31 	bl	8005838 <USB_WritePacket>
  }

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3728      	adds	r7, #40	; 0x28
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	1ff80000 	.word	0x1ff80000

080061e4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	b29b      	uxth	r3, r3
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006206:	b480      	push	{r7}
 8006208:	b089      	sub	sp, #36	; 0x24
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	460b      	mov	r3, r1
 8006210:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006216:	78fb      	ldrb	r3, [r7, #3]
 8006218:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4413      	add	r3, r2
 8006226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	0c9b      	lsrs	r3, r3, #18
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	4413      	add	r3, r2
 800623c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	0fdb      	lsrs	r3, r3, #31
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b20      	cmp	r3, #32
 8006254:	d104      	bne.n	8006260 <USB_HC_Halt+0x5a>
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800625c:	2300      	movs	r3, #0
 800625e:	e0c8      	b.n	80063f2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <USB_HC_Halt+0x66>
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b02      	cmp	r3, #2
 800626a:	d163      	bne.n	8006334 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	4413      	add	r3, r2
 8006274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	69fa      	ldr	r2, [r7, #28]
 8006280:	440a      	add	r2, r1
 8006282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006286:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800628a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b00      	cmp	r3, #0
 8006296:	f040 80ab 	bne.w	80063f0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d133      	bne.n	800630e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	0151      	lsls	r1, r2, #5
 80062b8:	69fa      	ldr	r2, [r7, #28]
 80062ba:	440a      	add	r2, r1
 80062bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062c4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	0151      	lsls	r1, r2, #5
 80062d8:	69fa      	ldr	r2, [r7, #28]
 80062da:	440a      	add	r2, r1
 80062dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062e4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3301      	adds	r3, #1
 80062ea:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062f2:	d81d      	bhi.n	8006330 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006306:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800630a:	d0ec      	beq.n	80062e6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800630c:	e070      	b.n	80063f0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	4413      	add	r3, r2
 8006316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	0151      	lsls	r1, r2, #5
 8006320:	69fa      	ldr	r2, [r7, #28]
 8006322:	440a      	add	r2, r1
 8006324:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006328:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800632c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800632e:	e05f      	b.n	80063f0 <USB_HC_Halt+0x1ea>
            break;
 8006330:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006332:	e05d      	b.n	80063f0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	4413      	add	r3, r2
 800633c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	0151      	lsls	r1, r2, #5
 8006346:	69fa      	ldr	r2, [r7, #28]
 8006348:	440a      	add	r2, r1
 800634a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800634e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006352:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d133      	bne.n	80063cc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	4413      	add	r3, r2
 800636c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	0151      	lsls	r1, r2, #5
 8006376:	69fa      	ldr	r2, [r7, #28]
 8006378:	440a      	add	r2, r1
 800637a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800637e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006382:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	4413      	add	r3, r2
 800638c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	0151      	lsls	r1, r2, #5
 8006396:	69fa      	ldr	r2, [r7, #28]
 8006398:	440a      	add	r2, r1
 800639a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800639e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063a2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3301      	adds	r3, #1
 80063a8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063b0:	d81d      	bhi.n	80063ee <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063c8:	d0ec      	beq.n	80063a4 <USB_HC_Halt+0x19e>
 80063ca:	e011      	b.n	80063f0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	0151      	lsls	r1, r2, #5
 80063de:	69fa      	ldr	r2, [r7, #28]
 80063e0:	440a      	add	r2, r1
 80063e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	e000      	b.n	80063f0 <USB_HC_Halt+0x1ea>
          break;
 80063ee:	bf00      	nop
    }
  }

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3724      	adds	r7, #36	; 0x24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
	...

08006400 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	460b      	mov	r3, r1
 800640a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006410:	78fb      	ldrb	r3, [r7, #3]
 8006412:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006414:	2301      	movs	r3, #1
 8006416:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	04da      	lsls	r2, r3, #19
 800641c:	4b15      	ldr	r3, [pc, #84]	; (8006474 <USB_DoPing+0x74>)
 800641e:	4013      	ands	r3, r2
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	0151      	lsls	r1, r2, #5
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	440a      	add	r2, r1
 8006428:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800642c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006430:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	4413      	add	r3, r2
 800643a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006448:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006450:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	4413      	add	r3, r2
 800645a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645e:	461a      	mov	r2, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	371c      	adds	r7, #28
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	1ff80000 	.word	0x1ff80000

08006478 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b088      	sub	sp, #32
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006488:	2300      	movs	r3, #0
 800648a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7ff f911 	bl	80056b4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006492:	2110      	movs	r1, #16
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff f96b 	bl	8005770 <USB_FlushTxFifo>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff f997 	bl	80057d8 <USB_FlushRxFifo>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80064b4:	2300      	movs	r3, #0
 80064b6:	61bb      	str	r3, [r7, #24]
 80064b8:	e01f      	b.n	80064fa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ee:	461a      	mov	r2, r3
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	3301      	adds	r3, #1
 80064f8:	61bb      	str	r3, [r7, #24]
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	2b0f      	cmp	r3, #15
 80064fe:	d9dc      	bls.n	80064ba <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006500:	2300      	movs	r3, #0
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	e034      	b.n	8006570 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	4413      	add	r3, r2
 800650e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800651c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006524:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800652c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	4413      	add	r3, r2
 8006536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653a:	461a      	mov	r2, r3
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	3301      	adds	r3, #1
 8006544:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800654c:	d80c      	bhi.n	8006568 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	4413      	add	r3, r2
 8006556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006564:	d0ec      	beq.n	8006540 <USB_StopHost+0xc8>
 8006566:	e000      	b.n	800656a <USB_StopHost+0xf2>
        break;
 8006568:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	3301      	adds	r3, #1
 800656e:	61bb      	str	r3, [r7, #24]
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	2b0f      	cmp	r3, #15
 8006574:	d9c7      	bls.n	8006506 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800657c:	461a      	mov	r2, r3
 800657e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006582:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800658a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff f880 	bl	8005692 <USB_EnableGlobalInt>

  return ret;
 8006592:	7ffb      	ldrb	r3, [r7, #31]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3720      	adds	r7, #32
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800659c:	b590      	push	{r4, r7, lr}
 800659e:	b089      	sub	sp, #36	; 0x24
 80065a0:	af04      	add	r7, sp, #16
 80065a2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80065a4:	2301      	movs	r3, #1
 80065a6:	2202      	movs	r2, #2
 80065a8:	2102      	movs	r1, #2
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fc66 	bl	8006e7c <USBH_FindInterface>
 80065b0:	4603      	mov	r3, r0
 80065b2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	2bff      	cmp	r3, #255	; 0xff
 80065b8:	d002      	beq.n	80065c0 <USBH_CDC_InterfaceInit+0x24>
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d901      	bls.n	80065c4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065c0:	2302      	movs	r3, #2
 80065c2:	e13d      	b.n	8006840 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
 80065c6:	4619      	mov	r1, r3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fc3b 	bl	8006e44 <USBH_SelectInterface>
 80065ce:	4603      	mov	r3, r0
 80065d0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80065d2:	7bbb      	ldrb	r3, [r7, #14]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80065d8:	2302      	movs	r3, #2
 80065da:	e131      	b.n	8006840 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80065e2:	2050      	movs	r0, #80	; 0x50
 80065e4:	f002 fafa 	bl	8008bdc <malloc>
 80065e8:	4603      	mov	r3, r0
 80065ea:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80065fc:	2302      	movs	r3, #2
 80065fe:	e11f      	b.n	8006840 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006600:	2250      	movs	r2, #80	; 0x50
 8006602:	2100      	movs	r1, #0
 8006604:	68b8      	ldr	r0, [r7, #8]
 8006606:	f002 faf9 	bl	8008bfc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800660a:	7bfb      	ldrb	r3, [r7, #15]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	211a      	movs	r1, #26
 8006610:	fb01 f303 	mul.w	r3, r1, r3
 8006614:	4413      	add	r3, r2
 8006616:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	b25b      	sxtb	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	da15      	bge.n	800664e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	211a      	movs	r1, #26
 8006628:	fb01 f303 	mul.w	r3, r1, r3
 800662c:	4413      	add	r3, r2
 800662e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006632:	781a      	ldrb	r2, [r3, #0]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	211a      	movs	r1, #26
 800663e:	fb01 f303 	mul.w	r3, r1, r3
 8006642:	4413      	add	r3, r2
 8006644:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006648:	881a      	ldrh	r2, [r3, #0]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	785b      	ldrb	r3, [r3, #1]
 8006652:	4619      	mov	r1, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 ff2c 	bl	80084b2 <USBH_AllocPipe>
 800665a:	4603      	mov	r3, r0
 800665c:	461a      	mov	r2, r3
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	7819      	ldrb	r1, [r3, #0]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	7858      	ldrb	r0, [r3, #1]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	8952      	ldrh	r2, [r2, #10]
 800667a:	9202      	str	r2, [sp, #8]
 800667c:	2203      	movs	r2, #3
 800667e:	9201      	str	r2, [sp, #4]
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	4623      	mov	r3, r4
 8006684:	4602      	mov	r2, r0
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f001 fee4 	bl	8008454 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	2200      	movs	r2, #0
 8006692:	4619      	mov	r1, r3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f002 f9f3 	bl	8008a80 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800669a:	2300      	movs	r3, #0
 800669c:	2200      	movs	r2, #0
 800669e:	210a      	movs	r1, #10
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fbeb 	bl	8006e7c <USBH_FindInterface>
 80066a6:	4603      	mov	r3, r0
 80066a8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
 80066ac:	2bff      	cmp	r3, #255	; 0xff
 80066ae:	d002      	beq.n	80066b6 <USBH_CDC_InterfaceInit+0x11a>
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d901      	bls.n	80066ba <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80066b6:	2302      	movs	r3, #2
 80066b8:	e0c2      	b.n	8006840 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80066ba:	7bfb      	ldrb	r3, [r7, #15]
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	211a      	movs	r1, #26
 80066c0:	fb01 f303 	mul.w	r3, r1, r3
 80066c4:	4413      	add	r3, r2
 80066c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	b25b      	sxtb	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	da16      	bge.n	8006700 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	211a      	movs	r1, #26
 80066d8:	fb01 f303 	mul.w	r3, r1, r3
 80066dc:	4413      	add	r3, r2
 80066de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066e2:	781a      	ldrb	r2, [r3, #0]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	211a      	movs	r1, #26
 80066ee:	fb01 f303 	mul.w	r3, r1, r3
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80066f8:	881a      	ldrh	r2, [r3, #0]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	835a      	strh	r2, [r3, #26]
 80066fe:	e015      	b.n	800672c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	211a      	movs	r1, #26
 8006706:	fb01 f303 	mul.w	r3, r1, r3
 800670a:	4413      	add	r3, r2
 800670c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006710:	781a      	ldrb	r2, [r3, #0]
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006716:	7bfb      	ldrb	r3, [r7, #15]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	211a      	movs	r1, #26
 800671c:	fb01 f303 	mul.w	r3, r1, r3
 8006720:	4413      	add	r3, r2
 8006722:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006726:	881a      	ldrh	r2, [r3, #0]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800672c:	7bfb      	ldrb	r3, [r7, #15]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	211a      	movs	r1, #26
 8006732:	fb01 f303 	mul.w	r3, r1, r3
 8006736:	4413      	add	r3, r2
 8006738:	f203 3356 	addw	r3, r3, #854	; 0x356
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	b25b      	sxtb	r3, r3
 8006740:	2b00      	cmp	r3, #0
 8006742:	da16      	bge.n	8006772 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006744:	7bfb      	ldrb	r3, [r7, #15]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	211a      	movs	r1, #26
 800674a:	fb01 f303 	mul.w	r3, r1, r3
 800674e:	4413      	add	r3, r2
 8006750:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006754:	781a      	ldrb	r2, [r3, #0]
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800675a:	7bfb      	ldrb	r3, [r7, #15]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	211a      	movs	r1, #26
 8006760:	fb01 f303 	mul.w	r3, r1, r3
 8006764:	4413      	add	r3, r2
 8006766:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800676a:	881a      	ldrh	r2, [r3, #0]
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	835a      	strh	r2, [r3, #26]
 8006770:	e015      	b.n	800679e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006772:	7bfb      	ldrb	r3, [r7, #15]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	211a      	movs	r1, #26
 8006778:	fb01 f303 	mul.w	r3, r1, r3
 800677c:	4413      	add	r3, r2
 800677e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006782:	781a      	ldrb	r2, [r3, #0]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006788:	7bfb      	ldrb	r3, [r7, #15]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	211a      	movs	r1, #26
 800678e:	fb01 f303 	mul.w	r3, r1, r3
 8006792:	4413      	add	r3, r2
 8006794:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006798:	881a      	ldrh	r2, [r3, #0]
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	7b9b      	ldrb	r3, [r3, #14]
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f001 fe84 	bl	80084b2 <USBH_AllocPipe>
 80067aa:	4603      	mov	r3, r0
 80067ac:	461a      	mov	r2, r3
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	7bdb      	ldrb	r3, [r3, #15]
 80067b6:	4619      	mov	r1, r3
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f001 fe7a 	bl	80084b2 <USBH_AllocPipe>
 80067be:	4603      	mov	r3, r0
 80067c0:	461a      	mov	r2, r3
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	7b59      	ldrb	r1, [r3, #13]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	7b98      	ldrb	r0, [r3, #14]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	8b12      	ldrh	r2, [r2, #24]
 80067de:	9202      	str	r2, [sp, #8]
 80067e0:	2202      	movs	r2, #2
 80067e2:	9201      	str	r2, [sp, #4]
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	4623      	mov	r3, r4
 80067e8:	4602      	mov	r2, r0
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f001 fe32 	bl	8008454 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	7b19      	ldrb	r1, [r3, #12]
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	7bd8      	ldrb	r0, [r3, #15]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	8b52      	ldrh	r2, [r2, #26]
 8006808:	9202      	str	r2, [sp, #8]
 800680a:	2202      	movs	r2, #2
 800680c:	9201      	str	r2, [sp, #4]
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	4623      	mov	r3, r4
 8006812:	4602      	mov	r2, r0
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f001 fe1d 	bl	8008454 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	7b5b      	ldrb	r3, [r3, #13]
 8006826:	2200      	movs	r2, #0
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f002 f928 	bl	8008a80 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	7b1b      	ldrb	r3, [r3, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f002 f921 	bl	8008a80 <USBH_LL_SetToggle>

  return USBH_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	bd90      	pop	{r4, r7, pc}

08006848 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00e      	beq.n	8006880 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f001 fe12 	bl	8008492 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f001 fe3d 	bl	80084f4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	7b1b      	ldrb	r3, [r3, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00e      	beq.n	80068a6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	7b1b      	ldrb	r3, [r3, #12]
 800688c:	4619      	mov	r1, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f001 fdff 	bl	8008492 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	7b1b      	ldrb	r3, [r3, #12]
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f001 fe2a 	bl	80084f4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	7b5b      	ldrb	r3, [r3, #13]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00e      	beq.n	80068cc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	7b5b      	ldrb	r3, [r3, #13]
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f001 fdec 	bl	8008492 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	7b5b      	ldrb	r3, [r3, #13]
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 fe17 	bl	80084f4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00b      	beq.n	80068f0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f002 f983 	bl	8008bec <free>
    phost->pActiveClass->pData = 0U;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068ec:	2200      	movs	r2, #0
 80068ee:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3340      	adds	r3, #64	; 0x40
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f8b1 	bl	8006a7a <GetLineCoding>
 8006918:	4603      	mov	r3, r0
 800691a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800691c:	7afb      	ldrb	r3, [r7, #11]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d105      	bne.n	800692e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006928:	2102      	movs	r1, #2
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800692e:	7afb      	ldrb	r3, [r7, #11]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006940:	2301      	movs	r3, #1
 8006942:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006944:	2300      	movs	r3, #0
 8006946:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006958:	2b04      	cmp	r3, #4
 800695a:	d877      	bhi.n	8006a4c <USBH_CDC_Process+0x114>
 800695c:	a201      	add	r2, pc, #4	; (adr r2, 8006964 <USBH_CDC_Process+0x2c>)
 800695e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006962:	bf00      	nop
 8006964:	08006979 	.word	0x08006979
 8006968:	0800697f 	.word	0x0800697f
 800696c:	080069af 	.word	0x080069af
 8006970:	08006a23 	.word	0x08006a23
 8006974:	08006a31 	.word	0x08006a31
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	73fb      	strb	r3, [r7, #15]
      break;
 800697c:	e06d      	b.n	8006a5a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f897 	bl	8006ab8 <SetLineCoding>
 800698a:	4603      	mov	r3, r0
 800698c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800698e:	7bbb      	ldrb	r3, [r7, #14]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d104      	bne.n	800699e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800699c:	e058      	b.n	8006a50 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800699e:	7bbb      	ldrb	r3, [r7, #14]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d055      	beq.n	8006a50 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2204      	movs	r2, #4
 80069a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80069ac:	e050      	b.n	8006a50 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	3340      	adds	r3, #64	; 0x40
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f860 	bl	8006a7a <GetLineCoding>
 80069ba:	4603      	mov	r3, r0
 80069bc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d126      	bne.n	8006a12 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069d6:	791b      	ldrb	r3, [r3, #4]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d13b      	bne.n	8006a54 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069e6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d133      	bne.n	8006a54 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d12b      	bne.n	8006a54 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a04:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d124      	bne.n	8006a54 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f958 	bl	8006cc0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a10:	e020      	b.n	8006a54 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006a12:	7bbb      	ldrb	r3, [r7, #14]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d01d      	beq.n	8006a54 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2204      	movs	r2, #4
 8006a1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a20:	e018      	b.n	8006a54 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f867 	bl	8006af6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f8da 	bl	8006be2 <CDC_ProcessReception>
      break;
 8006a2e:	e014      	b.n	8006a5a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006a30:	2100      	movs	r1, #0
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 ffef 	bl	8007a16 <USBH_ClrFeature>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a3c:	7bbb      	ldrb	r3, [r7, #14]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10a      	bne.n	8006a58 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006a4a:	e005      	b.n	8006a58 <USBH_CDC_Process+0x120>

    default:
      break;
 8006a4c:	bf00      	nop
 8006a4e:	e004      	b.n	8006a5a <USBH_CDC_Process+0x122>
      break;
 8006a50:	bf00      	nop
 8006a52:	e002      	b.n	8006a5a <USBH_CDC_Process+0x122>
      break;
 8006a54:	bf00      	nop
 8006a56:	e000      	b.n	8006a5a <USBH_CDC_Process+0x122>
      break;
 8006a58:	bf00      	nop

  }

  return status;
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b082      	sub	sp, #8
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	22a1      	movs	r2, #161	; 0xa1
 8006a88:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2221      	movs	r2, #33	; 0x21
 8006a8e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2207      	movs	r2, #7
 8006aa0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2207      	movs	r2, #7
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f001 fa81 	bl	8007fb0 <USBH_CtlReq>
 8006aae:	4603      	mov	r3, r0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2221      	movs	r2, #33	; 0x21
 8006ac6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2207      	movs	r2, #7
 8006ade:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2207      	movs	r2, #7
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f001 fa62 	bl	8007fb0 <USBH_CtlReq>
 8006aec:	4603      	mov	r3, r0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b086      	sub	sp, #24
 8006afa:	af02      	add	r7, sp, #8
 8006afc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d002      	beq.n	8006b1c <CDC_ProcessTransmission+0x26>
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d023      	beq.n	8006b62 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006b1a:	e05e      	b.n	8006bda <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	8b12      	ldrh	r2, [r2, #24]
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d90b      	bls.n	8006b40 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	69d9      	ldr	r1, [r3, #28]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	8b1a      	ldrh	r2, [r3, #24]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	7b5b      	ldrb	r3, [r3, #13]
 8006b34:	2001      	movs	r0, #1
 8006b36:	9000      	str	r0, [sp, #0]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f001 fc48 	bl	80083ce <USBH_BulkSendData>
 8006b3e:	e00b      	b.n	8006b58 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	7b5b      	ldrb	r3, [r3, #13]
 8006b4e:	2001      	movs	r0, #1
 8006b50:	9000      	str	r0, [sp, #0]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f001 fc3b 	bl	80083ce <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b60:	e03b      	b.n	8006bda <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	7b5b      	ldrb	r3, [r3, #13]
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f001 ff5f 	bl	8008a2c <USBH_LL_GetURBState>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006b72:	7afb      	ldrb	r3, [r7, #11]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d128      	bne.n	8006bca <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	8b12      	ldrh	r2, [r2, #24]
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d90e      	bls.n	8006ba2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	8b12      	ldrh	r2, [r2, #24]
 8006b8c:	1a9a      	subs	r2, r3, r2
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	8b12      	ldrh	r2, [r2, #24]
 8006b9a:	441a      	add	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	61da      	str	r2, [r3, #28]
 8006ba0:	e002      	b.n	8006ba8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d004      	beq.n	8006bba <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006bb8:	e00e      	b.n	8006bd8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f868 	bl	8006c98 <USBH_CDC_TransmitCallback>
      break;
 8006bc8:	e006      	b.n	8006bd8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006bca:	7afb      	ldrb	r3, [r7, #11]
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d103      	bne.n	8006bd8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006bd8:	bf00      	nop
  }
}
 8006bda:	bf00      	nop
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b086      	sub	sp, #24
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d002      	beq.n	8006c08 <CDC_ProcessReception+0x26>
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d00e      	beq.n	8006c24 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006c06:	e043      	b.n	8006c90 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	6a19      	ldr	r1, [r3, #32]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	8b5a      	ldrh	r2, [r3, #26]
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	7b1b      	ldrb	r3, [r3, #12]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f001 fbff 	bl	8008418 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2204      	movs	r2, #4
 8006c1e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c22:	e035      	b.n	8006c90 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	7b1b      	ldrb	r3, [r3, #12]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f001 fefe 	bl	8008a2c <USBH_LL_GetURBState>
 8006c30:	4603      	mov	r3, r0
 8006c32:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006c34:	7cfb      	ldrb	r3, [r7, #19]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d129      	bne.n	8006c8e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	7b1b      	ldrb	r3, [r3, #12]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f001 fe61 	bl	8008908 <USBH_LL_GetLastXferSize>
 8006c46:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d016      	beq.n	8006c80 <CDC_ProcessReception+0x9e>
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	8b5b      	ldrh	r3, [r3, #26]
 8006c56:	461a      	mov	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d910      	bls.n	8006c80 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	1ad2      	subs	r2, r2, r3
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	6a1a      	ldr	r2, [r3, #32]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	441a      	add	r2, r3
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	2203      	movs	r2, #3
 8006c7a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c7e:	e006      	b.n	8006c8e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f80f 	bl	8006cac <USBH_CDC_ReceiveCallback>
      break;
 8006c8e:	bf00      	nop
  }
}
 8006c90:	bf00      	nop
 8006c92:	3718      	adds	r7, #24
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e029      	b.n	8006d40 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	79fa      	ldrb	r2, [r7, #7]
 8006cf0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f000 f81f 	bl	8006d48 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f001 fd31 	bl	80087a0 <USBH_LL_Init>

  return USBH_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d54:	2300      	movs	r3, #0
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	e009      	b.n	8006d6e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	33e0      	adds	r3, #224	; 0xe0
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	2200      	movs	r2, #0
 8006d66:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b0f      	cmp	r3, #15
 8006d72:	d9f2      	bls.n	8006d5a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006d74:	2300      	movs	r3, #0
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	e009      	b.n	8006d8e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006d84:	2200      	movs	r2, #0
 8006d86:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d94:	d3f1      	bcc.n	8006d7a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2240      	movs	r2, #64	; 0x40
 8006dba:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d016      	beq.n	8006e32 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10e      	bne.n	8006e2c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e14:	1c59      	adds	r1, r3, #1
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	33de      	adds	r3, #222	; 0xde
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	73fb      	strb	r3, [r7, #15]
 8006e2a:	e004      	b.n	8006e36 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	73fb      	strb	r3, [r7, #15]
 8006e30:	e001      	b.n	8006e36 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006e32:	2302      	movs	r3, #2
 8006e34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006e5a:	78fa      	ldrb	r2, [r7, #3]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d204      	bcs.n	8006e6a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	78fa      	ldrb	r2, [r7, #3]
 8006e64:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006e68:	e001      	b.n	8006e6e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	4608      	mov	r0, r1
 8006e86:	4611      	mov	r1, r2
 8006e88:	461a      	mov	r2, r3
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	70fb      	strb	r3, [r7, #3]
 8006e8e:	460b      	mov	r3, r1
 8006e90:	70bb      	strb	r3, [r7, #2]
 8006e92:	4613      	mov	r3, r2
 8006e94:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006ea4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ea6:	e025      	b.n	8006ef4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006ea8:	7dfb      	ldrb	r3, [r7, #23]
 8006eaa:	221a      	movs	r2, #26
 8006eac:	fb02 f303 	mul.w	r3, r2, r3
 8006eb0:	3308      	adds	r3, #8
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	3302      	adds	r3, #2
 8006eb8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	795b      	ldrb	r3, [r3, #5]
 8006ebe:	78fa      	ldrb	r2, [r7, #3]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d002      	beq.n	8006eca <USBH_FindInterface+0x4e>
 8006ec4:	78fb      	ldrb	r3, [r7, #3]
 8006ec6:	2bff      	cmp	r3, #255	; 0xff
 8006ec8:	d111      	bne.n	8006eee <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006ece:	78ba      	ldrb	r2, [r7, #2]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d002      	beq.n	8006eda <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ed4:	78bb      	ldrb	r3, [r7, #2]
 8006ed6:	2bff      	cmp	r3, #255	; 0xff
 8006ed8:	d109      	bne.n	8006eee <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ede:	787a      	ldrb	r2, [r7, #1]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d002      	beq.n	8006eea <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ee4:	787b      	ldrb	r3, [r7, #1]
 8006ee6:	2bff      	cmp	r3, #255	; 0xff
 8006ee8:	d101      	bne.n	8006eee <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006eea:	7dfb      	ldrb	r3, [r7, #23]
 8006eec:	e006      	b.n	8006efc <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006eee:	7dfb      	ldrb	r3, [r7, #23]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d9d6      	bls.n	8006ea8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006efa:	23ff      	movs	r3, #255	; 0xff
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	371c      	adds	r7, #28
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f001 fc81 	bl	8008818 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006f16:	2101      	movs	r1, #1
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f001 fd9a 	bl	8008a52 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af04      	add	r7, sp, #16
 8006f2e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006f30:	2302      	movs	r3, #2
 8006f32:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006f34:	2300      	movs	r3, #0
 8006f36:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d102      	bne.n	8006f4a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2203      	movs	r2, #3
 8006f48:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b0b      	cmp	r3, #11
 8006f52:	f200 81be 	bhi.w	80072d2 <USBH_Process+0x3aa>
 8006f56:	a201      	add	r2, pc, #4	; (adr r2, 8006f5c <USBH_Process+0x34>)
 8006f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5c:	08006f8d 	.word	0x08006f8d
 8006f60:	08006fbf 	.word	0x08006fbf
 8006f64:	08007027 	.word	0x08007027
 8006f68:	0800726d 	.word	0x0800726d
 8006f6c:	080072d3 	.word	0x080072d3
 8006f70:	080070cb 	.word	0x080070cb
 8006f74:	08007213 	.word	0x08007213
 8006f78:	08007101 	.word	0x08007101
 8006f7c:	08007121 	.word	0x08007121
 8006f80:	08007141 	.word	0x08007141
 8006f84:	08007185 	.word	0x08007185
 8006f88:	08007255 	.word	0x08007255
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 819e 	beq.w	80072d6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006fa0:	20c8      	movs	r0, #200	; 0xc8
 8006fa2:	f001 fd9d 	bl	8008ae0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f001 fc93 	bl	80088d2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006fbc:	e18b      	b.n	80072d6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d107      	bne.n	8006fd8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006fd6:	e18d      	b.n	80072f4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006fde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fe2:	d914      	bls.n	800700e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006fea:	3301      	adds	r3, #1
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006ffa:	2b03      	cmp	r3, #3
 8006ffc:	d903      	bls.n	8007006 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	220d      	movs	r2, #13
 8007002:	701a      	strb	r2, [r3, #0]
      break;
 8007004:	e176      	b.n	80072f4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	701a      	strb	r2, [r3, #0]
      break;
 800700c:	e172      	b.n	80072f4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007014:	f103 020a 	add.w	r2, r3, #10
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800701e:	200a      	movs	r0, #10
 8007020:	f001 fd5e 	bl	8008ae0 <USBH_Delay>
      break;
 8007024:	e166      	b.n	80072f4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800702c:	2b00      	cmp	r3, #0
 800702e:	d005      	beq.n	800703c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007036:	2104      	movs	r1, #4
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800703c:	2064      	movs	r0, #100	; 0x64
 800703e:	f001 fd4f 	bl	8008ae0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f001 fc1e 	bl	8008884 <USBH_LL_GetSpeed>
 8007048:	4603      	mov	r3, r0
 800704a:	461a      	mov	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2205      	movs	r2, #5
 8007056:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007058:	2100      	movs	r1, #0
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f001 fa29 	bl	80084b2 <USBH_AllocPipe>
 8007060:	4603      	mov	r3, r0
 8007062:	461a      	mov	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007068:	2180      	movs	r1, #128	; 0x80
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f001 fa21 	bl	80084b2 <USBH_AllocPipe>
 8007070:	4603      	mov	r3, r0
 8007072:	461a      	mov	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	7919      	ldrb	r1, [r3, #4]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800708c:	b292      	uxth	r2, r2
 800708e:	9202      	str	r2, [sp, #8]
 8007090:	2200      	movs	r2, #0
 8007092:	9201      	str	r2, [sp, #4]
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	4603      	mov	r3, r0
 8007098:	2280      	movs	r2, #128	; 0x80
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f001 f9da 	bl	8008454 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	7959      	ldrb	r1, [r3, #5]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80070b4:	b292      	uxth	r2, r2
 80070b6:	9202      	str	r2, [sp, #8]
 80070b8:	2200      	movs	r2, #0
 80070ba:	9201      	str	r2, [sp, #4]
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	4603      	mov	r3, r0
 80070c0:	2200      	movs	r2, #0
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f001 f9c6 	bl	8008454 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80070c8:	e114      	b.n	80072f4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f918 	bl	8007300 <USBH_HandleEnum>
 80070d0:	4603      	mov	r3, r0
 80070d2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80070d4:	7bbb      	ldrb	r3, [r7, #14]
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f040 80fe 	bne.w	80072da <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d103      	bne.n	80070f8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2208      	movs	r2, #8
 80070f4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80070f6:	e0f0      	b.n	80072da <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2207      	movs	r2, #7
 80070fc:	701a      	strb	r2, [r3, #0]
      break;
 80070fe:	e0ec      	b.n	80072da <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007106:	2b00      	cmp	r3, #0
 8007108:	f000 80e9 	beq.w	80072de <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007112:	2101      	movs	r1, #1
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2208      	movs	r2, #8
 800711c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800711e:	e0de      	b.n	80072de <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007126:	b29b      	uxth	r3, r3
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fc2c 	bl	8007988 <USBH_SetCfg>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	f040 80d5 	bne.w	80072e2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2209      	movs	r2, #9
 800713c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800713e:	e0d0      	b.n	80072e2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007146:	f003 0320 	and.w	r3, r3, #32
 800714a:	2b00      	cmp	r3, #0
 800714c:	d016      	beq.n	800717c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800714e:	2101      	movs	r1, #1
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fc3c 	bl	80079ce <USBH_SetFeature>
 8007156:	4603      	mov	r3, r0
 8007158:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800715a:	7bbb      	ldrb	r3, [r7, #14]
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d103      	bne.n	800716a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	220a      	movs	r2, #10
 8007166:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007168:	e0bd      	b.n	80072e6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800716a:	7bbb      	ldrb	r3, [r7, #14]
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b03      	cmp	r3, #3
 8007170:	f040 80b9 	bne.w	80072e6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	220a      	movs	r2, #10
 8007178:	701a      	strb	r2, [r3, #0]
      break;
 800717a:	e0b4      	b.n	80072e6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	220a      	movs	r2, #10
 8007180:	701a      	strb	r2, [r3, #0]
      break;
 8007182:	e0b0      	b.n	80072e6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 80ad 	beq.w	80072ea <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007198:	2300      	movs	r3, #0
 800719a:	73fb      	strb	r3, [r7, #15]
 800719c:	e016      	b.n	80071cc <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800719e:	7bfa      	ldrb	r2, [r7, #15]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	32de      	adds	r2, #222	; 0xde
 80071a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a8:	791a      	ldrb	r2, [r3, #4]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d108      	bne.n	80071c6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80071b4:	7bfa      	ldrb	r2, [r7, #15]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	32de      	adds	r2, #222	; 0xde
 80071ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80071c4:	e005      	b.n	80071d2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
 80071c8:	3301      	adds	r3, #1
 80071ca:	73fb      	strb	r3, [r7, #15]
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0e5      	beq.n	800719e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d016      	beq.n	800720a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	4798      	blx	r3
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d109      	bne.n	8007202 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2206      	movs	r2, #6
 80071f2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071fa:	2103      	movs	r1, #3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007200:	e073      	b.n	80072ea <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	220d      	movs	r2, #13
 8007206:	701a      	strb	r2, [r3, #0]
      break;
 8007208:	e06f      	b.n	80072ea <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	220d      	movs	r2, #13
 800720e:	701a      	strb	r2, [r3, #0]
      break;
 8007210:	e06b      	b.n	80072ea <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007218:	2b00      	cmp	r3, #0
 800721a:	d017      	beq.n	800724c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	4798      	blx	r3
 8007228:	4603      	mov	r3, r0
 800722a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	d103      	bne.n	800723c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	220b      	movs	r2, #11
 8007238:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800723a:	e058      	b.n	80072ee <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800723c:	7bbb      	ldrb	r3, [r7, #14]
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b02      	cmp	r3, #2
 8007242:	d154      	bne.n	80072ee <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	220d      	movs	r2, #13
 8007248:	701a      	strb	r2, [r3, #0]
      break;
 800724a:	e050      	b.n	80072ee <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	220d      	movs	r2, #13
 8007250:	701a      	strb	r2, [r3, #0]
      break;
 8007252:	e04c      	b.n	80072ee <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800725a:	2b00      	cmp	r3, #0
 800725c:	d049      	beq.n	80072f2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	4798      	blx	r3
      }
      break;
 800726a:	e042      	b.n	80072f2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7ff fd67 	bl	8006d48 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007280:	2b00      	cmp	r3, #0
 8007282:	d009      	beq.n	8007298 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d005      	beq.n	80072ae <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072a8:	2105      	movs	r1, #5
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d107      	bne.n	80072ca <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7ff fe20 	bl	8006f08 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072c8:	e014      	b.n	80072f4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 faa4 	bl	8008818 <USBH_LL_Start>
      break;
 80072d0:	e010      	b.n	80072f4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80072d2:	bf00      	nop
 80072d4:	e00e      	b.n	80072f4 <USBH_Process+0x3cc>
      break;
 80072d6:	bf00      	nop
 80072d8:	e00c      	b.n	80072f4 <USBH_Process+0x3cc>
      break;
 80072da:	bf00      	nop
 80072dc:	e00a      	b.n	80072f4 <USBH_Process+0x3cc>
    break;
 80072de:	bf00      	nop
 80072e0:	e008      	b.n	80072f4 <USBH_Process+0x3cc>
      break;
 80072e2:	bf00      	nop
 80072e4:	e006      	b.n	80072f4 <USBH_Process+0x3cc>
      break;
 80072e6:	bf00      	nop
 80072e8:	e004      	b.n	80072f4 <USBH_Process+0x3cc>
      break;
 80072ea:	bf00      	nop
 80072ec:	e002      	b.n	80072f4 <USBH_Process+0x3cc>
      break;
 80072ee:	bf00      	nop
 80072f0:	e000      	b.n	80072f4 <USBH_Process+0x3cc>
      break;
 80072f2:	bf00      	nop
  }
  return USBH_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop

08007300 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b088      	sub	sp, #32
 8007304:	af04      	add	r7, sp, #16
 8007306:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007308:	2301      	movs	r3, #1
 800730a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800730c:	2301      	movs	r3, #1
 800730e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	785b      	ldrb	r3, [r3, #1]
 8007314:	2b07      	cmp	r3, #7
 8007316:	f200 81c1 	bhi.w	800769c <USBH_HandleEnum+0x39c>
 800731a:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <USBH_HandleEnum+0x20>)
 800731c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007320:	08007341 	.word	0x08007341
 8007324:	080073ff 	.word	0x080073ff
 8007328:	08007469 	.word	0x08007469
 800732c:	080074f7 	.word	0x080074f7
 8007330:	08007561 	.word	0x08007561
 8007334:	080075d1 	.word	0x080075d1
 8007338:	08007617 	.word	0x08007617
 800733c:	0800765d 	.word	0x0800765d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007340:	2108      	movs	r1, #8
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fa50 	bl	80077e8 <USBH_Get_DevDesc>
 8007348:	4603      	mov	r3, r0
 800734a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800734c:	7bbb      	ldrb	r3, [r7, #14]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d130      	bne.n	80073b4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	7919      	ldrb	r1, [r3, #4]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007376:	b292      	uxth	r2, r2
 8007378:	9202      	str	r2, [sp, #8]
 800737a:	2200      	movs	r2, #0
 800737c:	9201      	str	r2, [sp, #4]
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	4603      	mov	r3, r0
 8007382:	2280      	movs	r2, #128	; 0x80
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f001 f865 	bl	8008454 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	7959      	ldrb	r1, [r3, #5]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800739e:	b292      	uxth	r2, r2
 80073a0:	9202      	str	r2, [sp, #8]
 80073a2:	2200      	movs	r2, #0
 80073a4:	9201      	str	r2, [sp, #4]
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	4603      	mov	r3, r0
 80073aa:	2200      	movs	r2, #0
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f001 f851 	bl	8008454 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80073b2:	e175      	b.n	80076a0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	f040 8172 	bne.w	80076a0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073c2:	3301      	adds	r3, #1
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d903      	bls.n	80073de <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	220d      	movs	r2, #13
 80073da:	701a      	strb	r2, [r3, #0]
      break;
 80073dc:	e160      	b.n	80076a0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	795b      	ldrb	r3, [r3, #5]
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 f885 	bl	80084f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	791b      	ldrb	r3, [r3, #4]
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f001 f87f 	bl	80084f4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	701a      	strb	r2, [r3, #0]
      break;
 80073fc:	e150      	b.n	80076a0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80073fe:	2112      	movs	r1, #18
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f9f1 	bl	80077e8 <USBH_Get_DevDesc>
 8007406:	4603      	mov	r3, r0
 8007408:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800740a:	7bbb      	ldrb	r3, [r7, #14]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d103      	bne.n	8007418 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2202      	movs	r2, #2
 8007414:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007416:	e145      	b.n	80076a4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	2b03      	cmp	r3, #3
 800741c:	f040 8142 	bne.w	80076a4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007426:	3301      	adds	r3, #1
 8007428:	b2da      	uxtb	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007436:	2b03      	cmp	r3, #3
 8007438:	d903      	bls.n	8007442 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	220d      	movs	r2, #13
 800743e:	701a      	strb	r2, [r3, #0]
      break;
 8007440:	e130      	b.n	80076a4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	795b      	ldrb	r3, [r3, #5]
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f001 f853 	bl	80084f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	791b      	ldrb	r3, [r3, #4]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f001 f84d 	bl	80084f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	701a      	strb	r2, [r3, #0]
      break;
 8007466:	e11d      	b.n	80076a4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007468:	2101      	movs	r1, #1
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fa68 	bl	8007940 <USBH_SetAddress>
 8007470:	4603      	mov	r3, r0
 8007472:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007474:	7bbb      	ldrb	r3, [r7, #14]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d132      	bne.n	80074e0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800747a:	2002      	movs	r0, #2
 800747c:	f001 fb30 	bl	8008ae0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2203      	movs	r2, #3
 800748c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	7919      	ldrb	r1, [r3, #4]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80074a2:	b292      	uxth	r2, r2
 80074a4:	9202      	str	r2, [sp, #8]
 80074a6:	2200      	movs	r2, #0
 80074a8:	9201      	str	r2, [sp, #4]
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	4603      	mov	r3, r0
 80074ae:	2280      	movs	r2, #128	; 0x80
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 ffcf 	bl	8008454 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	7959      	ldrb	r1, [r3, #5]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074ca:	b292      	uxth	r2, r2
 80074cc:	9202      	str	r2, [sp, #8]
 80074ce:	2200      	movs	r2, #0
 80074d0:	9201      	str	r2, [sp, #4]
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	4603      	mov	r3, r0
 80074d6:	2200      	movs	r2, #0
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 ffbb 	bl	8008454 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80074de:	e0e3      	b.n	80076a8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074e0:	7bbb      	ldrb	r3, [r7, #14]
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	f040 80e0 	bne.w	80076a8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	220d      	movs	r2, #13
 80074ec:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	705a      	strb	r2, [r3, #1]
      break;
 80074f4:	e0d8      	b.n	80076a8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80074f6:	2109      	movs	r1, #9
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f99d 	bl	8007838 <USBH_Get_CfgDesc>
 80074fe:	4603      	mov	r3, r0
 8007500:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007502:	7bbb      	ldrb	r3, [r7, #14]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d103      	bne.n	8007510 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2204      	movs	r2, #4
 800750c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800750e:	e0cd      	b.n	80076ac <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	2b03      	cmp	r3, #3
 8007514:	f040 80ca 	bne.w	80076ac <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800751e:	3301      	adds	r3, #1
 8007520:	b2da      	uxtb	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800752e:	2b03      	cmp	r3, #3
 8007530:	d903      	bls.n	800753a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	220d      	movs	r2, #13
 8007536:	701a      	strb	r2, [r3, #0]
      break;
 8007538:	e0b8      	b.n	80076ac <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	795b      	ldrb	r3, [r3, #5]
 800753e:	4619      	mov	r1, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 ffd7 	bl	80084f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	791b      	ldrb	r3, [r3, #4]
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 ffd1 	bl	80084f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	701a      	strb	r2, [r3, #0]
      break;
 800755e:	e0a5      	b.n	80076ac <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f965 	bl	8007838 <USBH_Get_CfgDesc>
 800756e:	4603      	mov	r3, r0
 8007570:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007572:	7bbb      	ldrb	r3, [r7, #14]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d103      	bne.n	8007580 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2205      	movs	r2, #5
 800757c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800757e:	e097      	b.n	80076b0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007580:	7bbb      	ldrb	r3, [r7, #14]
 8007582:	2b03      	cmp	r3, #3
 8007584:	f040 8094 	bne.w	80076b0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800758e:	3301      	adds	r3, #1
 8007590:	b2da      	uxtb	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d903      	bls.n	80075aa <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	220d      	movs	r2, #13
 80075a6:	701a      	strb	r2, [r3, #0]
      break;
 80075a8:	e082      	b.n	80076b0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	795b      	ldrb	r3, [r3, #5]
 80075ae:	4619      	mov	r1, r3
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 ff9f 	bl	80084f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	791b      	ldrb	r3, [r3, #4]
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 ff99 	bl	80084f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	701a      	strb	r2, [r3, #0]
      break;
 80075ce:	e06f      	b.n	80076b0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d019      	beq.n	800760e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80075e6:	23ff      	movs	r3, #255	; 0xff
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f949 	bl	8007880 <USBH_Get_StringDesc>
 80075ee:	4603      	mov	r3, r0
 80075f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80075f2:	7bbb      	ldrb	r3, [r7, #14]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d103      	bne.n	8007600 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2206      	movs	r2, #6
 80075fc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80075fe:	e059      	b.n	80076b4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007600:	7bbb      	ldrb	r3, [r7, #14]
 8007602:	2b03      	cmp	r3, #3
 8007604:	d156      	bne.n	80076b4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2206      	movs	r2, #6
 800760a:	705a      	strb	r2, [r3, #1]
      break;
 800760c:	e052      	b.n	80076b4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2206      	movs	r2, #6
 8007612:	705a      	strb	r2, [r3, #1]
      break;
 8007614:	e04e      	b.n	80076b4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800761c:	2b00      	cmp	r3, #0
 800761e:	d019      	beq.n	8007654 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800762c:	23ff      	movs	r3, #255	; 0xff
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f926 	bl	8007880 <USBH_Get_StringDesc>
 8007634:	4603      	mov	r3, r0
 8007636:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007638:	7bbb      	ldrb	r3, [r7, #14]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d103      	bne.n	8007646 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2207      	movs	r2, #7
 8007642:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007644:	e038      	b.n	80076b8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007646:	7bbb      	ldrb	r3, [r7, #14]
 8007648:	2b03      	cmp	r3, #3
 800764a:	d135      	bne.n	80076b8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2207      	movs	r2, #7
 8007650:	705a      	strb	r2, [r3, #1]
      break;
 8007652:	e031      	b.n	80076b8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2207      	movs	r2, #7
 8007658:	705a      	strb	r2, [r3, #1]
      break;
 800765a:	e02d      	b.n	80076b8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007662:	2b00      	cmp	r3, #0
 8007664:	d017      	beq.n	8007696 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007672:	23ff      	movs	r3, #255	; 0xff
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f903 	bl	8007880 <USBH_Get_StringDesc>
 800767a:	4603      	mov	r3, r0
 800767c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800767e:	7bbb      	ldrb	r3, [r7, #14]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d102      	bne.n	800768a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007684:	2300      	movs	r3, #0
 8007686:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007688:	e018      	b.n	80076bc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800768a:	7bbb      	ldrb	r3, [r7, #14]
 800768c:	2b03      	cmp	r3, #3
 800768e:	d115      	bne.n	80076bc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	73fb      	strb	r3, [r7, #15]
      break;
 8007694:	e012      	b.n	80076bc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	73fb      	strb	r3, [r7, #15]
      break;
 800769a:	e00f      	b.n	80076bc <USBH_HandleEnum+0x3bc>

    default:
      break;
 800769c:	bf00      	nop
 800769e:	e00e      	b.n	80076be <USBH_HandleEnum+0x3be>
      break;
 80076a0:	bf00      	nop
 80076a2:	e00c      	b.n	80076be <USBH_HandleEnum+0x3be>
      break;
 80076a4:	bf00      	nop
 80076a6:	e00a      	b.n	80076be <USBH_HandleEnum+0x3be>
      break;
 80076a8:	bf00      	nop
 80076aa:	e008      	b.n	80076be <USBH_HandleEnum+0x3be>
      break;
 80076ac:	bf00      	nop
 80076ae:	e006      	b.n	80076be <USBH_HandleEnum+0x3be>
      break;
 80076b0:	bf00      	nop
 80076b2:	e004      	b.n	80076be <USBH_HandleEnum+0x3be>
      break;
 80076b4:	bf00      	nop
 80076b6:	e002      	b.n	80076be <USBH_HandleEnum+0x3be>
      break;
 80076b8:	bf00      	nop
 80076ba:	e000      	b.n	80076be <USBH_HandleEnum+0x3be>
      break;
 80076bc:	bf00      	nop
  }
  return Status;
 80076be:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80076da:	bf00      	nop
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f804 	bl	800770a <USBH_HandleSof>
}
 8007702:	bf00      	nop
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b0b      	cmp	r3, #11
 800771a:	d10a      	bne.n	8007732 <USBH_HandleSof+0x28>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007722:	2b00      	cmp	r3, #0
 8007724:	d005      	beq.n	8007732 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	4798      	blx	r3
  }
}
 8007732:	bf00      	nop
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800773a:	b480      	push	{r7}
 800773c:	b083      	sub	sp, #12
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800774a:	bf00      	nop
}
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007756:	b480      	push	{r7}
 8007758:	b083      	sub	sp, #12
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007766:	bf00      	nop
}
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007772:	b480      	push	{r7}
 8007774:	b083      	sub	sp, #12
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f001 f844 	bl	800884e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	791b      	ldrb	r3, [r3, #4]
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fe91 	bl	80084f4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	795b      	ldrb	r3, [r3, #5]
 80077d6:	4619      	mov	r1, r3
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fe8b 	bl	80084f4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80077fa:	78fb      	ldrb	r3, [r7, #3]
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	4613      	mov	r3, r2
 8007802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007806:	2100      	movs	r1, #0
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f864 	bl	80078d6 <USBH_GetDescriptor>
 800780e:	4603      	mov	r3, r0
 8007810:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007812:	7bfb      	ldrb	r3, [r7, #15]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10a      	bne.n	800782e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007824:	78fa      	ldrb	r2, [r7, #3]
 8007826:	b292      	uxth	r2, r2
 8007828:	4619      	mov	r1, r3
 800782a:	f000 f918 	bl	8007a5e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800782e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af02      	add	r7, sp, #8
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	460b      	mov	r3, r1
 8007842:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	331c      	adds	r3, #28
 8007848:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800784a:	887b      	ldrh	r3, [r7, #2]
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007854:	2100      	movs	r1, #0
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f83d 	bl	80078d6 <USBH_GetDescriptor>
 800785c:	4603      	mov	r3, r0
 800785e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007860:	7bfb      	ldrb	r3, [r7, #15]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d107      	bne.n	8007876 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007866:	887b      	ldrh	r3, [r7, #2]
 8007868:	461a      	mov	r2, r3
 800786a:	68b9      	ldr	r1, [r7, #8]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f987 	bl	8007b80 <USBH_ParseCfgDesc>
 8007872:	4603      	mov	r3, r0
 8007874:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007876:	7bfb      	ldrb	r3, [r7, #15]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b088      	sub	sp, #32
 8007884:	af02      	add	r7, sp, #8
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	607a      	str	r2, [r7, #4]
 800788a:	461a      	mov	r2, r3
 800788c:	460b      	mov	r3, r1
 800788e:	72fb      	strb	r3, [r7, #11]
 8007890:	4613      	mov	r3, r2
 8007892:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007894:	7afb      	ldrb	r3, [r7, #11]
 8007896:	b29b      	uxth	r3, r3
 8007898:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800789c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80078a4:	893b      	ldrh	r3, [r7, #8]
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	460b      	mov	r3, r1
 80078aa:	2100      	movs	r1, #0
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 f812 	bl	80078d6 <USBH_GetDescriptor>
 80078b2:	4603      	mov	r3, r0
 80078b4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80078b6:	7dfb      	ldrb	r3, [r7, #23]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d107      	bne.n	80078cc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80078c2:	893a      	ldrh	r2, [r7, #8]
 80078c4:	6879      	ldr	r1, [r7, #4]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 fb24 	bl	8007f14 <USBH_ParseStringDesc>
  }

  return status;
 80078cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af00      	add	r7, sp, #0
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	607b      	str	r3, [r7, #4]
 80078e0:	460b      	mov	r3, r1
 80078e2:	72fb      	strb	r3, [r7, #11]
 80078e4:	4613      	mov	r3, r2
 80078e6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	789b      	ldrb	r3, [r3, #2]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d11c      	bne.n	800792a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80078f0:	7afb      	ldrb	r3, [r7, #11]
 80078f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2206      	movs	r2, #6
 8007900:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	893a      	ldrh	r2, [r7, #8]
 8007906:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007908:	893b      	ldrh	r3, [r7, #8]
 800790a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800790e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007912:	d104      	bne.n	800791e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f240 4209 	movw	r2, #1033	; 0x409
 800791a:	829a      	strh	r2, [r3, #20]
 800791c:	e002      	b.n	8007924 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	8b3a      	ldrh	r2, [r7, #24]
 8007928:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800792a:	8b3b      	ldrh	r3, [r7, #24]
 800792c:	461a      	mov	r2, r3
 800792e:	6879      	ldr	r1, [r7, #4]
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f000 fb3d 	bl	8007fb0 <USBH_CtlReq>
 8007936:	4603      	mov	r3, r0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	789b      	ldrb	r3, [r3, #2]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d10f      	bne.n	8007974 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2205      	movs	r2, #5
 800795e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007960:	78fb      	ldrb	r3, [r7, #3]
 8007962:	b29a      	uxth	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007974:	2200      	movs	r2, #0
 8007976:	2100      	movs	r1, #0
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fb19 	bl	8007fb0 <USBH_CtlReq>
 800797e:	4603      	mov	r3, r0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	789b      	ldrb	r3, [r3, #2]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d10e      	bne.n	80079ba <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2209      	movs	r2, #9
 80079a6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	887a      	ldrh	r2, [r7, #2]
 80079ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80079ba:	2200      	movs	r2, #0
 80079bc:	2100      	movs	r1, #0
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 faf6 	bl	8007fb0 <USBH_CtlReq>
 80079c4:	4603      	mov	r3, r0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b082      	sub	sp, #8
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	460b      	mov	r3, r1
 80079d8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	789b      	ldrb	r3, [r3, #2]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d10f      	bne.n	8007a02 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2203      	movs	r2, #3
 80079ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80079ee:	78fb      	ldrb	r3, [r7, #3]
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007a02:	2200      	movs	r2, #0
 8007a04:	2100      	movs	r1, #0
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fad2 	bl	8007fb0 <USBH_CtlReq>
 8007a0c:	4603      	mov	r3, r0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b082      	sub	sp, #8
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	460b      	mov	r3, r1
 8007a20:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	789b      	ldrb	r3, [r3, #2]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d10f      	bne.n	8007a4a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007a3c:	78fb      	ldrb	r3, [r7, #3]
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 faae 	bl	8007fb0 <USBH_CtlReq>
 8007a54:	4603      	mov	r3, r0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b085      	sub	sp, #20
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	781a      	ldrb	r2, [r3, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	785a      	ldrb	r2, [r3, #1]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	3302      	adds	r3, #2
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	3303      	adds	r3, #3
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	021b      	lsls	r3, r3, #8
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	4313      	orrs	r3, r2
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	791a      	ldrb	r2, [r3, #4]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	795a      	ldrb	r2, [r3, #5]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	799a      	ldrb	r2, [r3, #6]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	79da      	ldrb	r2, [r3, #7]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	79db      	ldrb	r3, [r3, #7]
 8007abc:	2b20      	cmp	r3, #32
 8007abe:	dc11      	bgt.n	8007ae4 <USBH_ParseDevDesc+0x86>
 8007ac0:	2b08      	cmp	r3, #8
 8007ac2:	db16      	blt.n	8007af2 <USBH_ParseDevDesc+0x94>
 8007ac4:	3b08      	subs	r3, #8
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8007acc:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	bf14      	ite	ne
 8007ad8:	2301      	movne	r3, #1
 8007ada:	2300      	moveq	r3, #0
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d102      	bne.n	8007ae8 <USBH_ParseDevDesc+0x8a>
 8007ae2:	e006      	b.n	8007af2 <USBH_ParseDevDesc+0x94>
 8007ae4:	2b40      	cmp	r3, #64	; 0x40
 8007ae6:	d104      	bne.n	8007af2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	79da      	ldrb	r2, [r3, #7]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	71da      	strb	r2, [r3, #7]
      break;
 8007af0:	e003      	b.n	8007afa <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2240      	movs	r2, #64	; 0x40
 8007af6:	71da      	strb	r2, [r3, #7]
      break;
 8007af8:	bf00      	nop
  }

  if (length > 8U)
 8007afa:	88fb      	ldrh	r3, [r7, #6]
 8007afc:	2b08      	cmp	r3, #8
 8007afe:	d939      	bls.n	8007b74 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	3308      	adds	r3, #8
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	3309      	adds	r3, #9
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	021b      	lsls	r3, r3, #8
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	4313      	orrs	r3, r2
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	330a      	adds	r3, #10
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	330b      	adds	r3, #11
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	021b      	lsls	r3, r3, #8
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	4313      	orrs	r3, r2
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	330c      	adds	r3, #12
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	330d      	adds	r3, #13
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	021b      	lsls	r3, r3, #8
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	7b9a      	ldrb	r2, [r3, #14]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	7bda      	ldrb	r2, [r3, #15]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	7c1a      	ldrb	r2, [r3, #16]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	7c5a      	ldrb	r2, [r3, #17]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	745a      	strb	r2, [r3, #17]
  }
}
 8007b74:	bf00      	nop
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b08c      	sub	sp, #48	; 0x30
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007b94:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	781a      	ldrb	r2, [r3, #0]
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	785a      	ldrb	r2, [r3, #1]
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	3302      	adds	r3, #2
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	3303      	adds	r3, #3
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	021b      	lsls	r3, r3, #8
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bdc:	bf28      	it	cs
 8007bde:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	791a      	ldrb	r2, [r3, #4]
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	795a      	ldrb	r2, [r3, #5]
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	799a      	ldrb	r2, [r3, #6]
 8007bfc:	6a3b      	ldr	r3, [r7, #32]
 8007bfe:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	79da      	ldrb	r2, [r3, #7]
 8007c04:	6a3b      	ldr	r3, [r7, #32]
 8007c06:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	7a1a      	ldrb	r2, [r3, #8]
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007c10:	6a3b      	ldr	r3, [r7, #32]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	2b09      	cmp	r3, #9
 8007c16:	d002      	beq.n	8007c1e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	2209      	movs	r2, #9
 8007c1c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007c1e:	88fb      	ldrh	r3, [r7, #6]
 8007c20:	2b09      	cmp	r3, #9
 8007c22:	f240 809d 	bls.w	8007d60 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007c26:	2309      	movs	r3, #9
 8007c28:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c2e:	e081      	b.n	8007d34 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c30:	f107 0316 	add.w	r3, r7, #22
 8007c34:	4619      	mov	r1, r3
 8007c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c38:	f000 f99f 	bl	8007f7a <USBH_GetNextDesc>
 8007c3c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	785b      	ldrb	r3, [r3, #1]
 8007c42:	2b04      	cmp	r3, #4
 8007c44:	d176      	bne.n	8007d34 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	2b09      	cmp	r3, #9
 8007c4c:	d002      	beq.n	8007c54 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c50:	2209      	movs	r2, #9
 8007c52:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c58:	221a      	movs	r2, #26
 8007c5a:	fb02 f303 	mul.w	r3, r2, r3
 8007c5e:	3308      	adds	r3, #8
 8007c60:	6a3a      	ldr	r2, [r7, #32]
 8007c62:	4413      	add	r3, r2
 8007c64:	3302      	adds	r3, #2
 8007c66:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007c68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c6a:	69f8      	ldr	r0, [r7, #28]
 8007c6c:	f000 f87e 	bl	8007d6c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007c70:	2300      	movs	r3, #0
 8007c72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007c76:	2300      	movs	r3, #0
 8007c78:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007c7a:	e043      	b.n	8007d04 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c7c:	f107 0316 	add.w	r3, r7, #22
 8007c80:	4619      	mov	r1, r3
 8007c82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c84:	f000 f979 	bl	8007f7a <USBH_GetNextDesc>
 8007c88:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8c:	785b      	ldrb	r3, [r3, #1]
 8007c8e:	2b05      	cmp	r3, #5
 8007c90:	d138      	bne.n	8007d04 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	795b      	ldrb	r3, [r3, #5]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d10f      	bne.n	8007cba <USBH_ParseCfgDesc+0x13a>
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	799b      	ldrb	r3, [r3, #6]
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d10b      	bne.n	8007cba <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	79db      	ldrb	r3, [r3, #7]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10f      	bne.n	8007cca <USBH_ParseCfgDesc+0x14a>
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2b09      	cmp	r3, #9
 8007cb0:	d00b      	beq.n	8007cca <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	2209      	movs	r2, #9
 8007cb6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007cb8:	e007      	b.n	8007cca <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	2b07      	cmp	r3, #7
 8007cc0:	d004      	beq.n	8007ccc <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc4:	2207      	movs	r2, #7
 8007cc6:	701a      	strb	r2, [r3, #0]
 8007cc8:	e000      	b.n	8007ccc <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007cca:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cd0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007cd4:	3201      	adds	r2, #1
 8007cd6:	00d2      	lsls	r2, r2, #3
 8007cd8:	211a      	movs	r1, #26
 8007cda:	fb01 f303 	mul.w	r3, r1, r3
 8007cde:	4413      	add	r3, r2
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	6a3a      	ldr	r2, [r7, #32]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cec:	69b9      	ldr	r1, [r7, #24]
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 f86b 	bl	8007dca <USBH_ParseEPDesc>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007cfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007cfe:	3301      	adds	r3, #1
 8007d00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	791b      	ldrb	r3, [r3, #4]
 8007d08:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d204      	bcs.n	8007d1a <USBH_ParseCfgDesc+0x19a>
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	885a      	ldrh	r2, [r3, #2]
 8007d14:	8afb      	ldrh	r3, [r7, #22]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d8b0      	bhi.n	8007c7c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	791b      	ldrb	r3, [r3, #4]
 8007d1e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d201      	bcs.n	8007d2a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e01c      	b.n	8007d64 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007d2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d2e:	3301      	adds	r3, #1
 8007d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007d34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d805      	bhi.n	8007d48 <USBH_ParseCfgDesc+0x1c8>
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	885a      	ldrh	r2, [r3, #2]
 8007d40:	8afb      	ldrh	r3, [r7, #22]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	f63f af74 	bhi.w	8007c30 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007d48:	6a3b      	ldr	r3, [r7, #32]
 8007d4a:	791b      	ldrb	r3, [r3, #4]
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	bf28      	it	cs
 8007d50:	2302      	movcs	r3, #2
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d201      	bcs.n	8007d60 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e001      	b.n	8007d64 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007d60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3730      	adds	r7, #48	; 0x30
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	781a      	ldrb	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	785a      	ldrb	r2, [r3, #1]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	789a      	ldrb	r2, [r3, #2]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	78da      	ldrb	r2, [r3, #3]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	791a      	ldrb	r2, [r3, #4]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	795a      	ldrb	r2, [r3, #5]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	799a      	ldrb	r2, [r3, #6]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	79da      	ldrb	r2, [r3, #7]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	7a1a      	ldrb	r2, [r3, #8]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	721a      	strb	r2, [r3, #8]
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b087      	sub	sp, #28
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	60b9      	str	r1, [r7, #8]
 8007dd4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	781a      	ldrb	r2, [r3, #0]
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	785a      	ldrb	r2, [r3, #1]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	789a      	ldrb	r2, [r3, #2]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	78da      	ldrb	r2, [r3, #3]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	3305      	adds	r3, #5
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	021b      	lsls	r3, r3, #8
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	799a      	ldrb	r2, [r3, #6]
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	889b      	ldrh	r3, [r3, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d102      	bne.n	8007e2c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007e26:	2303      	movs	r3, #3
 8007e28:	75fb      	strb	r3, [r7, #23]
 8007e2a:	e033      	b.n	8007e94 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	889b      	ldrh	r3, [r3, #4]
 8007e30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e34:	f023 0307 	bic.w	r3, r3, #7
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	889b      	ldrh	r3, [r3, #4]
 8007e42:	b21a      	sxth	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3304      	adds	r3, #4
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	b299      	uxth	r1, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3305      	adds	r3, #5
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	021b      	lsls	r3, r3, #8
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	430b      	orrs	r3, r1
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d110      	bne.n	8007e86 <USBH_ParseEPDesc+0xbc>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3304      	adds	r3, #4
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	b299      	uxth	r1, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	3305      	adds	r3, #5
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	021b      	lsls	r3, r3, #8
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	430b      	orrs	r3, r1
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	b21b      	sxth	r3, r3
 8007e7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e82:	b21b      	sxth	r3, r3
 8007e84:	e001      	b.n	8007e8a <USBH_ParseEPDesc+0xc0>
 8007e86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	b21b      	sxth	r3, r3
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d116      	bne.n	8007ecc <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	78db      	ldrb	r3, [r3, #3]
 8007ea2:	f003 0303 	and.w	r3, r3, #3
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d005      	beq.n	8007eb6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	78db      	ldrb	r3, [r3, #3]
 8007eae:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d127      	bne.n	8007f06 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	799b      	ldrb	r3, [r3, #6]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <USBH_ParseEPDesc+0xfc>
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	799b      	ldrb	r3, [r3, #6]
 8007ec2:	2b10      	cmp	r3, #16
 8007ec4:	d91f      	bls.n	8007f06 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	75fb      	strb	r3, [r7, #23]
 8007eca:	e01c      	b.n	8007f06 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	78db      	ldrb	r3, [r3, #3]
 8007ed0:	f003 0303 	and.w	r3, r3, #3
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d10a      	bne.n	8007eee <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	799b      	ldrb	r3, [r3, #6]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d003      	beq.n	8007ee8 <USBH_ParseEPDesc+0x11e>
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	799b      	ldrb	r3, [r3, #6]
 8007ee4:	2b10      	cmp	r3, #16
 8007ee6:	d90e      	bls.n	8007f06 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	75fb      	strb	r3, [r7, #23]
 8007eec:	e00b      	b.n	8007f06 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	78db      	ldrb	r3, [r3, #3]
 8007ef2:	f003 0303 	and.w	r3, r3, #3
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d105      	bne.n	8007f06 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	799b      	ldrb	r3, [r3, #6]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007f02:	2303      	movs	r3, #3
 8007f04:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	371c      	adds	r7, #28
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3301      	adds	r3, #1
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d120      	bne.n	8007f6e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	1e9a      	subs	r2, r3, #2
 8007f32:	88fb      	ldrh	r3, [r7, #6]
 8007f34:	4293      	cmp	r3, r2
 8007f36:	bf28      	it	cs
 8007f38:	4613      	movcs	r3, r2
 8007f3a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	3302      	adds	r3, #2
 8007f40:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007f42:	2300      	movs	r3, #0
 8007f44:	82fb      	strh	r3, [r7, #22]
 8007f46:	e00b      	b.n	8007f60 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007f48:	8afb      	ldrh	r3, [r7, #22]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	781a      	ldrb	r2, [r3, #0]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	3301      	adds	r3, #1
 8007f58:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007f5a:	8afb      	ldrh	r3, [r7, #22]
 8007f5c:	3302      	adds	r3, #2
 8007f5e:	82fb      	strh	r3, [r7, #22]
 8007f60:	8afa      	ldrh	r2, [r7, #22]
 8007f62:	8abb      	ldrh	r3, [r7, #20]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d3ef      	bcc.n	8007f48 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	701a      	strb	r2, [r3, #0]
  }
}
 8007f6e:	bf00      	nop
 8007f70:	371c      	adds	r7, #28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b085      	sub	sp, #20
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	881a      	ldrh	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	4413      	add	r3, r2
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	789b      	ldrb	r3, [r3, #2]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d002      	beq.n	8007fd0 <USBH_CtlReq+0x20>
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d00f      	beq.n	8007fee <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007fce:	e027      	b.n	8008020 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	88fa      	ldrh	r2, [r7, #6]
 8007fda:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2202      	movs	r2, #2
 8007fe6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	75fb      	strb	r3, [r7, #23]
      break;
 8007fec:	e018      	b.n	8008020 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f000 f81c 	bl	800802c <USBH_HandleControl>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007ff8:	7dfb      	ldrb	r3, [r7, #23]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d002      	beq.n	8008004 <USBH_CtlReq+0x54>
 8007ffe:	7dfb      	ldrb	r3, [r7, #23]
 8008000:	2b03      	cmp	r3, #3
 8008002:	d106      	bne.n	8008012 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2201      	movs	r2, #1
 8008008:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	761a      	strb	r2, [r3, #24]
      break;
 8008010:	e005      	b.n	800801e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008012:	7dfb      	ldrb	r3, [r7, #23]
 8008014:	2b02      	cmp	r3, #2
 8008016:	d102      	bne.n	800801e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2201      	movs	r2, #1
 800801c:	709a      	strb	r2, [r3, #2]
      break;
 800801e:	bf00      	nop
  }
  return status;
 8008020:	7dfb      	ldrb	r3, [r7, #23]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
	...

0800802c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af02      	add	r7, sp, #8
 8008032:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008034:	2301      	movs	r3, #1
 8008036:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008038:	2300      	movs	r3, #0
 800803a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	7e1b      	ldrb	r3, [r3, #24]
 8008040:	3b01      	subs	r3, #1
 8008042:	2b0a      	cmp	r3, #10
 8008044:	f200 8156 	bhi.w	80082f4 <USBH_HandleControl+0x2c8>
 8008048:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <USBH_HandleControl+0x24>)
 800804a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804e:	bf00      	nop
 8008050:	0800807d 	.word	0x0800807d
 8008054:	08008097 	.word	0x08008097
 8008058:	08008101 	.word	0x08008101
 800805c:	08008127 	.word	0x08008127
 8008060:	0800815f 	.word	0x0800815f
 8008064:	08008189 	.word	0x08008189
 8008068:	080081db 	.word	0x080081db
 800806c:	080081fd 	.word	0x080081fd
 8008070:	08008239 	.word	0x08008239
 8008074:	0800825f 	.word	0x0800825f
 8008078:	0800829d 	.word	0x0800829d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f103 0110 	add.w	r1, r3, #16
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	795b      	ldrb	r3, [r3, #5]
 8008086:	461a      	mov	r2, r3
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f943 	bl	8008314 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2202      	movs	r2, #2
 8008092:	761a      	strb	r2, [r3, #24]
      break;
 8008094:	e139      	b.n	800830a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	795b      	ldrb	r3, [r3, #5]
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fcc5 	bl	8008a2c <USBH_LL_GetURBState>
 80080a2:	4603      	mov	r3, r0
 80080a4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80080a6:	7bbb      	ldrb	r3, [r7, #14]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d11e      	bne.n	80080ea <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	7c1b      	ldrb	r3, [r3, #16]
 80080b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080b4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	8adb      	ldrh	r3, [r3, #22]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00a      	beq.n	80080d4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80080be:	7b7b      	ldrb	r3, [r7, #13]
 80080c0:	2b80      	cmp	r3, #128	; 0x80
 80080c2:	d103      	bne.n	80080cc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2203      	movs	r2, #3
 80080c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080ca:	e115      	b.n	80082f8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2205      	movs	r2, #5
 80080d0:	761a      	strb	r2, [r3, #24]
      break;
 80080d2:	e111      	b.n	80082f8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80080d4:	7b7b      	ldrb	r3, [r7, #13]
 80080d6:	2b80      	cmp	r3, #128	; 0x80
 80080d8:	d103      	bne.n	80080e2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2209      	movs	r2, #9
 80080de:	761a      	strb	r2, [r3, #24]
      break;
 80080e0:	e10a      	b.n	80082f8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2207      	movs	r2, #7
 80080e6:	761a      	strb	r2, [r3, #24]
      break;
 80080e8:	e106      	b.n	80082f8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	2b04      	cmp	r3, #4
 80080ee:	d003      	beq.n	80080f8 <USBH_HandleControl+0xcc>
 80080f0:	7bbb      	ldrb	r3, [r7, #14]
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	f040 8100 	bne.w	80082f8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	220b      	movs	r2, #11
 80080fc:	761a      	strb	r2, [r3, #24]
      break;
 80080fe:	e0fb      	b.n	80082f8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008106:	b29a      	uxth	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6899      	ldr	r1, [r3, #8]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	899a      	ldrh	r2, [r3, #12]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	791b      	ldrb	r3, [r3, #4]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f93a 	bl	8008392 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2204      	movs	r2, #4
 8008122:	761a      	strb	r2, [r3, #24]
      break;
 8008124:	e0f1      	b.n	800830a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	791b      	ldrb	r3, [r3, #4]
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fc7d 	bl	8008a2c <USBH_LL_GetURBState>
 8008132:	4603      	mov	r3, r0
 8008134:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008136:	7bbb      	ldrb	r3, [r7, #14]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d102      	bne.n	8008142 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2209      	movs	r2, #9
 8008140:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008142:	7bbb      	ldrb	r3, [r7, #14]
 8008144:	2b05      	cmp	r3, #5
 8008146:	d102      	bne.n	800814e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008148:	2303      	movs	r3, #3
 800814a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800814c:	e0d6      	b.n	80082fc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800814e:	7bbb      	ldrb	r3, [r7, #14]
 8008150:	2b04      	cmp	r3, #4
 8008152:	f040 80d3 	bne.w	80082fc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	220b      	movs	r2, #11
 800815a:	761a      	strb	r2, [r3, #24]
      break;
 800815c:	e0ce      	b.n	80082fc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6899      	ldr	r1, [r3, #8]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	899a      	ldrh	r2, [r3, #12]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	795b      	ldrb	r3, [r3, #5]
 800816a:	2001      	movs	r0, #1
 800816c:	9000      	str	r0, [sp, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f8ea 	bl	8008348 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800817a:	b29a      	uxth	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2206      	movs	r2, #6
 8008184:	761a      	strb	r2, [r3, #24]
      break;
 8008186:	e0c0      	b.n	800830a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	795b      	ldrb	r3, [r3, #5]
 800818c:	4619      	mov	r1, r3
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fc4c 	bl	8008a2c <USBH_LL_GetURBState>
 8008194:	4603      	mov	r3, r0
 8008196:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d103      	bne.n	80081a6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2207      	movs	r2, #7
 80081a2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80081a4:	e0ac      	b.n	8008300 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80081a6:	7bbb      	ldrb	r3, [r7, #14]
 80081a8:	2b05      	cmp	r3, #5
 80081aa:	d105      	bne.n	80081b8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	220c      	movs	r2, #12
 80081b0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80081b2:	2303      	movs	r3, #3
 80081b4:	73fb      	strb	r3, [r7, #15]
      break;
 80081b6:	e0a3      	b.n	8008300 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80081b8:	7bbb      	ldrb	r3, [r7, #14]
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d103      	bne.n	80081c6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2205      	movs	r2, #5
 80081c2:	761a      	strb	r2, [r3, #24]
      break;
 80081c4:	e09c      	b.n	8008300 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	f040 8099 	bne.w	8008300 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	220b      	movs	r2, #11
 80081d2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80081d4:	2302      	movs	r3, #2
 80081d6:	73fb      	strb	r3, [r7, #15]
      break;
 80081d8:	e092      	b.n	8008300 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	791b      	ldrb	r3, [r3, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	2100      	movs	r1, #0
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f8d5 	bl	8008392 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2208      	movs	r2, #8
 80081f8:	761a      	strb	r2, [r3, #24]

      break;
 80081fa:	e086      	b.n	800830a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	791b      	ldrb	r3, [r3, #4]
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fc12 	bl	8008a2c <USBH_LL_GetURBState>
 8008208:	4603      	mov	r3, r0
 800820a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800820c:	7bbb      	ldrb	r3, [r7, #14]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d105      	bne.n	800821e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	220d      	movs	r2, #13
 8008216:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800821c:	e072      	b.n	8008304 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800821e:	7bbb      	ldrb	r3, [r7, #14]
 8008220:	2b04      	cmp	r3, #4
 8008222:	d103      	bne.n	800822c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	220b      	movs	r2, #11
 8008228:	761a      	strb	r2, [r3, #24]
      break;
 800822a:	e06b      	b.n	8008304 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800822c:	7bbb      	ldrb	r3, [r7, #14]
 800822e:	2b05      	cmp	r3, #5
 8008230:	d168      	bne.n	8008304 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008232:	2303      	movs	r3, #3
 8008234:	73fb      	strb	r3, [r7, #15]
      break;
 8008236:	e065      	b.n	8008304 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	795b      	ldrb	r3, [r3, #5]
 800823c:	2201      	movs	r2, #1
 800823e:	9200      	str	r2, [sp, #0]
 8008240:	2200      	movs	r2, #0
 8008242:	2100      	movs	r1, #0
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f87f 	bl	8008348 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008250:	b29a      	uxth	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	220a      	movs	r2, #10
 800825a:	761a      	strb	r2, [r3, #24]
      break;
 800825c:	e055      	b.n	800830a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	795b      	ldrb	r3, [r3, #5]
 8008262:	4619      	mov	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fbe1 	bl	8008a2c <USBH_LL_GetURBState>
 800826a:	4603      	mov	r3, r0
 800826c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800826e:	7bbb      	ldrb	r3, [r7, #14]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d105      	bne.n	8008280 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	220d      	movs	r2, #13
 800827c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800827e:	e043      	b.n	8008308 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008280:	7bbb      	ldrb	r3, [r7, #14]
 8008282:	2b02      	cmp	r3, #2
 8008284:	d103      	bne.n	800828e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2209      	movs	r2, #9
 800828a:	761a      	strb	r2, [r3, #24]
      break;
 800828c:	e03c      	b.n	8008308 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800828e:	7bbb      	ldrb	r3, [r7, #14]
 8008290:	2b04      	cmp	r3, #4
 8008292:	d139      	bne.n	8008308 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	220b      	movs	r2, #11
 8008298:	761a      	strb	r2, [r3, #24]
      break;
 800829a:	e035      	b.n	8008308 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	7e5b      	ldrb	r3, [r3, #25]
 80082a0:	3301      	adds	r3, #1
 80082a2:	b2da      	uxtb	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	765a      	strb	r2, [r3, #25]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	7e5b      	ldrb	r3, [r3, #25]
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d806      	bhi.n	80082be <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80082bc:	e025      	b.n	800830a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082c4:	2106      	movs	r1, #6
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	795b      	ldrb	r3, [r3, #5]
 80082d4:	4619      	mov	r1, r3
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f90c 	bl	80084f4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	791b      	ldrb	r3, [r3, #4]
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f906 	bl	80084f4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80082ee:	2302      	movs	r3, #2
 80082f0:	73fb      	strb	r3, [r7, #15]
      break;
 80082f2:	e00a      	b.n	800830a <USBH_HandleControl+0x2de>

    default:
      break;
 80082f4:	bf00      	nop
 80082f6:	e008      	b.n	800830a <USBH_HandleControl+0x2de>
      break;
 80082f8:	bf00      	nop
 80082fa:	e006      	b.n	800830a <USBH_HandleControl+0x2de>
      break;
 80082fc:	bf00      	nop
 80082fe:	e004      	b.n	800830a <USBH_HandleControl+0x2de>
      break;
 8008300:	bf00      	nop
 8008302:	e002      	b.n	800830a <USBH_HandleControl+0x2de>
      break;
 8008304:	bf00      	nop
 8008306:	e000      	b.n	800830a <USBH_HandleControl+0x2de>
      break;
 8008308:	bf00      	nop
  }

  return status;
 800830a:	7bfb      	ldrb	r3, [r7, #15]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b088      	sub	sp, #32
 8008318:	af04      	add	r7, sp, #16
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	4613      	mov	r3, r2
 8008320:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008322:	79f9      	ldrb	r1, [r7, #7]
 8008324:	2300      	movs	r3, #0
 8008326:	9303      	str	r3, [sp, #12]
 8008328:	2308      	movs	r3, #8
 800832a:	9302      	str	r3, [sp, #8]
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	9301      	str	r3, [sp, #4]
 8008330:	2300      	movs	r3, #0
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	2300      	movs	r3, #0
 8008336:	2200      	movs	r2, #0
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f000 fb46 	bl	80089ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b088      	sub	sp, #32
 800834c:	af04      	add	r7, sp, #16
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	4611      	mov	r1, r2
 8008354:	461a      	mov	r2, r3
 8008356:	460b      	mov	r3, r1
 8008358:	80fb      	strh	r3, [r7, #6]
 800835a:	4613      	mov	r3, r2
 800835c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008368:	2300      	movs	r3, #0
 800836a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800836c:	7979      	ldrb	r1, [r7, #5]
 800836e:	7e3b      	ldrb	r3, [r7, #24]
 8008370:	9303      	str	r3, [sp, #12]
 8008372:	88fb      	ldrh	r3, [r7, #6]
 8008374:	9302      	str	r3, [sp, #8]
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	9301      	str	r3, [sp, #4]
 800837a:	2301      	movs	r3, #1
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	2300      	movs	r3, #0
 8008380:	2200      	movs	r2, #0
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f000 fb21 	bl	80089ca <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b088      	sub	sp, #32
 8008396:	af04      	add	r7, sp, #16
 8008398:	60f8      	str	r0, [r7, #12]
 800839a:	60b9      	str	r1, [r7, #8]
 800839c:	4611      	mov	r1, r2
 800839e:	461a      	mov	r2, r3
 80083a0:	460b      	mov	r3, r1
 80083a2:	80fb      	strh	r3, [r7, #6]
 80083a4:	4613      	mov	r3, r2
 80083a6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083a8:	7979      	ldrb	r1, [r7, #5]
 80083aa:	2300      	movs	r3, #0
 80083ac:	9303      	str	r3, [sp, #12]
 80083ae:	88fb      	ldrh	r3, [r7, #6]
 80083b0:	9302      	str	r3, [sp, #8]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	9301      	str	r3, [sp, #4]
 80083b6:	2301      	movs	r3, #1
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	2300      	movs	r3, #0
 80083bc:	2201      	movs	r2, #1
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f000 fb03 	bl	80089ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80083c4:	2300      	movs	r3, #0

}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b088      	sub	sp, #32
 80083d2:	af04      	add	r7, sp, #16
 80083d4:	60f8      	str	r0, [r7, #12]
 80083d6:	60b9      	str	r1, [r7, #8]
 80083d8:	4611      	mov	r1, r2
 80083da:	461a      	mov	r2, r3
 80083dc:	460b      	mov	r3, r1
 80083de:	80fb      	strh	r3, [r7, #6]
 80083e0:	4613      	mov	r3, r2
 80083e2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80083ee:	2300      	movs	r3, #0
 80083f0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083f2:	7979      	ldrb	r1, [r7, #5]
 80083f4:	7e3b      	ldrb	r3, [r7, #24]
 80083f6:	9303      	str	r3, [sp, #12]
 80083f8:	88fb      	ldrh	r3, [r7, #6]
 80083fa:	9302      	str	r3, [sp, #8]
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	9301      	str	r3, [sp, #4]
 8008400:	2301      	movs	r3, #1
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	2302      	movs	r3, #2
 8008406:	2200      	movs	r2, #0
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 fade 	bl	80089ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b088      	sub	sp, #32
 800841c:	af04      	add	r7, sp, #16
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	4611      	mov	r1, r2
 8008424:	461a      	mov	r2, r3
 8008426:	460b      	mov	r3, r1
 8008428:	80fb      	strh	r3, [r7, #6]
 800842a:	4613      	mov	r3, r2
 800842c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800842e:	7979      	ldrb	r1, [r7, #5]
 8008430:	2300      	movs	r3, #0
 8008432:	9303      	str	r3, [sp, #12]
 8008434:	88fb      	ldrh	r3, [r7, #6]
 8008436:	9302      	str	r3, [sp, #8]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	9301      	str	r3, [sp, #4]
 800843c:	2301      	movs	r3, #1
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	2302      	movs	r3, #2
 8008442:	2201      	movs	r2, #1
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f000 fac0 	bl	80089ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af04      	add	r7, sp, #16
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	4608      	mov	r0, r1
 800845e:	4611      	mov	r1, r2
 8008460:	461a      	mov	r2, r3
 8008462:	4603      	mov	r3, r0
 8008464:	70fb      	strb	r3, [r7, #3]
 8008466:	460b      	mov	r3, r1
 8008468:	70bb      	strb	r3, [r7, #2]
 800846a:	4613      	mov	r3, r2
 800846c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800846e:	7878      	ldrb	r0, [r7, #1]
 8008470:	78ba      	ldrb	r2, [r7, #2]
 8008472:	78f9      	ldrb	r1, [r7, #3]
 8008474:	8b3b      	ldrh	r3, [r7, #24]
 8008476:	9302      	str	r3, [sp, #8]
 8008478:	7d3b      	ldrb	r3, [r7, #20]
 800847a:	9301      	str	r3, [sp, #4]
 800847c:	7c3b      	ldrb	r3, [r7, #16]
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	4603      	mov	r3, r0
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fa53 	bl	800892e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b082      	sub	sp, #8
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	460b      	mov	r3, r1
 800849c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800849e:	78fb      	ldrb	r3, [r7, #3]
 80084a0:	4619      	mov	r1, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fa72 	bl	800898c <USBH_LL_ClosePipe>

  return USBH_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	460b      	mov	r3, r1
 80084bc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f836 	bl	8008530 <USBH_GetFreePipe>
 80084c4:	4603      	mov	r3, r0
 80084c6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80084c8:	89fb      	ldrh	r3, [r7, #14]
 80084ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d00a      	beq.n	80084e8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80084d2:	78fa      	ldrb	r2, [r7, #3]
 80084d4:	89fb      	ldrh	r3, [r7, #14]
 80084d6:	f003 030f 	and.w	r3, r3, #15
 80084da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084de:	6879      	ldr	r1, [r7, #4]
 80084e0:	33e0      	adds	r3, #224	; 0xe0
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	440b      	add	r3, r1
 80084e6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80084e8:	89fb      	ldrh	r3, [r7, #14]
 80084ea:	b2db      	uxtb	r3, r3
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	2b0f      	cmp	r3, #15
 8008504:	d80d      	bhi.n	8008522 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008506:	78fb      	ldrb	r3, [r7, #3]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	33e0      	adds	r3, #224	; 0xe0
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	4413      	add	r3, r2
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	78fb      	ldrb	r3, [r7, #3]
 8008514:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008518:	6879      	ldr	r1, [r7, #4]
 800851a:	33e0      	adds	r3, #224	; 0xe0
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	440b      	add	r3, r1
 8008520:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008538:	2300      	movs	r3, #0
 800853a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800853c:	2300      	movs	r3, #0
 800853e:	73fb      	strb	r3, [r7, #15]
 8008540:	e00f      	b.n	8008562 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008542:	7bfb      	ldrb	r3, [r7, #15]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	33e0      	adds	r3, #224	; 0xe0
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008552:	2b00      	cmp	r3, #0
 8008554:	d102      	bne.n	800855c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008556:	7bfb      	ldrb	r3, [r7, #15]
 8008558:	b29b      	uxth	r3, r3
 800855a:	e007      	b.n	800856c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	3301      	adds	r3, #1
 8008560:	73fb      	strb	r3, [r7, #15]
 8008562:	7bfb      	ldrb	r3, [r7, #15]
 8008564:	2b0f      	cmp	r3, #15
 8008566:	d9ec      	bls.n	8008542 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008568:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800856c:	4618      	mov	r0, r3
 800856e:	3714      	adds	r7, #20
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800857c:	2201      	movs	r2, #1
 800857e:	490e      	ldr	r1, [pc, #56]	; (80085b8 <MX_USB_HOST_Init+0x40>)
 8008580:	480e      	ldr	r0, [pc, #56]	; (80085bc <MX_USB_HOST_Init+0x44>)
 8008582:	f7fe fba7 	bl	8006cd4 <USBH_Init>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800858c:	f7f8 fb06 	bl	8000b9c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008590:	490b      	ldr	r1, [pc, #44]	; (80085c0 <MX_USB_HOST_Init+0x48>)
 8008592:	480a      	ldr	r0, [pc, #40]	; (80085bc <MX_USB_HOST_Init+0x44>)
 8008594:	f7fe fc2c 	bl	8006df0 <USBH_RegisterClass>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d001      	beq.n	80085a2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800859e:	f7f8 fafd 	bl	8000b9c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80085a2:	4806      	ldr	r0, [pc, #24]	; (80085bc <MX_USB_HOST_Init+0x44>)
 80085a4:	f7fe fcb0 	bl	8006f08 <USBH_Start>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d001      	beq.n	80085b2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80085ae:	f7f8 faf5 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80085b2:	bf00      	nop
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	080085d9 	.word	0x080085d9
 80085bc:	20000244 	.word	0x20000244
 80085c0:	20000010 	.word	0x20000010

080085c4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80085c8:	4802      	ldr	r0, [pc, #8]	; (80085d4 <MX_USB_HOST_Process+0x10>)
 80085ca:	f7fe fcad 	bl	8006f28 <USBH_Process>
}
 80085ce:	bf00      	nop
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	20000244 	.word	0x20000244

080085d8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	460b      	mov	r3, r1
 80085e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80085e4:	78fb      	ldrb	r3, [r7, #3]
 80085e6:	3b01      	subs	r3, #1
 80085e8:	2b04      	cmp	r3, #4
 80085ea:	d819      	bhi.n	8008620 <USBH_UserProcess+0x48>
 80085ec:	a201      	add	r2, pc, #4	; (adr r2, 80085f4 <USBH_UserProcess+0x1c>)
 80085ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f2:	bf00      	nop
 80085f4:	08008621 	.word	0x08008621
 80085f8:	08008611 	.word	0x08008611
 80085fc:	08008621 	.word	0x08008621
 8008600:	08008619 	.word	0x08008619
 8008604:	08008609 	.word	0x08008609
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008608:	4b09      	ldr	r3, [pc, #36]	; (8008630 <USBH_UserProcess+0x58>)
 800860a:	2203      	movs	r2, #3
 800860c:	701a      	strb	r2, [r3, #0]
  break;
 800860e:	e008      	b.n	8008622 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008610:	4b07      	ldr	r3, [pc, #28]	; (8008630 <USBH_UserProcess+0x58>)
 8008612:	2202      	movs	r2, #2
 8008614:	701a      	strb	r2, [r3, #0]
  break;
 8008616:	e004      	b.n	8008622 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008618:	4b05      	ldr	r3, [pc, #20]	; (8008630 <USBH_UserProcess+0x58>)
 800861a:	2201      	movs	r2, #1
 800861c:	701a      	strb	r2, [r3, #0]
  break;
 800861e:	e000      	b.n	8008622 <USBH_UserProcess+0x4a>

  default:
  break;
 8008620:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008622:	bf00      	nop
 8008624:	370c      	adds	r7, #12
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	2000061c 	.word	0x2000061c

08008634 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b08a      	sub	sp, #40	; 0x28
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800863c:	f107 0314 	add.w	r3, r7, #20
 8008640:	2200      	movs	r2, #0
 8008642:	601a      	str	r2, [r3, #0]
 8008644:	605a      	str	r2, [r3, #4]
 8008646:	609a      	str	r2, [r3, #8]
 8008648:	60da      	str	r2, [r3, #12]
 800864a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008654:	d147      	bne.n	80086e6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008656:	2300      	movs	r3, #0
 8008658:	613b      	str	r3, [r7, #16]
 800865a:	4b25      	ldr	r3, [pc, #148]	; (80086f0 <HAL_HCD_MspInit+0xbc>)
 800865c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865e:	4a24      	ldr	r2, [pc, #144]	; (80086f0 <HAL_HCD_MspInit+0xbc>)
 8008660:	f043 0301 	orr.w	r3, r3, #1
 8008664:	6313      	str	r3, [r2, #48]	; 0x30
 8008666:	4b22      	ldr	r3, [pc, #136]	; (80086f0 <HAL_HCD_MspInit+0xbc>)
 8008668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866a:	f003 0301 	and.w	r3, r3, #1
 800866e:	613b      	str	r3, [r7, #16]
 8008670:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008672:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008678:	2300      	movs	r3, #0
 800867a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800867c:	2300      	movs	r3, #0
 800867e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008680:	f107 0314 	add.w	r3, r7, #20
 8008684:	4619      	mov	r1, r3
 8008686:	481b      	ldr	r0, [pc, #108]	; (80086f4 <HAL_HCD_MspInit+0xc0>)
 8008688:	f7f8 fe9a 	bl	80013c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800868c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008692:	2302      	movs	r3, #2
 8008694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008696:	2300      	movs	r3, #0
 8008698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800869a:	2300      	movs	r3, #0
 800869c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800869e:	230a      	movs	r3, #10
 80086a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086a2:	f107 0314 	add.w	r3, r7, #20
 80086a6:	4619      	mov	r1, r3
 80086a8:	4812      	ldr	r0, [pc, #72]	; (80086f4 <HAL_HCD_MspInit+0xc0>)
 80086aa:	f7f8 fe89 	bl	80013c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80086ae:	4b10      	ldr	r3, [pc, #64]	; (80086f0 <HAL_HCD_MspInit+0xbc>)
 80086b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b2:	4a0f      	ldr	r2, [pc, #60]	; (80086f0 <HAL_HCD_MspInit+0xbc>)
 80086b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086b8:	6353      	str	r3, [r2, #52]	; 0x34
 80086ba:	2300      	movs	r3, #0
 80086bc:	60fb      	str	r3, [r7, #12]
 80086be:	4b0c      	ldr	r3, [pc, #48]	; (80086f0 <HAL_HCD_MspInit+0xbc>)
 80086c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086c2:	4a0b      	ldr	r2, [pc, #44]	; (80086f0 <HAL_HCD_MspInit+0xbc>)
 80086c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086c8:	6453      	str	r3, [r2, #68]	; 0x44
 80086ca:	4b09      	ldr	r3, [pc, #36]	; (80086f0 <HAL_HCD_MspInit+0xbc>)
 80086cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086d2:	60fb      	str	r3, [r7, #12]
 80086d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80086d6:	2200      	movs	r2, #0
 80086d8:	2100      	movs	r1, #0
 80086da:	2043      	movs	r0, #67	; 0x43
 80086dc:	f7f8 fe39 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80086e0:	2043      	movs	r0, #67	; 0x43
 80086e2:	f7f8 fe52 	bl	800138a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80086e6:	bf00      	nop
 80086e8:	3728      	adds	r7, #40	; 0x28
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	40023800 	.word	0x40023800
 80086f4:	40020000 	.word	0x40020000

080086f8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008706:	4618      	mov	r0, r3
 8008708:	f7fe ffed 	bl	80076e6 <USBH_LL_IncTimer>
}
 800870c:	bf00      	nop
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008722:	4618      	mov	r0, r3
 8008724:	f7ff f825 	bl	8007772 <USBH_LL_Connect>
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800873e:	4618      	mov	r0, r3
 8008740:	f7ff f82e 	bl	80077a0 <USBH_LL_Disconnect>
}
 8008744:	bf00      	nop
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	460b      	mov	r3, r1
 8008756:	70fb      	strb	r3, [r7, #3]
 8008758:	4613      	mov	r3, r2
 800875a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008776:	4618      	mov	r0, r3
 8008778:	f7fe ffdf 	bl	800773a <USBH_LL_PortEnabled>
}
 800877c:	bf00      	nop
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008792:	4618      	mov	r0, r3
 8008794:	f7fe ffdf 	bl	8007756 <USBH_LL_PortDisabled>
}
 8008798:	bf00      	nop
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d12a      	bne.n	8008808 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80087b2:	4a18      	ldr	r2, [pc, #96]	; (8008814 <USBH_LL_Init+0x74>)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a15      	ldr	r2, [pc, #84]	; (8008814 <USBH_LL_Init+0x74>)
 80087be:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80087c2:	4b14      	ldr	r3, [pc, #80]	; (8008814 <USBH_LL_Init+0x74>)
 80087c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80087c8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80087ca:	4b12      	ldr	r3, [pc, #72]	; (8008814 <USBH_LL_Init+0x74>)
 80087cc:	2208      	movs	r2, #8
 80087ce:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80087d0:	4b10      	ldr	r3, [pc, #64]	; (8008814 <USBH_LL_Init+0x74>)
 80087d2:	2201      	movs	r2, #1
 80087d4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80087d6:	4b0f      	ldr	r3, [pc, #60]	; (8008814 <USBH_LL_Init+0x74>)
 80087d8:	2200      	movs	r2, #0
 80087da:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80087dc:	4b0d      	ldr	r3, [pc, #52]	; (8008814 <USBH_LL_Init+0x74>)
 80087de:	2202      	movs	r2, #2
 80087e0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80087e2:	4b0c      	ldr	r3, [pc, #48]	; (8008814 <USBH_LL_Init+0x74>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80087e8:	480a      	ldr	r0, [pc, #40]	; (8008814 <USBH_LL_Init+0x74>)
 80087ea:	f7f8 ffcf 	bl	800178c <HAL_HCD_Init>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80087f4:	f7f8 f9d2 	bl	8000b9c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80087f8:	4806      	ldr	r0, [pc, #24]	; (8008814 <USBH_LL_Init+0x74>)
 80087fa:	f7f9 fbb2 	bl	8001f62 <HAL_HCD_GetCurrentFrame>
 80087fe:	4603      	mov	r3, r0
 8008800:	4619      	mov	r1, r3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7fe ff60 	bl	80076c8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	20000620 	.word	0x20000620

08008818 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800882e:	4618      	mov	r0, r3
 8008830:	f7f9 fb21 	bl	8001e76 <HAL_HCD_Start>
 8008834:	4603      	mov	r3, r0
 8008836:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	4618      	mov	r0, r3
 800883c:	f000 f95c 	bl	8008af8 <USBH_Get_USB_Status>
 8008840:	4603      	mov	r3, r0
 8008842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008844:	7bbb      	ldrb	r3, [r7, #14]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b084      	sub	sp, #16
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008856:	2300      	movs	r3, #0
 8008858:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008864:	4618      	mov	r0, r3
 8008866:	f7f9 fb29 	bl	8001ebc <HAL_HCD_Stop>
 800886a:	4603      	mov	r3, r0
 800886c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800886e:	7bfb      	ldrb	r3, [r7, #15]
 8008870:	4618      	mov	r0, r3
 8008872:	f000 f941 	bl	8008af8 <USBH_Get_USB_Status>
 8008876:	4603      	mov	r3, r0
 8008878:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800887a:	7bbb      	ldrb	r3, [r7, #14]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800888c:	2301      	movs	r3, #1
 800888e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008896:	4618      	mov	r0, r3
 8008898:	f7f9 fb71 	bl	8001f7e <HAL_HCD_GetCurrentSpeed>
 800889c:	4603      	mov	r3, r0
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d00c      	beq.n	80088bc <USBH_LL_GetSpeed+0x38>
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d80d      	bhi.n	80088c2 <USBH_LL_GetSpeed+0x3e>
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d002      	beq.n	80088b0 <USBH_LL_GetSpeed+0x2c>
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d003      	beq.n	80088b6 <USBH_LL_GetSpeed+0x32>
 80088ae:	e008      	b.n	80088c2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]
    break;
 80088b4:	e008      	b.n	80088c8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80088b6:	2301      	movs	r3, #1
 80088b8:	73fb      	strb	r3, [r7, #15]
    break;
 80088ba:	e005      	b.n	80088c8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80088bc:	2302      	movs	r3, #2
 80088be:	73fb      	strb	r3, [r7, #15]
    break;
 80088c0:	e002      	b.n	80088c8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80088c2:	2301      	movs	r3, #1
 80088c4:	73fb      	strb	r3, [r7, #15]
    break;
 80088c6:	bf00      	nop
  }
  return  speed;
 80088c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7f9 fb04 	bl	8001ef6 <HAL_HCD_ResetPort>
 80088ee:	4603      	mov	r3, r0
 80088f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 f8ff 	bl	8008af8 <USBH_Get_USB_Status>
 80088fa:	4603      	mov	r3, r0
 80088fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800891a:	78fa      	ldrb	r2, [r7, #3]
 800891c:	4611      	mov	r1, r2
 800891e:	4618      	mov	r0, r3
 8008920:	f7f9 fb0b 	bl	8001f3a <HAL_HCD_HC_GetXferCount>
 8008924:	4603      	mov	r3, r0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800892e:	b590      	push	{r4, r7, lr}
 8008930:	b089      	sub	sp, #36	; 0x24
 8008932:	af04      	add	r7, sp, #16
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	4608      	mov	r0, r1
 8008938:	4611      	mov	r1, r2
 800893a:	461a      	mov	r2, r3
 800893c:	4603      	mov	r3, r0
 800893e:	70fb      	strb	r3, [r7, #3]
 8008940:	460b      	mov	r3, r1
 8008942:	70bb      	strb	r3, [r7, #2]
 8008944:	4613      	mov	r3, r2
 8008946:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008956:	787c      	ldrb	r4, [r7, #1]
 8008958:	78ba      	ldrb	r2, [r7, #2]
 800895a:	78f9      	ldrb	r1, [r7, #3]
 800895c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800895e:	9302      	str	r3, [sp, #8]
 8008960:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008964:	9301      	str	r3, [sp, #4]
 8008966:	f897 3020 	ldrb.w	r3, [r7, #32]
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	4623      	mov	r3, r4
 800896e:	f7f8 ff6f 	bl	8001850 <HAL_HCD_HC_Init>
 8008972:	4603      	mov	r3, r0
 8008974:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008976:	7bfb      	ldrb	r3, [r7, #15]
 8008978:	4618      	mov	r0, r3
 800897a:	f000 f8bd 	bl	8008af8 <USBH_Get_USB_Status>
 800897e:	4603      	mov	r3, r0
 8008980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008982:	7bbb      	ldrb	r3, [r7, #14]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3714      	adds	r7, #20
 8008988:	46bd      	mov	sp, r7
 800898a:	bd90      	pop	{r4, r7, pc}

0800898c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	460b      	mov	r3, r1
 8008996:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089a6:	78fa      	ldrb	r2, [r7, #3]
 80089a8:	4611      	mov	r1, r2
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7f8 ffdf 	bl	800196e <HAL_HCD_HC_Halt>
 80089b0:	4603      	mov	r3, r0
 80089b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 f89e 	bl	8008af8 <USBH_Get_USB_Status>
 80089bc:	4603      	mov	r3, r0
 80089be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80089ca:	b590      	push	{r4, r7, lr}
 80089cc:	b089      	sub	sp, #36	; 0x24
 80089ce:	af04      	add	r7, sp, #16
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	4608      	mov	r0, r1
 80089d4:	4611      	mov	r1, r2
 80089d6:	461a      	mov	r2, r3
 80089d8:	4603      	mov	r3, r0
 80089da:	70fb      	strb	r3, [r7, #3]
 80089dc:	460b      	mov	r3, r1
 80089de:	70bb      	strb	r3, [r7, #2]
 80089e0:	4613      	mov	r3, r2
 80089e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80089f2:	787c      	ldrb	r4, [r7, #1]
 80089f4:	78ba      	ldrb	r2, [r7, #2]
 80089f6:	78f9      	ldrb	r1, [r7, #3]
 80089f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80089fc:	9303      	str	r3, [sp, #12]
 80089fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a00:	9302      	str	r3, [sp, #8]
 8008a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a04:	9301      	str	r3, [sp, #4]
 8008a06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	4623      	mov	r3, r4
 8008a0e:	f7f8 ffd1 	bl	80019b4 <HAL_HCD_HC_SubmitRequest>
 8008a12:	4603      	mov	r3, r0
 8008a14:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f000 f86d 	bl	8008af8 <USBH_Get_USB_Status>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a22:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd90      	pop	{r4, r7, pc}

08008a2c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	460b      	mov	r3, r1
 8008a36:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a3e:	78fa      	ldrb	r2, [r7, #3]
 8008a40:	4611      	mov	r1, r2
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7f9 fa65 	bl	8001f12 <HAL_HCD_HC_GetURBState>
 8008a48:	4603      	mov	r3, r0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b082      	sub	sp, #8
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d103      	bne.n	8008a70 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008a68:	78fb      	ldrb	r3, [r7, #3]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 f870 	bl	8008b50 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008a70:	20c8      	movs	r0, #200	; 0xc8
 8008a72:	f7f8 fb6f 	bl	8001154 <HAL_Delay>
  return USBH_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	70fb      	strb	r3, [r7, #3]
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a96:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008a98:	78fb      	ldrb	r3, [r7, #3]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	212c      	movs	r1, #44	; 0x2c
 8008a9e:	fb01 f303 	mul.w	r3, r1, r3
 8008aa2:	4413      	add	r3, r2
 8008aa4:	333b      	adds	r3, #59	; 0x3b
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d009      	beq.n	8008ac0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008aac:	78fb      	ldrb	r3, [r7, #3]
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	212c      	movs	r1, #44	; 0x2c
 8008ab2:	fb01 f303 	mul.w	r3, r1, r3
 8008ab6:	4413      	add	r3, r2
 8008ab8:	3354      	adds	r3, #84	; 0x54
 8008aba:	78ba      	ldrb	r2, [r7, #2]
 8008abc:	701a      	strb	r2, [r3, #0]
 8008abe:	e008      	b.n	8008ad2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008ac0:	78fb      	ldrb	r3, [r7, #3]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	212c      	movs	r1, #44	; 0x2c
 8008ac6:	fb01 f303 	mul.w	r3, r1, r3
 8008aca:	4413      	add	r3, r2
 8008acc:	3355      	adds	r3, #85	; 0x55
 8008ace:	78ba      	ldrb	r2, [r7, #2]
 8008ad0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f7f8 fb33 	bl	8001154 <HAL_Delay>
}
 8008aee:	bf00      	nop
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
	...

08008af8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	4603      	mov	r3, r0
 8008b00:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b06:	79fb      	ldrb	r3, [r7, #7]
 8008b08:	2b03      	cmp	r3, #3
 8008b0a:	d817      	bhi.n	8008b3c <USBH_Get_USB_Status+0x44>
 8008b0c:	a201      	add	r2, pc, #4	; (adr r2, 8008b14 <USBH_Get_USB_Status+0x1c>)
 8008b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b12:	bf00      	nop
 8008b14:	08008b25 	.word	0x08008b25
 8008b18:	08008b2b 	.word	0x08008b2b
 8008b1c:	08008b31 	.word	0x08008b31
 8008b20:	08008b37 	.word	0x08008b37
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	73fb      	strb	r3, [r7, #15]
    break;
 8008b28:	e00b      	b.n	8008b42 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b2e:	e008      	b.n	8008b42 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008b30:	2301      	movs	r3, #1
 8008b32:	73fb      	strb	r3, [r7, #15]
    break;
 8008b34:	e005      	b.n	8008b42 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008b36:	2302      	movs	r3, #2
 8008b38:	73fb      	strb	r3, [r7, #15]
    break;
 8008b3a:	e002      	b.n	8008b42 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b40:	bf00      	nop
  }
  return usb_status;
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	4603      	mov	r3, r0
 8008b58:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008b5a:	79fb      	ldrb	r3, [r7, #7]
 8008b5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008b5e:	79fb      	ldrb	r3, [r7, #7]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d102      	bne.n	8008b6a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73fb      	strb	r3, [r7, #15]
 8008b68:	e001      	b.n	8008b6e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
 8008b70:	461a      	mov	r2, r3
 8008b72:	2101      	movs	r1, #1
 8008b74:	4803      	ldr	r0, [pc, #12]	; (8008b84 <MX_DriverVbusFS+0x34>)
 8008b76:	f7f8 fdd7 	bl	8001728 <HAL_GPIO_WritePin>
}
 8008b7a:	bf00      	nop
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	40020800 	.word	0x40020800

08008b88 <__errno>:
 8008b88:	4b01      	ldr	r3, [pc, #4]	; (8008b90 <__errno+0x8>)
 8008b8a:	6818      	ldr	r0, [r3, #0]
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	20000030 	.word	0x20000030

08008b94 <__libc_init_array>:
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	4d0d      	ldr	r5, [pc, #52]	; (8008bcc <__libc_init_array+0x38>)
 8008b98:	4c0d      	ldr	r4, [pc, #52]	; (8008bd0 <__libc_init_array+0x3c>)
 8008b9a:	1b64      	subs	r4, r4, r5
 8008b9c:	10a4      	asrs	r4, r4, #2
 8008b9e:	2600      	movs	r6, #0
 8008ba0:	42a6      	cmp	r6, r4
 8008ba2:	d109      	bne.n	8008bb8 <__libc_init_array+0x24>
 8008ba4:	4d0b      	ldr	r5, [pc, #44]	; (8008bd4 <__libc_init_array+0x40>)
 8008ba6:	4c0c      	ldr	r4, [pc, #48]	; (8008bd8 <__libc_init_array+0x44>)
 8008ba8:	f000 f92e 	bl	8008e08 <_init>
 8008bac:	1b64      	subs	r4, r4, r5
 8008bae:	10a4      	asrs	r4, r4, #2
 8008bb0:	2600      	movs	r6, #0
 8008bb2:	42a6      	cmp	r6, r4
 8008bb4:	d105      	bne.n	8008bc2 <__libc_init_array+0x2e>
 8008bb6:	bd70      	pop	{r4, r5, r6, pc}
 8008bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bbc:	4798      	blx	r3
 8008bbe:	3601      	adds	r6, #1
 8008bc0:	e7ee      	b.n	8008ba0 <__libc_init_array+0xc>
 8008bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bc6:	4798      	blx	r3
 8008bc8:	3601      	adds	r6, #1
 8008bca:	e7f2      	b.n	8008bb2 <__libc_init_array+0x1e>
 8008bcc:	08008e44 	.word	0x08008e44
 8008bd0:	08008e44 	.word	0x08008e44
 8008bd4:	08008e44 	.word	0x08008e44
 8008bd8:	08008e48 	.word	0x08008e48

08008bdc <malloc>:
 8008bdc:	4b02      	ldr	r3, [pc, #8]	; (8008be8 <malloc+0xc>)
 8008bde:	4601      	mov	r1, r0
 8008be0:	6818      	ldr	r0, [r3, #0]
 8008be2:	f000 b87f 	b.w	8008ce4 <_malloc_r>
 8008be6:	bf00      	nop
 8008be8:	20000030 	.word	0x20000030

08008bec <free>:
 8008bec:	4b02      	ldr	r3, [pc, #8]	; (8008bf8 <free+0xc>)
 8008bee:	4601      	mov	r1, r0
 8008bf0:	6818      	ldr	r0, [r3, #0]
 8008bf2:	f000 b80b 	b.w	8008c0c <_free_r>
 8008bf6:	bf00      	nop
 8008bf8:	20000030 	.word	0x20000030

08008bfc <memset>:
 8008bfc:	4402      	add	r2, r0
 8008bfe:	4603      	mov	r3, r0
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d100      	bne.n	8008c06 <memset+0xa>
 8008c04:	4770      	bx	lr
 8008c06:	f803 1b01 	strb.w	r1, [r3], #1
 8008c0a:	e7f9      	b.n	8008c00 <memset+0x4>

08008c0c <_free_r>:
 8008c0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c0e:	2900      	cmp	r1, #0
 8008c10:	d044      	beq.n	8008c9c <_free_r+0x90>
 8008c12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c16:	9001      	str	r0, [sp, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f1a1 0404 	sub.w	r4, r1, #4
 8008c1e:	bfb8      	it	lt
 8008c20:	18e4      	addlt	r4, r4, r3
 8008c22:	f000 f8e3 	bl	8008dec <__malloc_lock>
 8008c26:	4a1e      	ldr	r2, [pc, #120]	; (8008ca0 <_free_r+0x94>)
 8008c28:	9801      	ldr	r0, [sp, #4]
 8008c2a:	6813      	ldr	r3, [r2, #0]
 8008c2c:	b933      	cbnz	r3, 8008c3c <_free_r+0x30>
 8008c2e:	6063      	str	r3, [r4, #4]
 8008c30:	6014      	str	r4, [r2, #0]
 8008c32:	b003      	add	sp, #12
 8008c34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c38:	f000 b8de 	b.w	8008df8 <__malloc_unlock>
 8008c3c:	42a3      	cmp	r3, r4
 8008c3e:	d908      	bls.n	8008c52 <_free_r+0x46>
 8008c40:	6825      	ldr	r5, [r4, #0]
 8008c42:	1961      	adds	r1, r4, r5
 8008c44:	428b      	cmp	r3, r1
 8008c46:	bf01      	itttt	eq
 8008c48:	6819      	ldreq	r1, [r3, #0]
 8008c4a:	685b      	ldreq	r3, [r3, #4]
 8008c4c:	1949      	addeq	r1, r1, r5
 8008c4e:	6021      	streq	r1, [r4, #0]
 8008c50:	e7ed      	b.n	8008c2e <_free_r+0x22>
 8008c52:	461a      	mov	r2, r3
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	b10b      	cbz	r3, 8008c5c <_free_r+0x50>
 8008c58:	42a3      	cmp	r3, r4
 8008c5a:	d9fa      	bls.n	8008c52 <_free_r+0x46>
 8008c5c:	6811      	ldr	r1, [r2, #0]
 8008c5e:	1855      	adds	r5, r2, r1
 8008c60:	42a5      	cmp	r5, r4
 8008c62:	d10b      	bne.n	8008c7c <_free_r+0x70>
 8008c64:	6824      	ldr	r4, [r4, #0]
 8008c66:	4421      	add	r1, r4
 8008c68:	1854      	adds	r4, r2, r1
 8008c6a:	42a3      	cmp	r3, r4
 8008c6c:	6011      	str	r1, [r2, #0]
 8008c6e:	d1e0      	bne.n	8008c32 <_free_r+0x26>
 8008c70:	681c      	ldr	r4, [r3, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	6053      	str	r3, [r2, #4]
 8008c76:	4421      	add	r1, r4
 8008c78:	6011      	str	r1, [r2, #0]
 8008c7a:	e7da      	b.n	8008c32 <_free_r+0x26>
 8008c7c:	d902      	bls.n	8008c84 <_free_r+0x78>
 8008c7e:	230c      	movs	r3, #12
 8008c80:	6003      	str	r3, [r0, #0]
 8008c82:	e7d6      	b.n	8008c32 <_free_r+0x26>
 8008c84:	6825      	ldr	r5, [r4, #0]
 8008c86:	1961      	adds	r1, r4, r5
 8008c88:	428b      	cmp	r3, r1
 8008c8a:	bf04      	itt	eq
 8008c8c:	6819      	ldreq	r1, [r3, #0]
 8008c8e:	685b      	ldreq	r3, [r3, #4]
 8008c90:	6063      	str	r3, [r4, #4]
 8008c92:	bf04      	itt	eq
 8008c94:	1949      	addeq	r1, r1, r5
 8008c96:	6021      	streq	r1, [r4, #0]
 8008c98:	6054      	str	r4, [r2, #4]
 8008c9a:	e7ca      	b.n	8008c32 <_free_r+0x26>
 8008c9c:	b003      	add	sp, #12
 8008c9e:	bd30      	pop	{r4, r5, pc}
 8008ca0:	20000924 	.word	0x20000924

08008ca4 <sbrk_aligned>:
 8008ca4:	b570      	push	{r4, r5, r6, lr}
 8008ca6:	4e0e      	ldr	r6, [pc, #56]	; (8008ce0 <sbrk_aligned+0x3c>)
 8008ca8:	460c      	mov	r4, r1
 8008caa:	6831      	ldr	r1, [r6, #0]
 8008cac:	4605      	mov	r5, r0
 8008cae:	b911      	cbnz	r1, 8008cb6 <sbrk_aligned+0x12>
 8008cb0:	f000 f88c 	bl	8008dcc <_sbrk_r>
 8008cb4:	6030      	str	r0, [r6, #0]
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	4628      	mov	r0, r5
 8008cba:	f000 f887 	bl	8008dcc <_sbrk_r>
 8008cbe:	1c43      	adds	r3, r0, #1
 8008cc0:	d00a      	beq.n	8008cd8 <sbrk_aligned+0x34>
 8008cc2:	1cc4      	adds	r4, r0, #3
 8008cc4:	f024 0403 	bic.w	r4, r4, #3
 8008cc8:	42a0      	cmp	r0, r4
 8008cca:	d007      	beq.n	8008cdc <sbrk_aligned+0x38>
 8008ccc:	1a21      	subs	r1, r4, r0
 8008cce:	4628      	mov	r0, r5
 8008cd0:	f000 f87c 	bl	8008dcc <_sbrk_r>
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	d101      	bne.n	8008cdc <sbrk_aligned+0x38>
 8008cd8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008cdc:	4620      	mov	r0, r4
 8008cde:	bd70      	pop	{r4, r5, r6, pc}
 8008ce0:	20000928 	.word	0x20000928

08008ce4 <_malloc_r>:
 8008ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce8:	1ccd      	adds	r5, r1, #3
 8008cea:	f025 0503 	bic.w	r5, r5, #3
 8008cee:	3508      	adds	r5, #8
 8008cf0:	2d0c      	cmp	r5, #12
 8008cf2:	bf38      	it	cc
 8008cf4:	250c      	movcc	r5, #12
 8008cf6:	2d00      	cmp	r5, #0
 8008cf8:	4607      	mov	r7, r0
 8008cfa:	db01      	blt.n	8008d00 <_malloc_r+0x1c>
 8008cfc:	42a9      	cmp	r1, r5
 8008cfe:	d905      	bls.n	8008d0c <_malloc_r+0x28>
 8008d00:	230c      	movs	r3, #12
 8008d02:	603b      	str	r3, [r7, #0]
 8008d04:	2600      	movs	r6, #0
 8008d06:	4630      	mov	r0, r6
 8008d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d0c:	4e2e      	ldr	r6, [pc, #184]	; (8008dc8 <_malloc_r+0xe4>)
 8008d0e:	f000 f86d 	bl	8008dec <__malloc_lock>
 8008d12:	6833      	ldr	r3, [r6, #0]
 8008d14:	461c      	mov	r4, r3
 8008d16:	bb34      	cbnz	r4, 8008d66 <_malloc_r+0x82>
 8008d18:	4629      	mov	r1, r5
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	f7ff ffc2 	bl	8008ca4 <sbrk_aligned>
 8008d20:	1c43      	adds	r3, r0, #1
 8008d22:	4604      	mov	r4, r0
 8008d24:	d14d      	bne.n	8008dc2 <_malloc_r+0xde>
 8008d26:	6834      	ldr	r4, [r6, #0]
 8008d28:	4626      	mov	r6, r4
 8008d2a:	2e00      	cmp	r6, #0
 8008d2c:	d140      	bne.n	8008db0 <_malloc_r+0xcc>
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	4631      	mov	r1, r6
 8008d32:	4638      	mov	r0, r7
 8008d34:	eb04 0803 	add.w	r8, r4, r3
 8008d38:	f000 f848 	bl	8008dcc <_sbrk_r>
 8008d3c:	4580      	cmp	r8, r0
 8008d3e:	d13a      	bne.n	8008db6 <_malloc_r+0xd2>
 8008d40:	6821      	ldr	r1, [r4, #0]
 8008d42:	3503      	adds	r5, #3
 8008d44:	1a6d      	subs	r5, r5, r1
 8008d46:	f025 0503 	bic.w	r5, r5, #3
 8008d4a:	3508      	adds	r5, #8
 8008d4c:	2d0c      	cmp	r5, #12
 8008d4e:	bf38      	it	cc
 8008d50:	250c      	movcc	r5, #12
 8008d52:	4629      	mov	r1, r5
 8008d54:	4638      	mov	r0, r7
 8008d56:	f7ff ffa5 	bl	8008ca4 <sbrk_aligned>
 8008d5a:	3001      	adds	r0, #1
 8008d5c:	d02b      	beq.n	8008db6 <_malloc_r+0xd2>
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	442b      	add	r3, r5
 8008d62:	6023      	str	r3, [r4, #0]
 8008d64:	e00e      	b.n	8008d84 <_malloc_r+0xa0>
 8008d66:	6822      	ldr	r2, [r4, #0]
 8008d68:	1b52      	subs	r2, r2, r5
 8008d6a:	d41e      	bmi.n	8008daa <_malloc_r+0xc6>
 8008d6c:	2a0b      	cmp	r2, #11
 8008d6e:	d916      	bls.n	8008d9e <_malloc_r+0xba>
 8008d70:	1961      	adds	r1, r4, r5
 8008d72:	42a3      	cmp	r3, r4
 8008d74:	6025      	str	r5, [r4, #0]
 8008d76:	bf18      	it	ne
 8008d78:	6059      	strne	r1, [r3, #4]
 8008d7a:	6863      	ldr	r3, [r4, #4]
 8008d7c:	bf08      	it	eq
 8008d7e:	6031      	streq	r1, [r6, #0]
 8008d80:	5162      	str	r2, [r4, r5]
 8008d82:	604b      	str	r3, [r1, #4]
 8008d84:	4638      	mov	r0, r7
 8008d86:	f104 060b 	add.w	r6, r4, #11
 8008d8a:	f000 f835 	bl	8008df8 <__malloc_unlock>
 8008d8e:	f026 0607 	bic.w	r6, r6, #7
 8008d92:	1d23      	adds	r3, r4, #4
 8008d94:	1af2      	subs	r2, r6, r3
 8008d96:	d0b6      	beq.n	8008d06 <_malloc_r+0x22>
 8008d98:	1b9b      	subs	r3, r3, r6
 8008d9a:	50a3      	str	r3, [r4, r2]
 8008d9c:	e7b3      	b.n	8008d06 <_malloc_r+0x22>
 8008d9e:	6862      	ldr	r2, [r4, #4]
 8008da0:	42a3      	cmp	r3, r4
 8008da2:	bf0c      	ite	eq
 8008da4:	6032      	streq	r2, [r6, #0]
 8008da6:	605a      	strne	r2, [r3, #4]
 8008da8:	e7ec      	b.n	8008d84 <_malloc_r+0xa0>
 8008daa:	4623      	mov	r3, r4
 8008dac:	6864      	ldr	r4, [r4, #4]
 8008dae:	e7b2      	b.n	8008d16 <_malloc_r+0x32>
 8008db0:	4634      	mov	r4, r6
 8008db2:	6876      	ldr	r6, [r6, #4]
 8008db4:	e7b9      	b.n	8008d2a <_malloc_r+0x46>
 8008db6:	230c      	movs	r3, #12
 8008db8:	603b      	str	r3, [r7, #0]
 8008dba:	4638      	mov	r0, r7
 8008dbc:	f000 f81c 	bl	8008df8 <__malloc_unlock>
 8008dc0:	e7a1      	b.n	8008d06 <_malloc_r+0x22>
 8008dc2:	6025      	str	r5, [r4, #0]
 8008dc4:	e7de      	b.n	8008d84 <_malloc_r+0xa0>
 8008dc6:	bf00      	nop
 8008dc8:	20000924 	.word	0x20000924

08008dcc <_sbrk_r>:
 8008dcc:	b538      	push	{r3, r4, r5, lr}
 8008dce:	4d06      	ldr	r5, [pc, #24]	; (8008de8 <_sbrk_r+0x1c>)
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	4608      	mov	r0, r1
 8008dd6:	602b      	str	r3, [r5, #0]
 8008dd8:	f7f8 f8d8 	bl	8000f8c <_sbrk>
 8008ddc:	1c43      	adds	r3, r0, #1
 8008dde:	d102      	bne.n	8008de6 <_sbrk_r+0x1a>
 8008de0:	682b      	ldr	r3, [r5, #0]
 8008de2:	b103      	cbz	r3, 8008de6 <_sbrk_r+0x1a>
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	bd38      	pop	{r3, r4, r5, pc}
 8008de8:	2000092c 	.word	0x2000092c

08008dec <__malloc_lock>:
 8008dec:	4801      	ldr	r0, [pc, #4]	; (8008df4 <__malloc_lock+0x8>)
 8008dee:	f000 b809 	b.w	8008e04 <__retarget_lock_acquire_recursive>
 8008df2:	bf00      	nop
 8008df4:	20000930 	.word	0x20000930

08008df8 <__malloc_unlock>:
 8008df8:	4801      	ldr	r0, [pc, #4]	; (8008e00 <__malloc_unlock+0x8>)
 8008dfa:	f000 b804 	b.w	8008e06 <__retarget_lock_release_recursive>
 8008dfe:	bf00      	nop
 8008e00:	20000930 	.word	0x20000930

08008e04 <__retarget_lock_acquire_recursive>:
 8008e04:	4770      	bx	lr

08008e06 <__retarget_lock_release_recursive>:
 8008e06:	4770      	bx	lr

08008e08 <_init>:
 8008e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0a:	bf00      	nop
 8008e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e0e:	bc08      	pop	{r3}
 8008e10:	469e      	mov	lr, r3
 8008e12:	4770      	bx	lr

08008e14 <_fini>:
 8008e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e16:	bf00      	nop
 8008e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1a:	bc08      	pop	{r3}
 8008e1c:	469e      	mov	lr, r3
 8008e1e:	4770      	bx	lr
